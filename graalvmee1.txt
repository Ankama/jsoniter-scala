[info] Loading settings from idea.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed May 11, 2018 10:08:54 PM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:987:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1073:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:445:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:453:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:964:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 5 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.25.4-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.25.4-SNAPSHOT.jar ...
[info] Compiling 58 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:56: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("a");
[info]       private[this] val f1: Array[String] = Array("b");
[info]       private[this] val f2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = d0(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = d0(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           e0(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           e0(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("properties", "geometry");
[info]       private[this] val f1: Array[String] = Array("coordinates");
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d6(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d6(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d5(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d9(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d10(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d10(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d10(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d14(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d14(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d7(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d8(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d11(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d12(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d13(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d15(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(d0(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e6(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e6(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e9(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e10(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e9(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e10(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e10(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e14(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e14(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e6(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e7(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e8(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e11(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e12(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e13(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e15(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e0(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "bd", "os");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Char] = new Array[Char](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("destination_addresses", "origin_addresses", "rows", "status");
[info]       private[this] val f1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val f2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "in_reply_to_status_id", "in_reply_to_status_id_str", "in_reply_to_user_id", "in_reply_to_user_id_str", "in_reply_to_screen_name", "user", "geo", "coordinates", "place", "contributors", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val f1: Array[String] = Array("screen_name", "name", "id", "id_str", "indices");
[info]       private[this] val f2: Array[String] = Array("url", "expanded_url", "display_url", "indices");
[info]       private[this] val f3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val f4: Array[String] = Array("url", "description");
[info]       private[this] val f5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "in_reply_to_status_id", "in_reply_to_status_id_str", "in_reply_to_user_id", "in_reply_to_user_id_str", "in_reply_to_screen_name", "user", "geo", "coordinates", "place", "contributors", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(f5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:35:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:42:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:64:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:65:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:66:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:70:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:71:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:72:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:73:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:74:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:75:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:76:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 14 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.4-SNAPSHOT.jar ...
[info] Compiling 49 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 422 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 629 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.4-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.4-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java -prof gc -rf json -rff graalvmee1.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 01:12:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35951.203 ops/s
[info] # Warmup Iteration   2: 247870.898 ops/s
[info] # Warmup Iteration   3: 996489.826 ops/s
[info] # Warmup Iteration   4: 1067545.474 ops/s
[info] # Warmup Iteration   5: 1062488.270 ops/s
[info] Iteration   1: 1078499.655 ops/s
[info]                  ·gc.alloc.rate:                   2417.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              3527.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2918.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.197 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 1055888.271 ops/s
[info]                  ·gc.alloc.rate:                   2380.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              3548.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2659.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3963.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.652 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1085413.942 ops/s
[info]                  ·gc.alloc.rate:                   2443.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              3542.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2657.424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3853.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1094024.188 ops/s
[info]                  ·gc.alloc.rate:                   2462.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              3542.412 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2873.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1090707.145 ops/s
[info]                  ·gc.alloc.rate:               2495.727 MB/sec
[info]                  ·gc.alloc.rate.norm:          3601.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2671.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3854.606 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   1080906.640 ±(99.9%) 58402.606 ops/s [Average]
[info]   (min, avg, max) = (1055888.271, 1080906.640, 1094024.188), stdev = 15166.971
[info]   CI (99.9%): [1022504.034, 1139309.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2439.833 ±(99.9%) 168.987 MB/sec [Average]
[info]   (min, avg, max) = (2380.302, 2439.833, 2495.727), stdev = 43.886
[info]   CI (99.9%): [2270.846, 2608.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3552.426 ±(99.9%) 109.455 B/op [Average]
[info]   (min, avg, max) = (3527.346, 3552.426, 3601.356), stdev = 28.425
[info]   CI (99.9%): [3442.971, 3661.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2397.086 ±(99.9%) 1400.312 MB/sec [Average]
[info]   (min, avg, max) = (1997.415, 2397.086, 2671.228), stdev = 363.657
[info]   CI (99.9%): [996.775, 3797.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3492.745 ±(99.9%) 2105.295 B/op [Average]
[info]   (min, avg, max) = (2873.490, 3492.745, 3963.826), stdev = 546.738
[info]   CI (99.9%): [1387.450, 5598.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.945 ±(99.9%) 7.142 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.945, 4.247), stdev = 1.855
[info]   CI (99.9%): [≈ 0, 8.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.382 ±(99.9%) 10.419 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.382, 6.197), stdev = 2.706
[info]   CI (99.9%): [≈ 0, 11.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 12.000), stdev = 3.033
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.23% complete, ETA 01:54:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46329.950 ops/s
[info] # Warmup Iteration   2: 1393130.396 ops/s
[info] # Warmup Iteration   3: 1802807.114 ops/s
[info] # Warmup Iteration   4: 1894307.797 ops/s
[info] # Warmup Iteration   5: 1906477.042 ops/s
[info] Iteration   1: 1899656.474 ops/s
[info]                  ·gc.alloc.rate:                   1239.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              1026.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1101.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1976716.595 ops/s
[info]                  ·gc.alloc.rate:                   1293.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              1029.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1060.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1932405.211 ops/s
[info]                  ·gc.alloc.rate:                   1253.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              1021.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1086.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1891228.376 ops/s
[info]                  ·gc.alloc.rate:               1208.035 MB/sec
[info]                  ·gc.alloc.rate.norm:          1005.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 555.982 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1995646.169 ops/s
[info]                  ·gc.alloc.rate:                   1286.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              1014.700 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1054.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.755 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1939130.565 ±(99.9%) 177555.788 ops/s [Average]
[info]   (min, avg, max) = (1891228.376, 1939130.565, 1995646.169), stdev = 46110.674
[info]   CI (99.9%): [1761574.777, 2116686.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1256.305 ±(99.9%) 135.179 MB/sec [Average]
[info]   (min, avg, max) = (1208.035, 1256.305, 1293.407), stdev = 35.106
[info]   CI (99.9%): [1121.125, 1391.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1019.514 ±(99.9%) 38.271 B/op [Average]
[info]   (min, avg, max) = (1005.023, 1019.514, 1029.759), stdev = 9.939
[info]   CI (99.9%): [981.243, 1057.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1200.153 ±(99.9%) 1144.944 MB/sec [Average]
[info]   (min, avg, max) = (668.289, 1200.153, 1337.513), stdev = 297.338
[info]   CI (99.9%): [55.210, 2345.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   971.742 ±(99.9%) 897.945 B/op [Average]
[info]   (min, avg, max) = (555.982, 971.742, 1101.062), stdev = 233.193
[info]   CI (99.9%): [73.797, 1869.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.204 ±(99.9%) 1.623 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.204, 0.958), stdev = 0.421
[info]   CI (99.9%): [≈ 0, 1.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.161 ±(99.9%) 1.279 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.161, 0.755), stdev = 0.332
[info]   CI (99.9%): [≈ 0, 1.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.46% complete, ETA 01:54:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1261769.898 ops/s
[info] # Warmup Iteration   2: 4593350.113 ops/s
[info] # Warmup Iteration   3: 5446797.698 ops/s
[info] # Warmup Iteration   4: 5514326.722 ops/s
[info] # Warmup Iteration   5: 5569217.032 ops/s
[info] Iteration   1: 5599155.956 ops/s
[info]                  ·gc.alloc.rate:      370.002 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5543317.721 ops/s
[info]                  ·gc.alloc.rate:               382.166 MB/sec
[info]                  ·gc.alloc.rate.norm:          108.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 145.253 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 5465854.023 ops/s
[info]                  ·gc.alloc.rate:      364.738 MB/sec
[info]                  ·gc.alloc.rate.norm: 105.017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 5458064.138 ops/s
[info]                  ·gc.alloc.rate:               383.341 MB/sec
[info]                  ·gc.alloc.rate.norm:          110.536 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 192.957 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 5554752.562 ops/s
[info]                  ·gc.alloc.rate:               385.808 MB/sec
[info]                  ·gc.alloc.rate.norm:          109.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 189.601 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   5524228.880 ±(99.9%) 233397.491 ops/s [Average]
[info]   (min, avg, max) = (5458064.138, 5524228.880, 5599155.956), stdev = 60612.587
[info]   CI (99.9%): [5290831.389, 5757626.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   377.211 ±(99.9%) 35.687 MB/sec [Average]
[info]   (min, avg, max) = (364.738, 377.211, 385.808), stdev = 9.268
[info]   CI (99.9%): [341.524, 412.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   107.475 ±(99.9%) 10.881 B/op [Average]
[info]   (min, avg, max) = (104.000, 107.475, 110.536), stdev = 2.826
[info]   CI (99.9%): [96.594, 118.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   369.984 ±(99.9%) 1323.920 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.984, 669.177), stdev = 343.818
[info]   CI (99.9%): [≈ 0, 1693.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   105.562 ±(99.9%) 378.081 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 105.562, 192.957), stdev = 98.186
[info]   CI (99.9%): [≈ 0, 483.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.69% complete, ETA 01:54:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 491.730 ops/s
[info] # Warmup Iteration   2: 151317.365 ops/s
[info] # Warmup Iteration   3: 477159.574 ops/s
[info] # Warmup Iteration   4: 486658.737 ops/s
[info] # Warmup Iteration   5: 488893.654 ops/s
[info] Iteration   1: 489903.805 ops/s
[info]                  ·gc.alloc.rate:                   2477.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              7957.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6439.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.759 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.862 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 476269.508 ops/s
[info]                  ·gc.alloc.rate:                   2444.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              8077.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8825.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.963 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 484664.692 ops/s
[info]                  ·gc.alloc.rate:                   2473.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              8031.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8678.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 493746.283 ops/s
[info]                  ·gc.alloc.rate:               2518.701 MB/sec
[info]                  ·gc.alloc.rate.norm:          8028.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6402.250 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 489406.880 ops/s
[info]                  ·gc.alloc.rate:               2537.580 MB/sec
[info]                  ·gc.alloc.rate.norm:          8160.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2685.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8635.324 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   486798.233 ±(99.9%) 25840.307 ops/s [Average]
[info]   (min, avg, max) = (476269.508, 486798.233, 493746.283), stdev = 6710.646
[info]   CI (99.9%): [460957.926, 512638.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2490.247 ±(99.9%) 144.232 MB/sec [Average]
[info]   (min, avg, max) = (2444.334, 2490.247, 2537.580), stdev = 37.456
[info]   CI (99.9%): [2346.016, 2634.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8051.071 ±(99.9%) 287.413 B/op [Average]
[info]   (min, avg, max) = (7957.445, 8051.071, 8160.302), stdev = 74.640
[info]   CI (99.9%): [7763.658, 8338.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2408.342 ±(99.9%) 1412.319 MB/sec [Average]
[info]   (min, avg, max) = (2004.676, 2408.342, 2685.296), stdev = 366.775
[info]   CI (99.9%): [996.024, 3820.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7796.184 ±(99.9%) 4842.473 B/op [Average]
[info]   (min, avg, max) = (6402.250, 7796.184, 8825.234), stdev = 1257.575
[info]   CI (99.9%): [2953.711, 12638.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.614 ±(99.9%) 4.641 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.614, 2.759), stdev = 1.205
[info]   CI (99.9%): [≈ 0, 5.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.979 ±(99.9%) 14.901 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.979, 8.862), stdev = 3.870
[info]   CI (99.9%): [≈ 0, 16.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 1.483
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0.92% complete, ETA 01:53:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25652.070 ops/s
[info] # Warmup Iteration   2: 510986.054 ops/s
[info] # Warmup Iteration   3: 929609.280 ops/s
[info] # Warmup Iteration   4: 1027020.496 ops/s
[info] # Warmup Iteration   5: 1027895.190 ops/s
[info] Iteration   1: 1018271.020 ops/s
[info]                  ·gc.alloc.rate:                   2738.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              4231.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2624.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4055.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1034314.710 ops/s
[info]                  ·gc.alloc.rate:                   2803.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              4263.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2643.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4020.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1037660.814 ops/s
[info]                  ·gc.alloc.rate:                   2798.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              4243.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2659.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4033.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1052431.977 ops/s
[info]                  ·gc.alloc.rate:                   2877.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              4303.141 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4000.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1047236.847 ops/s
[info]                  ·gc.alloc.rate:                   2864.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2687.364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4038.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   1037983.074 ±(99.9%) 50812.779 ops/s [Average]
[info]   (min, avg, max) = (1018271.020, 1037983.074, 1052431.977), stdev = 13195.917
[info]   CI (99.9%): [987170.295, 1088795.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   2816.457 ±(99.9%) 215.754 MB/sec [Average]
[info]   (min, avg, max) = (2738.908, 2816.457, 2877.497), stdev = 56.031
[info]   CI (99.9%): [2600.703, 3032.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4269.460 ±(99.9%) 129.139 B/op [Average]
[info]   (min, avg, max) = (4231.686, 4269.460, 4304.816), stdev = 33.537
[info]   CI (99.9%): [4140.321, 4398.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2657.883 ±(99.9%) 95.973 MB/sec [Average]
[info]   (min, avg, max) = (2624.669, 2657.883, 2687.364), stdev = 24.924
[info]   CI (99.9%): [2561.909, 2753.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4029.518 ±(99.9%) 79.465 B/op [Average]
[info]   (min, avg, max) = (4000.198, 4029.518, 4055.185), stdev = 20.637
[info]   CI (99.9%): [3950.053, 4108.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.001 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.021, 0.021), stdev = 0.001
[info]   CI (99.9%): [0.021, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.032 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (0.031, 0.032, 0.032), stdev = 0.001
[info]   CI (99.9%): [0.030, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.15% complete, ETA 01:53:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 175600.790 ops/s
[info] # Warmup Iteration   2: 2288984.769 ops/s
[info] # Warmup Iteration   3: 3021671.322 ops/s
[info] # Warmup Iteration   4: 3046904.327 ops/s
[info] # Warmup Iteration   5: 3137879.562 ops/s
[info] Iteration   1: 3167546.073 ops/s
[info]                  ·gc.alloc.rate:                   1265.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              628.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     660.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3121761.053 ops/s
[info]                  ·gc.alloc.rate:               1231.004 MB/sec
[info]                  ·gc.alloc.rate.norm:          620.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 335.674 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 3055469.704 ops/s
[info]                  ·gc.alloc.rate:               1225.575 MB/sec
[info]                  ·gc.alloc.rate.norm:          631.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 686.974 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 3096374.991 ops/s
[info]                  ·gc.alloc.rate:                   1238.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              629.427 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     679.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3141726.142 ops/s
[info]                  ·gc.alloc.rate:                   1242.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              622.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     671.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.302 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   3116575.593 ±(99.9%) 165616.000 ops/s [Average]
[info]   (min, avg, max) = (3055469.704, 3116575.593, 3167546.073), stdev = 43009.949
[info]   CI (99.9%): [2950959.593, 3282191.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1240.485 ±(99.9%) 59.140 MB/sec [Average]
[info]   (min, avg, max) = (1225.575, 1240.485, 1265.476), stdev = 15.359
[info]   CI (99.9%): [1181.344, 1299.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   626.433 ±(99.9%) 18.323 B/op [Average]
[info]   (min, avg, max) = (620.520, 626.433, 631.247), stdev = 4.758
[info]   CI (99.9%): [608.111, 644.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1201.066 ±(99.9%) 1152.046 MB/sec [Average]
[info]   (min, avg, max) = (665.919, 1201.066, 1339.621), stdev = 299.183
[info]   CI (99.9%): [49.020, 2353.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   606.731 ±(99.9%) 584.720 B/op [Average]
[info]   (min, avg, max) = (335.674, 606.731, 686.974), stdev = 151.850
[info]   CI (99.9%): [22.011, 1191.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.137 ±(99.9%) 1.009 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.137, 0.604), stdev = 0.262
[info]   CI (99.9%): [≈ 0, 1.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.069 ±(99.9%) 0.505 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.069, 0.302), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.39% complete, ETA 01:53:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1863400.598 ops/s
[info] # Warmup Iteration   2: 16557701.583 ops/s
[info] # Warmup Iteration   3: 18847361.187 ops/s
[info] # Warmup Iteration   4: 19538162.103 ops/s
[info] # Warmup Iteration   5: 19706456.525 ops/s
[info] Iteration   1: 19410393.131 ops/s
[info]                  ·gc.alloc.rate:                   1024.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              83.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 19497171.674 ops/s
[info]                  ·gc.alloc.rate:                   1014.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              81.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 19401849.684 ops/s
[info]                  ·gc.alloc.rate:                   1019.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              82.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 19261871.405 ops/s
[info]                  ·gc.alloc.rate:               995.844 MB/sec
[info]                  ·gc.alloc.rate.norm:          81.355 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54.702 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 19487495.416 ops/s
[info]                  ·gc.alloc.rate:                   1039.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              83.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   19411756.262 ±(99.9%) 363257.189 ops/s [Average]
[info]   (min, avg, max) = (19261871.405, 19411756.262, 19497171.674), stdev = 94336.738
[info]   CI (99.9%): [19048499.073, 19775013.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1018.775 ±(99.9%) 61.586 MB/sec [Average]
[info]   (min, avg, max) = (995.844, 1018.775, 1039.920), stdev = 15.994
[info]   CI (99.9%): [957.188, 1080.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   82.593 ±(99.9%) 3.937 B/op [Average]
[info]   (min, avg, max) = (81.355, 82.593, 83.976), stdev = 1.022
[info]   CI (99.9%): [78.656, 86.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1070.673 ±(99.9%) 1411.246 MB/sec [Average]
[info]   (min, avg, max) = (668.807, 1070.673, 1339.784), stdev = 366.496
[info]   CI (99.9%): [≈ 0, 2481.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   86.769 ±(99.9%) 113.982 B/op [Average]
[info]   (min, avg, max) = (53.988, 86.769, 108.561), stdev = 29.601
[info]   CI (99.9%): [≈ 0, 200.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.016 ±(99.9%) 0.055 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 2.049
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.62% complete, ETA 01:52:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2731748.643 ops/s
[info] # Warmup Iteration   2: 19233671.058 ops/s
[info] # Warmup Iteration   3: 19339258.230 ops/s
[info] # Warmup Iteration   4: 19324849.895 ops/s
[info] # Warmup Iteration   5: 19298773.729 ops/s
[info] Iteration   1: 19330095.734 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 19314666.989 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 19322276.036 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 19339177.178 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 19210259.074 ops/s
[info]                  ·gc.alloc.rate:      3.052 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.250 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   19303295.002 ±(99.9%) 203311.588 ops/s [Average]
[info]   (min, avg, max) = (19210259.074, 19303295.002, 19339177.178), stdev = 52799.374
[info]   CI (99.9%): [19099983.414, 19506606.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.611 ±(99.9%) 5.255 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.611, 3.052), stdev = 1.365
[info]   CI (99.9%): [≈ 0, 5.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.050 ±(99.9%) 0.431 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.050, 0.250), stdev = 0.112
[info]   CI (99.9%): [≈ 0, 0.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.85% complete, ETA 01:52:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7402.953 ops/s
[info] # Warmup Iteration   2: 319548.042 ops/s
[info] # Warmup Iteration   3: 1013333.693 ops/s
[info] # Warmup Iteration   4: 1089076.941 ops/s
[info] # Warmup Iteration   5: 1094002.849 ops/s
[info] Iteration   1: 1081713.571 ops/s
[info]                  ·gc.alloc.rate:                   2586.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              3762.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3883.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.218 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.226 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 1077680.138 ops/s
[info]                  ·gc.alloc.rate:                   2582.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              3770.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3900.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.182 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1088868.650 ops/s
[info]                  ·gc.alloc.rate:                   2608.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              3770.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3867.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1100384.663 ops/s
[info]                  ·gc.alloc.rate:                   2662.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              3808.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3838.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1101387.895 ops/s
[info]                  ·gc.alloc.rate:               2639.394 MB/sec
[info]                  ·gc.alloc.rate.norm:          3770.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2884.393 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   1090006.983 ±(99.9%) 41259.834 ops/s [Average]
[info]   (min, avg, max) = (1077680.138, 1090006.983, 1101387.895), stdev = 10715.048
[info]   CI (99.9%): [1048747.150, 1131266.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2616.004 ±(99.9%) 133.304 MB/sec [Average]
[info]   (min, avg, max) = (2582.130, 2616.004, 2662.857), stdev = 34.619
[info]   CI (99.9%): [2482.700, 2749.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   3776.722 ±(99.9%) 70.248 B/op [Average]
[info]   (min, avg, max) = (3762.364, 3776.722, 3808.687), stdev = 18.243
[info]   CI (99.9%): [3706.474, 3846.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2543.925 ±(99.9%) 1130.316 MB/sec [Average]
[info]   (min, avg, max) = (2018.919, 2543.925, 2683.897), stdev = 293.539
[info]   CI (99.9%): [1413.609, 3674.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3674.966 ±(99.9%) 1703.998 B/op [Average]
[info]   (min, avg, max) = (2884.393, 3674.966, 3900.240), stdev = 442.523
[info]   CI (99.9%): [1970.968, 5378.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.477 ±(99.9%) 3.752 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.477, 2.218), stdev = 0.974
[info]   CI (99.9%): [≈ 0, 4.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.694 ±(99.9%) 5.457 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.694, 3.226), stdev = 1.417
[info]   CI (99.9%): [≈ 0, 6.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 9.000), stdev = 1.517
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.08% complete, ETA 01:52:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 124003.247 ops/s
[info] # Warmup Iteration   2: 1519159.971 ops/s
[info] # Warmup Iteration   3: 3210391.695 ops/s
[info] # Warmup Iteration   4: 3777678.010 ops/s
[info] # Warmup Iteration   5: 3793610.256 ops/s
[info] Iteration   1: 3869923.212 ops/s
[info]                  ·gc.alloc.rate:                   3516.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              1430.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3337.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1357.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3781750.492 ops/s
[info]                  ·gc.alloc.rate:                   3438.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              1430.860 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3353.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1395.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3791144.043 ops/s
[info]                  ·gc.alloc.rate:               3487.238 MB/sec
[info]                  ·gc.alloc.rate.norm:          1447.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3367.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1397.847 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 3820187.238 ops/s
[info]                  ·gc.alloc.rate:                   3513.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              1447.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3378.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1391.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 3843680.730 ops/s
[info]                  ·gc.alloc.rate:                   3535.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              1447.740 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3387.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1387.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   3821337.143 ±(99.9%) 140692.044 ops/s [Average]
[info]   (min, avg, max) = (3781750.492, 3821337.143, 3869923.212), stdev = 36537.277
[info]   CI (99.9%): [3680645.098, 3962029.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   3498.339 ±(99.9%) 144.773 MB/sec [Average]
[info]   (min, avg, max) = (3438.589, 3498.339, 3535.661), stdev = 37.597
[info]   CI (99.9%): [3353.566, 3643.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1440.821 ±(99.9%) 36.081 B/op [Average]
[info]   (min, avg, max) = (1430.260, 1440.821, 1447.740), stdev = 9.370
[info]   CI (99.9%): [1404.740, 1476.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3364.871 ±(99.9%) 76.808 MB/sec [Average]
[info]   (min, avg, max) = (3337.667, 3364.871, 3387.929), stdev = 19.947
[info]   CI (99.9%): [3288.062, 3441.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1385.951 ±(99.9%) 63.334 B/op [Average]
[info]   (min, avg, max) = (1357.405, 1385.951, 1397.847), stdev = 16.448
[info]   CI (99.9%): [1322.617, 1449.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.298 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.187), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.076), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.31% complete, ETA 01:52:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.670 ops/s
[info] # Warmup Iteration   2: 9284748.744 ops/s
[info] # Warmup Iteration   3: 10993157.021 ops/s
[info] # Warmup Iteration   4: 11578636.668 ops/s
[info] # Warmup Iteration   5: 11594810.103 ops/s
[info] Iteration   1: 11407121.495 ops/s
[info]                  ·gc.alloc.rate:               1434.195 MB/sec
[info]                  ·gc.alloc.rate.norm:          197.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 183.630 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 11570244.427 ops/s
[info]                  ·gc.alloc.rate:                   1445.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              196.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     181.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 11002384.983 ops/s
[info]                  ·gc.alloc.rate:                   1371.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              196.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     190.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 11629812.592 ops/s
[info]                  ·gc.alloc.rate:                   1473.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              199.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     270.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.846 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.656 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 11608815.121 ops/s
[info]                  ·gc.alloc.rate:               1456.130 MB/sec
[info]                  ·gc.alloc.rate.norm:          197.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 180.268 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   11443675.724 ±(99.9%) 1007830.780 ops/s [Average]
[info]   (min, avg, max) = (11002384.983, 11443675.724, 11629812.592), stdev = 261730.453
[info]   CI (99.9%): [10435844.944, 12451506.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1436.264 ±(99.9%) 149.010 MB/sec [Average]
[info]   (min, avg, max) = (1371.991, 1436.264, 1473.286), stdev = 38.698
[info]   CI (99.9%): [1287.253, 1585.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   197.512 ±(99.9%) 4.695 B/op [Average]
[info]   (min, avg, max) = (196.269, 197.512, 199.373), stdev = 1.219
[info]   CI (99.9%): [192.817, 202.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1465.436 ±(99.9%) 1151.896 MB/sec [Average]
[info]   (min, avg, max) = (1329.657, 1465.436, 2000.554), stdev = 299.144
[info]   CI (99.9%): [313.540, 2617.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   201.324 ±(99.9%) 150.228 B/op [Average]
[info]   (min, avg, max) = (180.268, 201.324, 270.726), stdev = 39.014
[info]   CI (99.9%): [51.096, 351.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.978 ±(99.9%) 8.326 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.978, 4.846), stdev = 2.162
[info]   CI (99.9%): [≈ 0, 9.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.132 ±(99.9%) 1.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.132, 0.656), stdev = 0.293
[info]   CI (99.9%): [≈ 0, 1.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 7.000), stdev = 1.789
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.54% complete, ETA 01:52:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22138.742 ops/s
[info] # Warmup Iteration   2: 2590182.823 ops/s
[info] # Warmup Iteration   3: 3617885.824 ops/s
[info] # Warmup Iteration   4: 3863988.212 ops/s
[info] # Warmup Iteration   5: 3878271.225 ops/s
[info] Iteration   1: 3842169.110 ops/s
[info]                  ·gc.alloc.rate:                   2324.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     822.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.503 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 3897444.859 ops/s
[info]                  ·gc.alloc.rate:                   2348.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              948.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     811.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3837848.297 ops/s
[info]                  ·gc.alloc.rate:               2329.911 MB/sec
[info]                  ·gc.alloc.rate.norm:          955.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2685.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1101.182 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 3889314.094 ops/s
[info]                  ·gc.alloc.rate:               2360.246 MB/sec
[info]                  ·gc.alloc.rate.norm:          955.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 816.636 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 3878882.198 ops/s
[info]                  ·gc.alloc.rate:               2394.600 MB/sec
[info]                  ·gc.alloc.rate.norm:          971.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2696.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1094.097 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   3869131.712 ±(99.9%) 105624.025 ops/s [Average]
[info]   (min, avg, max) = (3837848.297, 3869131.712, 3897444.859), stdev = 27430.224
[info]   CI (99.9%): [3763507.686, 3974755.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2351.691 ±(99.9%) 107.576 MB/sec [Average]
[info]   (min, avg, max) = (2324.752, 2351.691, 2394.600), stdev = 27.937
[info]   CI (99.9%): [2244.115, 2459.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   956.538 ±(99.9%) 34.323 B/op [Average]
[info]   (min, avg, max) = (948.254, 956.538, 971.624), stdev = 8.913
[info]   CI (99.9%): [922.216, 990.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2283.720 ±(99.9%) 1431.265 MB/sec [Average]
[info]   (min, avg, max) = (2008.094, 2283.720, 2696.437), stdev = 371.695
[info]   CI (99.9%): [852.455, 3714.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   929.236 ±(99.9%) 592.224 B/op [Average]
[info]   (min, avg, max) = (811.717, 929.236, 1101.182), stdev = 153.799
[info]   CI (99.9%): [337.012, 1521.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.275 ±(99.9%) 2.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.275, 1.228), stdev = 0.537
[info]   CI (99.9%): [≈ 0, 2.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.112 ±(99.9%) 0.847 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.112, 0.503), stdev = 0.220
[info]   CI (99.9%): [≈ 0, 0.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.77% complete, ETA 01:51:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3967539.219 ops/s
[info] # Warmup Iteration   2: 12607238.730 ops/s
[info] # Warmup Iteration   3: 15087553.569 ops/s
[info] # Warmup Iteration   4: 15028620.896 ops/s
[info] # Warmup Iteration   5: 15117547.388 ops/s
[info] Iteration   1: 15055757.730 ops/s
[info]                  ·gc.alloc.rate:                   1980.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              206.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.269 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 15323831.300 ops/s
[info]                  ·gc.alloc.rate:                   2003.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              205.776 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     206.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.126 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 15235757.707 ops/s
[info]                  ·gc.alloc.rate:                   1997.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              206.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     207.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 15466417.875 ops/s
[info]                  ·gc.alloc.rate:               2018.408 MB/sec
[info]                  ·gc.alloc.rate.norm:          205.397 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 204.172 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 15390323.443 ops/s
[info]                  ·gc.alloc.rate:               2035.772 MB/sec
[info]                  ·gc.alloc.rate.norm:          208.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 205.485 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   15294417.611 ±(99.9%) 608982.435 ops/s [Average]
[info]   (min, avg, max) = (15055757.730, 15294417.611, 15466417.875), stdev = 158150.804
[info]   CI (99.9%): [14685435.177, 15903400.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2007.150 ±(99.9%) 81.088 MB/sec [Average]
[info]   (min, avg, max) = (1980.178, 2007.150, 2035.772), stdev = 21.058
[info]   CI (99.9%): [1926.062, 2088.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   206.541 ±(99.9%) 4.234 B/op [Average]
[info]   (min, avg, max) = (205.397, 206.541, 208.184), stdev = 1.100
[info]   CI (99.9%): [202.306, 210.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2009.439 ±(99.9%) 11.554 MB/sec [Average]
[info]   (min, avg, max) = (2006.371, 2009.439, 2013.104), stdev = 3.001
[info]   CI (99.9%): [1997.885, 2020.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   206.794 ±(99.9%) 9.057 B/op [Average]
[info]   (min, avg, max) = (204.172, 206.794, 210.439), stdev = 2.352
[info]   CI (99.9%): [197.737, 215.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.769 ±(99.9%) 4.382 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.769, 2.574), stdev = 1.138
[info]   CI (99.9%): [≈ 0, 5.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.080 ±(99.9%) 0.457 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.080, 0.269), stdev = 0.119
[info]   CI (99.9%): [≈ 0, 0.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 11.000), stdev = 3.050
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.00% complete, ETA 01:51:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1052.635 ops/s
[info] # Warmup Iteration   2: 478890.541 ops/s
[info] # Warmup Iteration   3: 1737349.980 ops/s
[info] # Warmup Iteration   4: 1794432.952 ops/s
[info] # Warmup Iteration   5: 1754035.199 ops/s
[info] Iteration   1: 1801120.803 ops/s
[info]                  ·gc.alloc.rate:                   3112.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              2719.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3343.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2920.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.364 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 1802640.725 ops/s
[info]                  ·gc.alloc.rate:                   3096.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              2703.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3347.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2921.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1814377.565 ops/s
[info]                  ·gc.alloc.rate:               3114.074 MB/sec
[info]                  ·gc.alloc.rate.norm:          2701.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2685.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2329.324 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 1812286.631 ops/s
[info]                  ·gc.alloc.rate:                   3151.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              2736.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3367.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2924.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1801855.085 ops/s
[info]                  ·gc.alloc.rate:                   3121.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              2726.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702.356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2360.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   1806456.162 ±(99.9%) 24424.780 ops/s [Average]
[info]   (min, avg, max) = (1801120.803, 1806456.162, 1814377.565), stdev = 6343.038
[info]   CI (99.9%): [1782031.382, 1830880.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3119.058 ±(99.9%) 77.109 MB/sec [Average]
[info]   (min, avg, max) = (3096.721, 3119.058, 3151.132), stdev = 20.025
[info]   CI (99.9%): [3041.950, 3196.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   2717.288 ±(99.9%) 57.824 B/op [Average]
[info]   (min, avg, max) = (2701.269, 2717.288, 2736.599), stdev = 15.017
[info]   CI (99.9%): [2659.464, 2775.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3089.157 ±(99.9%) 1390.327 MB/sec [Average]
[info]   (min, avg, max) = (2685.288, 3089.157, 3367.958), stdev = 361.063
[info]   CI (99.9%): [1698.830, 4479.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2691.460 ±(99.9%) 1219.301 B/op [Average]
[info]   (min, avg, max) = (2329.324, 2691.460, 2924.901), stdev = 316.649
[info]   CI (99.9%): [1472.159, 3910.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.684 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.100, 0.416), stdev = 0.178
[info]   CI (99.9%): [≈ 0, 0.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.087 ±(99.9%) 0.597 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.364), stdev = 0.155
[info]   CI (99.9%): [≈ 0, 0.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 9.000), stdev = 1.140
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.23% complete, ETA 01:51:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75316.705 ops/s
[info] # Warmup Iteration   2: 2275291.095 ops/s
[info] # Warmup Iteration   3: 3464570.357 ops/s
[info] # Warmup Iteration   4: 5136470.567 ops/s
[info] # Warmup Iteration   5: 5193721.205 ops/s
[info] Iteration   1: 5236530.766 ops/s
[info]                  ·gc.alloc.rate:                   2623.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              788.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2632.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     791.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.184 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 5237819.722 ops/s
[info]                  ·gc.alloc.rate:                   2619.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              786.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2622.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     787.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.646 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.194 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 5339285.747 ops/s
[info]                  ·gc.alloc.rate:                   2670.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              787.215 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2621.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     772.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 5327993.114 ops/s
[info]                  ·gc.alloc.rate:                   2691.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              795.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2632.926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     777.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 5346845.850 ops/s
[info]                  ·gc.alloc.rate:               2714.761 MB/sec
[info]                  ·gc.alloc.rate.norm:          799.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2648.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 779.598 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   5297695.040 ±(99.9%) 214305.584 ops/s [Average]
[info]   (min, avg, max) = (5236530.766, 5297695.040, 5346845.850), stdev = 55654.480
[info]   CI (99.9%): [5083389.456, 5512000.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2663.953 ±(99.9%) 161.436 MB/sec [Average]
[info]   (min, avg, max) = (2619.076, 2663.953, 2714.761), stdev = 41.925
[info]   CI (99.9%): [2502.517, 2825.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   791.310 ±(99.9%) 21.227 B/op [Average]
[info]   (min, avg, max) = (786.731, 791.310, 799.109), stdev = 5.513
[info]   CI (99.9%): [770.083, 812.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2631.611 ±(99.9%) 42.126 MB/sec [Average]
[info]   (min, avg, max) = (2621.552, 2631.611, 2648.479), stdev = 10.940
[info]   CI (99.9%): [2589.486, 2673.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   781.789 ±(99.9%) 28.871 B/op [Average]
[info]   (min, avg, max) = (772.772, 781.789, 791.171), stdev = 7.498
[info]   CI (99.9%): [752.918, 810.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.926 ±(99.9%) 6.575 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.926, 3.941), stdev = 1.708
[info]   CI (99.9%): [≈ 0, 7.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.278 ±(99.9%) 1.976 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.278, 1.184), stdev = 0.513
[info]   CI (99.9%): [≈ 0, 2.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 12.000), stdev = 2.828
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.46% complete, ETA 01:51:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.719 ops/s
[info] # Warmup Iteration   2: 18812928.017 ops/s
[info] # Warmup Iteration   3: 22967232.424 ops/s
[info] # Warmup Iteration   4: 23867150.885 ops/s
[info] # Warmup Iteration   5: 24038335.716 ops/s
[info] Iteration   1: 24153820.229 ops/s
[info]                  ·gc.alloc.rate:               750.080 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43.319 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 23120910.586 ops/s
[info]                  ·gc.alloc.rate:                   744.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              50.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 23975962.864 ops/s
[info]                  ·gc.alloc.rate:               747.216 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43.685 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 23870453.864 ops/s
[info]                  ·gc.alloc.rate:               745.595 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43.876 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 23879055.739 ops/s
[info]                  ·gc.alloc.rate:               750.601 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.471 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43.883 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   23800040.656 ±(99.9%) 1526390.183 ops/s [Average]
[info]   (min, avg, max) = (23120910.586, 23800040.656, 24153820.229), stdev = 396398.683
[info]   CI (99.9%): [22273650.474, 25326430.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   747.644 ±(99.9%) 10.107 MB/sec [Average]
[info]   (min, avg, max) = (744.729, 747.644, 750.601), stdev = 2.625
[info]   CI (99.9%): [737.537, 757.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   49.440 ±(99.9%) 2.780 B/op [Average]
[info]   (min, avg, max) = (48.871, 49.440, 50.670), stdev = 0.722
[info]   CI (99.9%): [46.660, 52.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   665.417 ±(99.9%) 1.558 MB/sec [Average]
[info]   (min, avg, max) = (664.874, 665.417, 665.814), stdev = 0.405
[info]   CI (99.9%): [663.859, 666.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   44.004 ±(99.9%) 2.835 B/op [Average]
[info]   (min, avg, max) = (43.319, 44.004, 45.256), stdev = 0.736
[info]   CI (99.9%): [41.168, 46.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.70% complete, ETA 01:50:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51313.206 ops/s
[info] # Warmup Iteration   2: 7752981.948 ops/s
[info] # Warmup Iteration   3: 10837540.405 ops/s
[info] # Warmup Iteration   4: 9915427.277 ops/s
[info] # Warmup Iteration   5: 10531614.218 ops/s
[info] Iteration   1: 10577300.543 ops/s
[info]                  ·gc.alloc.rate:      322.731 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 10478413.976 ops/s
[info]                  ·gc.alloc.rate:               354.435 MB/sec
[info]                  ·gc.alloc.rate.norm:          53.225 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 99.255 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 10584908.775 ops/s
[info]                  ·gc.alloc.rate:      322.875 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 10532959.961 ops/s
[info]                  ·gc.alloc.rate:               338.080 MB/sec
[info]                  ·gc.alloc.rate.norm:          50.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 98.740 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 10510872.273 ops/s
[info]                  ·gc.alloc.rate:      320.780 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   10536891.106 ±(99.9%) 172750.071 ops/s [Average]
[info]   (min, avg, max) = (10478413.976, 10536891.106, 10584908.775), stdev = 44862.645
[info]   CI (99.9%): [10364141.035, 10709641.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   331.780 ±(99.9%) 55.639 MB/sec [Average]
[info]   (min, avg, max) = (320.780, 331.780, 354.435), stdev = 14.449
[info]   CI (99.9%): [276.142, 387.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   49.550 ±(99.9%) 8.943 B/op [Average]
[info]   (min, avg, max) = (48.000, 49.550, 53.225), stdev = 2.322
[info]   CI (99.9%): [40.608, 58.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   264.376 ±(99.9%) 1393.978 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 264.376, 660.952), stdev = 362.012
[info]   CI (99.9%): [≈ 0, 1658.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   39.599 ±(99.9%) 208.795 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39.599, 99.255), stdev = 54.223
[info]   CI (99.9%): [≈ 0, 248.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 3.93% complete, ETA 01:50:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5668810.181 ops/s
[info] # Warmup Iteration   2: 30054390.582 ops/s
[info] # Warmup Iteration   3: 34808591.787 ops/s
[info] # Warmup Iteration   4: 35079448.561 ops/s
[info] # Warmup Iteration   5: 34634700.676 ops/s
[info] Iteration   1: 34007282.514 ops/s
[info]                  ·gc.alloc.rate:               1059.216 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30.923 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 31710146.366 ops/s
[info]                  ·gc.alloc.rate:               1001.723 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66.389 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 33366028.906 ops/s
[info]                  ·gc.alloc.rate:                   1035.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 30889868.959 ops/s
[info]                  ·gc.alloc.rate:                   994.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              50.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 33879132.708 ops/s
[info]                  ·gc.alloc.rate:               1077.125 MB/sec
[info]                  ·gc.alloc.rate.norm:          50.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31.101 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   32770491.891 ±(99.9%) 5368326.276 ops/s [Average]
[info]   (min, avg, max) = (30889868.959, 32770491.891, 34007282.514), stdev = 1394137.286
[info]   CI (99.9%): [27402165.615, 38138818.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1033.690 ±(99.9%) 137.580 MB/sec [Average]
[info]   (min, avg, max) = (994.433, 1033.690, 1077.125), stdev = 35.729
[info]   CI (99.9%): [896.110, 1171.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   49.657 ±(99.9%) 2.850 B/op [Average]
[info]   (min, avg, max) = (48.864, 49.657, 50.667), stdev = 0.740
[info]   CI (99.9%): [46.807, 52.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   936.701 ±(99.9%) 1411.530 MB/sec [Average]
[info]   (min, avg, max) = (668.163, 936.701, 1338.618), stdev = 366.570
[info]   CI (99.9%): [≈ 0, 2348.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   45.636 ±(99.9%) 76.183 B/op [Average]
[info]   (min, avg, max) = (30.923, 45.636, 68.203), stdev = 19.785
[info]   CI (99.9%): [≈ 0, 121.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.16% complete, ETA 01:50:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4623858.128 ops/s
[info] # Warmup Iteration   2: 33422204.453 ops/s
[info] # Warmup Iteration   3: 37642146.832 ops/s
[info] # Warmup Iteration   4: 37663889.142 ops/s
[info] # Warmup Iteration   5: 37918883.629 ops/s
[info] Iteration   1: 38466147.169 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 38654771.822 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 38550333.365 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 38542039.760 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 37907008.795 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   38424060.182 ±(99.9%) 1142618.828 ops/s [Average]
[info]   (min, avg, max) = (37907008.795, 38424060.182, 38654771.822), stdev = 296734.481
[info]   CI (99.9%): [37281441.354, 39566679.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.39% complete, ETA 01:50:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48746.898 ops/s
[info] # Warmup Iteration   2: 1257754.595 ops/s
[info] # Warmup Iteration   3: 2226227.687 ops/s
[info] # Warmup Iteration   4: 2334527.029 ops/s
[info] # Warmup Iteration   5: 2320789.015 ops/s
[info] Iteration   1: 2396630.785 ops/s
[info]                  ·gc.alloc.rate:                   3504.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              2301.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4016.761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2637.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 2402788.612 ops/s
[info]                  ·gc.alloc.rate:                   3526.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              2309.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3357.398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2198.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 2403221.419 ops/s
[info]                  ·gc.alloc.rate:                   3554.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              2327.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3368.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2206.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2405050.583 ops/s
[info]                  ·gc.alloc.rate:                   3557.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3379.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2211.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 2402270.561 ops/s
[info]                  ·gc.alloc.rate:                   3554.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3389.086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2219.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   2401992.392 ±(99.9%) 12225.599 ops/s [Average]
[info]   (min, avg, max) = (2396630.785, 2401992.392, 2405050.583), stdev = 3174.949
[info]   CI (99.9%): [2389766.793, 2414217.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   3539.550 ±(99.9%) 89.496 MB/sec [Average]
[info]   (min, avg, max) = (3504.731, 3539.550, 3557.842), stdev = 23.242
[info]   CI (99.9%): [3450.054, 3629.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2318.984 ±(99.9%) 48.602 B/op [Average]
[info]   (min, avg, max) = (2301.489, 2318.984, 2328.268), stdev = 12.622
[info]   CI (99.9%): [2270.382, 2367.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   3502.254 ±(99.9%) 1108.448 MB/sec [Average]
[info]   (min, avg, max) = (3357.398, 3502.254, 4016.761), stdev = 287.860
[info]   CI (99.9%): [2393.806, 4610.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2294.757 ±(99.9%) 738.852 B/op [Average]
[info]   (min, avg, max) = (2198.864, 2294.757, 2637.729), stdev = 191.878
[info]   CI (99.9%): [1555.905, 3033.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.316 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.208), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.041 ±(99.9%) 0.207 B/op [Average]
[info]   (min, avg, max) = (0.014, 0.041, 0.137), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 10.000), stdev = 1.225
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4.62% complete, ETA 01:49:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 113816.575 ops/s
[info] # Warmup Iteration   2: 372654.462 ops/s
[info] # Warmup Iteration   3: 432346.118 ops/s
[info] # Warmup Iteration   4: 439884.264 ops/s
[info] # Warmup Iteration   5: 442731.485 ops/s
[info] Iteration   1: 445335.233 ops/s
[info]                  ·gc.alloc.rate:                   2629.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              9291.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2656.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9388.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 428181.337 ops/s
[info]                  ·gc.alloc.rate:                   2531.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              9306.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7308.916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 414186.645 ops/s
[info]                  ·gc.alloc.rate:                   2616.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              9941.261 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2655.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10089.910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.154 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 376476.340 ops/s
[info]                  ·gc.alloc.rate:               2229.767 MB/sec
[info]                  ·gc.alloc.rate.norm:          9321.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8356.136 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 378839.824 ops/s
[info]                  ·gc.alloc.rate:                   2249.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              9340.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11108.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.432 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   408603.876 ±(99.9%) 116823.014 ops/s [Average]
[info]   (min, avg, max) = (376476.340, 408603.876, 445335.233), stdev = 30338.566
[info]   CI (99.9%): [291780.862, 525426.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2451.256 ±(99.9%) 758.713 MB/sec [Average]
[info]   (min, avg, max) = (2229.767, 2451.256, 2629.143), stdev = 197.035
[info]   CI (99.9%): [1692.543, 3209.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9440.320 ±(99.9%) 1080.564 B/op [Average]
[info]   (min, avg, max) = (9291.763, 9440.320, 9941.261), stdev = 280.619
[info]   CI (99.9%): [8359.756, 10520.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2394.840 ±(99.9%) 1410.584 MB/sec [Average]
[info]   (min, avg, max) = (1988.470, 2394.840, 2674.920), stdev = 366.324
[info]   CI (99.9%): [984.256, 3805.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9250.481 ±(99.9%) 5694.120 B/op [Average]
[info]   (min, avg, max) = (7308.916, 9250.481, 11108.840), stdev = 1478.745
[info]   CI (99.9%): [3556.361, 14944.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.637 ±(99.9%) 3.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.637, 1.703), stdev = 0.825
[info]   CI (99.9%): [≈ 0, 3.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.336 ±(99.9%) 11.502 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.336, 6.019), stdev = 2.987
[info]   CI (99.9%): [≈ 0, 13.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.85% complete, ETA 01:49:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92704.010 ops/s
[info] # Warmup Iteration   2: 564499.009 ops/s
[info] # Warmup Iteration   3: 858926.008 ops/s
[info] # Warmup Iteration   4: 861333.020 ops/s
[info] # Warmup Iteration   5: 862145.171 ops/s
[info] Iteration   1: 861687.029 ops/s
[info]                  ·gc.alloc.rate:               716.279 MB/sec
[info]                  ·gc.alloc.rate.norm:          1308.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1203.923 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 862184.579 ops/s
[info]                  ·gc.alloc.rate:               724.846 MB/sec
[info]                  ·gc.alloc.rate.norm:          1322.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1203.261 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 857631.191 ops/s
[info]                  ·gc.alloc.rate:                   713.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              1308.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1212.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 860231.934 ops/s
[info]                  ·gc.alloc.rate:               718.407 MB/sec
[info]                  ·gc.alloc.rate.norm:          1314.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1208.385 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 855640.733 ops/s
[info]                  ·gc.alloc.rate:               719.545 MB/sec
[info]                  ·gc.alloc.rate.norm:          1322.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1217.937 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   859475.093 ±(99.9%) 10704.008 ops/s [Average]
[info]   (min, avg, max) = (855640.733, 859475.093, 862184.579), stdev = 2779.797
[info]   CI (99.9%): [848771.086, 870179.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   718.479 ±(99.9%) 16.469 MB/sec [Average]
[info]   (min, avg, max) = (713.318, 718.479, 724.846), stdev = 4.277
[info]   CI (99.9%): [702.010, 734.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1315.418 ±(99.9%) 27.761 B/op [Average]
[info]   (min, avg, max) = (1308.281, 1315.418, 1322.964), stdev = 7.209
[info]   CI (99.9%): [1287.657, 1343.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   660.411 ±(99.9%) 5.039 MB/sec [Average]
[info]   (min, avg, max) = (659.143, 660.411, 662.422), stdev = 1.309
[info]   CI (99.9%): [655.372, 665.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1209.117 ±(99.9%) 23.452 B/op [Average]
[info]   (min, avg, max) = (1203.261, 1209.117, 1217.937), stdev = 6.090
[info]   CI (99.9%): [1185.665, 1232.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.038), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.08% complete, ETA 01:49:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 802250.446 ops/s
[info] # Warmup Iteration   2: 1592127.794 ops/s
[info] # Warmup Iteration   3: 1707351.601 ops/s
[info] # Warmup Iteration   4: 1707865.796 ops/s
[info] # Warmup Iteration   5: 1700955.964 ops/s
[info] Iteration   1: 1707098.081 ops/s
[info]                  ·gc.alloc.rate:                   1178.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              1086.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1234.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1724558.403 ops/s
[info]                  ·gc.alloc.rate:               1166.800 MB/sec
[info]                  ·gc.alloc.rate.norm:          1064.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 611.305 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1712656.412 ops/s
[info]                  ·gc.alloc.rate:                   1179.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              1084.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1231.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1695439.884 ops/s
[info]                  ·gc.alloc.rate:                   1183.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              1098.323 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1244.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.196 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.966 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1722989.737 ops/s
[info]                  ·gc.alloc.rate:                   1184.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              1082.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1223.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.742 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1712548.503 ±(99.9%) 46194.917 ops/s [Average]
[info]   (min, avg, max) = (1695439.884, 1712548.503, 1724558.403), stdev = 11996.673
[info]   CI (99.9%): [1666353.587, 1758743.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1178.567 ±(99.9%) 27.392 MB/sec [Average]
[info]   (min, avg, max) = (1166.800, 1178.567, 1184.864), stdev = 7.114
[info]   CI (99.9%): [1151.175, 1205.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1083.143 ±(99.9%) 46.261 B/op [Average]
[info]   (min, avg, max) = (1064.816, 1083.143, 1098.323), stdev = 12.014
[info]   CI (99.9%): [1036.882, 1129.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1205.776 ±(99.9%) 1153.617 MB/sec [Average]
[info]   (min, avg, max) = (669.853, 1205.776, 1340.830), stdev = 299.591
[info]   CI (99.9%): [52.158, 2359.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1108.995 ±(99.9%) 1071.712 B/op [Average]
[info]   (min, avg, max) = (611.305, 1108.995, 1244.472), stdev = 278.320
[info]   CI (99.9%): [37.282, 2180.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.814 ±(99.9%) 5.296 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.814, 3.196), stdev = 1.375
[info]   CI (99.9%): [≈ 0, 6.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.753 ±(99.9%) 4.916 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.753, 2.966), stdev = 1.277
[info]   CI (99.9%): [≈ 0, 5.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5.31% complete, ETA 01:49:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8858.323 ops/s
[info] # Warmup Iteration   2: 157570.863 ops/s
[info] # Warmup Iteration   3: 190201.565 ops/s
[info] # Warmup Iteration   4: 224443.043 ops/s
[info] # Warmup Iteration   5: 222789.590 ops/s
[info] Iteration   1: 219121.492 ops/s
[info]                  ·gc.alloc.rate:                   3994.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              28695.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3989.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28653.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.299 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 217901.734 ops/s
[info]                  ·gc.alloc.rate:                   4041.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              29187.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4014.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28998.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.301 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 224207.815 ops/s
[info]                  ·gc.alloc.rate:                   4154.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              29158.490 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4038.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28347.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.292 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 223827.789 ops/s
[info]                  ·gc.alloc.rate:                   4149.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              29172.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4057.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28523.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.293 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 226072.848 ops/s
[info]                  ·gc.alloc.rate:                   4188.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              29158.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4068.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28323.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.290 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   222226.335 ±(99.9%) 13563.453 ops/s [Average]
[info]   (min, avg, max) = (217901.734, 222226.335, 226072.848), stdev = 3522.386
[info]   CI (99.9%): [208662.882, 235789.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4105.675 ±(99.9%) 319.686 MB/sec [Average]
[info]   (min, avg, max) = (3994.904, 4105.675, 4188.380), stdev = 83.021
[info]   CI (99.9%): [3785.989, 4425.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   29074.477 ±(99.9%) 817.932 B/op [Average]
[info]   (min, avg, max) = (28695.108, 29074.477, 29187.864), stdev = 212.414
[info]   CI (99.9%): [28256.545, 29892.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4033.702 ±(99.9%) 123.932 MB/sec [Average]
[info]   (min, avg, max) = (3989.082, 4033.702, 4068.355), stdev = 32.185
[info]   CI (99.9%): [3909.770, 4157.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   28569.208 ±(99.9%) 1059.930 B/op [Average]
[info]   (min, avg, max) = (28323.285, 28569.208, 28998.406), stdev = 275.260
[info]   CI (99.9%): [27509.279, 29629.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.001 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.042, 0.042), stdev = 0.001
[info]   CI (99.9%): [0.042, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.295 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (0.290, 0.295, 0.301), stdev = 0.005
[info]   CI (99.9%): [0.277, 0.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5.54% complete, ETA 01:48:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97936.275 ops/s
[info] # Warmup Iteration   2: 393761.904 ops/s
[info] # Warmup Iteration   3: 427101.710 ops/s
[info] # Warmup Iteration   4: 444700.181 ops/s
[info] # Warmup Iteration   5: 446292.238 ops/s
[info] Iteration   1: 435758.433 ops/s
[info]                  ·gc.alloc.rate:                   1439.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.461 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4826.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 443635.930 ops/s
[info]                  ·gc.alloc.rate:                   1446.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              5129.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4740.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 443338.695 ops/s
[info]                  ·gc.alloc.rate:                   1443.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              5124.665 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4748.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.753 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 442290.061 ops/s
[info]                  ·gc.alloc.rate:                   1438.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              5116.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4745.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.296 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 438140.788 ops/s
[info]                  ·gc.alloc.rate:                   1436.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              5158.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4785.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.224 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   440632.781 ±(99.9%) 13485.055 ops/s [Average]
[info]   (min, avg, max) = (435758.433, 440632.781, 443635.930), stdev = 3502.026
[info]   CI (99.9%): [427147.726, 454117.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1440.810 ±(99.9%) 15.439 MB/sec [Average]
[info]   (min, avg, max) = (1436.108, 1440.810, 1446.053), stdev = 4.009
[info]   CI (99.9%): [1425.371, 1456.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5145.802 ±(99.9%) 132.749 B/op [Average]
[info]   (min, avg, max) = (5116.232, 5145.802, 5200.461), stdev = 34.475
[info]   CI (99.9%): [5013.053, 5278.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1335.420 ±(99.9%) 8.319 MB/sec [Average]
[info]   (min, avg, max) = (1332.313, 1335.420, 1337.710), stdev = 2.161
[info]   CI (99.9%): [1327.100, 1343.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4769.439 ±(99.9%) 140.760 B/op [Average]
[info]   (min, avg, max) = (4740.667, 4769.439, 4826.460), stdev = 36.555
[info]   CI (99.9%): [4628.679, 4910.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.869 ±(99.9%) 7.077 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.869, 4.156), stdev = 1.838
[info]   CI (99.9%): [≈ 0, 7.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.085 ±(99.9%) 25.120 B/op [Average]
[info]   (min, avg, max) = (0.074, 3.085, 14.753), stdev = 6.524
[info]   CI (99.9%): [≈ 0, 28.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 9.000), stdev = 3.114
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.77% complete, ETA 01:48:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 330566.190 ops/s
[info] # Warmup Iteration   2: 949964.995 ops/s
[info] # Warmup Iteration   3: 986781.311 ops/s
[info] # Warmup Iteration   4: 999751.093 ops/s
[info] # Warmup Iteration   5: 1044755.194 ops/s
[info] Iteration   1: 1033770.126 ops/s
[info]                  ·gc.alloc.rate:                   497.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              757.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1005.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1035093.381 ops/s
[info]                  ·gc.alloc.rate:               494.368 MB/sec
[info]                  ·gc.alloc.rate.norm:          751.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1003.782 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 1036922.377 ops/s
[info]                  ·gc.alloc.rate:                   499.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              757.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1003.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1039998.215 ops/s
[info]                  ·gc.alloc.rate:      481.105 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1037411.519 ops/s
[info]                  ·gc.alloc.rate:               495.629 MB/sec
[info]                  ·gc.alloc.rate.norm:          751.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1003.016 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   1036639.123 ±(99.9%) 9148.985 ops/s [Average]
[info]   (min, avg, max) = (1033770.126, 1036639.123, 1039998.215), stdev = 2375.962
[info]   CI (99.9%): [1027490.138, 1045788.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   493.531 ±(99.9%) 27.620 MB/sec [Average]
[info]   (min, avg, max) = (481.105, 493.531, 499.069), stdev = 7.173
[info]   CI (99.9%): [465.911, 521.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   749.280 ±(99.9%) 47.101 B/op [Average]
[info]   (min, avg, max) = (728.000, 749.280, 757.482), stdev = 12.232
[info]   CI (99.9%): [702.178, 796.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   528.534 ±(99.9%) 1137.711 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 528.534, 661.132), stdev = 295.460
[info]   CI (99.9%): [≈ 0, 1666.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   803.063 ±(99.9%) 1728.656 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 803.063, 1005.057), stdev = 448.927
[info]   CI (99.9%): [≈ 0, 2531.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.133 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.063), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.00% complete, ETA 01:48:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1246717.710 ops/s
[info] # Warmup Iteration   2: 2678793.998 ops/s
[info] # Warmup Iteration   3: 2686258.046 ops/s
[info] # Warmup Iteration   4: 2691255.993 ops/s
[info] # Warmup Iteration   5: 2698098.785 ops/s
[info] Iteration   1: 2684446.498 ops/s
[info]                  ·gc.alloc.rate:               1287.216 MB/sec
[info]                  ·gc.alloc.rate.norm:          754.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 784.842 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 2710815.265 ops/s
[info]                  ·gc.alloc.rate:                   1280.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              743.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     388.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2803054.928 ops/s
[info]                  ·gc.alloc.rate:               1336.348 MB/sec
[info]                  ·gc.alloc.rate.norm:          750.323 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 752.531 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 2770238.192 ops/s
[info]                  ·gc.alloc.rate:                   1321.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              750.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     761.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.342 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2779649.124 ops/s
[info]                  ·gc.alloc.rate:                   1313.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              743.304 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     757.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2749640.802 ±(99.9%) 191910.665 ops/s [Average]
[info]   (min, avg, max) = (2684446.498, 2749640.802, 2803054.928), stdev = 49838.590
[info]   CI (99.9%): [2557730.137, 2941551.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1307.686 ±(99.9%) 90.903 MB/sec [Average]
[info]   (min, avg, max) = (1280.086, 1307.686, 1336.348), stdev = 23.607
[info]   CI (99.9%): [1216.783, 1398.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   748.463 ±(99.9%) 19.478 B/op [Average]
[info]   (min, avg, max) = (743.174, 748.463, 754.685), stdev = 5.058
[info]   CI (99.9%): [728.985, 767.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1205.337 ±(99.9%) 1153.463 MB/sec [Average]
[info]   (min, avg, max) = (669.488, 1205.337, 1340.484), stdev = 299.551
[info]   CI (99.9%): [51.874, 2358.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   688.968 ±(99.9%) 648.154 B/op [Average]
[info]   (min, avg, max) = (388.682, 688.968, 784.842), stdev = 168.324
[info]   CI (99.9%): [40.814, 1337.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.831 ±(99.9%) 7.085 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.831, 4.122), stdev = 1.840
[info]   CI (99.9%): [≈ 0, 7.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.472 ±(99.9%) 4.024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.472, 2.342), stdev = 1.045
[info]   CI (99.9%): [≈ 0, 4.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.789
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 6.24% complete, ETA 01:48:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1421032.533 ops/s
[info] # Warmup Iteration   2: 2772003.698 ops/s
[info] # Warmup Iteration   3: 2811225.383 ops/s
[info] # Warmup Iteration   4: 2810445.718 ops/s
[info] # Warmup Iteration   5: 2813697.315 ops/s
[info] Iteration   1: 2809992.688 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2810461.123 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2811201.704 ops/s
[info]                  ·gc.alloc.rate:      0.810 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.454 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2810807.548 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2805055.273 ops/s
[info]                  ·gc.alloc.rate:      3.310 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.857 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2809503.667 ±(99.9%) 9727.642 ops/s [Average]
[info]   (min, avg, max) = (2805055.273, 2809503.667, 2811201.704), stdev = 2526.238
[info]   CI (99.9%): [2799776.025, 2819231.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.824 ±(99.9%) 5.518 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.824, 3.310), stdev = 1.433
[info]   CI (99.9%): [≈ 0, 6.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.462 ±(99.9%) 3.095 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.462, 1.857), stdev = 0.804
[info]   CI (99.9%): [≈ 0, 3.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6.47% complete, ETA 01:48:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78703.029 ops/s
[info] # Warmup Iteration   2: 451613.624 ops/s
[info] # Warmup Iteration   3: 644957.490 ops/s
[info] # Warmup Iteration   4: 652254.099 ops/s
[info] # Warmup Iteration   5: 704040.322 ops/s
[info] Iteration   1: 698775.209 ops/s
[info]                  ·gc.alloc.rate:               969.292 MB/sec
[info]                  ·gc.alloc.rate.norm:          2183.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1320.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2975.269 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     12.000 ms
[info] Iteration   2: 697648.872 ops/s
[info]                  ·gc.alloc.rate:               971.719 MB/sec
[info]                  ·gc.alloc.rate.norm:          2191.659 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1492.309 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 696394.530 ops/s
[info]                  ·gc.alloc.rate:                   980.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              2215.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2992.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 703342.888 ops/s
[info]                  ·gc.alloc.rate:               973.578 MB/sec
[info]                  ·gc.alloc.rate.norm:          2178.236 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1482.412 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 703146.096 ops/s
[info]                  ·gc.alloc.rate:                   985.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              2205.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1484.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.416 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   699861.519 ±(99.9%) 12328.716 ops/s [Average]
[info]   (min, avg, max) = (696394.530, 699861.519, 703342.888), stdev = 3201.728
[info]   CI (99.9%): [687532.803, 712190.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   976.083 ±(99.9%) 25.653 MB/sec [Average]
[info]   (min, avg, max) = (969.292, 976.083, 985.442), stdev = 6.662
[info]   CI (99.9%): [950.430, 1001.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2194.910 ±(99.9%) 60.159 B/op [Average]
[info]   (min, avg, max) = (2178.236, 2194.910, 2215.716), stdev = 15.623
[info]   CI (99.9%): [2134.751, 2255.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   926.444 ±(99.9%) 1392.004 MB/sec [Average]
[info]   (min, avg, max) = (661.647, 926.444, 1323.931), stdev = 361.499
[info]   CI (99.9%): [≈ 0, 2318.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2085.282 ±(99.9%) 3158.225 B/op [Average]
[info]   (min, avg, max) = (1482.412, 2085.282, 2992.155), stdev = 820.181
[info]   CI (99.9%): [≈ 0, 5243.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.756 ±(99.9%) 6.466 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.756, 3.760), stdev = 1.679
[info]   CI (99.9%): [≈ 0, 7.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.693 ±(99.9%) 14.473 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.693, 8.416), stdev = 3.758
[info]   CI (99.9%): [≈ 0, 16.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.800, 12.000), stdev = 2.950
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6.70% complete, ETA 01:47:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3228.686 ops/s
[info] # Warmup Iteration   2: 16283.618 ops/s
[info] # Warmup Iteration   3: 19441.160 ops/s
[info] # Warmup Iteration   4: 22144.650 ops/s
[info] # Warmup Iteration   5: 22166.844 ops/s
[info] Iteration   1: 21700.711 ops/s
[info]                  ·gc.alloc.rate:                   1835.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              133130.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1972.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143029.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.020 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 20900.661 ops/s
[info]                  ·gc.alloc.rate:                   1921.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              144687.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1981.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149180.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.172 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 22148.284 ops/s
[info]                  ·gc.alloc.rate:                   1995.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              141790.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141492.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.358 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 238.589 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 22252.575 ops/s
[info]                  ·gc.alloc.rate:                   1747.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              123620.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94177.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.945 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 22162.485 ops/s
[info]                  ·gc.alloc.rate:                   1776.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              126133.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142129.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.957 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   21832.943 ±(99.9%) 2170.381 ops/s [Average]
[info]   (min, avg, max) = (20900.661, 21832.943, 22252.575), stdev = 563.641
[info]   CI (99.9%): [19662.562, 24003.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1855.342 ±(99.9%) 395.379 MB/sec [Average]
[info]   (min, avg, max) = (1747.994, 1855.342, 1995.399), stdev = 102.679
[info]   CI (99.9%): [1459.963, 2250.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   133872.613 ±(99.9%) 35772.122 B/op [Average]
[info]   (min, avg, max) = (123620.332, 133872.613, 144687.977), stdev = 9289.906
[info]   CI (99.9%): [98100.491, 169644.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1855.517 ±(99.9%) 1128.414 MB/sec [Average]
[info]   (min, avg, max) = (1331.669, 1855.517, 2001.451), stdev = 293.046
[info]   CI (99.9%): [727.102, 2983.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   134001.762 ±(99.9%) 86533.441 B/op [Average]
[info]   (min, avg, max) = (94177.267, 134001.762, 149180.302), stdev = 22472.460
[info]   CI (99.9%): [47468.322, 220535.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.801 ±(99.9%) 5.562 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.801, 3.358), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   57.336 ±(99.9%) 394.800 B/op [Average]
[info]   (min, avg, max) = (2.945, 57.336, 238.589), stdev = 102.528
[info]   CI (99.9%): [≈ 0, 452.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 1.924
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.93% complete, ETA 01:47:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10643.909 ops/s
[info] # Warmup Iteration   2: 35124.214 ops/s
[info] # Warmup Iteration   3: 45345.066 ops/s
[info] # Warmup Iteration   4: 43896.454 ops/s
[info] # Warmup Iteration   5: 40478.556 ops/s
[info] Iteration   1: 43231.902 ops/s
[info]                  ·gc.alloc.rate:                   1172.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              42691.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23959.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      9.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 328.960 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 42953.753 ops/s
[info]                  ·gc.alloc.rate:               1180.488 MB/sec
[info]                  ·gc.alloc.rate.norm:          43251.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1316.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48227.223 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 43087.552 ops/s
[info]                  ·gc.alloc.rate:               1191.435 MB/sec
[info]                  ·gc.alloc.rate.norm:          43518.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1317.329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48117.117 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 43235.922 ops/s
[info]                  ·gc.alloc.rate:                   1189.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              43278.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48036.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.516 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 43056.171 ops/s
[info]                  ·gc.alloc.rate:               1166.410 MB/sec
[info]                  ·gc.alloc.rate.norm:          42629.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24141.718 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   43113.060 ±(99.9%) 465.611 ops/s [Average]
[info]   (min, avg, max) = (42953.753, 43113.060, 43235.922), stdev = 120.918
[info]   CI (99.9%): [42647.449, 43578.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1180.016 ±(99.9%) 41.056 MB/sec [Average]
[info]   (min, avg, max) = (1166.410, 1180.016, 1191.435), stdev = 10.662
[info]   CI (99.9%): [1138.960, 1221.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43073.810 ±(99.9%) 1509.467 B/op [Average]
[info]   (min, avg, max) = (42629.733, 43073.810, 43518.663), stdev = 392.004
[info]   CI (99.9%): [41564.343, 44583.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1054.432 ±(99.9%) 1388.912 MB/sec [Average]
[info]   (min, avg, max) = (658.074, 1054.432, 1319.902), stdev = 360.696
[info]   CI (99.9%): [≈ 0, 2443.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   38496.278 ±(99.9%) 50780.477 B/op [Average]
[info]   (min, avg, max) = (23959.137, 38496.278, 48227.223), stdev = 13187.529
[info]   CI (99.9%): [≈ 0, 89276.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.815 ±(99.9%) 15.542 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.815, 9.035), stdev = 4.036
[info]   CI (99.9%): [≈ 0, 17.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   66.095 ±(99.9%) 565.842 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 66.095, 328.960), stdev = 146.947
[info]   CI (99.9%): [≈ 0, 631.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 1.000
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.16% complete, ETA 01:47:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16988.978 ops/s
[info] # Warmup Iteration   2: 40636.031 ops/s
[info] # Warmup Iteration   3: 48895.639 ops/s
[info] # Warmup Iteration   4: 49683.268 ops/s
[info] # Warmup Iteration   5: 49501.861 ops/s
[info] Iteration   1: 49767.279 ops/s
[info]                  ·gc.alloc.rate:                   864.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              27329.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1305.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41300.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.900 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 52064.199 ops/s
[info]                  ·gc.alloc.rate:               752.030 MB/sec
[info]                  ·gc.alloc.rate.norm:          22733.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:      653.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19744.748 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 51726.238 ops/s
[info]                  ·gc.alloc.rate:               710.714 MB/sec
[info]                  ·gc.alloc.rate.norm:          21615.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:      654.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19894.020 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 50613.975 ops/s
[info]                  ·gc.alloc.rate:               700.867 MB/sec
[info]                  ·gc.alloc.rate.norm:          21793.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      653.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20330.232 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 51073.573 ops/s
[info]                  ·gc.alloc.rate:                   702.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              21634.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20187.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.401 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   51049.053 ±(99.9%) 3509.127 ops/s [Average]
[info]   (min, avg, max) = (49767.279, 51049.053, 52064.199), stdev = 911.309
[info]   CI (99.9%): [47539.926, 54558.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   745.987 ±(99.9%) 266.896 MB/sec [Average]
[info]   (min, avg, max) = (700.867, 745.987, 864.205), stdev = 69.312
[info]   CI (99.9%): [479.091, 1012.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23021.248 ±(99.9%) 9442.759 B/op [Average]
[info]   (min, avg, max) = (21615.039, 23021.248, 27329.750), stdev = 2452.254
[info]   CI (99.9%): [13578.489, 32464.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   784.449 ±(99.9%) 1122.638 MB/sec [Average]
[info]   (min, avg, max) = (653.157, 784.449, 1305.980), stdev = 291.546
[info]   CI (99.9%): [≈ 0, 1907.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   24291.467 ±(99.9%) 36624.123 B/op [Average]
[info]   (min, avg, max) = (19744.748, 24291.467, 41300.517), stdev = 9511.168
[info]   CI (99.9%): [≈ 0, 60915.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.053 ±(99.9%) 0.425 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.053, 0.250), stdev = 0.110
[info]   CI (99.9%): [≈ 0, 0.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.660 ±(99.9%) 13.448 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.660, 7.900), stdev = 3.492
[info]   CI (99.9%): [≈ 0, 15.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 11.000), stdev = 2.510
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7.39% complete, ETA 01:47:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1454.378 ops/s
[info] # Warmup Iteration   2: 24606.602 ops/s
[info] # Warmup Iteration   3: 40330.392 ops/s
[info] # Warmup Iteration   4: 38674.087 ops/s
[info] # Warmup Iteration   5: 39226.579 ops/s
[info] Iteration   1: 38759.897 ops/s
[info]                  ·gc.alloc.rate:                   1627.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              66103.401 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54069.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.240 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 38407.727 ops/s
[info]                  ·gc.alloc.rate:               1620.410 MB/sec
[info]                  ·gc.alloc.rate.norm:          66396.191 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54623.570 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 39632.413 ops/s
[info]                  ·gc.alloc.rate:                   1682.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              66826.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79573.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.238 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88.866 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 39795.711 ops/s
[info]                  ·gc.alloc.rate:                   1663.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              65778.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52845.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.823 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 39604.499 ops/s
[info]                  ·gc.alloc.rate:                   1687.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              67075.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79678.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.827 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   39240.049 ±(99.9%) 2372.789 ops/s [Average]
[info]   (min, avg, max) = (38407.727, 39240.049, 39795.711), stdev = 616.206
[info]   CI (99.9%): [36867.260, 41612.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1656.532 ±(99.9%) 119.497 MB/sec [Average]
[info]   (min, avg, max) = (1620.410, 1656.532, 1687.945), stdev = 31.033
[info]   CI (99.9%): [1537.035, 1776.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66435.984 ±(99.9%) 2025.303 B/op [Average]
[info]   (min, avg, max) = (65778.264, 66435.984, 67075.965), stdev = 525.965
[info]   CI (99.9%): [64410.681, 68461.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1602.016 ±(99.9%) 1414.930 MB/sec [Average]
[info]   (min, avg, max) = (1331.608, 1602.016, 2005.077), stdev = 367.453
[info]   CI (99.9%): [187.086, 3016.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64157.828 ±(99.9%) 54428.150 B/op [Average]
[info]   (min, avg, max) = (52845.027, 64157.828, 79678.223), stdev = 14134.818
[info]   CI (99.9%): [9729.678, 118585.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.457 ±(99.9%) 3.834 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.457, 2.238), stdev = 0.996
[info]   CI (99.9%): [≈ 0, 4.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   18.151 ±(99.9%) 152.225 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.151, 88.866), stdev = 39.532
[info]   CI (99.9%): [≈ 0, 170.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7.62% complete, ETA 01:46:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3649.035 ops/s
[info] # Warmup Iteration   2: 26197.222 ops/s
[info] # Warmup Iteration   3: 34675.331 ops/s
[info] # Warmup Iteration   4: 35786.471 ops/s
[info] # Warmup Iteration   5: 30365.156 ops/s
[info] Iteration   1: 36546.131 ops/s
[info]                  ·gc.alloc.rate:                   2379.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              102485.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86059.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94.244 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 36589.697 ops/s
[info]                  ·gc.alloc.rate:                   2414.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              103832.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2663.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114525.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.372 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 36613.598 ops/s
[info]                  ·gc.alloc.rate:                   2395.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              102954.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85930.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.790 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 36617.871 ops/s
[info]                  ·gc.alloc.rate:                   2400.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              103142.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114723.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103.880 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 36687.284 ops/s
[info]                  ·gc.alloc.rate:                   2398.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              102887.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85902.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.893 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   36610.916 ±(99.9%) 197.616 ops/s [Average]
[info]   (min, avg, max) = (36546.131, 36610.916, 36687.284), stdev = 51.320
[info]   CI (99.9%): [36413.300, 36808.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2397.706 ±(99.9%) 47.605 MB/sec [Average]
[info]   (min, avg, max) = (2379.885, 2397.706, 2414.432), stdev = 12.363
[info]   CI (99.9%): [2350.101, 2445.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   103060.482 ±(99.9%) 1900.428 B/op [Average]
[info]   (min, avg, max) = (102485.897, 103060.482, 103832.702), stdev = 493.535
[info]   CI (99.9%): [101160.054, 104960.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2266.630 ±(99.9%) 1405.100 MB/sec [Average]
[info]   (min, avg, max) = (1998.435, 2266.630, 2669.628), stdev = 364.900
[info]   CI (99.9%): [861.530, 3671.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   97428.242 ±(99.9%) 60447.998 B/op [Average]
[info]   (min, avg, max) = (85902.473, 97428.242, 114723.789), stdev = 15698.153
[info]   CI (99.9%): [36980.244, 157876.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.959 ±(99.9%) 4.738 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.959, 2.417), stdev = 1.230
[info]   CI (99.9%): [≈ 0, 5.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   41.236 ±(99.9%) 203.792 B/op [Average]
[info]   (min, avg, max) = (0.893, 41.236, 103.880), stdev = 52.924
[info]   CI (99.9%): [≈ 0, 245.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 9.000), stdev = 1.871
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.85% complete, ETA 01:46:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5103.932 ops/s
[info] # Warmup Iteration   2: 20862.509 ops/s
[info] # Warmup Iteration   3: 35090.876 ops/s
[info] # Warmup Iteration   4: 33785.013 ops/s
[info] # Warmup Iteration   5: 31081.614 ops/s
[info] Iteration   1: 32404.207 ops/s
[info]                  ·gc.alloc.rate:                   2012.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              97749.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1974.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95914.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.440 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 312.817 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 35131.368 ops/s
[info]                  ·gc.alloc.rate:                   1916.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              85863.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1967.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88137.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.254 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100.983 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 35916.103 ops/s
[info]                  ·gc.alloc.rate:                   1968.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              86248.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1974.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86505.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.473 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 35833.328 ops/s
[info]                  ·gc.alloc.rate:                   1969.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              86489.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1980.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86996.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.743 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 35979.183 ops/s
[info]                  ·gc.alloc.rate:                   1955.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              85557.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86876.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 155.133 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   35052.838 ±(99.9%) 5850.547 ops/s [Average]
[info]   (min, avg, max) = (32404.207, 35052.838, 35979.183), stdev = 1519.368
[info]   CI (99.9%): [29202.291, 40903.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1964.516 ±(99.9%) 132.029 MB/sec [Average]
[info]   (min, avg, max) = (1916.668, 1964.516, 2012.517), stdev = 34.288
[info]   CI (99.9%): [1832.487, 2096.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   88381.739 ±(99.9%) 20210.559 B/op [Average]
[info]   (min, avg, max) = (85557.444, 88381.739, 97749.023), stdev = 5248.618
[info]   CI (99.9%): [68171.180, 108592.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1976.621 ±(99.9%) 27.322 MB/sec [Average]
[info]   (min, avg, max) = (1967.415, 1976.621, 1986.108), stdev = 7.096
[info]   CI (99.9%): [1949.299, 2003.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   88886.030 ±(99.9%) 15311.066 B/op [Average]
[info]   (min, avg, max) = (86505.623, 88886.030, 95914.825), stdev = 3976.235
[info]   CI (99.9%): [73574.964, 104197.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2.486 ±(99.9%) 10.236 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 2.486, 6.440), stdev = 2.658
[info]   CI (99.9%): [≈ 0, 12.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   115.430 ±(99.9%) 492.881 B/op [Average]
[info]   (min, avg, max) = (2.743, 115.430, 312.817), stdev = 128.000
[info]   CI (99.9%): [≈ 0, 608.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.800, 15.000), stdev = 2.683
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.08% complete, ETA 01:46:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9582.757 ops/s
[info] # Warmup Iteration   2: 27705.157 ops/s
[info] # Warmup Iteration   3: 39604.978 ops/s
[info] # Warmup Iteration   4: 38667.392 ops/s
[info] # Warmup Iteration   5: 37918.299 ops/s
[info] Iteration   1: 40931.510 ops/s
[info]                  ·gc.alloc.rate:                   2106.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              80997.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1968.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75675.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.994 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 41096.553 ops/s
[info]                  ·gc.alloc.rate:                   2123.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              81334.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1974.088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75597.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.118 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81.125 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 40845.770 ops/s
[info]                  ·gc.alloc.rate:                   2100.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              80924.835 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1976.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76154.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.800 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   4: 41366.674 ops/s
[info]                  ·gc.alloc.rate:                   2120.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              80669.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1977.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75245.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.043 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 41392.892 ops/s
[info]                  ·gc.alloc.rate:                   2146.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              81599.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2635.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100194.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 167.813 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   41126.680 ±(99.9%) 955.656 ops/s [Average]
[info]   (min, avg, max) = (40845.770, 41126.680, 41392.892), stdev = 248.181
[info]   CI (99.9%): [40171.023, 42082.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   2119.561 ±(99.9%) 67.998 MB/sec [Average]
[info]   (min, avg, max) = (2100.744, 2119.561, 2146.220), stdev = 17.659
[info]   CI (99.9%): [2051.563, 2187.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   81105.151 ±(99.9%) 1403.424 B/op [Average]
[info]   (min, avg, max) = (80669.331, 81105.151, 81599.914), stdev = 364.465
[info]   CI (99.9%): [79701.727, 82508.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2106.458 ±(99.9%) 1138.457 MB/sec [Average]
[info]   (min, avg, max) = (1968.357, 2106.458, 2635.299), stdev = 295.654
[info]   CI (99.9%): [968.001, 3244.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   80573.733 ±(99.9%) 42254.321 B/op [Average]
[info]   (min, avg, max) = (75245.858, 80573.733, 100194.842), stdev = 10973.313
[info]   CI (99.9%): [38319.411, 122828.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1.673 ±(99.9%) 6.915 MB/sec [Average]
[info]   (min, avg, max) = (0.052, 1.673, 4.414), stdev = 1.796
[info]   CI (99.9%): [≈ 0, 8.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   63.755 ±(99.9%) 263.011 B/op [Average]
[info]   (min, avg, max) = (1.994, 63.755, 167.813), stdev = 68.303
[info]   CI (99.9%): [≈ 0, 326.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   76.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (11.000, 15.200, 18.000), stdev = 3.033
[info]   CI (99.9%): [76.000, 76.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 8.31% complete, ETA 01:46:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10573.838 ops/s
[info] # Warmup Iteration   2: 24811.559 ops/s
[info] # Warmup Iteration   3: 39434.147 ops/s
[info] # Warmup Iteration   4: 38023.826 ops/s
[info] # Warmup Iteration   5: 38704.644 ops/s
[info] Iteration   1: 40534.624 ops/s
[info]                  ·gc.alloc.rate:                   2025.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              78622.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1978.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76793.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 138.217 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 41425.794 ops/s
[info]                  ·gc.alloc.rate:                   2066.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              78494.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1975.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75066.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129.315 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 40300.737 ops/s
[info]                  ·gc.alloc.rate:                   1996.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              77922.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1972.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77003.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.511 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 40401.108 ops/s
[info]                  ·gc.alloc.rate:                   2005.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              78129.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1969.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76709.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.244 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 40322.013 ops/s
[info]                  ·gc.alloc.rate:                   2001.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              78094.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1972.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76989.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.250 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   40596.855 ±(99.9%) 1818.949 ops/s [Average]
[info]   (min, avg, max) = (40300.737, 40596.855, 41425.794), stdev = 472.375
[info]   CI (99.9%): [38777.906, 42415.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   2018.891 ±(99.9%) 110.327 MB/sec [Average]
[info]   (min, avg, max) = (1996.274, 2018.891, 2066.220), stdev = 28.652
[info]   CI (99.9%): [1908.564, 2129.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   78252.767 ±(99.9%) 1129.596 B/op [Average]
[info]   (min, avg, max) = (77922.733, 78252.767, 78622.430), stdev = 293.353
[info]   CI (99.9%): [77123.170, 79382.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1973.758 ±(99.9%) 13.299 MB/sec [Average]
[info]   (min, avg, max) = (1969.095, 1973.758, 1978.134), stdev = 3.454
[info]   CI (99.9%): [1960.459, 1987.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   76512.528 ±(99.9%) 3150.588 B/op [Average]
[info]   (min, avg, max) = (75066.410, 76512.528, 77003.621), stdev = 818.198
[info]   CI (99.9%): [73361.940, 79663.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1.526 ±(99.9%) 6.910 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 1.526, 3.560), stdev = 1.795
[info]   CI (99.9%): [≈ 0, 8.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   58.707 ±(99.9%) 265.354 B/op [Average]
[info]   (min, avg, max) = (3.244, 58.707, 138.217), stdev = 68.912
[info]   CI (99.9%): [≈ 0, 324.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.000, 20.000), stdev = 6.745
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8.55% complete, ETA 01:45:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2020.736 ops/s
[info] # Warmup Iteration   2: 5025.134 ops/s
[info] # Warmup Iteration   3: 8673.784 ops/s
[info] # Warmup Iteration   4: 9438.077 ops/s
[info] # Warmup Iteration   5: 9348.015 ops/s
[info] Iteration   1: 9476.416 ops/s
[info]                  ·gc.alloc.rate:               1269.283 MB/sec
[info]                  ·gc.alloc.rate.norm:          210740.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 110952.814 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 9460.103 ops/s
[info]                  ·gc.alloc.rate:                   1298.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              216021.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222304.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.463 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 9445.686 ops/s
[info]                  ·gc.alloc.rate:                   1281.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              213553.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222879.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.469 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 9487.305 ops/s
[info]                  ·gc.alloc.rate:                   1284.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              213063.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221892.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 678.999 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 9535.770 ops/s
[info]                  ·gc.alloc.rate:                   1288.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              212633.304 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220093.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85.888 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   9481.056 ±(99.9%) 132.613 ops/s [Average]
[info]   (min, avg, max) = (9445.686, 9481.056, 9535.770), stdev = 34.439
[info]   CI (99.9%): [9348.443, 9613.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1284.496 ±(99.9%) 40.930 MB/sec [Average]
[info]   (min, avg, max) = (1269.283, 1284.496, 1298.432), stdev = 10.629
[info]   CI (99.9%): [1243.566, 1325.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   213202.395 ±(99.9%) 7325.706 B/op [Average]
[info]   (min, avg, max) = (210740.198, 213202.395, 216021.661), stdev = 1902.463
[info]   CI (99.9%): [205876.688, 220528.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1202.727 ±(99.9%) 1150.481 MB/sec [Average]
[info]   (min, avg, max) = (668.266, 1202.727, 1337.655), stdev = 298.776
[info]   CI (99.9%): [52.246, 2353.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   199624.484 ±(99.9%) 190914.599 B/op [Average]
[info]   (min, avg, max) = (110952.814, 199624.484, 222879.285), stdev = 49579.915
[info]   CI (99.9%): [8709.885, 390539.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.931 ±(99.9%) 6.858 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.931, 4.093), stdev = 1.781
[info]   CI (99.9%): [≈ 0, 7.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   154.364 ±(99.9%) 1137.896 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 154.364, 678.999), stdev = 295.508
[info]   CI (99.9%): [≈ 0, 1292.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 11.000), stdev = 3.347
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8.78% complete, ETA 01:45:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2373.798 ops/s
[info] # Warmup Iteration   2: 15115.938 ops/s
[info] # Warmup Iteration   3: 18953.065 ops/s
[info] # Warmup Iteration   4: 22247.309 ops/s
[info] # Warmup Iteration   5: 22167.872 ops/s
[info] Iteration   1: 22766.263 ops/s
[info]                  ·gc.alloc.rate:                   1909.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              132027.336 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1906.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131791.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.904 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         32.000 ms
[info] Iteration   2: 21231.834 ops/s
[info]                  ·gc.alloc.rate:                   1864.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              138209.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1904.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141169.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105.759 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         34.000 ms
[info] Iteration   3: 21041.363 ops/s
[info]                  ·gc.alloc.rate:                   1988.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              148693.357 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1905.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142550.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      13.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1017.419 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         26.000 ms
[info] Iteration   4: 21956.394 ops/s
[info]                  ·gc.alloc.rate:                   1905.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              136586.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1899.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136133.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 190.946 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 22368.054 ops/s
[info]                  ·gc.alloc.rate:                   1953.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              137414.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1892.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133163.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.324 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   21872.782 ±(99.9%) 2824.827 ops/s [Average]
[info]   (min, avg, max) = (21041.363, 21872.782, 22766.263), stdev = 733.599
[info]   CI (99.9%): [19047.955, 24697.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1924.295 ±(99.9%) 182.720 MB/sec [Average]
[info]   (min, avg, max) = (1864.610, 1924.295, 1988.117), stdev = 47.452
[info]   CI (99.9%): [1741.574, 2107.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   138586.131 ±(99.9%) 23634.249 B/op [Average]
[info]   (min, avg, max) = (132027.336, 138586.131, 148693.357), stdev = 6137.740
[info]   CI (99.9%): [114951.881, 162220.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1901.827 ±(99.9%) 22.487 MB/sec [Average]
[info]   (min, avg, max) = (1892.591, 1901.827, 1906.444), stdev = 5.840
[info]   CI (99.9%): [1879.340, 1924.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   136961.760 ±(99.9%) 18344.575 B/op [Average]
[info]   (min, avg, max) = (131791.512, 136961.760, 142550.532), stdev = 4764.028
[info]   CI (99.9%): [118617.185, 155306.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3.565 ±(99.9%) 22.006 MB/sec [Average]
[info]   (min, avg, max) = (0.028, 3.565, 13.603), stdev = 5.715
[info]   CI (99.9%): [≈ 0, 25.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   264.670 ±(99.9%) 1647.913 B/op [Average]
[info]   (min, avg, max) = (1.904, 264.670, 1017.419), stdev = 427.958
[info]   CI (99.9%): [≈ 0, 1912.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   104.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 20.800, 34.000), stdev = 13.846
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.01% complete, ETA 01:45:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12972.669 ops/s
[info] # Warmup Iteration   2: 42474.129 ops/s
[info] # Warmup Iteration   3: 54257.116 ops/s
[info] # Warmup Iteration   4: 49242.041 ops/s
[info] # Warmup Iteration   5: 54881.775 ops/s
[info] Iteration   1: 46375.575 ops/s
[info]                  ·gc.alloc.rate:                   1379.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              46812.693 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1284.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43586.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 125.443 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 47351.083 ops/s
[info]                  ·gc.alloc.rate:                   1339.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              44503.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1272.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42289.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.585 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 47396.940 ops/s
[info]                  ·gc.alloc.rate:                   1335.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              44351.563 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1268.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42115.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.357 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   4: 46695.450 ops/s
[info]                  ·gc.alloc.rate:                   1316.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              44374.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1267.332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42714.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.591 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 47366.887 ops/s
[info]                  ·gc.alloc.rate:                   1334.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              44347.858 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1268.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42140.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.135 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   47037.187 ±(99.9%) 1817.539 ops/s [Average]
[info]   (min, avg, max) = (46375.575, 47037.187, 47396.940), stdev = 472.009
[info]   CI (99.9%): [45219.648, 48854.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1341.102 ±(99.9%) 89.006 MB/sec [Average]
[info]   (min, avg, max) = (1316.565, 1341.102, 1379.344), stdev = 23.115
[info]   CI (99.9%): [1252.096, 1430.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44877.906 ±(99.9%) 4171.988 B/op [Average]
[info]   (min, avg, max) = (44347.858, 44877.906, 46812.693), stdev = 1083.452
[info]   CI (99.9%): [40705.917, 49049.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1272.163 ±(99.9%) 27.130 MB/sec [Average]
[info]   (min, avg, max) = (1267.332, 1272.163, 1284.272), stdev = 7.046
[info]   CI (99.9%): [1245.032, 1299.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   42569.282 ±(99.9%) 2376.248 B/op [Average]
[info]   (min, avg, max) = (42115.572, 42569.282, 43586.110), stdev = 617.104
[info]   CI (99.9%): [40193.035, 44945.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.773 ±(99.9%) 6.293 MB/sec [Average]
[info]   (min, avg, max) = (0.018, 0.773, 3.696), stdev = 1.634
[info]   CI (99.9%): [≈ 0, 7.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   26.222 ±(99.9%) 213.617 B/op [Average]
[info]   (min, avg, max) = (0.585, 26.222, 125.443), stdev = 55.476
[info]   CI (99.9%): [≈ 0, 239.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   86.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (16.000, 17.200, 20.000), stdev = 1.643
[info]   CI (99.9%): [86.000, 86.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.24% complete, ETA 01:45:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34313.174 ops/s
[info] # Warmup Iteration   2: 56984.077 ops/s
[info] # Warmup Iteration   3: 55106.003 ops/s
[info] # Warmup Iteration   4: 67466.782 ops/s
[info] # Warmup Iteration   5: 67212.856 ops/s
[info] Iteration   1: 68327.330 ops/s
[info]                  ·gc.alloc.rate:                   781.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              17992.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15151.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.227 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 68146.875 ops/s
[info]                  ·gc.alloc.rate:               785.159 MB/sec
[info]                  ·gc.alloc.rate.norm:          18131.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15223.399 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 68107.991 ops/s
[info]                  ·gc.alloc.rate:                   776.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              17935.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15231.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.851 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 68398.747 ops/s
[info]                  ·gc.alloc.rate:               784.915 MB/sec
[info]                  ·gc.alloc.rate.norm:          18060.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15197.975 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 68314.581 ops/s
[info]                  ·gc.alloc.rate:                   778.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              17929.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15215.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.506 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   68259.105 ±(99.9%) 481.958 ops/s [Average]
[info]   (min, avg, max) = (68107.991, 68259.105, 68398.747), stdev = 125.163
[info]   CI (99.9%): [67777.147, 68741.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   781.158 ±(99.9%) 15.206 MB/sec [Average]
[info]   (min, avg, max) = (776.187, 781.158, 785.159), stdev = 3.949
[info]   CI (99.9%): [765.952, 796.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   18009.866 ±(99.9%) 331.019 B/op [Average]
[info]   (min, avg, max) = (17929.723, 18009.866, 18131.445), stdev = 85.964
[info]   CI (99.9%): [17678.847, 18340.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   659.464 ±(99.9%) 4.412 MB/sec [Average]
[info]   (min, avg, max) = (657.815, 659.464, 660.597), stdev = 1.146
[info]   CI (99.9%): [655.052, 663.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15204.196 ±(99.9%) 122.245 B/op [Average]
[info]   (min, avg, max) = (15151.945, 15204.196, 15231.667), stdev = 31.747
[info]   CI (99.9%): [15081.951, 15326.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.022 ±(99.9%) 0.129 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.080), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.517 ±(99.9%) 2.981 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.517, 1.851), stdev = 0.774
[info]   CI (99.9%): [≈ 0, 3.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 9.47% complete, ETA 01:44:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2425.941 ops/s
[info] # Warmup Iteration   2: 22349.484 ops/s
[info] # Warmup Iteration   3: 41299.859 ops/s
[info] # Warmup Iteration   4: 42213.988 ops/s
[info] # Warmup Iteration   5: 42584.116 ops/s
[info] Iteration   1: 43814.233 ops/s
[info]                  ·gc.alloc.rate:                   2742.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              98478.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95809.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.893 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 43686.830 ops/s
[info]                  ·gc.alloc.rate:                   2628.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              94679.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96230.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.531 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127.204 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 44213.769 ops/s
[info]                  ·gc.alloc.rate:                   2522.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              89798.562 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71376.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.482 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 44341.550 ops/s
[info]                  ·gc.alloc.rate:                   2544.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              90299.814 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95059.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.478 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 43353.394 ops/s
[info]                  ·gc.alloc.rate:                   2475.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              89853.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97481.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.023 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   43881.955 ±(99.9%) 1544.301 ops/s [Average]
[info]   (min, avg, max) = (43353.394, 43881.955, 44341.550), stdev = 401.050
[info]   CI (99.9%): [42337.654, 45426.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2582.615 ±(99.9%) 405.528 MB/sec [Average]
[info]   (min, avg, max) = (2475.140, 2582.615, 2742.792), stdev = 105.314
[info]   CI (99.9%): [2177.087, 2988.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   92621.950 ±(99.9%) 14858.870 B/op [Average]
[info]   (min, avg, max) = (89798.562, 92621.950, 98478.232), stdev = 3858.801
[info]   CI (99.9%): [77763.079, 107480.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2541.701 ±(99.9%) 1155.113 MB/sec [Average]
[info]   (min, avg, max) = (2005.208, 2541.701, 2685.282), stdev = 299.979
[info]   CI (99.9%): [1386.588, 3696.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   91191.640 ±(99.9%) 42786.628 B/op [Average]
[info]   (min, avg, max) = (71376.869, 91191.640, 97481.777), stdev = 11111.551
[info]   CI (99.9%): [48405.011, 133978.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.873 ±(99.9%) 5.813 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.873, 3.531), stdev = 1.510
[info]   CI (99.9%): [≈ 0, 6.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   31.416 ±(99.9%) 209.414 B/op [Average]
[info]   (min, avg, max) = (1.478, 31.416, 127.204), stdev = 54.384
[info]   CI (99.9%): [≈ 0, 240.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 8.000), stdev = 1.342
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.70% complete, ETA 01:44:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4338.200 ops/s
[info] # Warmup Iteration   2: 32518.910 ops/s
[info] # Warmup Iteration   3: 40305.025 ops/s
[info] # Warmup Iteration   4: 39044.614 ops/s
[info] # Warmup Iteration   5: 41335.341 ops/s
[info] Iteration   1: 42931.231 ops/s
[info]                  ·gc.alloc.rate:                   1873.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              68684.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73007.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.999 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 43335.758 ops/s
[info]                  ·gc.alloc.rate:                   1899.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              68967.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72492.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.922 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 42553.410 ops/s
[info]                  ·gc.alloc.rate:                   1844.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              68200.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73873.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.077 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 43430.046 ops/s
[info]                  ·gc.alloc.rate:                   1863.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              67526.432 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48352.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.263 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 43858.772 ops/s
[info]                  ·gc.alloc.rate:                   1894.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              67973.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71927.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.241 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   43221.843 ±(99.9%) 1918.824 ops/s [Average]
[info]   (min, avg, max) = (42553.410, 43221.843, 43858.772), stdev = 498.313
[info]   CI (99.9%): [41303.019, 45140.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1875.118 ±(99.9%) 87.091 MB/sec [Average]
[info]   (min, avg, max) = (1844.625, 1875.118, 1899.849), stdev = 22.617
[info]   CI (99.9%): [1788.027, 1962.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   68270.441 ±(99.9%) 2198.827 B/op [Average]
[info]   (min, avg, max) = (67526.432, 68270.441, 68967.620), stdev = 571.028
[info]   CI (99.9%): [66071.614, 70469.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1865.031 ±(99.9%) 1142.656 MB/sec [Average]
[info]   (min, avg, max) = (1334.262, 1865.031, 2004.385), stdev = 296.744
[info]   CI (99.9%): [722.375, 3007.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   67930.705 ±(99.9%) 42233.034 B/op [Average]
[info]   (min, avg, max) = (48352.734, 67930.705, 73873.197), stdev = 10967.785
[info]   CI (99.9%): [25697.671, 110163.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.449 ±(99.9%) 3.359 MB/sec [Average]
[info]   (min, avg, max) = (0.027, 0.449, 2.009), stdev = 0.872
[info]   CI (99.9%): [≈ 0, 3.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16.301 ±(99.9%) 121.916 B/op [Average]
[info]   (min, avg, max) = (0.999, 16.301, 72.922), stdev = 31.661
[info]   CI (99.9%): [≈ 0, 138.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.93% complete, ETA 01:44:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20333.032 ops/s
[info] # Warmup Iteration   2: 47899.852 ops/s
[info] # Warmup Iteration   3: 50687.014 ops/s
[info] # Warmup Iteration   4: 55607.850 ops/s
[info] # Warmup Iteration   5: 55469.082 ops/s
[info] Iteration   1: 55985.177 ops/s
[info]                  ·gc.alloc.rate:                   1751.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              49230.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37602.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.633 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 56597.289 ops/s
[info]                  ·gc.alloc.rate:                   1774.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              49353.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55719.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.257 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 56907.411 ops/s
[info]                  ·gc.alloc.rate:                   1764.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              48810.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36884.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.454 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 55026.858 ops/s
[info]                  ·gc.alloc.rate:                   1731.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              49520.568 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57157.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.786 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 56807.550 ops/s
[info]                  ·gc.alloc.rate:                   1772.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              49121.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36939.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.577 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   56264.857 ±(99.9%) 3000.517 ops/s [Average]
[info]   (min, avg, max) = (55026.858, 56264.857, 56907.411), stdev = 779.225
[info]   CI (99.9%): [53264.340, 59265.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1759.078 ±(99.9%) 69.333 MB/sec [Average]
[info]   (min, avg, max) = (1731.516, 1759.078, 1774.788), stdev = 18.005
[info]   CI (99.9%): [1689.745, 1828.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   49207.196 ±(99.9%) 1027.150 B/op [Average]
[info]   (min, avg, max) = (48810.614, 49207.196, 49520.568), stdev = 266.748
[info]   CI (99.9%): [48180.046, 50234.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1601.371 ±(99.9%) 1405.288 MB/sec [Average]
[info]   (min, avg, max) = (1333.281, 1601.371, 2003.736), stdev = 364.949
[info]   CI (99.9%): [196.084, 3006.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   44860.874 ±(99.9%) 40758.932 B/op [Average]
[info]   (min, avg, max) = (36884.583, 44860.874, 57157.642), stdev = 10584.965
[info]   CI (99.9%): [4101.942, 85619.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.872 ±(99.9%) 4.499 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.872, 2.633), stdev = 1.168
[info]   CI (99.9%): [≈ 0, 5.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   24.421 ±(99.9%) 126.245 B/op [Average]
[info]   (min, avg, max) = (0.577, 24.421, 74.029), stdev = 32.785
[info]   CI (99.9%): [≈ 0, 150.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 9.000), stdev = 2.550
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 10.16% complete, ETA 01:44:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15618.154 ops/s
[info] # Warmup Iteration   2: 48101.536 ops/s
[info] # Warmup Iteration   3: 54661.847 ops/s
[info] # Warmup Iteration   4: 56029.690 ops/s
[info] # Warmup Iteration   5: 56870.151 ops/s
[info] Iteration   1: 55224.870 ops/s
[info]                  ·gc.alloc.rate:               1636.417 MB/sec
[info]                  ·gc.alloc.rate.norm:          46629.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37931.216 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 57414.139 ops/s
[info]                  ·gc.alloc.rate:                   1701.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              46632.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54781.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110.134 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 57622.005 ops/s
[info]                  ·gc.alloc.rate:                   1688.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              46109.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36334.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.706 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 57031.628 ops/s
[info]                  ·gc.alloc.rate:                   1692.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              46698.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55039.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.574 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 57676.188 ops/s
[info]                  ·gc.alloc.rate:                   1685.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              46001.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36300.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.568 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   56993.766 ±(99.9%) 3930.451 ops/s [Average]
[info]   (min, avg, max) = (55224.870, 56993.766, 57676.188), stdev = 1020.726
[info]   CI (99.9%): [53063.315, 60924.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1680.731 ±(99.9%) 98.028 MB/sec [Average]
[info]   (min, avg, max) = (1636.417, 1680.731, 1701.152), stdev = 25.458
[info]   CI (99.9%): [1582.702, 1778.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   46414.343 ±(99.9%) 1273.657 B/op [Average]
[info]   (min, avg, max) = (46001.476, 46414.343, 46698.018), stdev = 330.765
[info]   CI (99.9%): [45140.686, 47688.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1596.911 ±(99.9%) 1404.421 MB/sec [Average]
[info]   (min, avg, max) = (1330.236, 1596.911, 1998.439), stdev = 364.724
[info]   CI (99.9%): [192.490, 3001.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   44077.505 ±(99.9%) 38165.319 B/op [Average]
[info]   (min, avg, max) = (36300.707, 44077.505, 55039.210), stdev = 9911.412
[info]   CI (99.9%): [5912.186, 82242.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.824 ±(99.9%) 6.874 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.824, 4.018), stdev = 1.785
[info]   CI (99.9%): [≈ 0, 7.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   22.596 ±(99.9%) 188.446 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.596, 110.134), stdev = 48.939
[info]   CI (99.9%): [≈ 0, 211.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.881
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10.39% complete, ETA 01:43:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75634.230 ops/s
[info] # Warmup Iteration   2: 366439.823 ops/s
[info] # Warmup Iteration   3: 412327.796 ops/s
[info] # Warmup Iteration   4: 411515.150 ops/s
[info] # Warmup Iteration   5: 409132.509 ops/s
[info] Iteration   1: 418739.098 ops/s
[info]                  ·gc.alloc.rate:                   2264.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              8510.226 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7518.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.599 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 416993.891 ops/s
[info]                  ·gc.alloc.rate:                   2259.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              8523.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2660.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10036.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.943 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 419071.918 ops/s
[info]                  ·gc.alloc.rate:                   2266.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              8510.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7494.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 418394.895 ops/s
[info]                  ·gc.alloc.rate:                   2262.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              8509.404 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7518.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 418312.013 ops/s
[info]                  ·gc.alloc.rate:               2289.317 MB/sec
[info]                  ·gc.alloc.rate.norm:          8612.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7542.856 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   418302.363 ±(99.9%) 3046.457 ops/s [Average]
[info]   (min, avg, max) = (416993.891, 418302.363, 419071.918), stdev = 791.155
[info]   CI (99.9%): [415255.906, 421348.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2268.277 ±(99.9%) 46.498 MB/sec [Average]
[info]   (min, avg, max) = (2259.177, 2268.277, 2289.317), stdev = 12.075
[info]   CI (99.9%): [2221.779, 2314.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8533.177 ±(99.9%) 172.813 B/op [Average]
[info]   (min, avg, max) = (8509.404, 8533.177, 8612.781), stdev = 44.879
[info]   CI (99.9%): [8360.365, 8705.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2132.070 ±(99.9%) 1137.200 MB/sec [Average]
[info]   (min, avg, max) = (1995.940, 2132.070, 2660.335), stdev = 295.327
[info]   CI (99.9%): [994.870, 3269.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8022.215 ±(99.9%) 4337.095 B/op [Average]
[info]   (min, avg, max) = (7494.028, 8022.215, 10036.819), stdev = 1126.330
[info]   CI (99.9%): [3685.120, 12359.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.250 ±(99.9%) 1.574 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.250, 0.958), stdev = 0.409
[info]   CI (99.9%): [≈ 0, 1.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.940 ±(99.9%) 5.915 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.940, 3.599), stdev = 1.536
[info]   CI (99.9%): [≈ 0, 6.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10.62% complete, ETA 01:43:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.816 ops/s
[info] # Warmup Iteration   2: 1559184.502 ops/s
[info] # Warmup Iteration   3: 1784754.399 ops/s
[info] # Warmup Iteration   4: 1890809.035 ops/s
[info] # Warmup Iteration   5: 1894825.569 ops/s
[info] Iteration   1: 1906959.928 ops/s
[info]                  ·gc.alloc.rate:                   623.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              514.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     548.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1888162.863 ops/s
[info]                  ·gc.alloc.rate:               612.081 MB/sec
[info]                  ·gc.alloc.rate.norm:          510.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 553.588 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1915754.806 ops/s
[info]                  ·gc.alloc.rate:      603.738 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1914113.615 ops/s
[info]                  ·gc.alloc.rate:                   618.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              508.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     546.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1914467.234 ops/s
[info]                  ·gc.alloc.rate:               622.696 MB/sec
[info]                  ·gc.alloc.rate.norm:          511.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 546.542 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1907891.689 ±(99.9%) 44485.918 ops/s [Average]
[info]   (min, avg, max) = (1888162.863, 1907891.689, 1915754.806), stdev = 11552.852
[info]   CI (99.9%): [1863405.771, 1952377.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   616.228 ±(99.9%) 32.087 MB/sec [Average]
[info]   (min, avg, max) = (603.738, 616.228, 623.659), stdev = 8.333
[info]   CI (99.9%): [584.140, 648.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   508.334 ±(99.9%) 27.834 B/op [Average]
[info]   (min, avg, max) = (496.000, 508.334, 514.732), stdev = 7.228
[info]   CI (99.9%): [480.500, 536.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   531.479 ±(99.9%) 1144.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.479, 664.944), stdev = 297.106
[info]   CI (99.9%): [≈ 0, 1675.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   438.873 ±(99.9%) 944.777 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 438.873, 553.588), stdev = 245.356
[info]   CI (99.9%): [≈ 0, 1383.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.85% complete, ETA 01:43:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80286.934 ops/s
[info] # Warmup Iteration   2: 819749.478 ops/s
[info] # Warmup Iteration   3: 966952.968 ops/s
[info] # Warmup Iteration   4: 835098.129 ops/s
[info] # Warmup Iteration   5: 831724.012 ops/s
[info] Iteration   1: 838900.151 ops/s
[info]                  ·gc.alloc.rate:      336.857 MB/sec
[info]                  ·gc.alloc.rate.norm: 632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 830543.810 ops/s
[info]                  ·gc.alloc.rate:               351.816 MB/sec
[info]                  ·gc.alloc.rate.norm:          666.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1255.455 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 839278.523 ops/s
[info]                  ·gc.alloc.rate:      337.044 MB/sec
[info]                  ·gc.alloc.rate.norm: 632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 834223.755 ops/s
[info]                  ·gc.alloc.rate:               364.905 MB/sec
[info]                  ·gc.alloc.rate.norm:          688.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1251.125 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 842395.538 ops/s
[info]                  ·gc.alloc.rate:      338.340 MB/sec
[info]                  ·gc.alloc.rate.norm: 632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   837068.355 ±(99.9%) 17987.149 ops/s [Average]
[info]   (min, avg, max) = (830543.810, 837068.355, 842395.538), stdev = 4671.205
[info]   CI (99.9%): [819081.207, 855055.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   345.792 ±(99.9%) 47.687 MB/sec [Average]
[info]   (min, avg, max) = (336.857, 345.792, 364.905), stdev = 12.384
[info]   CI (99.9%): [298.105, 393.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   650.217 ±(99.9%) 100.519 B/op [Average]
[info]   (min, avg, max) = (632.001, 650.217, 688.426), stdev = 26.104
[info]   CI (99.9%): [549.698, 750.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   265.142 ±(99.9%) 1398.017 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 265.142, 663.167), stdev = 363.060
[info]   CI (99.9%): [≈ 0, 1663.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   501.316 ±(99.9%) 2643.302 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 501.316, 1255.455), stdev = 686.457
[info]   CI (99.9%): [≈ 0, 3144.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 6.000), stdev = 3.033
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.09% complete, ETA 01:43:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 562882.589 ops/s
[info] # Warmup Iteration   2: 1939839.205 ops/s
[info] # Warmup Iteration   3: 2174897.499 ops/s
[info] # Warmup Iteration   4: 2098387.823 ops/s
[info] # Warmup Iteration   5: 2159935.800 ops/s
[info] Iteration   1: 2159265.693 ops/s
[info]                  ·gc.alloc.rate:               431.020 MB/sec
[info]                  ·gc.alloc.rate.norm:          314.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 372.910 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 2099915.035 ops/s
[info]                  ·gc.alloc.rate:      405.628 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2112378.220 ops/s
[info]                  ·gc.alloc.rate:               445.396 MB/sec
[info]                  ·gc.alloc.rate.norm:          331.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 497.797 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2164025.153 ops/s
[info]                  ·gc.alloc.rate:               442.957 MB/sec
[info]                  ·gc.alloc.rate.norm:          322.101 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 485.935 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2173010.385 ops/s
[info]                  ·gc.alloc.rate:      419.848 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.092 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   2141718.897 ±(99.9%) 127610.574 ops/s [Average]
[info]   (min, avg, max) = (2099915.035, 2141718.897, 2173010.385), stdev = 33140.061
[info]   CI (99.9%): [2014108.324, 2269329.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   428.970 ±(99.9%) 63.789 MB/sec [Average]
[info]   (min, avg, max) = (405.628, 428.970, 445.396), stdev = 16.566
[info]   CI (99.9%): [365.181, 492.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   315.231 ±(99.9%) 46.085 B/op [Average]
[info]   (min, avg, max) = (304.000, 315.231, 331.796), stdev = 11.968
[info]   CI (99.9%): [269.146, 361.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   369.623 ±(99.9%) 1322.401 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.623, 668.264), stdev = 343.423
[info]   CI (99.9%): [≈ 0, 1692.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   271.328 ±(99.9%) 972.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 271.328, 497.797), stdev = 252.439
[info]   CI (99.9%): [≈ 0, 1243.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 5.000), stdev = 2.302
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11.32% complete, ETA 01:42:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7114.180 ops/s
[info] # Warmup Iteration   2: 98353.717 ops/s
[info] # Warmup Iteration   3: 150260.391 ops/s
[info] # Warmup Iteration   4: 153754.526 ops/s
[info] # Warmup Iteration   5: 156288.406 ops/s
[info] Iteration   1: 156505.821 ops/s
[info]                  ·gc.alloc.rate:                   4100.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              41240.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4021.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40442.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.209 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 153776.665 ops/s
[info]                  ·gc.alloc.rate:                   4085.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              41808.622 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4039.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41337.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.213 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 153768.174 ops/s
[info]                  ·gc.alloc.rate:                   4085.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              41817.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4054.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41498.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.213 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 151704.692 ops/s
[info]                  ·gc.alloc.rate:                   4072.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              42253.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4063.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42156.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.252 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 169143.303 ops/s
[info]                  ·gc.alloc.rate:                   4372.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              40670.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4070.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37865.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.581 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   156979.731 ±(99.9%) 26994.142 ops/s [Average]
[info]   (min, avg, max) = (151704.692, 156979.731, 169143.303), stdev = 7010.293
[info]   CI (99.9%): [129985.589, 183973.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4143.371 ±(99.9%) 494.717 MB/sec [Average]
[info]   (min, avg, max) = (4072.825, 4143.371, 4372.507), stdev = 128.476
[info]   CI (99.9%): [3648.654, 4638.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   41557.914 ±(99.9%) 2360.310 B/op [Average]
[info]   (min, avg, max) = (40670.276, 41557.914, 42253.544), stdev = 612.965
[info]   CI (99.9%): [39197.604, 43918.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4049.896 ±(99.9%) 76.125 MB/sec [Average]
[info]   (min, avg, max) = (4021.598, 4049.896, 4070.918), stdev = 19.769
[info]   CI (99.9%): [3973.772, 4126.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   40660.092 ±(99.9%) 6460.617 B/op [Average]
[info]   (min, avg, max) = (37865.089, 40660.092, 42156.448), stdev = 1677.802
[info]   CI (99.9%): [34199.476, 47120.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.300 ±(99.9%) 2.313 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.300, 1.374), stdev = 0.601
[info]   CI (99.9%): [≈ 0, 2.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.094 ±(99.9%) 24.027 B/op [Average]
[info]   (min, avg, max) = (0.209, 3.094, 14.252), stdev = 6.240
[info]   CI (99.9%): [≈ 0, 27.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 10.000), stdev = 0.894
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 11.55% complete, ETA 01:42:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93034.372 ops/s
[info] # Warmup Iteration   2: 391058.225 ops/s
[info] # Warmup Iteration   3: 442139.564 ops/s
[info] # Warmup Iteration   4: 476619.584 ops/s
[info] # Warmup Iteration   5: 489386.649 ops/s
[info] Iteration   1: 484507.709 ops/s
[info]                  ·gc.alloc.rate:                   1600.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              5199.359 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6511.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 487338.199 ops/s
[info]                  ·gc.alloc.rate:                   1596.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              5156.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4317.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.471 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 477857.664 ops/s
[info]                  ·gc.alloc.rate:                   1552.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              5111.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4398.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.085 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 489848.644 ops/s
[info]                  ·gc.alloc.rate:                   1614.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              5188.606 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6418.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.334 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 493380.640 ops/s
[info]                  ·gc.alloc.rate:                   1612.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              5143.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4245.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   486586.571 ±(99.9%) 22607.653 ops/s [Average]
[info]   (min, avg, max) = (477857.664, 486586.571, 493380.640), stdev = 5871.136
[info]   CI (99.9%): [463978.919, 509194.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1595.421 ±(99.9%) 97.708 MB/sec [Average]
[info]   (min, avg, max) = (1552.132, 1595.421, 1614.966), stdev = 25.374
[info]   CI (99.9%): [1497.713, 1693.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5159.936 ±(99.9%) 135.955 B/op [Average]
[info]   (min, avg, max) = (5111.642, 5159.936, 5199.359), stdev = 35.307
[info]   CI (99.9%): [5023.981, 5295.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1601.241 ±(99.9%) 1405.690 MB/sec [Average]
[info]   (min, avg, max) = (1331.037, 1601.241, 2004.332), stdev = 365.053
[info]   CI (99.9%): [195.551, 3006.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5178.494 ±(99.9%) 4528.876 B/op [Average]
[info]   (min, avg, max) = (4245.875, 5178.494, 6511.107), stdev = 1176.135
[info]   CI (99.9%): [649.618, 9707.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.924 ±(99.9%) 5.852 MB/sec [Average]
[info]   (min, avg, max) = (0.008, 0.924, 3.553), stdev = 1.520
[info]   CI (99.9%): [≈ 0, 6.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.996 ±(99.9%) 18.896 B/op [Average]
[info]   (min, avg, max) = (0.025, 2.996, 11.471), stdev = 4.907
[info]   CI (99.9%): [≈ 0, 21.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 13.000), stdev = 4.450
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 11.78% complete, ETA 01:42:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.595 ops/s
[info] # Warmup Iteration   2: 2556987.879 ops/s
[info] # Warmup Iteration   3: 2554333.629 ops/s
[info] # Warmup Iteration   4: 2682324.554 ops/s
[info] # Warmup Iteration   5: 2721010.295 ops/s
[info] Iteration   1: 2668705.207 ops/s
[info]                  ·gc.alloc.rate:               1283.808 MB/sec
[info]                  ·gc.alloc.rate.norm:          757.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 784.169 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 2699700.707 ops/s
[info]                  ·gc.alloc.rate:                   1284.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              748.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     775.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2723492.969 ops/s
[info]                  ·gc.alloc.rate:               1314.038 MB/sec
[info]                  ·gc.alloc.rate.norm:          759.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 769.532 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 2726499.421 ops/s
[info]                  ·gc.alloc.rate:                   1275.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              736.330 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     384.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.861 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2691466.286 ops/s
[info]                  ·gc.alloc.rate:                   1286.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              752.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     778.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.110 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   2701972.918 ±(99.9%) 92072.971 ops/s [Average]
[info]   (min, avg, max) = (2668705.207, 2701972.918, 2726499.421), stdev = 23911.058
[info]   CI (99.9%): [2609899.947, 2794045.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1288.832 ±(99.9%) 56.515 MB/sec [Average]
[info]   (min, avg, max) = (1275.577, 1288.832, 1314.038), stdev = 14.677
[info]   CI (99.9%): [1232.316, 1345.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   750.731 ±(99.9%) 34.805 B/op [Average]
[info]   (min, avg, max) = (736.330, 750.731, 759.360), stdev = 9.039
[info]   CI (99.9%): [715.926, 785.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1197.868 ±(99.9%) 1144.557 MB/sec [Average]
[info]   (min, avg, max) = (666.154, 1197.868, 1331.641), stdev = 297.238
[info]   CI (99.9%): [53.310, 2342.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   698.459 ±(99.9%) 676.039 B/op [Average]
[info]   (min, avg, max) = (384.539, 698.459, 784.169), stdev = 175.565
[info]   CI (99.9%): [22.420, 1374.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   1.034 ±(99.9%) 8.449 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.034, 4.956), stdev = 2.194
[info]   CI (99.9%): [≈ 0, 9.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.597 ±(99.9%) 4.876 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.597, 2.861), stdev = 1.266
[info]   CI (99.9%): [≈ 0, 5.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 2.049
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.01% complete, ETA 01:42:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 433067.531 ops/s
[info] # Warmup Iteration   2: 1373345.476 ops/s
[info] # Warmup Iteration   3: 1149023.242 ops/s
[info] # Warmup Iteration   4: 1174125.527 ops/s
[info] # Warmup Iteration   5: 1179583.783 ops/s
[info] Iteration   1: 1178348.912 ops/s
[info]                  ·gc.alloc.rate:                   563.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              752.736 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     887.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1181168.066 ops/s
[info]                  ·gc.alloc.rate:               565.365 MB/sec
[info]                  ·gc.alloc.rate.norm:          753.325 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 886.281 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1182472.652 ops/s
[info]                  ·gc.alloc.rate:                   563.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              749.225 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     884.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1185836.769 ops/s
[info]                  ·gc.alloc.rate:      548.574 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1180545.185 ops/s
[info]                  ·gc.alloc.rate:               561.606 MB/sec
[info]                  ·gc.alloc.rate.norm:          748.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 887.600 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   1181674.317 ±(99.9%) 10642.154 ops/s [Average]
[info]   (min, avg, max) = (1178348.912, 1181674.317, 1185836.769), stdev = 2763.734
[info]   CI (99.9%): [1171032.163, 1192316.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   560.461 ±(99.9%) 26.100 MB/sec [Average]
[info]   (min, avg, max) = (548.574, 560.461, 565.365), stdev = 6.778
[info]   CI (99.9%): [534.361, 586.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   746.403 ±(99.9%) 40.388 B/op [Average]
[info]   (min, avg, max) = (728.000, 746.403, 753.325), stdev = 10.489
[info]   CI (99.9%): [706.015, 786.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   531.967 ±(99.9%) 1145.102 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.967, 665.773), stdev = 297.379
[info]   CI (99.9%): [≈ 0, 1677.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   709.062 ±(99.9%) 1526.317 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 709.062, 887.600), stdev = 396.380
[info]   CI (99.9%): [≈ 0, 2235.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.096 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.056), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.24% complete, ETA 01:41:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 994654.279 ops/s
[info] # Warmup Iteration   2: 2613485.194 ops/s
[info] # Warmup Iteration   3: 2892154.634 ops/s
[info] # Warmup Iteration   4: 3036516.163 ops/s
[info] # Warmup Iteration   5: 2941632.557 ops/s
[info] Iteration   1: 2936605.633 ops/s
[info]                  ·gc.alloc.rate:                   1395.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              747.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     717.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3031602.979 ops/s
[info]                  ·gc.alloc.rate:               1444.976 MB/sec
[info]                  ·gc.alloc.rate.norm:          750.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 695.455 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 3034811.458 ops/s
[info]                  ·gc.alloc.rate:                   1453.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              753.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     695.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.673 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 3036330.378 ops/s
[info]                  ·gc.alloc.rate:                   1431.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              742.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     694.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.378 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3032984.498 ops/s
[info]                  ·gc.alloc.rate:                   1467.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              761.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1040.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   3014466.989 ±(99.9%) 167744.457 ops/s [Average]
[info]   (min, avg, max) = (2936605.633, 3014466.989, 3036330.378), stdev = 43562.703
[info]   CI (99.9%): [2846722.533, 3182211.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1438.636 ±(99.9%) 105.673 MB/sec [Average]
[info]   (min, avg, max) = (1395.369, 1438.636, 1467.646), stdev = 27.443
[info]   CI (99.9%): [1332.964, 1544.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   751.078 ±(99.9%) 27.719 B/op [Average]
[info]   (min, avg, max) = (742.194, 751.078, 761.594), stdev = 7.199
[info]   CI (99.9%): [723.358, 778.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1472.691 ±(99.9%) 1145.995 MB/sec [Average]
[info]   (min, avg, max) = (1338.578, 1472.691, 2005.072), stdev = 297.611
[info]   CI (99.9%): [326.696, 2618.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   768.571 ±(99.9%) 586.494 B/op [Average]
[info]   (min, avg, max) = (694.223, 768.571, 1040.476), stdev = 152.311
[info]   CI (99.9%): [182.077, 1355.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.801 ±(99.9%) 5.355 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.801, 3.227), stdev = 1.391
[info]   CI (99.9%): [≈ 0, 6.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.415 ±(99.9%) 2.777 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.415, 1.673), stdev = 0.721
[info]   CI (99.9%): [≈ 0, 3.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 12.47% complete, ETA 01:41:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1864264.790 ops/s
[info] # Warmup Iteration   2: 3001757.825 ops/s
[info] # Warmup Iteration   3: 3206475.318 ops/s
[info] # Warmup Iteration   4: 3231485.674 ops/s
[info] # Warmup Iteration   5: 3229795.390 ops/s
[info] Iteration   1: 3233292.757 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3231167.208 ops/s
[info]                  ·gc.alloc.rate:      0.080 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.039 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3237010.662 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3234161.157 ops/s
[info]                  ·gc.alloc.rate:      0.847 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.412 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3227069.972 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   3232540.351 ±(99.9%) 14276.931 ops/s [Average]
[info]   (min, avg, max) = (3227069.972, 3232540.351, 3237010.662), stdev = 3707.674
[info]   CI (99.9%): [3218263.420, 3246817.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.186 ±(99.9%) 1.431 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.186, 0.847), stdev = 0.372
[info]   CI (99.9%): [≈ 0, 1.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.090 ±(99.9%) 0.696 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.090, 0.412), stdev = 0.181
[info]   CI (99.9%): [≈ 0, 0.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12.70% complete, ETA 01:41:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49402.007 ops/s
[info] # Warmup Iteration   2: 657014.981 ops/s
[info] # Warmup Iteration   3: 653515.870 ops/s
[info] # Warmup Iteration   4: 1003129.876 ops/s
[info] # Warmup Iteration   5: 1028114.970 ops/s
[info] Iteration   1: 1034009.771 ops/s
[info]                  ·gc.alloc.rate:               1097.508 MB/sec
[info]                  ·gc.alloc.rate.norm:          1670.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1007.876 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 1028770.309 ops/s
[info]                  ·gc.alloc.rate:               1107.790 MB/sec
[info]                  ·gc.alloc.rate.norm:          1694.757 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1324.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2025.960 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   3: 1024751.727 ops/s
[info]                  ·gc.alloc.rate:                   1099.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.323 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2033.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 1028211.882 ops/s
[info]                  ·gc.alloc.rate:                   1096.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              1678.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1014.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.249 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1034482.146 ops/s
[info]                  ·gc.alloc.rate:                   1116.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              1698.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2013.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.887 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   1030045.167 ±(99.9%) 15924.585 ops/s [Average]
[info]   (min, avg, max) = (1024751.727, 1030045.167, 1034482.146), stdev = 4135.564
[info]   CI (99.9%): [1014120.582, 1045969.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1103.546 ±(99.9%) 32.697 MB/sec [Average]
[info]   (min, avg, max) = (1096.616, 1103.546, 1116.507), stdev = 8.491
[info]   CI (99.9%): [1070.849, 1136.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1686.059 ±(99.9%) 45.180 B/op [Average]
[info]   (min, avg, max) = (1670.221, 1686.059, 1698.673), stdev = 11.733
[info]   CI (99.9%): [1640.879, 1731.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1059.339 ±(99.9%) 1395.227 MB/sec [Average]
[info]   (min, avg, max) = (662.278, 1059.339, 1324.295), stdev = 362.336
[info]   CI (99.9%): [≈ 0, 2454.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1618.993 ±(99.9%) 2137.571 B/op [Average]
[info]   (min, avg, max) = (1007.876, 1618.993, 2033.855), stdev = 555.120
[info]   CI (99.9%): [≈ 0, 3756.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.939 ±(99.9%) 6.834 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.939, 4.083), stdev = 1.775
[info]   CI (99.9%): [≈ 0, 7.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.437 ±(99.9%) 10.461 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.437, 6.249), stdev = 2.717
[info]   CI (99.9%): [≈ 0, 11.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 11.000), stdev = 3.240
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 12.93% complete, ETA 01:41:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16960.166 ops/s
[info] # Warmup Iteration   2: 151060.856 ops/s
[info] # Warmup Iteration   3: 236139.955 ops/s
[info] # Warmup Iteration   4: 225608.471 ops/s
[info] # Warmup Iteration   5: 220408.936 ops/s
[info] Iteration   1: 220070.925 ops/s
[info]                  ·gc.alloc.rate:                   2717.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              19434.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14306.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.786 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 216609.855 ops/s
[info]                  ·gc.alloc.rate:                   2676.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              19436.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19423.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.605 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 216257.192 ops/s
[info]                  ·gc.alloc.rate:               2665.879 MB/sec
[info]                  ·gc.alloc.rate.norm:          19401.681 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2681.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19518.718 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 217237.972 ops/s
[info]                  ·gc.alloc.rate:               2697.544 MB/sec
[info]                  ·gc.alloc.rate.norm:          19543.681 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2690.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19492.790 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 217069.741 ops/s
[info]                  ·gc.alloc.rate:                   2706.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              19626.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19571.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.151 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   217449.137 ±(99.9%) 5835.800 ops/s [Average]
[info]   (min, avg, max) = (216257.192, 217449.137, 220070.925), stdev = 1515.539
[info]   CI (99.9%): [211613.338, 223284.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2692.762 ±(99.9%) 82.256 MB/sec [Average]
[info]   (min, avg, max) = (2665.879, 2692.762, 2717.435), stdev = 21.362
[info]   CI (99.9%): [2610.506, 2775.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19488.554 ±(99.9%) 362.289 B/op [Average]
[info]   (min, avg, max) = (19401.681, 19488.554, 19626.895), stdev = 94.085
[info]   CI (99.9%): [19126.265, 19850.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2549.284 ±(99.9%) 1182.078 MB/sec [Average]
[info]   (min, avg, max) = (2000.385, 2549.284, 2699.075), stdev = 306.982
[info]   CI (99.9%): [1367.205, 3731.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   18462.530 ±(99.9%) 8949.485 B/op [Average]
[info]   (min, avg, max) = (14306.039, 18462.530, 19571.113), stdev = 2324.153
[info]   CI (99.9%): [9513.045, 27412.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.407 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.250), stdev = 0.106
[info]   CI (99.9%): [≈ 0, 0.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.508 ±(99.9%) 2.912 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.508, 1.786), stdev = 0.756
[info]   CI (99.9%): [≈ 0, 3.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.16% complete, ETA 01:40:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90652.162 ops/s
[info] # Warmup Iteration   2: 439685.907 ops/s
[info] # Warmup Iteration   3: 393820.299 ops/s
[info] # Warmup Iteration   4: 414869.181 ops/s
[info] # Warmup Iteration   5: 420162.763 ops/s
[info] Iteration   1: 419988.735 ops/s
[info]                  ·gc.alloc.rate:      286.067 MB/sec
[info]                  ·gc.alloc.rate.norm: 1072.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 420643.649 ops/s
[info]                  ·gc.alloc.rate:      286.504 MB/sec
[info]                  ·gc.alloc.rate.norm: 1072.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 421217.469 ops/s
[info]                  ·gc.alloc.rate:                   303.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              1133.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2465.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 432003.763 ops/s
[info]                  ·gc.alloc.rate:      294.252 MB/sec
[info]                  ·gc.alloc.rate.norm: 1072.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 429733.784 ops/s
[info]                  ·gc.alloc.rate:               305.203 MB/sec
[info]                  ·gc.alloc.rate.norm:          1117.850 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2416.535 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   424717.480 ±(99.9%) 21906.444 ops/s [Average]
[info]   (min, avg, max) = (419988.735, 424717.480, 432003.763), stdev = 5689.034
[info]   CI (99.9%): [402811.036, 446623.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   295.071 ±(99.9%) 34.765 MB/sec [Average]
[info]   (min, avg, max) = (286.067, 295.071, 305.203), stdev = 9.028
[info]   CI (99.9%): [260.307, 329.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1093.448 ±(99.9%) 115.046 B/op [Average]
[info]   (min, avg, max) = (1072.001, 1093.448, 1133.388), stdev = 29.877
[info]   CI (99.9%): [978.402, 1208.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   263.919 ±(99.9%) 1391.567 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 263.919, 659.815), stdev = 361.386
[info]   CI (99.9%): [≈ 0, 1655.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   976.383 ±(99.9%) 5148.613 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 976.383, 2465.378), stdev = 1337.078
[info]   CI (99.9%): [≈ 0, 6124.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.039), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 2.490
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.39% complete, ETA 01:40:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 729171.048 ops/s
[info] # Warmup Iteration   2: 1281513.323 ops/s
[info] # Warmup Iteration   3: 1310725.013 ops/s
[info] # Warmup Iteration   4: 1331010.663 ops/s
[info] # Warmup Iteration   5: 1309288.462 ops/s
[info] Iteration   1: 1328740.764 ops/s
[info]                  ·gc.alloc.rate:      256.660 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1290846.440 ops/s
[info]                  ·gc.alloc.rate:               260.877 MB/sec
[info]                  ·gc.alloc.rate.norm:          318.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 623.769 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1282652.011 ops/s
[info]                  ·gc.alloc.rate:      247.859 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1275935.357 ops/s
[info]                  ·gc.alloc.rate:               256.445 MB/sec
[info]                  ·gc.alloc.rate.norm:          316.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 631.026 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 1282531.273 ops/s
[info]                  ·gc.alloc.rate:      247.721 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1292141.169 ±(99.9%) 81371.433 ops/s [Average]
[info]   (min, avg, max) = (1275935.357, 1292141.169, 1328740.764), stdev = 21131.903
[info]   CI (99.9%): [1210769.736, 1373512.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   253.912 ±(99.9%) 22.572 MB/sec [Average]
[info]   (min, avg, max) = (247.721, 253.912, 260.877), stdev = 5.862
[info]   CI (99.9%): [231.341, 276.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   309.276 ±(99.9%) 27.921 B/op [Average]
[info]   (min, avg, max) = (304.000, 309.276, 318.070), stdev = 7.251
[info]   CI (99.9%): [281.355, 337.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.641 ±(99.9%) 1079.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.641, 511.607), stdev = 280.216
[info]   CI (99.9%): [≈ 0, 1283.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   250.959 ±(99.9%) 1323.272 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 250.959, 631.026), stdev = 343.649
[info]   CI (99.9%): [≈ 0, 1574.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 2.490
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13.63% complete, ETA 01:40:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3344.495 ops/s
[info] # Warmup Iteration   2: 93934.797 ops/s
[info] # Warmup Iteration   3: 120181.641 ops/s
[info] # Warmup Iteration   4: 120506.498 ops/s
[info] # Warmup Iteration   5: 118536.743 ops/s
[info] Iteration   1: 121876.173 ops/s
[info]                  ·gc.alloc.rate:                   3952.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              51036.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3352.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43291.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.806 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 122772.422 ops/s
[info]                  ·gc.alloc.rate:                   4036.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              51729.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4039.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51776.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.267 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 121659.206 ops/s
[info]                  ·gc.alloc.rate:                   4001.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              51762.851 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4054.379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52447.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.539 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 122130.215 ops/s
[info]                  ·gc.alloc.rate:               3991.080 MB/sec
[info]                  ·gc.alloc.rate.norm:          51418.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3388.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43660.621 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 123234.469 ops/s
[info]                  ·gc.alloc.rate:                   4052.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              51755.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4073.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52022.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.266 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   122334.497 ±(99.9%) 2517.345 ops/s [Average]
[info]   (min, avg, max) = (121659.206, 122334.497, 123234.469), stdev = 653.747
[info]   CI (99.9%): [119817.152, 124851.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4006.741 ±(99.9%) 151.944 MB/sec [Average]
[info]   (min, avg, max) = (3952.240, 4006.741, 4052.807), stdev = 39.459
[info]   CI (99.9%): [3854.797, 4158.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   51540.747 ±(99.9%) 1217.978 B/op [Average]
[info]   (min, avg, max) = (51036.678, 51540.747, 51762.851), stdev = 316.305
[info]   CI (99.9%): [50322.769, 52758.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3781.842 ±(99.9%) 1446.858 MB/sec [Average]
[info]   (min, avg, max) = (3352.478, 3781.842, 4073.693), stdev = 375.744
[info]   CI (99.9%): [2334.985, 5228.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   48639.723 ±(99.9%) 18181.027 B/op [Average]
[info]   (min, avg, max) = (43291.729, 48639.723, 52447.327), stdev = 4721.555
[info]   CI (99.9%): [30458.696, 66820.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.376 ±(99.9%) 1.182 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.376, 0.806), stdev = 0.307
[info]   CI (99.9%): [≈ 0, 1.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 9.000), stdev = 0.894
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13.86% complete, ETA 01:40:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75441.880 ops/s
[info] # Warmup Iteration   2: 338827.793 ops/s
[info] # Warmup Iteration   3: 347832.367 ops/s
[info] # Warmup Iteration   4: 356612.478 ops/s
[info] # Warmup Iteration   5: 355528.873 ops/s
[info] Iteration   1: 348243.332 ops/s
[info]                  ·gc.alloc.rate:                   1906.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              8615.172 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9042.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.280 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.346 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 356805.869 ops/s
[info]                  ·gc.alloc.rate:                   1940.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              8550.454 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8788.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.550 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 361173.973 ops/s
[info]                  ·gc.alloc.rate:                   1953.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              8510.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5793.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.181 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 357444.678 ops/s
[info]                  ·gc.alloc.rate:               1946.906 MB/sec
[info]                  ·gc.alloc.rate.norm:          8570.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1995.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8784.205 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 360981.693 ops/s
[info]                  ·gc.alloc.rate:               1965.183 MB/sec
[info]                  ·gc.alloc.rate.norm:          8567.867 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8714.294 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   356929.909 ±(99.9%) 20208.179 ops/s [Average]
[info]   (min, avg, max) = (348243.332, 356929.909, 361173.973), stdev = 5248.000
[info]   CI (99.9%): [336721.730, 377138.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1942.354 ±(99.9%) 85.399 MB/sec [Average]
[info]   (min, avg, max) = (1906.223, 1942.354, 1965.183), stdev = 22.178
[info]   CI (99.9%): [1856.955, 2027.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8563.080 ±(99.9%) 145.036 B/op [Average]
[info]   (min, avg, max) = (8510.957, 8563.080, 8615.172), stdev = 37.665
[info]   CI (99.9%): [8418.044, 8708.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1863.753 ±(99.9%) 1149.800 MB/sec [Average]
[info]   (min, avg, max) = (1329.623, 1863.753, 2000.743), stdev = 298.599
[info]   CI (99.9%): [713.954, 3013.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8224.605 ±(99.9%) 5254.139 B/op [Average]
[info]   (min, avg, max) = (5793.975, 8224.605, 9042.355), stdev = 1364.483
[info]   CI (99.9%): [2970.466, 13478.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.889 ±(99.9%) 7.302 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.889, 4.280), stdev = 1.896
[info]   CI (99.9%): [≈ 0, 8.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.015 ±(99.9%) 33.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.015, 19.346), stdev = 8.573
[info]   CI (99.9%): [≈ 0, 37.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 11.000), stdev = 3.271
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.09% complete, ETA 01:39:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 584889.419 ops/s
[info] # Warmup Iteration   2: 1956597.082 ops/s
[info] # Warmup Iteration   3: 2310835.673 ops/s
[info] # Warmup Iteration   4: 2271009.774 ops/s
[info] # Warmup Iteration   5: 2317543.094 ops/s
[info] Iteration   1: 2317554.723 ops/s
[info]                  ·gc.alloc.rate:                   646.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              439.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     449.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2317790.193 ops/s
[info]                  ·gc.alloc.rate:               637.895 MB/sec
[info]                  ·gc.alloc.rate.norm:          433.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 449.850 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 2318707.287 ops/s
[info]                  ·gc.alloc.rate:                   643.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              436.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     449.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2255333.697 ops/s
[info]                  ·gc.alloc.rate:               633.476 MB/sec
[info]                  ·gc.alloc.rate.norm:          442.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 463.248 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 2315765.321 ops/s
[info]                  ·gc.alloc.rate:                   646.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              439.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     451.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   2305030.244 ±(99.9%) 107054.291 ops/s [Average]
[info]   (min, avg, max) = (2255333.697, 2305030.244, 2318707.287), stdev = 27801.659
[info]   CI (99.9%): [2197975.953, 2412084.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   641.646 ±(99.9%) 22.261 MB/sec [Average]
[info]   (min, avg, max) = (633.476, 641.646, 646.677), stdev = 5.781
[info]   CI (99.9%): [619.385, 663.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   438.115 ±(99.9%) 12.991 B/op [Average]
[info]   (min, avg, max) = (433.043, 438.115, 442.078), stdev = 3.374
[info]   CI (99.9%): [425.124, 451.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   662.842 ±(99.9%) 3.850 MB/sec [Average]
[info]   (min, avg, max) = (661.433, 662.842, 663.811), stdev = 1.000
[info]   CI (99.9%): [658.992, 666.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   452.622 ±(99.9%) 23.044 B/op [Average]
[info]   (min, avg, max) = (449.176, 452.622, 463.248), stdev = 5.985
[info]   CI (99.9%): [429.578, 475.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.031), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.32% complete, ETA 01:39:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1663414.387 ops/s
[info] # Warmup Iteration   2: 2652822.116 ops/s
[info] # Warmup Iteration   3: 3387093.563 ops/s
[info] # Warmup Iteration   4: 3533550.179 ops/s
[info] # Warmup Iteration   5: 3430588.628 ops/s
[info] Iteration   1: 3433030.706 ops/s
[info]                  ·gc.alloc.rate:                   962.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              441.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     613.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3536438.108 ops/s
[info]                  ·gc.alloc.rate:               976.227 MB/sec
[info]                  ·gc.alloc.rate.norm:          434.382 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 297.942 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 3519326.789 ops/s
[info]                  ·gc.alloc.rate:                   981.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              438.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     598.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 3522689.515 ops/s
[info]                  ·gc.alloc.rate:               964.513 MB/sec
[info]                  ·gc.alloc.rate.norm:          430.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 299.252 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 3509471.722 ops/s
[info]                  ·gc.alloc.rate:               972.041 MB/sec
[info]                  ·gc.alloc.rate.norm:          435.927 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 300.532 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   3504191.368 ±(99.9%) 157627.753 ops/s [Average]
[info]   (min, avg, max) = (3433030.706, 3504191.368, 3536438.108), stdev = 40935.427
[info]   CI (99.9%): [3346563.616, 3661819.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   971.394 ±(99.9%) 30.291 MB/sec [Average]
[info]   (min, avg, max) = (962.728, 971.394, 981.459), stdev = 7.866
[info]   CI (99.9%): [941.103, 1001.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   436.293 ±(99.9%) 15.502 B/op [Average]
[info]   (min, avg, max) = (430.932, 436.293, 441.366), stdev = 4.026
[info]   CI (99.9%): [420.790, 451.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.306 ±(99.9%) 1410.288 MB/sec [Average]
[info]   (min, avg, max) = (669.594, 937.306, 1339.430), stdev = 366.247
[info]   CI (99.9%): [≈ 0, 2347.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   421.974 ±(99.9%) 647.432 B/op [Average]
[info]   (min, avg, max) = (297.942, 421.974, 613.223), stdev = 168.136
[info]   CI (99.9%): [≈ 0, 1069.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.018 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.055), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.024), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 14.55% complete, ETA 01:39:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1929271.713 ops/s
[info] # Warmup Iteration   2: 3384325.220 ops/s
[info] # Warmup Iteration   3: 3650021.989 ops/s
[info] # Warmup Iteration   4: 3649626.246 ops/s
[info] # Warmup Iteration   5: 3640305.891 ops/s
[info] Iteration   1: 3648561.770 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3659303.251 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3658870.085 ops/s
[info]                  ·gc.alloc.rate:      19.919 MB/sec
[info]                  ·gc.alloc.rate.norm: 8.568 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3646508.988 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3656214.679 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   3653891.755 ±(99.9%) 22973.377 ops/s [Average]
[info]   (min, avg, max) = (3646508.988, 3653891.755, 3659303.251), stdev = 5966.113
[info]   CI (99.9%): [3630918.378, 3676865.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   3.984 ±(99.9%) 34.300 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 3.984, 19.919), stdev = 8.908
[info]   CI (99.9%): [≈ 0, 38.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.714 ±(99.9%) 14.754 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.714, 8.568), stdev = 3.832
[info]   CI (99.9%): [≈ 0, 16.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 14.78% complete, ETA 01:38:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6855.260 ops/s
[info] # Warmup Iteration   2: 25433.954 ops/s
[info] # Warmup Iteration   3: 54287.413 ops/s
[info] # Warmup Iteration   4: 53115.252 ops/s
[info] # Warmup Iteration   5: 59691.527 ops/s
[info] Iteration   1: 59963.846 ops/s
[info]                  ·gc.alloc.rate:                   2136.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              56085.943 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52366.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101.084 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 58712.151 ops/s
[info]                  ·gc.alloc.rate:                   2082.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              55826.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53337.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.995 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 60672.935 ops/s
[info]                  ·gc.alloc.rate:                   2137.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              55449.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51546.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.780 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 60669.461 ops/s
[info]                  ·gc.alloc.rate:                   2135.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              55390.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51607.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.080 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 60676.673 ops/s
[info]                  ·gc.alloc.rate:               2148.069 MB/sec
[info]                  ·gc.alloc.rate.norm:          55716.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1992.717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51686.716 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   60139.013 ±(99.9%) 3291.199 ops/s [Average]
[info]   (min, avg, max) = (58712.151, 60139.013, 60676.673), stdev = 854.714
[info]   CI (99.9%): [56847.815, 63430.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2128.149 ±(99.9%) 99.818 MB/sec [Average]
[info]   (min, avg, max) = (2082.652, 2128.149, 2148.069), stdev = 25.922
[info]   CI (99.9%): [2028.331, 2227.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   55693.885 ±(99.9%) 1094.936 B/op [Average]
[info]   (min, avg, max) = (55390.635, 55693.885, 56085.943), stdev = 284.351
[info]   CI (99.9%): [54598.949, 56788.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1990.905 ±(99.9%) 11.738 MB/sec [Average]
[info]   (min, avg, max) = (1987.323, 1990.905, 1995.145), stdev = 3.048
[info]   CI (99.9%): [1979.167, 2002.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   52109.155 ±(99.9%) 2933.647 B/op [Average]
[info]   (min, avg, max) = (51546.649, 52109.155, 53337.702), stdev = 761.859
[info]   CI (99.9%): [49175.508, 55042.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.987 ±(99.9%) 6.324 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.987, 3.851), stdev = 1.642
[info]   CI (99.9%): [≈ 0, 7.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   25.988 ±(99.9%) 165.983 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25.988, 101.084), stdev = 43.105
[info]   CI (99.9%): [≈ 0, 191.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 12.000), stdev = 3.391
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.01% complete, ETA 01:38:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53550.659 ops/s
[info] # Warmup Iteration   2: 285535.901 ops/s
[info] # Warmup Iteration   3: 304670.858 ops/s
[info] # Warmup Iteration   4: 302523.741 ops/s
[info] # Warmup Iteration   5: 309204.084 ops/s
[info] Iteration   1: 314381.465 ops/s
[info]                  ·gc.alloc.rate:                   3348.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              16763.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3327.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16657.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.625 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 312009.575 ops/s
[info]                  ·gc.alloc.rate:                   3376.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              17030.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3338.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16839.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.105 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 314312.851 ops/s
[info]                  ·gc.alloc.rate:                   3402.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              17030.283 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3355.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16793.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 309671.988 ops/s
[info]                  ·gc.alloc.rate:                   3357.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              17059.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3368.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17117.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 314894.845 ops/s
[info]                  ·gc.alloc.rate:                   3404.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              17017.509 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3379.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16889.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   313054.145 ±(99.9%) 8450.476 ops/s [Average]
[info]   (min, avg, max) = (309671.988, 313054.145, 314894.845), stdev = 2194.562
[info]   CI (99.9%): [304603.669, 321504.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3377.864 ±(99.9%) 98.609 MB/sec [Average]
[info]   (min, avg, max) = (3348.477, 3377.864, 3404.737), stdev = 25.609
[info]   CI (99.9%): [3279.255, 3476.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16980.335 ±(99.9%) 470.864 B/op [Average]
[info]   (min, avg, max) = (16763.331, 16980.335, 17059.578), stdev = 122.282
[info]   CI (99.9%): [16509.471, 17451.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3353.781 ±(99.9%) 81.534 MB/sec [Average]
[info]   (min, avg, max) = (3327.413, 3353.781, 3379.132), stdev = 21.174
[info]   CI (99.9%): [3272.248, 3435.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   16859.709 ±(99.9%) 647.396 B/op [Average]
[info]   (min, avg, max) = (16657.880, 16859.709, 17117.895), stdev = 168.127
[info]   CI (99.9%): [16212.313, 17507.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.125), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.209 ±(99.9%) 0.896 B/op [Average]
[info]   (min, avg, max) = (0.104, 0.209, 0.625), stdev = 0.233
[info]   CI (99.9%): [≈ 0, 1.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.24% complete, ETA 01:38:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63492.865 ops/s
[info] # Warmup Iteration   2: 519190.599 ops/s
[info] # Warmup Iteration   3: 613292.846 ops/s
[info] # Warmup Iteration   4: 666867.702 ops/s
[info] # Warmup Iteration   5: 664613.139 ops/s
[info] Iteration   1: 690292.737 ops/s
[info]                  ·gc.alloc.rate:               1895.311 MB/sec
[info]                  ·gc.alloc.rate.norm:          4320.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4557.171 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 689358.270 ops/s
[info]                  ·gc.alloc.rate:                   1897.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              4332.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4576.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.676 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.826 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 690979.917 ops/s
[info]                  ·gc.alloc.rate:               1887.817 MB/sec
[info]                  ·gc.alloc.rate.norm:          4299.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3047.476 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 689261.066 ops/s
[info]                  ·gc.alloc.rate:                   1896.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              4330.210 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4585.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 686738.432 ops/s
[info]                  ·gc.alloc.rate:               1916.566 MB/sec
[info]                  ·gc.alloc.rate.norm:          4390.337 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4611.345 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   689326.084 ±(99.9%) 6200.251 ops/s [Average]
[info]   (min, avg, max) = (686738.432, 689326.084, 690979.917), stdev = 1610.185
[info]   CI (99.9%): [683125.834, 695526.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1898.748 ±(99.9%) 41.095 MB/sec [Average]
[info]   (min, avg, max) = (1887.817, 1898.748, 1916.566), stdev = 10.672
[info]   CI (99.9%): [1857.653, 1939.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4334.553 ±(99.9%) 130.030 B/op [Average]
[info]   (min, avg, max) = (4299.696, 4334.553, 4390.337), stdev = 33.768
[info]   CI (99.9%): [4204.523, 4464.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1872.583 ±(99.9%) 1150.849 MB/sec [Average]
[info]   (min, avg, max) = (1338.019, 1872.583, 2013.046), stdev = 298.872
[info]   CI (99.9%): [721.734, 3023.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4275.495 ±(99.9%) 2644.469 B/op [Average]
[info]   (min, avg, max) = (3047.476, 4275.495, 4611.345), stdev = 686.760
[info]   CI (99.9%): [1631.026, 6919.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.339 ±(99.9%) 2.877 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.339, 1.676), stdev = 0.747
[info]   CI (99.9%): [≈ 0, 3.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.775 ±(99.9%) 6.569 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.775, 3.826), stdev = 1.706
[info]   CI (99.9%): [≈ 0, 7.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.47% complete, ETA 01:38:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1114447.642 ops/s
[info] # Warmup Iteration   2: 2645491.120 ops/s
[info] # Warmup Iteration   3: 2931502.551 ops/s
[info] # Warmup Iteration   4: 2954178.652 ops/s
[info] # Warmup Iteration   5: 2944813.696 ops/s
[info] Iteration   1: 2948290.520 ops/s
[info]                  ·gc.alloc.rate:                   1063.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              567.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     714.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2958348.167 ops/s
[info]                  ·gc.alloc.rate:               1037.933 MB/sec
[info]                  ·gc.alloc.rate.norm:          552.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 356.167 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 2813180.551 ops/s
[info]                  ·gc.alloc.rate:                   1028.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              575.296 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     749.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 2912619.991 ops/s
[info]                  ·gc.alloc.rate:                   1032.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              557.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     362.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2834583.796 ops/s
[info]                  ·gc.alloc.rate:                   1007.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              559.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     744.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.752 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   2893404.605 ±(99.9%) 254660.840 ops/s [Average]
[info]   (min, avg, max) = (2813180.551, 2893404.605, 2958348.167), stdev = 66134.611
[info]   CI (99.9%): [2638743.765, 3148065.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1033.943 ±(99.9%) 76.789 MB/sec [Average]
[info]   (min, avg, max) = (1007.824, 1033.943, 1063.264), stdev = 19.942
[info]   CI (99.9%): [957.154, 1110.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   562.407 ±(99.9%) 34.886 B/op [Average]
[info]   (min, avg, max) = (552.097, 562.407, 575.296), stdev = 9.060
[info]   CI (99.9%): [527.521, 597.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1071.810 ±(99.9%) 1412.850 MB/sec [Average]
[info]   (min, avg, max) = (669.587, 1071.810, 1340.804), stdev = 366.913
[info]   CI (99.9%): [≈ 0, 2484.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   585.294 ±(99.9%) 796.707 B/op [Average]
[info]   (min, avg, max) = (356.167, 585.294, 749.464), stdev = 206.902
[info]   CI (99.9%): [≈ 0, 1382.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.638 ±(99.9%) 5.422 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.638, 3.157), stdev = 1.408
[info]   CI (99.9%): [≈ 0, 6.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.354 ±(99.9%) 3.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.354, 1.752), stdev = 0.782
[info]   CI (99.9%): [≈ 0, 3.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 1.871
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 15.70% complete, ETA 01:37:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2831.996 ops/s
[info] # Warmup Iteration   2: 100205.714 ops/s
[info] # Warmup Iteration   3: 124114.278 ops/s
[info] # Warmup Iteration   4: 131208.340 ops/s
[info] # Warmup Iteration   5: 131800.808 ops/s
[info] Iteration   1: 129317.634 ops/s
[info]                  ·gc.alloc.rate:                   4147.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              50476.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4004.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48737.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.797 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.037 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 128625.506 ops/s
[info]                  ·gc.alloc.rate:                   4195.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              51300.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4669.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57090.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.509 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 131962.809 ops/s
[info]                  ·gc.alloc.rate:                   4284.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              51104.275 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4025.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48010.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.248 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 131603.302 ops/s
[info]                  ·gc.alloc.rate:                   4275.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              51120.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4045.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48373.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.249 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 133218.714 ops/s
[info]                  ·gc.alloc.rate:                   4326.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              51104.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4059.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47950.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.738 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   130945.593 ±(99.9%) 7373.616 ops/s [Average]
[info]   (min, avg, max) = (128625.506, 130945.593, 133218.714), stdev = 1914.905
[info]   CI (99.9%): [123571.976, 138319.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4245.997 ±(99.9%) 279.701 MB/sec [Average]
[info]   (min, avg, max) = (4147.384, 4245.997, 4326.376), stdev = 72.637
[info]   CI (99.9%): [3966.297, 4525.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   51021.235 ±(99.9%) 1214.357 B/op [Average]
[info]   (min, avg, max) = (50476.876, 51021.235, 51300.279), stdev = 315.365
[info]   CI (99.9%): [49806.878, 52235.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4160.902 ±(99.9%) 1097.255 MB/sec [Average]
[info]   (min, avg, max) = (4004.502, 4160.902, 4669.285), stdev = 284.954
[info]   CI (99.9%): [3063.647, 5258.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   50032.537 ±(99.9%) 15241.591 B/op [Average]
[info]   (min, avg, max) = (47950.867, 50032.537, 57090.602), stdev = 3958.193
[info]   CI (99.9%): [34790.947, 65274.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.588 ±(99.9%) 4.754 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.588, 2.797), stdev = 1.234
[info]   CI (99.9%): [≈ 0, 5.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.156 ±(99.9%) 57.868 B/op [Average]
[info]   (min, avg, max) = (0.248, 7.156, 34.037), stdev = 15.028
[info]   CI (99.9%): [≈ 0, 65.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 11.000), stdev = 0.837
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.94% complete, ETA 01:37:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53867.111 ops/s
[info] # Warmup Iteration   2: 274976.669 ops/s
[info] # Warmup Iteration   3: 303358.899 ops/s
[info] # Warmup Iteration   4: 326736.491 ops/s
[info] # Warmup Iteration   5: 325846.140 ops/s
[info] Iteration   1: 327207.264 ops/s
[info]                  ·gc.alloc.rate:                   2577.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              12394.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12816.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.101 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 325998.965 ops/s
[info]                  ·gc.alloc.rate:                   2577.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              12441.292 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12873.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.799 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.683 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 329323.001 ops/s
[info]                  ·gc.alloc.rate:               2575.932 MB/sec
[info]                  ·gc.alloc.rate.norm:          12309.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9561.507 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 328021.635 ops/s
[info]                  ·gc.alloc.rate:                   2618.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              12565.438 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12819.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.200 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 329247.897 ops/s
[info]                  ·gc.alloc.rate:               2629.301 MB/sec
[info]                  ·gc.alloc.rate.norm:          12567.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2680.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12813.764 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   327959.752 ±(99.9%) 5422.617 ops/s [Average]
[info]   (min, avg, max) = (325998.965, 327959.752, 329323.001), stdev = 1408.236
[info]   CI (99.9%): [322537.135, 333382.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2595.968 ±(99.9%) 99.844 MB/sec [Average]
[info]   (min, avg, max) = (2575.932, 2595.968, 2629.301), stdev = 25.929
[info]   CI (99.9%): [2496.123, 2695.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12455.669 ±(99.9%) 429.594 B/op [Average]
[info]   (min, avg, max) = (12309.474, 12455.669, 12567.287), stdev = 111.564
[info]   CI (99.9%): [12026.075, 12885.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2537.330 ±(99.9%) 1154.971 MB/sec [Average]
[info]   (min, avg, max) = (2000.881, 2537.330, 2680.868), stdev = 299.942
[info]   CI (99.9%): [1382.360, 3692.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12177.048 ±(99.9%) 5630.951 B/op [Average]
[info]   (min, avg, max) = (9561.507, 12177.048, 12873.559), stdev = 1462.340
[info]   CI (99.9%): [6546.097, 17807.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.414 ±(99.9%) 3.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.414, 1.799), stdev = 0.780
[info]   CI (99.9%): [≈ 0, 3.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.997 ±(99.9%) 14.498 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.997, 8.683), stdev = 3.765
[info]   CI (99.9%): [≈ 0, 16.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 1.924
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.17% complete, ETA 01:37:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 526573.376 ops/s
[info] # Warmup Iteration   2: 1907021.492 ops/s
[info] # Warmup Iteration   3: 2050065.792 ops/s
[info] # Warmup Iteration   4: 2063920.332 ops/s
[info] # Warmup Iteration   5: 2065653.414 ops/s
[info] Iteration   1: 2056486.115 ops/s
[info]                  ·gc.alloc.rate:                   725.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              555.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     508.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2062971.029 ops/s
[info]                  ·gc.alloc.rate:               724.512 MB/sec
[info]                  ·gc.alloc.rate.norm:          552.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 507.450 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 2062604.819 ops/s
[info]                  ·gc.alloc.rate:                   718.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              548.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     507.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1998202.775 ops/s
[info]                  ·gc.alloc.rate:               704.764 MB/sec
[info]                  ·gc.alloc.rate.norm:          555.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 524.675 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2031761.593 ops/s
[info]                  ·gc.alloc.rate:               745.004 MB/sec
[info]                  ·gc.alloc.rate.norm:          577.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 516.023 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   2042405.266 ±(99.9%) 107134.970 ops/s [Average]
[info]   (min, avg, max) = (1998202.775, 2042405.266, 2062971.029), stdev = 27822.611
[info]   CI (99.9%): [1935270.296, 2149540.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   723.784 ±(99.9%) 55.894 MB/sec [Average]
[info]   (min, avg, max) = (704.764, 723.784, 745.004), stdev = 14.516
[info]   CI (99.9%): [667.890, 779.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   557.720 ±(99.9%) 43.051 B/op [Average]
[info]   (min, avg, max) = (548.370, 557.720, 577.077), stdev = 11.180
[info]   CI (99.9%): [514.669, 600.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   665.486 ±(99.9%) 2.738 MB/sec [Average]
[info]   (min, avg, max) = (664.574, 665.486, 666.234), stdev = 0.711
[info]   CI (99.9%): [662.748, 668.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   512.842 ±(99.9%) 28.944 B/op [Average]
[info]   (min, avg, max) = (507.450, 512.842, 524.675), stdev = 7.517
[info]   CI (99.9%): [483.898, 541.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.40% complete, ETA 01:37:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1354375.519 ops/s
[info] # Warmup Iteration   2: 2390177.720 ops/s
[info] # Warmup Iteration   3: 2817891.293 ops/s
[info] # Warmup Iteration   4: 2853061.774 ops/s
[info] # Warmup Iteration   5: 2843547.476 ops/s
[info] Iteration   1: 2846784.359 ops/s
[info]                  ·gc.alloc.rate:               989.269 MB/sec
[info]                  ·gc.alloc.rate.norm:          546.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 369.756 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 2827615.592 ops/s
[info]                  ·gc.alloc.rate:                   999.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              555.372 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     742.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2843154.034 ops/s
[info]                  ·gc.alloc.rate:               981.956 MB/sec
[info]                  ·gc.alloc.rate.norm:          543.562 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 370.791 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2714094.971 ops/s
[info]                  ·gc.alloc.rate:                   951.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              551.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     388.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2768112.483 ops/s
[info]                  ·gc.alloc.rate:               983.104 MB/sec
[info]                  ·gc.alloc.rate.norm:          558.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 762.053 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2799952.288 ±(99.9%) 221287.634 ops/s [Average]
[info]   (min, avg, max) = (2714094.971, 2799952.288, 2846784.359), stdev = 57467.696
[info]   CI (99.9%): [2578664.654, 3021239.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   981.045 ±(99.9%) 68.076 MB/sec [Average]
[info]   (min, avg, max) = (951.838, 981.045, 999.057), stdev = 17.679
[info]   CI (99.9%): [912.969, 1049.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   551.362 ±(99.9%) 23.971 B/op [Average]
[info]   (min, avg, max) = (543.562, 551.362, 558.985), stdev = 6.225
[info]   CI (99.9%): [527.390, 575.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   936.836 ±(99.9%) 1409.735 MB/sec [Average]
[info]   (min, avg, max) = (668.801, 936.836, 1340.246), stdev = 366.104
[info]   CI (99.9%): [≈ 0, 2346.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   526.680 ±(99.9%) 793.799 B/op [Average]
[info]   (min, avg, max) = (369.756, 526.680, 762.053), stdev = 206.147
[info]   CI (99.9%): [≈ 0, 1320.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.041 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.012), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 16.63% complete, ETA 01:36:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1558864.453 ops/s
[info] # Warmup Iteration   2: 2792495.665 ops/s
[info] # Warmup Iteration   3: 2952348.790 ops/s
[info] # Warmup Iteration   4: 2949740.385 ops/s
[info] # Warmup Iteration   5: 2952256.392 ops/s
[info] Iteration   1: 2953472.374 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2942755.240 ops/s
[info]                  ·gc.alloc.rate:      1.095 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.585 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2951672.715 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2943725.222 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2953615.830 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2949048.276 ±(99.9%) 20670.112 ops/s [Average]
[info]   (min, avg, max) = (2942755.240, 2949048.276, 2953615.830), stdev = 5367.963
[info]   CI (99.9%): [2928378.164, 2969718.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.219 ±(99.9%) 1.885 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.219, 1.095), stdev = 0.490
[info]   CI (99.9%): [≈ 0, 2.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.117 ±(99.9%) 1.008 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.117, 0.585), stdev = 0.262
[info]   CI (99.9%): [≈ 0, 1.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16.86% complete, ETA 01:36:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71624.691 ops/s
[info] # Warmup Iteration   2: 485877.078 ops/s
[info] # Warmup Iteration   3: 722101.909 ops/s
[info] # Warmup Iteration   4: 769852.906 ops/s
[info] # Warmup Iteration   5: 775987.204 ops/s
[info] Iteration   1: 776499.704 ops/s
[info]                  ·gc.alloc.rate:                   4741.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              9606.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4707.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9535.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 777644.653 ops/s
[info]                  ·gc.alloc.rate:                   4734.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              9581.324 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4055.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8207.831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 771932.991 ops/s
[info]                  ·gc.alloc.rate:                   4728.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              9640.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4746.367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9676.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.127 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 775251.524 ops/s
[info]                  ·gc.alloc.rate:                   4748.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              9640.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4756.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9655.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.085 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 774883.648 ops/s
[info]                  ·gc.alloc.rate:                   4721.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              9586.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4083.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8289.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.127 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   775242.504 ±(99.9%) 8266.025 ops/s [Average]
[info]   (min, avg, max) = (771932.991, 775242.504, 777644.653), stdev = 2146.660
[info]   CI (99.9%): [766976.479, 783508.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   4735.123 ±(99.9%) 40.913 MB/sec [Average]
[info]   (min, avg, max) = (4721.800, 4735.123, 4748.782), stdev = 10.625
[info]   CI (99.9%): [4694.210, 4776.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   9611.099 ±(99.9%) 110.009 B/op [Average]
[info]   (min, avg, max) = (9581.324, 9611.099, 9640.802), stdev = 28.569
[info]   CI (99.9%): [9501.090, 9721.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   4469.709 ±(99.9%) 1408.852 MB/sec [Average]
[info]   (min, avg, max) = (4055.973, 4469.709, 4756.038), stdev = 365.874
[info]   CI (99.9%): [3060.857, 5878.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9073.197 ±(99.9%) 2907.092 B/op [Average]
[info]   (min, avg, max) = (8207.831, 9073.197, 9676.932), stdev = 754.962
[info]   CI (99.9%): [6166.105, 11980.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.050, 0.062), stdev = 0.011
[info]   CI (99.9%): [0.006, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.101 ±(99.9%) 0.090 B/op [Average]
[info]   (min, avg, max) = (0.084, 0.101, 0.127), stdev = 0.023
[info]   CI (99.9%): [0.011, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 11.000), stdev = 0.837
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17.09% complete, ETA 01:36:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3025.622 ops/s
[info] # Warmup Iteration   2: 20985.520 ops/s
[info] # Warmup Iteration   3: 29159.162 ops/s
[info] # Warmup Iteration   4: 30339.181 ops/s
[info] # Warmup Iteration   5: 28855.773 ops/s
[info] Iteration   1: 29355.980 ops/s
[info]                  ·gc.alloc.rate:                   1843.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              98848.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71071.738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.865 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.388 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 28353.413 ops/s
[info]                  ·gc.alloc.rate:                   1717.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              95344.821 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110481.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 252.615 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 28316.541 ops/s
[info]                  ·gc.alloc.rate:                   1695.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              94211.972 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73642.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.314 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 28463.430 ops/s
[info]                  ·gc.alloc.rate:                   1710.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              94537.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109800.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.755 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 28664.650 ops/s
[info]                  ·gc.alloc.rate:                   1701.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              93433.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72745.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.429 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   28630.803 ±(99.9%) 1645.837 ops/s [Average]
[info]   (min, avg, max) = (28316.541, 28630.803, 29355.980), stdev = 427.419
[info]   CI (99.9%): [26984.966, 30276.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1733.638 ±(99.9%) 239.111 MB/sec [Average]
[info]   (min, avg, max) = (1695.035, 1733.638, 1843.664), stdev = 62.096
[info]   CI (99.9%): [1494.527, 1972.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   95275.135 ±(99.9%) 8131.976 B/op [Average]
[info]   (min, avg, max) = (93433.350, 95275.135, 98848.331), stdev = 2111.848
[info]   CI (99.9%): [87143.159, 103407.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1590.406 ±(99.9%) 1398.585 MB/sec [Average]
[info]   (min, avg, max) = (1324.938, 1590.406, 1990.381), stdev = 363.208
[info]   CI (99.9%): [191.821, 2988.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   87548.328 ±(99.9%) 79501.523 B/op [Average]
[info]   (min, avg, max) = (71071.738, 87548.328, 110481.508), stdev = 20646.293
[info]   CI (99.9%): [8046.805, 167049.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.125 ±(99.9%) 7.494 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.125, 4.551), stdev = 1.946
[info]   CI (99.9%): [≈ 0, 8.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   62.100 ±(99.9%) 416.219 B/op [Average]
[info]   (min, avg, max) = (2.314, 62.100, 252.615), stdev = 108.091
[info]   CI (99.9%): [≈ 0, 478.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 10.000), stdev = 3.082
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 17.32% complete, ETA 01:36:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.635 ops/s
[info] # Warmup Iteration   2: 77355.717 ops/s
[info] # Warmup Iteration   3: 99372.208 ops/s
[info] # Warmup Iteration   4: 93023.525 ops/s
[info] # Warmup Iteration   5: 99573.421 ops/s
[info] Iteration   1: 101676.647 ops/s
[info]                  ·gc.alloc.rate:                   895.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              13857.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10135.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.483 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 99944.707 ops/s
[info]                  ·gc.alloc.rate:                   898.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              14156.821 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20612.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.114 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 100293.853 ops/s
[info]                  ·gc.alloc.rate:               889.236 MB/sec
[info]                  ·gc.alloc.rate.norm:          13953.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:      654.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10275.545 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 97232.154 ops/s
[info]                  ·gc.alloc.rate:               1067.538 MB/sec
[info]                  ·gc.alloc.rate.norm:          17279.379 B/op
[info]                  ·gc.churn.PS_Eden_Space:      654.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10599.301 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 102969.817 ops/s
[info]                  ·gc.alloc.rate:                   936.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              14315.467 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20047.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.199 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   100423.436 ±(99.9%) 8277.730 ops/s [Average]
[info]   (min, avg, max) = (97232.154, 100423.436, 102969.817), stdev = 2149.700
[info]   CI (99.9%): [92145.705, 108701.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   937.523 ±(99.9%) 288.858 MB/sec [Average]
[info]   (min, avg, max) = (889.236, 937.523, 1067.538), stdev = 75.016
[info]   CI (99.9%): [648.665, 1226.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   14712.568 ±(99.9%) 5567.541 B/op [Average]
[info]   (min, avg, max) = (13857.190, 14712.568, 17279.379), stdev = 1445.873
[info]   CI (99.9%): [9145.027, 20280.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   917.014 ±(99.9%) 1382.460 MB/sec [Average]
[info]   (min, avg, max) = (654.812, 917.014, 1311.632), stdev = 359.020
[info]   CI (99.9%): [≈ 0, 2299.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   14334.153 ±(99.9%) 21100.634 B/op [Average]
[info]   (min, avg, max) = (10135.702, 14334.153, 20612.970), stdev = 5479.768
[info]   CI (99.9%): [≈ 0, 35434.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   1.447 ±(99.9%) 12.380 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.447, 7.199), stdev = 3.215
[info]   CI (99.9%): [≈ 0, 13.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   22.124 ±(99.9%) 189.214 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.124, 110.025), stdev = 49.138
[info]   CI (99.9%): [≈ 0, 211.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 9.000), stdev = 2.074
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.55% complete, ETA 01:35:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16389.880 ops/s
[info] # Warmup Iteration   2: 49556.456 ops/s
[info] # Warmup Iteration   3: 65267.968 ops/s
[info] # Warmup Iteration   4: 75331.708 ops/s
[info] # Warmup Iteration   5: 80971.913 ops/s
[info] Iteration   1: 79773.845 ops/s
[info]                  ·gc.alloc.rate:               1444.422 MB/sec
[info]                  ·gc.alloc.rate.norm:          28495.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26258.756 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     12.000 ms
[info] Iteration   2: 82480.613 ops/s
[info]                  ·gc.alloc.rate:                   1453.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              27739.467 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25345.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.992 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 74584.493 ops/s
[info]                  ·gc.alloc.rate:                   1388.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              29292.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28043.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.358 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91.931 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 78600.713 ops/s
[info]                  ·gc.alloc.rate:                   1214.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              24313.657 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26569.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.426 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.582 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 76551.585 ops/s
[info]                  ·gc.alloc.rate:                   1180.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              24265.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27198.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.280 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   78398.250 ±(99.9%) 11640.455 ops/s [Average]
[info]   (min, avg, max) = (74584.493, 78398.250, 82480.613), stdev = 3022.989
[info]   CI (99.9%): [66757.794, 90038.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1336.309 ±(99.9%) 500.051 MB/sec [Average]
[info]   (min, avg, max) = (1180.382, 1336.309, 1453.872), stdev = 129.862
[info]   CI (99.9%): [836.258, 1836.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   26821.221 ±(99.9%) 9146.473 B/op [Average]
[info]   (min, avg, max) = (24265.782, 26821.221, 29292.070), stdev = 2375.310
[info]   CI (99.9%): [17674.748, 35967.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1327.766 ±(99.9%) 11.744 MB/sec [Average]
[info]   (min, avg, max) = (1323.019, 1327.766, 1331.060), stdev = 3.050
[info]   CI (99.9%): [1316.022, 1339.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   26683.089 ±(99.9%) 3896.936 B/op [Average]
[info]   (min, avg, max) = (25345.607, 26683.089, 28043.181), stdev = 1012.022
[info]   CI (99.9%): [22786.153, 30580.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2.006 ±(99.9%) 7.212 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.006, 4.358), stdev = 1.873
[info]   CI (99.9%): [≈ 0, 9.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   40.557 ±(99.9%) 148.744 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.557, 91.931), stdev = 38.628
[info]   CI (99.9%): [≈ 0, 189.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.200, 12.000), stdev = 3.899
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.78% complete, ETA 01:35:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37711.392 ops/s
[info] # Warmup Iteration   2: 109406.952 ops/s
[info] # Warmup Iteration   3: 130567.406 ops/s
[info] # Warmup Iteration   4: 126314.436 ops/s
[info] # Warmup Iteration   5: 131627.567 ops/s
[info] Iteration   1: 146599.822 ops/s
[info]                  ·gc.alloc.rate:                   884.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              9497.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          626.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6722.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.822 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.292 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 144274.927 ops/s
[info]                  ·gc.alloc.rate:                   876.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              9564.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1256.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13702.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.410 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 142764.518 ops/s
[info]                  ·gc.alloc.rate:               865.788 MB/sec
[info]                  ·gc.alloc.rate.norm:          9543.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:      629.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6943.507 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 140309.910 ops/s
[info]                  ·gc.alloc.rate:                   847.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              9510.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:          634.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7117.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.556 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 145306.220 ops/s
[info]                  ·gc.alloc.rate:                   890.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              9644.849 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1271.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13777.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.118 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   143851.079 ±(99.9%) 9347.862 ops/s [Average]
[info]   (min, avg, max) = (140309.910, 143851.079, 146599.822), stdev = 2427.610
[info]   CI (99.9%): [134503.217, 153198.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   873.127 ±(99.9%) 64.944 MB/sec [Average]
[info]   (min, avg, max) = (847.852, 873.127, 890.391), stdev = 16.866
[info]   CI (99.9%): [808.182, 938.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9552.103 ±(99.9%) 224.655 B/op [Average]
[info]   (min, avg, max) = (9497.058, 9552.103, 9644.849), stdev = 58.342
[info]   CI (99.9%): [9327.448, 9776.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   883.775 ±(99.9%) 1337.222 MB/sec [Average]
[info]   (min, avg, max) = (626.209, 883.775, 1271.907), stdev = 347.272
[info]   CI (99.9%): [≈ 0, 2220.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9652.625 ±(99.9%) 14377.605 B/op [Average]
[info]   (min, avg, max) = (6722.741, 9652.625, 13777.496), stdev = 3733.818
[info]   CI (99.9%): [≈ 0, 24030.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.787 ±(99.9%) 4.685 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.787, 2.822), stdev = 1.217
[info]   CI (99.9%): [≈ 0, 5.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.475 ±(99.9%) 50.300 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.475, 30.292), stdev = 13.063
[info]   CI (99.9%): [≈ 0, 58.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 10.800, 15.000), stdev = 3.834
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 18.01% complete, ETA 01:35:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3458.377 ops/s
[info] # Warmup Iteration   2: 27324.937 ops/s
[info] # Warmup Iteration   3: 46908.216 ops/s
[info] # Warmup Iteration   4: 49933.564 ops/s
[info] # Warmup Iteration   5: 49712.115 ops/s
[info] Iteration   1: 49970.955 ops/s
[info]                  ·gc.alloc.rate:               2114.920 MB/sec
[info]                  ·gc.alloc.rate.norm:          66611.338 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1986.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62555.362 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 49924.064 ops/s
[info]                  ·gc.alloc.rate:                   2116.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              66704.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2655.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83709.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.313 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 50112.077 ops/s
[info]                  ·gc.alloc.rate:                   2112.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              66310.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62732.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.607 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.447 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 49340.693 ops/s
[info]                  ·gc.alloc.rate:                   2070.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              66030.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63795.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.656 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 49939.320 ops/s
[info]                  ·gc.alloc.rate:                   2095.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              66047.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63158.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.656 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   49857.422 ±(99.9%) 1148.590 ops/s [Average]
[info]   (min, avg, max) = (49340.693, 49857.422, 50112.077), stdev = 298.285
[info]   CI (99.9%): [48708.832, 51006.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2101.880 ±(99.9%) 74.167 MB/sec [Average]
[info]   (min, avg, max) = (2070.663, 2101.880, 2116.003), stdev = 19.261
[info]   CI (99.9%): [2027.713, 2176.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66340.751 ±(99.9%) 1199.814 B/op [Average]
[info]   (min, avg, max) = (66030.701, 66340.751, 66704.173), stdev = 311.588
[info]   CI (99.9%): [65140.937, 67540.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2128.870 ±(99.9%) 1133.812 MB/sec [Average]
[info]   (min, avg, max) = (1986.142, 2128.870, 2655.455), stdev = 294.447
[info]   CI (99.9%): [995.057, 3262.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67190.226 ±(99.9%) 35606.851 B/op [Average]
[info]   (min, avg, max) = (62555.362, 67190.226, 83709.672), stdev = 9246.986
[info]   CI (99.9%): [31583.375, 102797.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.351 ±(99.9%) 2.707 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.351, 1.607), stdev = 0.703
[info]   CI (99.9%): [≈ 0, 3.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11.014 ±(99.9%) 84.966 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.014, 50.447), stdev = 22.065
[info]   CI (99.9%): [≈ 0, 95.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.673
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18.24% complete, ETA 01:35:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10372.603 ops/s
[info] # Warmup Iteration   2: 27165.088 ops/s
[info] # Warmup Iteration   3: 37665.777 ops/s
[info] # Warmup Iteration   4: 40671.370 ops/s
[info] # Warmup Iteration   5: 41455.430 ops/s
[info] Iteration   1: 44943.466 ops/s
[info]                  ·gc.alloc.rate:                   882.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              30910.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23234.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.729 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 43039.289 ops/s
[info]                  ·gc.alloc.rate:               835.017 MB/sec
[info]                  ·gc.alloc.rate.norm:          30530.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24261.992 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 43690.927 ops/s
[info]                  ·gc.alloc.rate:                   718.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              25884.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23899.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.213 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 42123.307 ops/s
[info]                  ·gc.alloc.rate:                   912.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              34082.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49648.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.555 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 42608.758 ops/s
[info]                  ·gc.alloc.rate:                   689.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              25454.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24568.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.243 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   43281.149 ±(99.9%) 4210.437 ops/s [Average]
[info]   (min, avg, max) = (42123.307, 43281.149, 44943.466), stdev = 1093.437
[info]   CI (99.9%): [39070.712, 47491.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   807.629 ±(99.9%) 381.454 MB/sec [Average]
[info]   (min, avg, max) = (689.434, 807.629, 912.383), stdev = 99.062
[info]   CI (99.9%): [426.175, 1189.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   29372.464 ±(99.9%) 14070.069 B/op [Average]
[info]   (min, avg, max) = (25454.265, 29372.464, 34082.441), stdev = 3653.952
[info]   CI (99.9%): [15302.394, 43442.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   797.026 ±(99.9%) 1145.329 MB/sec [Average]
[info]   (min, avg, max) = (663.508, 797.026, 1329.097), stdev = 297.438
[info]   CI (99.9%): [≈ 0, 1942.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   29122.812 ±(99.9%) 44225.448 B/op [Average]
[info]   (min, avg, max) = (23234.815, 29122.812, 49648.956), stdev = 11485.208
[info]   CI (99.9%): [≈ 0, 73348.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.378 ±(99.9%) 1.910 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.378, 1.033), stdev = 0.496
[info]   CI (99.9%): [≈ 0, 2.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13.748 ±(99.9%) 69.361 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.748, 37.213), stdev = 18.013
[info]   CI (99.9%): [≈ 0, 83.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 12.000), stdev = 2.950
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.48% complete, ETA 01:34:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6874.799 ops/s
[info] # Warmup Iteration   2: 35692.981 ops/s
[info] # Warmup Iteration   3: 39359.420 ops/s
[info] # Warmup Iteration   4: 41121.633 ops/s
[info] # Warmup Iteration   5: 42650.562 ops/s
[info] Iteration   1: 44373.463 ops/s
[info]                  ·gc.alloc.rate:                   577.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              20483.622 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23591.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.862 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 43657.735 ops/s
[info]                  ·gc.alloc.rate:               582.654 MB/sec
[info]                  ·gc.alloc.rate.norm:          21003.103 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23990.093 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 45007.688 ops/s
[info]                  ·gc.alloc.rate:               570.514 MB/sec
[info]                  ·gc.alloc.rate.norm:          19949.328 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23269.080 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 43294.976 ops/s
[info]                  ·gc.alloc.rate:      554.262 MB/sec
[info]                  ·gc.alloc.rate.norm: 20141.369 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 43839.794 ops/s
[info]                  ·gc.alloc.rate:                   465.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              16729.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23891.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.715 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   44034.731 ±(99.9%) 2575.004 ops/s [Average]
[info]   (min, avg, max) = (43294.976, 44034.731, 45007.688), stdev = 668.720
[info]   CI (99.9%): [41459.727, 46609.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   550.185 ±(99.9%) 185.890 MB/sec [Average]
[info]   (min, avg, max) = (465.979, 550.185, 582.654), stdev = 48.275
[info]   CI (99.9%): [364.295, 736.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19661.290 ±(99.9%) 6497.298 B/op [Average]
[info]   (min, avg, max) = (16729.027, 19661.290, 21003.103), stdev = 1687.328
[info]   CI (99.9%): [13163.992, 26158.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   532.318 ±(99.9%) 1145.856 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.318, 665.517), stdev = 297.575
[info]   CI (99.9%): [≈ 0, 1678.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18948.402 ±(99.9%) 40802.277 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18948.402, 23990.093), stdev = 10596.222
[info]   CI (99.9%): [≈ 0, 59750.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.358 ±(99.9%) 2.539 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.358, 1.519), stdev = 0.659
[info]   CI (99.9%): [≈ 0, 2.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12.715 ±(99.9%) 90.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.715, 53.862), stdev = 23.383
[info]   CI (99.9%): [≈ 0, 102.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 5.000), stdev = 2.236
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.71% complete, ETA 01:34:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16528.411 ops/s
[info] # Warmup Iteration   2: 31401.037 ops/s
[info] # Warmup Iteration   3: 48513.438 ops/s
[info] # Warmup Iteration   4: 43640.195 ops/s
[info] # Warmup Iteration   5: 45899.168 ops/s
[info] Iteration   1: 46571.972 ops/s
[info]                  ·gc.alloc.rate:                   478.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              16172.326 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22488.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.703 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 46934.876 ops/s
[info]                  ·gc.alloc.rate:      471.901 MB/sec
[info]                  ·gc.alloc.rate.norm: 15824.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 46761.769 ops/s
[info]                  ·gc.alloc.rate:               482.966 MB/sec
[info]                  ·gc.alloc.rate.norm:          16248.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22374.524 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 46629.640 ops/s
[info]                  ·gc.alloc.rate:               493.284 MB/sec
[info]                  ·gc.alloc.rate.norm:          16649.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22439.293 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 45364.163 ops/s
[info]                  ·gc.alloc.rate:                   595.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              20672.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23088.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.993 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   46452.484 ±(99.9%) 2403.542 ops/s [Average]
[info]   (min, avg, max) = (45364.163, 46452.484, 46934.876), stdev = 624.192
[info]   CI (99.9%): [44048.942, 48856.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   504.537 ±(99.9%) 198.831 MB/sec [Average]
[info]   (min, avg, max) = (471.901, 504.537, 595.856), stdev = 51.636
[info]   CI (99.9%): [305.707, 703.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   17113.244 ±(99.9%) 7743.620 B/op [Average]
[info]   (min, avg, max) = (15824.009, 17113.244, 20672.117), stdev = 2010.994
[info]   CI (99.9%): [9369.624, 24856.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   532.203 ±(99.9%) 1145.608 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.203, 665.636), stdev = 297.511
[info]   CI (99.9%): [≈ 0, 1677.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   18078.127 ±(99.9%) 38930.113 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18078.127, 23088.039), stdev = 10110.027
[info]   CI (99.9%): [≈ 0, 57008.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.053 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.029), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.339 ±(99.9%) 1.832 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.339, 0.993), stdev = 0.476
[info]   CI (99.9%): [≈ 0, 2.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 5.000), stdev = 2.074
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 18.94% complete, ETA 01:34:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16076.458 ops/s
[info] # Warmup Iteration   2: 39093.261 ops/s
[info] # Warmup Iteration   3: 49208.022 ops/s
[info] # Warmup Iteration   4: 49945.904 ops/s
[info] # Warmup Iteration   5: 49125.137 ops/s
[info] Iteration   1: 47365.195 ops/s
[info]                  ·gc.alloc.rate:               616.098 MB/sec
[info]                  ·gc.alloc.rate.norm:          20467.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22179.670 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 49139.036 ops/s
[info]                  ·gc.alloc.rate:                   552.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              17694.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21356.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.155 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68.979 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 48450.020 ops/s
[info]                  ·gc.alloc.rate:               546.752 MB/sec
[info]                  ·gc.alloc.rate.norm:          17759.940 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21660.948 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 51147.534 ops/s
[info]                  ·gc.alloc.rate:      543.585 MB/sec
[info]                  ·gc.alloc.rate.norm: 16721.053 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 49600.265 ops/s
[info]                  ·gc.alloc.rate:               490.759 MB/sec
[info]                  ·gc.alloc.rate.norm:          15571.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21158.800 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   49140.410 ±(99.9%) 5400.534 ops/s [Average]
[info]   (min, avg, max) = (47365.195, 49140.410, 51147.534), stdev = 1402.501
[info]   CI (99.9%): [43739.876, 54540.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   549.976 ±(99.9%) 171.530 MB/sec [Average]
[info]   (min, avg, max) = (490.759, 549.976, 616.098), stdev = 44.546
[info]   CI (99.9%): [378.445, 721.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   17642.813 ±(99.9%) 6976.642 B/op [Average]
[info]   (min, avg, max) = (15571.990, 17642.813, 20467.058), stdev = 1811.812
[info]   CI (99.9%): [10666.171, 24619.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   533.682 ±(99.9%) 1148.792 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.682, 667.651), stdev = 298.338
[info]   CI (99.9%): [≈ 0, 1682.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   17271.165 ±(99.9%) 37207.047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17271.165, 22179.670), stdev = 9662.552
[info]   CI (99.9%): [≈ 0, 54478.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.431 ±(99.9%) 3.710 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.431, 2.155), stdev = 0.964
[info]   CI (99.9%): [≈ 0, 4.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   13.796 ±(99.9%) 118.786 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.796, 68.979), stdev = 30.848
[info]   CI (99.9%): [≈ 0, 132.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 6.000), stdev = 2.510
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19.17% complete, ETA 01:33:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3395.330 ops/s
[info] # Warmup Iteration   2: 9091.754 ops/s
[info] # Warmup Iteration   3: 16063.861 ops/s
[info] # Warmup Iteration   4: 18261.176 ops/s
[info] # Warmup Iteration   5: 17817.604 ops/s
[info] Iteration   1: 17880.717 ops/s
[info]                  ·gc.alloc.rate:                   1286.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              113202.218 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116391.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.832 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 17912.857 ops/s
[info]                  ·gc.alloc.rate:               1275.195 MB/sec
[info]                  ·gc.alloc.rate.norm:          112010.458 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58176.186 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 16675.335 ops/s
[info]                  ·gc.alloc.rate:               1514.878 MB/sec
[info]                  ·gc.alloc.rate.norm:          142951.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1988.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 187683.598 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     21.000 ms
[info] Iteration   4: 17069.718 ops/s
[info]                  ·gc.alloc.rate:                   1646.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              151789.717 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121483.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 328.217 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 17182.696 ops/s
[info]                  ·gc.alloc.rate:                   1452.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              132989.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120867.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.345 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.568 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   17344.265 ±(99.9%) 2073.659 ops/s [Average]
[info]   (min, avg, max) = (16675.335, 17344.265, 17912.857), stdev = 538.523
[info]   CI (99.9%): [15270.606, 19417.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   1434.957 ±(99.9%) 606.029 MB/sec [Average]
[info]   (min, avg, max) = (1275.195, 1434.957, 1646.372), stdev = 157.384
[info]   CI (99.9%): [828.928, 2040.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   130588.642 ±(99.9%) 68220.646 B/op [Average]
[info]   (min, avg, max) = (112010.458, 130588.642, 151789.717), stdev = 17716.685
[info]   CI (99.9%): [62367.996, 198809.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1322.215 ±(99.9%) 1806.094 MB/sec [Average]
[info]   (min, avg, max) = (662.313, 1322.215, 1988.912), stdev = 469.037
[info]   CI (99.9%): [≈ 0, 3128.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   120920.341 ±(99.9%) 176616.097 B/op [Average]
[info]   (min, avg, max) = (58176.186, 120920.341, 187683.598), stdev = 45866.639
[info]   CI (99.9%): [≈ 0, 297536.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.785 ±(99.9%) 6.000 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.785, 3.560), stdev = 1.558
[info]   CI (99.9%): [≈ 0, 6.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   72.323 ±(99.9%) 553.252 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 72.323, 328.217), stdev = 143.678
[info]   CI (99.9%): [≈ 0, 625.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   63.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 12.600, 21.000), stdev = 5.857
[info]   CI (99.9%): [63.000, 63.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.40% complete, ETA 01:33:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1790.352 ops/s
[info] # Warmup Iteration   2: 12011.268 ops/s
[info] # Warmup Iteration   3: 15776.675 ops/s
[info] # Warmup Iteration   4: 15707.311 ops/s
[info] # Warmup Iteration   5: 16411.335 ops/s
[info] Iteration   1: 15555.247 ops/s
[info]                  ·gc.alloc.rate:               1433.351 MB/sec
[info]                  ·gc.alloc.rate.norm:          145022.103 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1959.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 198217.124 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     28.000 ms
[info] Iteration   2: 16353.014 ops/s
[info]                  ·gc.alloc.rate:                   1022.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              98323.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62763.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.600 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 16186.122 ops/s
[info]                  ·gc.alloc.rate:               1440.069 MB/sec
[info]                  ·gc.alloc.rate.norm:          139958.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1267.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 123194.240 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     20.000 ms
[info] Iteration   4: 14822.726 ops/s
[info]                  ·gc.alloc.rate:                   1457.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              154664.341 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1838.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195144.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.482 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.129 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         62.000 ms
[info] Iteration   5: 16021.061 ops/s
[info]                  ·gc.alloc.rate:                   1225.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              120329.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1129.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110910.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      30.513 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2996.539 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         39.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   15787.634 ±(99.9%) 2372.124 ops/s [Average]
[info]   (min, avg, max) = (14822.726, 15787.634, 16353.014), stdev = 616.033
[info]   CI (99.9%): [13415.510, 18159.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1315.618 ±(99.9%) 729.896 MB/sec [Average]
[info]   (min, avg, max) = (1022.104, 1315.618, 1457.261), stdev = 189.552
[info]   CI (99.9%): [585.722, 2045.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   131659.590 ±(99.9%) 86453.822 B/op [Average]
[info]   (min, avg, max) = (98323.194, 131659.590, 154664.341), stdev = 22451.783
[info]   CI (99.9%): [45205.768, 218113.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1369.438 ±(99.9%) 2064.656 MB/sec [Average]
[info]   (min, avg, max) = (652.446, 1369.438, 1959.113), stdev = 536.185
[info]   CI (99.9%): [≈ 0, 3434.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   138045.923 ±(99.9%) 223745.685 B/op [Average]
[info]   (min, avg, max) = (62763.261, 138045.923, 198217.124), stdev = 58106.044
[info]   CI (99.9%): [≈ 0, 361791.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   6.200 ±(99.9%) 52.342 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 6.200, 30.513), stdev = 13.593
[info]   CI (99.9%): [≈ 0, 58.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   609.653 ±(99.9%) 5138.653 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 609.653, 2996.539), stdev = 1334.492
[info]   CI (99.9%): [≈ 0, 5748.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   159.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 31.800, 62.000), stdev = 19.955
[info]   CI (99.9%): [159.000, 159.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.63% complete, ETA 01:33:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77762.246 ops/s
[info] # Warmup Iteration   2: 129313.654 ops/s
[info] # Warmup Iteration   3: 151695.831 ops/s
[info] # Warmup Iteration   4: 152643.904 ops/s
[info] # Warmup Iteration   5: 153138.137 ops/s
[info] Iteration   1: 153042.115 ops/s
[info]                  ·gc.alloc.rate:               413.709 MB/sec
[info]                  ·gc.alloc.rate.norm:          4253.336 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5261.136 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 153809.198 ops/s
[info]                  ·gc.alloc.rate:               416.298 MB/sec
[info]                  ·gc.alloc.rate.norm:          4259.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6771.845 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 154209.388 ops/s
[info]                  ·gc.alloc.rate:      406.764 MB/sec
[info]                  ·gc.alloc.rate.norm: 4151.272 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 154000.909 ops/s
[info]                  ·gc.alloc.rate:               414.363 MB/sec
[info]                  ·gc.alloc.rate.norm:          4234.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6763.667 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 154527.160 ops/s
[info]                  ·gc.alloc.rate:               419.908 MB/sec
[info]                  ·gc.alloc.rate.norm:          4274.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6747.432 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   153917.754 ±(99.9%) 2145.562 ops/s [Average]
[info]   (min, avg, max) = (153042.115, 153917.754, 154527.160), stdev = 557.196
[info]   CI (99.9%): [151772.192, 156063.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   414.208 ±(99.9%) 18.522 MB/sec [Average]
[info]   (min, avg, max) = (406.764, 414.208, 419.908), stdev = 4.810
[info]   CI (99.9%): [395.687, 432.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4234.564 ±(99.9%) 187.935 B/op [Average]
[info]   (min, avg, max) = (4151.272, 4234.564, 4274.978), stdev = 48.806
[info]   CI (99.9%): [4046.629, 4422.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   499.662 ±(99.9%) 1104.430 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 499.662, 662.764), stdev = 286.817
[info]   CI (99.9%): [≈ 0, 1604.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5108.816 ±(99.9%) 11277.927 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5108.816, 6771.845), stdev = 2928.842
[info]   CI (99.9%): [≈ 0, 16386.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 5.000), stdev = 1.924
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 19.86% complete, ETA 01:33:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 778.464 ops/s
[info] # Warmup Iteration   2: 8154.504 ops/s
[info] # Warmup Iteration   3: 15086.091 ops/s
[info] # Warmup Iteration   4: 16761.690 ops/s
[info] # Warmup Iteration   5: 16783.613 ops/s
[info] Iteration   1: 15882.090 ops/s
[info]                  ·gc.alloc.rate:                   1697.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              168252.154 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1969.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195180.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.620 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 556.894 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 16611.412 ops/s
[info]                  ·gc.alloc.rate:                   1479.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              140177.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124555.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.510 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 15125.258 ops/s
[info]                  ·gc.alloc.rate:               1547.661 MB/sec
[info]                  ·gc.alloc.rate.norm:          160970.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1317.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 137067.626 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 15234.887 ops/s
[info]                  ·gc.alloc.rate:                   1530.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              158038.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136491.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113.583 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 15854.329 ops/s
[info]                  ·gc.alloc.rate:                   1414.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              140319.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131584.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 236.109 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   15741.595 ±(99.9%) 2298.849 ops/s [Average]
[info]   (min, avg, max) = (15125.258, 15741.595, 16611.412), stdev = 597.004
[info]   CI (99.9%): [13442.746, 18040.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1533.863 ±(99.9%) 405.790 MB/sec [Average]
[info]   (min, avg, max) = (1414.135, 1533.863, 1697.969), stdev = 105.382
[info]   CI (99.9%): [1128.073, 1939.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   153551.529 ±(99.9%) 48905.695 B/op [Average]
[info]   (min, avg, max) = (140177.519, 153551.529, 168252.154), stdev = 12700.654
[info]   CI (99.9%): [104645.834, 202457.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1449.948 ±(99.9%) 1118.983 MB/sec [Average]
[info]   (min, avg, max) = (1314.655, 1449.948, 1969.726), stdev = 290.596
[info]   CI (99.9%): [330.964, 2568.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   144975.843 ±(99.9%) 109783.394 B/op [Average]
[info]   (min, avg, max) = (124555.479, 144975.843, 195180.614), stdev = 28510.399
[info]   CI (99.9%): [35192.448, 254759.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.821 ±(99.9%) 9.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.821, 5.620), stdev = 2.339
[info]   CI (99.9%): [≈ 0, 10.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   181.419 ±(99.9%) 891.104 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 181.419, 556.894), stdev = 231.417
[info]   CI (99.9%): [≈ 0, 1072.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 9.000), stdev = 2.490
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20.09% complete, ETA 01:32:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16347.864 ops/s
[info] # Warmup Iteration   2: 59556.746 ops/s
[info] # Warmup Iteration   3: 66115.020 ops/s
[info] # Warmup Iteration   4: 68263.925 ops/s
[info] # Warmup Iteration   5: 69041.971 ops/s
[info] Iteration   1: 70788.353 ops/s
[info]                  ·gc.alloc.rate:               1648.761 MB/sec
[info]                  ·gc.alloc.rate.norm:          36655.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29637.276 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 70933.831 ops/s
[info]                  ·gc.alloc.rate:                   1660.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              36839.132 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44401.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.184 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92.842 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 71577.796 ops/s
[info]                  ·gc.alloc.rate:                   1650.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              36295.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29266.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.120 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 71425.771 ops/s
[info]                  ·gc.alloc.rate:                   1656.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              36506.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43932.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.752 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 71805.479 ops/s
[info]                  ·gc.alloc.rate:                   1650.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              36182.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29127.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.913 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   71306.246 ±(99.9%) 1660.880 ops/s [Average]
[info]   (min, avg, max) = (70788.353, 71306.246, 71805.479), stdev = 431.325
[info]   CI (99.9%): [69645.366, 72967.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1653.478 ±(99.9%) 18.882 MB/sec [Average]
[info]   (min, avg, max) = (1648.761, 1653.478, 1660.385), stdev = 4.904
[info]   CI (99.9%): [1634.596, 1672.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   36495.736 ±(99.9%) 1022.280 B/op [Average]
[info]   (min, avg, max) = (36182.647, 36495.736, 36839.132), stdev = 265.483
[info]   CI (99.9%): [35473.455, 37518.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1597.615 ±(99.9%) 1405.841 MB/sec [Average]
[info]   (min, avg, max) = (1328.911, 1597.615, 2001.225), stdev = 365.092
[info]   CI (99.9%): [191.774, 3003.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   35273.140 ±(99.9%) 31278.316 B/op [Average]
[info]   (min, avg, max) = (29127.922, 35273.140, 44401.374), stdev = 8122.879
[info]   CI (99.9%): [3994.824, 66551.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.908 ±(99.9%) 7.059 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.908, 4.184), stdev = 1.833
[info]   CI (99.9%): [≈ 0, 7.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   20.125 ±(99.9%) 156.649 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.125, 92.842), stdev = 40.681
[info]   CI (99.9%): [≈ 0, 176.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 11.000), stdev = 3.742
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.32% complete, ETA 01:32:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14450.734 ops/s
[info] # Warmup Iteration   2: 83945.892 ops/s
[info] # Warmup Iteration   3: 95320.603 ops/s
[info] # Warmup Iteration   4: 106331.782 ops/s
[info] # Warmup Iteration   5: 106211.183 ops/s
[info] Iteration   1: 105539.358 ops/s
[info]                  ·gc.alloc.rate:                   1405.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              20951.850 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19858.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.310 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 108443.621 ops/s
[info]                  ·gc.alloc.rate:               1455.159 MB/sec
[info]                  ·gc.alloc.rate.norm:          21108.958 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19341.087 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   3: 108475.683 ops/s
[info]                  ·gc.alloc.rate:                   1436.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              20837.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19349.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.284 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 109646.155 ops/s
[info]                  ·gc.alloc.rate:                   1463.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              20996.475 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28680.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.550 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 106653.760 ops/s
[info]                  ·gc.alloc.rate:                   1434.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              21160.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19600.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.614 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   107751.716 ±(99.9%) 6295.477 ops/s [Average]
[info]   (min, avg, max) = (105539.358, 107751.716, 109646.155), stdev = 1634.915
[info]   CI (99.9%): [101456.239, 114047.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1438.939 ±(99.9%) 86.256 MB/sec [Average]
[info]   (min, avg, max) = (1405.237, 1438.939, 1463.081), stdev = 22.401
[info]   CI (99.9%): [1352.682, 1525.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21011.036 ±(99.9%) 493.495 B/op [Average]
[info]   (min, avg, max) = (20837.544, 21011.036, 21160.354), stdev = 128.159
[info]   CI (99.9%): [20517.541, 21504.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1465.307 ±(99.9%) 1147.751 MB/sec [Average]
[info]   (min, avg, max) = (1328.624, 1465.307, 1998.493), stdev = 298.067
[info]   CI (99.9%): [317.556, 2613.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21365.861 ±(99.9%) 15765.726 B/op [Average]
[info]   (min, avg, max) = (19341.087, 21365.861, 28680.105), stdev = 4094.309
[info]   CI (99.9%): [5600.135, 37131.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.936 ±(99.9%) 6.208 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.936, 3.743), stdev = 1.612
[info]   CI (99.9%): [≈ 0, 7.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13.552 ±(99.9%) 90.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.552, 54.284), stdev = 23.380
[info]   CI (99.9%): [≈ 0, 103.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 10.000), stdev = 3.033
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.55% complete, ETA 01:32:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125461.495 ops/s
[info] # Warmup Iteration   2: 235901.602 ops/s
[info] # Warmup Iteration   3: 243273.340 ops/s
[info] # Warmup Iteration   4: 265073.034 ops/s
[info] # Warmup Iteration   5: 255477.987 ops/s
[info] Iteration   1: 269481.753 ops/s
[info]                  ·gc.alloc.rate:               445.744 MB/sec
[info]                  ·gc.alloc.rate.norm:          2602.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2987.972 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 273052.973 ops/s
[info]                  ·gc.alloc.rate:               450.212 MB/sec
[info]                  ·gc.alloc.rate.norm:          2594.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3851.008 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 273418.882 ops/s
[info]                  ·gc.alloc.rate:      433.686 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 270184.251 ops/s
[info]                  ·gc.alloc.rate:                   448.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              2615.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3892.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.223 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 274746.114 ops/s
[info]                  ·gc.alloc.rate:      435.837 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   272176.795 ±(99.9%) 8641.532 ops/s [Average]
[info]   (min, avg, max) = (269481.753, 272176.795, 274746.114), stdev = 2244.179
[info]   CI (99.9%): [263535.262, 280818.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   442.883 ±(99.9%) 29.374 MB/sec [Average]
[info]   (min, avg, max) = (433.686, 442.883, 450.212), stdev = 7.628
[info]   CI (99.9%): [413.509, 472.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2560.712 ±(99.9%) 229.281 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2560.712, 2615.155), stdev = 59.544
[info]   CI (99.9%): [2331.431, 2789.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   369.655 ±(99.9%) 1322.447 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.655, 668.324), stdev = 343.435
[info]   CI (99.9%): [≈ 0, 1692.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2146.198 ±(99.9%) 7671.180 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2146.198, 3892.008), stdev = 1992.181
[info]   CI (99.9%): [≈ 0, 9817.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.038), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.045 ±(99.9%) 0.385 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.045, 0.223), stdev = 0.100
[info]   CI (99.9%): [≈ 0, 0.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 5.000), stdev = 2.302
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 20.79% complete, ETA 01:32:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 131361.160 ops/s
[info] # Warmup Iteration   2: 257894.886 ops/s
[info] # Warmup Iteration   3: 285243.050 ops/s
[info] # Warmup Iteration   4: 285376.006 ops/s
[info] # Warmup Iteration   5: 284580.619 ops/s
[info] Iteration   1: 286237.403 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 286162.655 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 285462.327 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 286494.086 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 285775.155 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   286026.326 ±(99.9%) 1567.833 ops/s [Average]
[info]   (min, avg, max) = (285462.327, 286026.326, 286494.086), stdev = 407.161
[info]   CI (99.9%): [284458.493, 287594.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.02% complete, ETA 01:31:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10394.386 ops/s
[info] # Warmup Iteration   2: 61768.080 ops/s
[info] # Warmup Iteration   3: 84695.482 ops/s
[info] # Warmup Iteration   4: 86091.397 ops/s
[info] # Warmup Iteration   5: 83067.652 ops/s
[info] Iteration   1: 98721.979 ops/s
[info]                  ·gc.alloc.rate:                   1672.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              26648.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1784.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28440.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.924 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.720 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         38.000 ms
[info] Iteration   2: 99064.226 ops/s
[info]                  ·gc.alloc.rate:                   1702.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              27047.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1822.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28950.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.701 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         36.000 ms
[info] Iteration   3: 100960.494 ops/s
[info]                  ·gc.alloc.rate:                   1704.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              26567.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1228.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19154.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99.628 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   4: 98778.264 ops/s
[info]                  ·gc.alloc.rate:                   1687.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              26881.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1854.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29538.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.653 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.329 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         26.000 ms
[info] Iteration   5: 98426.166 ops/s
[info]                  ·gc.alloc.rate:                   1669.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              26698.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1859.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29728.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      8.971 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 143.453 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   99190.226 ±(99.9%) 3909.153 ops/s [Average]
[info]   (min, avg, max) = (98426.166, 99190.226, 100960.494), stdev = 1015.195
[info]   CI (99.9%): [95281.072, 103099.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1687.363 ±(99.9%) 63.257 MB/sec [Average]
[info]   (min, avg, max) = (1669.604, 1687.363, 1704.604), stdev = 16.428
[info]   CI (99.9%): [1624.105, 1750.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   26768.694 ±(99.9%) 746.353 B/op [Average]
[info]   (min, avg, max) = (26567.281, 26768.694, 27047.160), stdev = 193.825
[info]   CI (99.9%): [26022.341, 27515.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1709.939 ±(99.9%) 1041.587 MB/sec [Average]
[info]   (min, avg, max) = (1228.994, 1709.939, 1859.058), stdev = 270.497
[info]   CI (99.9%): [668.352, 2751.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   27162.426 ±(99.9%) 17347.670 B/op [Average]
[info]   (min, avg, max) = (19154.610, 27162.426, 29728.329), stdev = 4505.135
[info]   CI (99.9%): [9814.756, 44510.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   3.597 ±(99.9%) 14.943 MB/sec [Average]
[info]   (min, avg, max) = (0.044, 3.597, 8.971), stdev = 3.881
[info]   CI (99.9%): [≈ 0, 18.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   56.966 ±(99.9%) 237.285 B/op [Average]
[info]   (min, avg, max) = (0.701, 56.966, 143.453), stdev = 61.622
[info]   CI (99.9%): [≈ 0, 294.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   142.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (19.000, 28.400, 38.000), stdev = 8.264
[info]   CI (99.9%): [142.000, 142.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21.25% complete, ETA 01:31:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11241.946 ops/s
[info] # Warmup Iteration   2: 79576.814 ops/s
[info] # Warmup Iteration   3: 124236.077 ops/s
[info] # Warmup Iteration   4: 129890.734 ops/s
[info] # Warmup Iteration   5: 127866.962 ops/s
[info] Iteration   1: 134424.338 ops/s
[info]                  ·gc.alloc.rate:                   1670.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              19557.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15535.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.487 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 134140.808 ops/s
[info]                  ·gc.alloc.rate:                   1698.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              19918.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1985.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23285.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.488 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 130468.253 ops/s
[info]                  ·gc.alloc.rate:                   1638.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              19761.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15959.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.502 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 134451.293 ops/s
[info]                  ·gc.alloc.rate:                   1677.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              19631.271 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15485.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.487 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 133861.029 ops/s
[info]                  ·gc.alloc.rate:                   1679.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              19742.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23380.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.734 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   133469.144 ±(99.9%) 6525.412 ops/s [Average]
[info]   (min, avg, max) = (130468.253, 133469.144, 134451.293), stdev = 1694.629
[info]   CI (99.9%): [126943.732, 139994.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1672.798 ±(99.9%) 84.104 MB/sec [Average]
[info]   (min, avg, max) = (1638.261, 1672.798, 1698.172), stdev = 21.842
[info]   CI (99.9%): [1588.693, 1756.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19722.324 ±(99.9%) 529.371 B/op [Average]
[info]   (min, avg, max) = (19557.869, 19722.324, 19918.031), stdev = 137.476
[info]   CI (99.9%): [19192.953, 20251.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1589.484 ±(99.9%) 1397.176 MB/sec [Average]
[info]   (min, avg, max) = (1323.064, 1589.484, 1988.668), stdev = 362.842
[info]   CI (99.9%): [192.308, 2986.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   18729.299 ±(99.9%) 16197.745 B/op [Average]
[info]   (min, avg, max) = (15485.711, 18729.299, 23380.437), stdev = 4206.503
[info]   CI (99.9%): [2531.554, 34927.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.046, 0.062), stdev = 0.009
[info]   CI (99.9%): [0.010, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.540 ±(99.9%) 0.419 B/op [Average]
[info]   (min, avg, max) = (0.487, 0.540, 0.734), stdev = 0.109
[info]   CI (99.9%): [0.121, 0.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.48% complete, ETA 01:31:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24957.311 ops/s
[info] # Warmup Iteration   2: 86904.992 ops/s
[info] # Warmup Iteration   3: 141801.629 ops/s
[info] # Warmup Iteration   4: 138016.810 ops/s
[info] # Warmup Iteration   5: 138307.034 ops/s
[info] Iteration   1: 138309.298 ops/s
[info]                  ·gc.alloc.rate:               837.021 MB/sec
[info]                  ·gc.alloc.rate.norm:          9524.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1326.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15099.531 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 137434.734 ops/s
[info]                  ·gc.alloc.rate:                   816.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              9351.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7598.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.477 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 141875.332 ops/s
[info]                  ·gc.alloc.rate:               845.858 MB/sec
[info]                  ·gc.alloc.rate.norm:          9383.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7360.295 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 143521.345 ops/s
[info]                  ·gc.alloc.rate:                   856.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              9393.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7275.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.228 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 143889.986 ops/s
[info]                  ·gc.alloc.rate:                   872.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              9538.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14536.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.228 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   141006.139 ±(99.9%) 11459.502 ops/s [Average]
[info]   (min, avg, max) = (137434.734, 141006.139, 143889.986), stdev = 2975.996
[info]   CI (99.9%): [129546.637, 152465.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   845.709 ±(99.9%) 79.917 MB/sec [Average]
[info]   (min, avg, max) = (816.865, 845.709, 872.040), stdev = 20.754
[info]   CI (99.9%): [765.792, 925.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9438.134 ±(99.9%) 333.872 B/op [Average]
[info]   (min, avg, max) = (9351.108, 9438.134, 9538.108), stdev = 86.705
[info]   CI (99.9%): [9104.262, 9772.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   929.352 ±(99.9%) 1401.169 MB/sec [Average]
[info]   (min, avg, max) = (663.506, 929.352, 1328.993), stdev = 363.879
[info]   CI (99.9%): [≈ 0, 2330.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10373.971 ±(99.9%) 15646.237 B/op [Average]
[info]   (min, avg, max) = (7275.741, 10373.971, 15099.531), stdev = 4063.278
[info]   CI (99.9%): [≈ 0, 26020.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.187 ±(99.9%) 0.764 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.187, 0.477), stdev = 0.198
[info]   CI (99.9%): [≈ 0, 0.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.71% complete, ETA 01:31:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80356.480 ops/s
[info] # Warmup Iteration   2: 203964.543 ops/s
[info] # Warmup Iteration   3: 219288.440 ops/s
[info] # Warmup Iteration   4: 228120.114 ops/s
[info] # Warmup Iteration   5: 225516.448 ops/s
[info] Iteration   1: 217384.046 ops/s
[info]                  ·gc.alloc.rate:                   162.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              1176.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3703.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.151 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 217135.279 ops/s
[info]                  ·gc.alloc.rate:      141.316 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 217061.589 ops/s
[info]                  ·gc.alloc.rate:      141.235 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 218062.001 ops/s
[info]                  ·gc.alloc.rate:               155.005 MB/sec
[info]                  ·gc.alloc.rate.norm:          1118.772 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3692.457 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 228377.366 ops/s
[info]                  ·gc.alloc.rate:      148.588 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   219604.056 ±(99.9%) 18946.218 ops/s [Average]
[info]   (min, avg, max) = (217061.589, 219604.056, 228377.366), stdev = 4920.273
[info]   CI (99.9%): [200657.838, 238550.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   149.741 ±(99.9%) 35.332 MB/sec [Average]
[info]   (min, avg, max) = (141.235, 149.741, 162.563), stdev = 9.176
[info]   CI (99.9%): [114.409, 185.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1073.537 ±(99.9%) 272.914 B/op [Average]
[info]   (min, avg, max) = (1024.002, 1073.537, 1176.908), stdev = 70.875
[info]   CI (99.9%): [800.624, 1346.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.638 ±(99.9%) 1078.999 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.638, 511.604), stdev = 280.213
[info]   CI (99.9%): [≈ 0, 1283.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1479.265 ±(99.9%) 7799.754 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1479.265, 3703.869), stdev = 2025.571
[info]   CI (99.9%): [≈ 0, 9279.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.030 ±(99.9%) 0.260 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.151), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 2.191
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.94% complete, ETA 01:30:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1537.421 ops/s
[info] # Warmup Iteration   2: 48813.304 ops/s
[info] # Warmup Iteration   3: 83997.977 ops/s
[info] # Warmup Iteration   4: 83777.291 ops/s
[info] # Warmup Iteration   5: 84897.496 ops/s
[info] Iteration   1: 84771.783 ops/s
[info]                  ·gc.alloc.rate:                   2664.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              49425.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49537.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.101 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 84762.328 ops/s
[info]                  ·gc.alloc.rate:                   2635.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              48927.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37228.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.092 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 84812.015 ops/s
[info]                  ·gc.alloc.rate:                   2662.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              49407.966 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49707.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.159 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 85043.288 ops/s
[info]                  ·gc.alloc.rate:                   2677.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              49548.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49706.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.385 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 85404.921 ops/s
[info]                  ·gc.alloc.rate:                   2709.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              49938.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2693.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49644.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.384 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   84958.867 ±(99.9%) 1056.798 ops/s [Average]
[info]   (min, avg, max) = (84762.328, 84958.867, 85404.921), stdev = 274.447
[info]   CI (99.9%): [83902.069, 86015.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2669.965 ±(99.9%) 104.691 MB/sec [Average]
[info]   (min, avg, max) = (2635.116, 2669.965, 2709.900), stdev = 27.188
[info]   CI (99.9%): [2565.274, 2774.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   49449.294 ±(99.9%) 1393.214 B/op [Average]
[info]   (min, avg, max) = (48927.213, 49449.294, 49938.187), stdev = 361.813
[info]   CI (99.9%): [48056.080, 50842.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2546.924 ±(99.9%) 1166.895 MB/sec [Average]
[info]   (min, avg, max) = (2005.060, 2546.924, 2693.967), stdev = 303.039
[info]   CI (99.9%): [1380.029, 3713.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   47165.029 ±(99.9%) 21390.309 B/op [Average]
[info]   (min, avg, max) = (37228.721, 47165.029, 49707.321), stdev = 5554.995
[info]   CI (99.9%): [25774.720, 68555.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.141 ±(99.9%) 0.676 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.141, 0.437), stdev = 0.175
[info]   CI (99.9%): [≈ 0, 0.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.624 ±(99.9%) 12.536 B/op [Average]
[info]   (min, avg, max) = (0.384, 2.624, 8.101), stdev = 3.256
[info]   CI (99.9%): [≈ 0, 15.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 22.17% complete, ETA 01:30:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57459.351 ops/s
[info] # Warmup Iteration   2: 218039.506 ops/s
[info] # Warmup Iteration   3: 229517.850 ops/s
[info] # Warmup Iteration   4: 235588.492 ops/s
[info] # Warmup Iteration   5: 232374.974 ops/s
[info] Iteration   1: 231220.311 ops/s
[info]                  ·gc.alloc.rate:                   1521.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              10355.634 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13611.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.425 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 231700.882 ops/s
[info]                  ·gc.alloc.rate:                   1496.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              10163.228 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9058.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.289 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.342 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 234731.766 ops/s
[info]                  ·gc.alloc.rate:                   1512.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              10142.145 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8932.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.839 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 234062.700 ops/s
[info]                  ·gc.alloc.rate:               1506.590 MB/sec
[info]                  ·gc.alloc.rate.norm:          10130.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8945.228 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 233259.766 ops/s
[info]                  ·gc.alloc.rate:                   1527.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              10304.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13456.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.667 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.249 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   232995.085 ±(99.9%) 5792.213 ops/s [Average]
[info]   (min, avg, max) = (231220.311, 232995.085, 234731.766), stdev = 1504.219
[info]   CI (99.9%): [227202.872, 238787.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1512.919 ±(99.9%) 47.424 MB/sec [Average]
[info]   (min, avg, max) = (1496.244, 1512.919, 1527.538), stdev = 12.316
[info]   CI (99.9%): [1465.495, 1560.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10219.229 ±(99.9%) 398.486 B/op [Average]
[info]   (min, avg, max) = (10130.542, 10219.229, 10355.634), stdev = 103.486
[info]   CI (99.9%): [9820.743, 10617.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1598.202 ±(99.9%) 1403.231 MB/sec [Average]
[info]   (min, avg, max) = (1330.313, 1598.202, 2000.022), stdev = 364.415
[info]   CI (99.9%): [194.971, 3001.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10801.009 ±(99.9%) 9611.644 B/op [Average]
[info]   (min, avg, max) = (8932.642, 10801.009, 13611.923), stdev = 2496.114
[info]   CI (99.9%): [1189.365, 20412.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.208 ±(99.9%) 5.219 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.208, 3.289), stdev = 1.355
[info]   CI (99.9%): [≈ 0, 6.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.171 ±(99.9%) 35.439 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.171, 22.342), stdev = 9.204
[info]   CI (99.9%): [≈ 0, 43.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 14.000), stdev = 4.393
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.40% complete, ETA 01:30:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125187.671 ops/s
[info] # Warmup Iteration   2: 608438.167 ops/s
[info] # Warmup Iteration   3: 748093.358 ops/s
[info] # Warmup Iteration   4: 772105.748 ops/s
[info] # Warmup Iteration   5: 771368.714 ops/s
[info] Iteration   1: 774514.027 ops/s
[info]                  ·gc.alloc.rate:               614.180 MB/sec
[info]                  ·gc.alloc.rate.norm:          1247.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1342.109 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 774071.718 ops/s
[info]                  ·gc.alloc.rate:               611.980 MB/sec
[info]                  ·gc.alloc.rate.norm:          1244.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1344.941 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 775403.486 ops/s
[info]                  ·gc.alloc.rate:      607.894 MB/sec
[info]                  ·gc.alloc.rate.norm: 1233.858 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 773983.675 ops/s
[info]                  ·gc.alloc.rate:                   604.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              1229.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1345.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 774751.515 ops/s
[info]                  ·gc.alloc.rate:               609.844 MB/sec
[info]                  ·gc.alloc.rate.norm:          1238.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1347.125 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   774544.884 ±(99.9%) 2211.765 ops/s [Average]
[info]   (min, avg, max) = (773983.675, 774544.884, 775403.486), stdev = 574.388
[info]   CI (99.9%): [772333.119, 776756.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   609.683 ±(99.9%) 14.335 MB/sec [Average]
[info]   (min, avg, max) = (604.515, 609.683, 614.180), stdev = 3.723
[info]   CI (99.9%): [595.348, 624.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1238.754 ±(99.9%) 28.591 B/op [Average]
[info]   (min, avg, max) = (1229.332, 1238.754, 1247.531), stdev = 7.425
[info]   CI (99.9%): [1210.162, 1267.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   529.372 ±(99.9%) 1139.518 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 529.372, 663.198), stdev = 295.929
[info]   CI (99.9%): [≈ 0, 1668.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1075.854 ±(99.9%) 2315.866 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1075.854, 1347.125), stdev = 601.423
[info]   CI (99.9%): [≈ 0, 3391.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.073 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.63% complete, ETA 01:29:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 409721.237 ops/s
[info] # Warmup Iteration   2: 674536.155 ops/s
[info] # Warmup Iteration   3: 690790.807 ops/s
[info] # Warmup Iteration   4: 694010.962 ops/s
[info] # Warmup Iteration   5: 676757.088 ops/s
[info] Iteration   1: 678515.507 ops/s
[info]                  ·gc.alloc.rate:               542.227 MB/sec
[info]                  ·gc.alloc.rate.norm:          1257.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1550.588 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 696518.927 ops/s
[info]                  ·gc.alloc.rate:                   552.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              1249.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1510.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 687582.610 ops/s
[info]                  ·gc.alloc.rate:      527.978 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.285 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 697192.742 ops/s
[info]                  ·gc.alloc.rate:                   554.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              1251.162 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1509.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 697167.207 ops/s
[info]                  ·gc.alloc.rate:               556.162 MB/sec
[info]                  ·gc.alloc.rate.norm:          1255.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1509.859 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   691395.399 ±(99.9%) 31846.622 ops/s [Average]
[info]   (min, avg, max) = (678515.507, 691395.399, 697192.742), stdev = 8270.467
[info]   CI (99.9%): [659548.777, 723242.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   546.730 ±(99.9%) 45.453 MB/sec [Average]
[info]   (min, avg, max) = (527.978, 546.730, 556.162), stdev = 11.804
[info]   CI (99.9%): [501.277, 592.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1244.384 ±(99.9%) 78.776 B/op [Average]
[info]   (min, avg, max) = (1208.285, 1244.384, 1257.769), stdev = 20.458
[info]   CI (99.9%): [1165.608, 1323.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   534.961 ±(99.9%) 1151.545 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.961, 668.878), stdev = 299.052
[info]   CI (99.9%): [≈ 0, 1686.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1216.136 ±(99.9%) 2618.699 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1216.136, 1550.588), stdev = 680.068
[info]   CI (99.9%): [≈ 0, 3834.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.023 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.029), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 22.86% complete, ETA 01:29:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 388064.244 ops/s
[info] # Warmup Iteration   2: 602173.629 ops/s
[info] # Warmup Iteration   3: 683758.443 ops/s
[info] # Warmup Iteration   4: 680064.813 ops/s
[info] # Warmup Iteration   5: 683165.509 ops/s
[info] Iteration   1: 683530.473 ops/s
[info]                  ·gc.alloc.rate:      0.127 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.292 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 683510.658 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 683229.806 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 683709.701 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 683409.690 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   683478.066 ±(99.9%) 677.351 ops/s [Average]
[info]   (min, avg, max) = (683229.806, 683478.066, 683709.701), stdev = 175.906
[info]   CI (99.9%): [682800.715, 684155.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.026 ±(99.9%) 0.218 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.026, 0.127), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.059 ±(99.9%) 0.502 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.059, 0.292), stdev = 0.130
[info]   CI (99.9%): [≈ 0, 0.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23.09% complete, ETA 01:29:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69826.780 ops/s
[info] # Warmup Iteration   2: 447988.925 ops/s
[info] # Warmup Iteration   3: 583877.653 ops/s
[info] # Warmup Iteration   4: 623852.621 ops/s
[info] # Warmup Iteration   5: 617331.884 ops/s
[info] Iteration   1: 622480.310 ops/s
[info]                  ·gc.alloc.rate:                   1540.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              3895.087 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3370.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 618150.837 ops/s
[info]                  ·gc.alloc.rate:                   1539.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              3920.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5099.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 605836.327 ops/s
[info]                  ·gc.alloc.rate:                   1509.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              3920.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3473.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.166 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 619448.965 ops/s
[info]                  ·gc.alloc.rate:                   1540.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              3913.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3398.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 607770.257 ops/s
[info]                  ·gc.alloc.rate:               1489.568 MB/sec
[info]                  ·gc.alloc.rate.norm:          3857.326 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3465.606 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   614737.339 ±(99.9%) 28659.065 ops/s [Average]
[info]   (min, avg, max) = (605836.327, 614737.339, 622480.310), stdev = 7442.668
[info]   CI (99.9%): [586078.274, 643396.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1523.844 ±(99.9%) 90.081 MB/sec [Average]
[info]   (min, avg, max) = (1489.568, 1523.844, 1540.434), stdev = 23.394
[info]   CI (99.9%): [1433.763, 1613.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   3901.364 ±(99.9%) 102.987 B/op [Average]
[info]   (min, avg, max) = (3857.326, 3901.364, 3920.908), stdev = 26.745
[info]   CI (99.9%): [3798.377, 4004.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1469.778 ±(99.9%) 1147.373 MB/sec [Average]
[info]   (min, avg, max) = (1332.887, 1469.778, 2002.788), stdev = 297.969
[info]   CI (99.9%): [322.405, 2617.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3761.556 ±(99.9%) 2884.465 B/op [Average]
[info]   (min, avg, max) = (3370.289, 3761.556, 5099.256), stdev = 749.087
[info]   CI (99.9%): [877.091, 6646.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.419 ±(99.9%) 3.381 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.419, 1.989), stdev = 0.878
[info]   CI (99.9%): [≈ 0, 3.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.086 ±(99.9%) 8.785 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.086, 5.166), stdev = 2.281
[info]   CI (99.9%): [≈ 0, 9.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.673
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23.33% complete, ETA 01:29:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6951.055 ops/s
[info] # Warmup Iteration   2: 23711.321 ops/s
[info] # Warmup Iteration   3: 41206.934 ops/s
[info] # Warmup Iteration   4: 41111.056 ops/s
[info] # Warmup Iteration   5: 40864.636 ops/s
[info] Iteration   1: 42977.045 ops/s
[info]                  ·gc.alloc.rate:                   1988.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              72837.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1984.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72676.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.535 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 40313.871 ops/s
[info]                  ·gc.alloc.rate:                   2109.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              82337.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77615.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 118.643 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 45842.142 ops/s
[info]                  ·gc.alloc.rate:                   2145.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              73661.423 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2644.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90783.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.828 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131.413 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 46099.004 ops/s
[info]                  ·gc.alloc.rate:                   2127.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              72643.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1977.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67500.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.396 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 45931.450 ops/s
[info]                  ·gc.alloc.rate:                   2110.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              72326.572 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1978.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67778.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.713 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   44232.702 ±(99.9%) 9797.038 ops/s [Average]
[info]   (min, avg, max) = (40313.871, 44232.702, 46099.004), stdev = 2544.260
[info]   CI (99.9%): [34435.664, 54029.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   2096.459 ±(99.9%) 238.340 MB/sec [Average]
[info]   (min, avg, max) = (1988.913, 2096.459, 2145.590), stdev = 61.896
[info]   CI (99.9%): [1858.119, 2334.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   74761.497 ±(99.9%) 16419.229 B/op [Average]
[info]   (min, avg, max) = (72326.572, 74761.497, 82337.968), stdev = 4264.022
[info]   CI (99.9%): [58342.268, 91180.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2114.454 ±(99.9%) 1140.698 MB/sec [Average]
[info]   (min, avg, max) = (1977.009, 2114.454, 2644.310), stdev = 296.236
[info]   CI (99.9%): [973.756, 3255.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   75270.932 ±(99.9%) 37003.269 B/op [Average]
[info]   (min, avg, max) = (67500.403, 75270.932, 90783.276), stdev = 9609.631
[info]   CI (99.9%): [38267.663, 112274.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.511 ±(99.9%) 6.872 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.511, 3.828), stdev = 1.785
[info]   CI (99.9%): [≈ 0, 8.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   54.940 ±(99.9%) 248.077 B/op [Average]
[info]   (min, avg, max) = (0.713, 54.940, 131.413), stdev = 64.425
[info]   CI (99.9%): [≈ 0, 303.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 10.000, 16.000), stdev = 5.244
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 23.56% complete, ETA 01:28:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.834 ops/s
[info] # Warmup Iteration   2: 241490.183 ops/s
[info] # Warmup Iteration   3: 295457.116 ops/s
[info] # Warmup Iteration   4: 304306.465 ops/s
[info] # Warmup Iteration   5: 304149.692 ops/s
[info] Iteration   1: 303729.172 ops/s
[info]                  ·gc.alloc.rate:                   325.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              1683.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2650.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 305523.869 ops/s
[info]                  ·gc.alloc.rate:      316.812 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 304704.358 ops/s
[info]                  ·gc.alloc.rate:               328.918 MB/sec
[info]                  ·gc.alloc.rate.norm:          1699.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3423.582 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 305073.334 ops/s
[info]                  ·gc.alloc.rate:      316.375 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 303464.782 ops/s
[info]                  ·gc.alloc.rate:               331.496 MB/sec
[info]                  ·gc.alloc.rate.norm:          1719.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3437.558 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   304499.103 ±(99.9%) 3381.465 ops/s [Average]
[info]   (min, avg, max) = (303464.782, 304499.103, 305523.869), stdev = 878.156
[info]   CI (99.9%): [301117.638, 307880.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   323.725 ±(99.9%) 26.599 MB/sec [Average]
[info]   (min, avg, max) = (316.375, 323.725, 331.496), stdev = 6.908
[info]   CI (99.9%): [297.126, 350.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1673.243 ±(99.9%) 152.796 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1673.243, 1719.245), stdev = 39.681
[info]   CI (99.9%): [1520.447, 1826.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   367.453 ±(99.9%) 1313.308 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 367.453, 662.812), stdev = 341.062
[info]   CI (99.9%): [≈ 0, 1680.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1902.422 ±(99.9%) 6798.680 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1902.422, 3437.558), stdev = 1765.596
[info]   CI (99.9%): [≈ 0, 8701.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.001 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 5.000), stdev = 2.302
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.79% complete, ETA 01:28:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30435.367 ops/s
[info] # Warmup Iteration   2: 79697.347 ops/s
[info] # Warmup Iteration   3: 124908.876 ops/s
[info] # Warmup Iteration   4: 127301.463 ops/s
[info] # Warmup Iteration   5: 127162.796 ops/s
[info] Iteration   1: 127824.499 ops/s
[info]                  ·gc.alloc.rate:               1183.758 MB/sec
[info]                  ·gc.alloc.rate.norm:          14569.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8190.078 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 127514.174 ops/s
[info]                  ·gc.alloc.rate:               1193.825 MB/sec
[info]                  ·gc.alloc.rate.norm:          14731.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16436.546 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 127348.170 ops/s
[info]                  ·gc.alloc.rate:                   1198.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              14805.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16482.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.257 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 127262.634 ops/s
[info]                  ·gc.alloc.rate:                   1193.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              14759.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16518.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.257 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 127677.126 ops/s
[info]                  ·gc.alloc.rate:                   1179.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              14531.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8244.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.722 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   127525.321 ±(99.9%) 888.706 ops/s [Average]
[info]   (min, avg, max) = (127262.634, 127525.321, 127824.499), stdev = 230.794
[info]   CI (99.9%): [126636.615, 128414.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1189.832 ±(99.9%) 30.631 MB/sec [Average]
[info]   (min, avg, max) = (1179.333, 1189.832, 1198.459), stdev = 7.955
[info]   CI (99.9%): [1159.200, 1220.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   14679.483 ±(99.9%) 468.465 B/op [Average]
[info]   (min, avg, max) = (14531.128, 14679.483, 14805.832), stdev = 121.659
[info]   CI (99.9%): [14211.018, 15147.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1067.349 ±(99.9%) 1406.345 MB/sec [Average]
[info]   (min, avg, max) = (665.441, 1067.349, 1336.027), stdev = 365.223
[info]   CI (99.9%): [≈ 0, 2473.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   13174.329 ±(99.9%) 17425.472 B/op [Average]
[info]   (min, avg, max) = (8190.078, 13174.329, 16518.003), stdev = 4525.340
[info]   CI (99.9%): [≈ 0, 30599.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.312 ±(99.9%) 2.599 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.312, 1.519), stdev = 0.675
[info]   CI (99.9%): [≈ 0, 2.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.847 ±(99.9%) 32.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.847, 18.722), stdev = 8.316
[info]   CI (99.9%): [≈ 0, 35.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 3.000, 4.000), stdev = 1.414
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.02% complete, ETA 01:28:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 215749.475 ops/s
[info] # Warmup Iteration   2: 506271.855 ops/s
[info] # Warmup Iteration   3: 553485.920 ops/s
[info] # Warmup Iteration   4: 551379.031 ops/s
[info] # Warmup Iteration   5: 552460.789 ops/s
[info] Iteration   1: 555556.639 ops/s
[info]                  ·gc.alloc.rate:      361.506 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 550676.318 ops/s
[info]                  ·gc.alloc.rate:               373.751 MB/sec
[info]                  ·gc.alloc.rate.norm:          1067.929 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1462.176 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 550263.680 ops/s
[info]                  ·gc.alloc.rate:               376.727 MB/sec
[info]                  ·gc.alloc.rate.norm:          1077.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1910.894 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 546998.210 ops/s
[info]                  ·gc.alloc.rate:      375.375 MB/sec
[info]                  ·gc.alloc.rate.norm: 1080.082 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 550930.581 ops/s
[info]                  ·gc.alloc.rate:               379.192 MB/sec
[info]                  ·gc.alloc.rate.norm:          1083.258 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1908.702 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   550885.086 ±(99.9%) 11768.586 ops/s [Average]
[info]   (min, avg, max) = (546998.210, 550885.086, 555556.639), stdev = 3056.265
[info]   CI (99.9%): [539116.499, 562653.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   373.310 ±(99.9%) 26.543 MB/sec [Average]
[info]   (min, avg, max) = (361.506, 373.310, 379.192), stdev = 6.893
[info]   CI (99.9%): [346.767, 399.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1066.463 ±(99.9%) 94.020 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1066.463, 1083.258), stdev = 24.417
[info]   CI (99.9%): [972.443, 1160.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   369.651 ±(99.9%) 1322.470 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.651, 668.388), stdev = 343.441
[info]   CI (99.9%): [≈ 0, 1692.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1056.354 ±(99.9%) 3779.322 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1056.354, 1910.894), stdev = 981.478
[info]   CI (99.9%): [≈ 0, 4835.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 24.25% complete, ETA 01:28:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3368.369 ops/s
[info] # Warmup Iteration   2: 27351.750 ops/s
[info] # Warmup Iteration   3: 52916.240 ops/s
[info] # Warmup Iteration   4: 48329.151 ops/s
[info] # Warmup Iteration   5: 49377.783 ops/s
[info] Iteration   1: 52008.783 ops/s
[info]                  ·gc.alloc.rate:               2308.695 MB/sec
[info]                  ·gc.alloc.rate.norm:          69861.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1971.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59669.812 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 52443.445 ops/s
[info]                  ·gc.alloc.rate:                   2322.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              69711.465 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2628.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78885.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.249 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 52665.192 ops/s
[info]                  ·gc.alloc.rate:               2309.404 MB/sec
[info]                  ·gc.alloc.rate.norm:          69010.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1977.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59092.508 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 51597.227 ops/s
[info]                  ·gc.alloc.rate:                   2288.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              69770.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2650.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80816.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.635 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 52510.895 ops/s
[info]                  ·gc.alloc.rate:               2314.050 MB/sec
[info]                  ·gc.alloc.rate.norm:          69328.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1997.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59838.194 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   52245.108 ±(99.9%) 1680.719 ops/s [Average]
[info]   (min, avg, max) = (51597.227, 52245.108, 52665.192), stdev = 436.477
[info]   CI (99.9%): [50564.390, 53925.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2308.683 ±(99.9%) 49.019 MB/sec [Average]
[info]   (min, avg, max) = (2288.309, 2308.683, 2322.959), stdev = 12.730
[info]   CI (99.9%): [2259.665, 2357.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   69536.549 ±(99.9%) 1376.694 B/op [Average]
[info]   (min, avg, max) = (69010.317, 69536.549, 69861.586), stdev = 357.523
[info]   CI (99.9%): [68159.855, 70913.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2245.183 ±(99.9%) 1387.293 MB/sec [Average]
[info]   (min, avg, max) = (1971.890, 2245.183, 2650.590), stdev = 360.276
[info]   CI (99.9%): [857.890, 3632.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67660.475 ±(99.9%) 42944.995 B/op [Average]
[info]   (min, avg, max) = (59092.508, 67660.475, 80816.770), stdev = 11152.679
[info]   CI (99.9%): [24715.481, 110605.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.377 ±(99.9%) 2.156 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.377, 1.249), stdev = 0.560
[info]   CI (99.9%): [≈ 0, 2.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24.48% complete, ETA 01:27:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25735.255 ops/s
[info] # Warmup Iteration   2: 78060.481 ops/s
[info] # Warmup Iteration   3: 91572.633 ops/s
[info] # Warmup Iteration   4: 96611.179 ops/s
[info] # Warmup Iteration   5: 96550.755 ops/s
[info] Iteration   1: 96427.960 ops/s
[info]                  ·gc.alloc.rate:               768.146 MB/sec
[info]                  ·gc.alloc.rate.norm:          12535.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10893.788 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 96218.691 ops/s
[info]                  ·gc.alloc.rate:               767.459 MB/sec
[info]                  ·gc.alloc.rate.norm:          12551.809 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10917.786 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 96304.648 ops/s
[info]                  ·gc.alloc.rate:                   772.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              12619.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10918.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.340 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 95827.627 ops/s
[info]                  ·gc.alloc.rate:               768.054 MB/sec
[info]                  ·gc.alloc.rate.norm:          12611.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10973.724 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 94597.498 ops/s
[info]                  ·gc.alloc.rate:                   765.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              12704.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22125.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.345 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   95875.285 ±(99.9%) 2883.321 ops/s [Average]
[info]   (min, avg, max) = (94597.498, 95875.285, 96427.960), stdev = 748.789
[info]   CI (99.9%): [92991.964, 98758.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   768.236 ±(99.9%) 10.374 MB/sec [Average]
[info]   (min, avg, max) = (765.029, 768.236, 772.491), stdev = 2.694
[info]   CI (99.9%): [757.862, 778.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12604.552 ±(99.9%) 257.195 B/op [Average]
[info]   (min, avg, max) = (12535.840, 12604.552, 12704.992), stdev = 66.793
[info]   CI (99.9%): [12347.356, 12861.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   800.819 ±(99.9%) 1144.011 MB/sec [Average]
[info]   (min, avg, max) = (667.527, 800.819, 1332.279), stdev = 297.096
[info]   CI (99.9%): [≈ 0, 1944.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   13165.887 ±(99.9%) 19286.443 B/op [Average]
[info]   (min, avg, max) = (10893.788, 13165.887, 22125.440), stdev = 5008.628
[info]   CI (99.9%): [≈ 0, 32452.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.137 ±(99.9%) 0.722 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.137, 0.345), stdev = 0.188
[info]   CI (99.9%): [≈ 0, 0.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 9.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24.71% complete, ETA 01:27:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.602 ops/s
[info] # Warmup Iteration   2: 102163.961 ops/s
[info] # Warmup Iteration   3: 118526.563 ops/s
[info] # Warmup Iteration   4: 124104.548 ops/s
[info] # Warmup Iteration   5: 118138.903 ops/s
[info] Iteration   1: 124121.187 ops/s
[info]                  ·gc.alloc.rate:                   472.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              5985.328 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8391.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.264 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 124292.664 ops/s
[info]                  ·gc.alloc.rate:               477.819 MB/sec
[info]                  ·gc.alloc.rate.norm:          6049.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8380.207 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 124334.793 ops/s
[info]                  ·gc.alloc.rate:               479.034 MB/sec
[info]                  ·gc.alloc.rate.norm:          6062.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8390.092 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 124864.072 ops/s
[info]                  ·gc.alloc.rate:      462.067 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 121492.044 ops/s
[info]                  ·gc.alloc.rate:                   466.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              6043.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8586.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.409 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   123820.952 ±(99.9%) 5126.058 ops/s [Average]
[info]   (min, avg, max) = (121492.044, 123820.952, 124864.072), stdev = 1331.221
[info]   CI (99.9%): [118694.894, 128947.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   471.497 ±(99.9%) 27.969 MB/sec [Average]
[info]   (min, avg, max) = (462.067, 471.497, 479.034), stdev = 7.264
[info]   CI (99.9%): [443.528, 499.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   5992.887 ±(99.9%) 381.021 B/op [Average]
[info]   (min, avg, max) = (5824.003, 5992.887, 6062.957), stdev = 98.950
[info]   CI (99.9%): [5611.867, 6373.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   529.906 ±(99.9%) 1140.665 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 529.906, 662.901), stdev = 296.227
[info]   CI (99.9%): [≈ 0, 1670.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   6749.635 ±(99.9%) 14532.902 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6749.635, 8586.397), stdev = 3774.148
[info]   CI (99.9%): [≈ 0, 21282.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.032), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.135 ±(99.9%) 0.736 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.135, 0.409), stdev = 0.191
[info]   CI (99.9%): [≈ 0, 0.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.94% complete, ETA 01:27:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38944.727 ops/s
[info] # Warmup Iteration   2: 95146.498 ops/s
[info] # Warmup Iteration   3: 102147.832 ops/s
[info] # Warmup Iteration   4: 107336.150 ops/s
[info] # Warmup Iteration   5: 108252.206 ops/s
[info] Iteration   1: 107409.891 ops/s
[info]                  ·gc.alloc.rate:                   409.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              5997.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7496.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.305 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 107412.437 ops/s
[info]                  ·gc.alloc.rate:               419.754 MB/sec
[info]                  ·gc.alloc.rate.norm:          6149.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9701.807 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 108068.738 ops/s
[info]                  ·gc.alloc.rate:      399.917 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 107489.793 ops/s
[info]                  ·gc.alloc.rate:               414.031 MB/sec
[info]                  ·gc.alloc.rate.norm:          6060.502 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9694.768 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 108124.991 ops/s
[info]                  ·gc.alloc.rate:      412.533 MB/sec
[info]                  ·gc.alloc.rate.norm: 6004.094 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   107701.170 ±(99.9%) 1398.506 ops/s [Average]
[info]   (min, avg, max) = (107409.891, 107701.170, 108124.991), stdev = 363.187
[info]   CI (99.9%): [106302.664, 109099.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   411.113 ±(99.9%) 28.147 MB/sec [Average]
[info]   (min, avg, max) = (399.917, 411.113, 419.754), stdev = 7.310
[info]   CI (99.9%): [382.966, 439.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   6007.263 ±(99.9%) 458.911 B/op [Average]
[info]   (min, avg, max) = (5824.004, 6007.263, 6149.737), stdev = 119.178
[info]   CI (99.9%): [5548.352, 6466.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   367.219 ±(99.9%) 1312.379 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 367.219, 662.310), stdev = 340.821
[info]   CI (99.9%): [≈ 0, 1679.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5378.578 ±(99.9%) 19220.732 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5378.578, 9701.807), stdev = 4991.563
[info]   CI (99.9%): [≈ 0, 24599.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.061 ±(99.9%) 0.525 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.305), stdev = 0.136
[info]   CI (99.9%): [≈ 0, 0.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 6.000), stdev = 2.828
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.17% complete, ETA 01:27:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53143.411 ops/s
[info] # Warmup Iteration   2: 109731.160 ops/s
[info] # Warmup Iteration   3: 119647.729 ops/s
[info] # Warmup Iteration   4: 124682.480 ops/s
[info] # Warmup Iteration   5: 124942.019 ops/s
[info] Iteration   1: 125486.144 ops/s
[info]                  ·gc.alloc.rate:      464.366 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 122824.262 ops/s
[info]                  ·gc.alloc.rate:                   492.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              6306.888 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8578.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.248 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.613 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 121256.034 ops/s
[info]                  ·gc.alloc.rate:               471.159 MB/sec
[info]                  ·gc.alloc.rate.norm:          6115.372 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8672.563 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 125489.536 ops/s
[info]                  ·gc.alloc.rate:      464.372 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 125082.238 ops/s
[info]                  ·gc.alloc.rate:               483.873 MB/sec
[info]                  ·gc.alloc.rate.norm:          6088.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8407.115 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   124027.643 ±(99.9%) 7333.044 ops/s [Average]
[info]   (min, avg, max) = (121256.034, 124027.643, 125489.536), stdev = 1904.368
[info]   CI (99.9%): [116694.599, 131360.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   475.195 ±(99.9%) 47.760 MB/sec [Average]
[info]   (min, avg, max) = (464.366, 475.195, 492.206), stdev = 12.403
[info]   CI (99.9%): [427.435, 522.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   6031.802 ±(99.9%) 799.086 B/op [Average]
[info]   (min, avg, max) = (5824.004, 6031.802, 6306.888), stdev = 207.520
[info]   CI (99.9%): [5232.717, 6830.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   401.159 ±(99.9%) 1410.130 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 401.159, 669.500), stdev = 366.206
[info]   CI (99.9%): [≈ 0, 1811.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5131.666 ±(99.9%) 18042.253 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5131.666, 8672.563), stdev = 4685.516
[info]   CI (99.9%): [≈ 0, 23173.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.650 ±(99.9%) 5.593 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.650, 3.248), stdev = 1.452
[info]   CI (99.9%): [≈ 0, 6.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.323 ±(99.9%) 71.660 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.323, 41.613), stdev = 18.610
[info]   CI (99.9%): [≈ 0, 79.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 5.000), stdev = 2.074
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25.40% complete, ETA 01:26:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51195.949 ops/s
[info] # Warmup Iteration   2: 117313.482 ops/s
[info] # Warmup Iteration   3: 116879.931 ops/s
[info] # Warmup Iteration   4: 123344.199 ops/s
[info] # Warmup Iteration   5: 122747.235 ops/s
[info] Iteration   1: 121679.002 ops/s
[info]                  ·gc.alloc.rate:                   365.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              4728.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6617.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.404 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 121728.083 ops/s
[info]                  ·gc.alloc.rate:      354.631 MB/sec
[info]                  ·gc.alloc.rate.norm: 4584.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 121182.400 ops/s
[info]                  ·gc.alloc.rate:               366.941 MB/sec
[info]                  ·gc.alloc.rate.norm:          4764.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8642.894 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 121372.634 ops/s
[info]                  ·gc.alloc.rate:      353.498 MB/sec
[info]                  ·gc.alloc.rate.norm: 4584.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 122209.483 ops/s
[info]                  ·gc.alloc.rate:                   372.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              4796.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8570.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   121634.320 ±(99.9%) 1509.029 ops/s [Average]
[info]   (min, avg, max) = (121182.400, 121634.320, 122209.483), stdev = 391.890
[info]   CI (99.9%): [120125.291, 123143.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   362.637 ±(99.9%) 31.736 MB/sec [Average]
[info]   (min, avg, max) = (353.498, 362.637, 372.459), stdev = 8.242
[info]   CI (99.9%): [330.900, 394.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4691.475 ±(99.9%) 389.043 B/op [Average]
[info]   (min, avg, max) = (4584.004, 4691.475, 4796.360), stdev = 101.033
[info]   CI (99.9%): [4302.432, 5080.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   368.571 ±(99.9%) 1317.942 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368.571, 665.588), stdev = 342.265
[info]   CI (99.9%): [≈ 0, 1686.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   4766.085 ±(99.9%) 17043.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4766.085, 8642.894), stdev = 4426.021
[info]   CI (99.9%): [≈ 0, 21809.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.108 ±(99.9%) 0.676 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.108, 0.404), stdev = 0.176
[info]   CI (99.9%): [≈ 0, 0.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 5.000), stdev = 2.588
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 25.64% complete, ETA 01:26:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1319.293 ops/s
[info] # Warmup Iteration   2: 8798.560 ops/s
[info] # Warmup Iteration   3: 10682.589 ops/s
[info] # Warmup Iteration   4: 14300.211 ops/s
[info] # Warmup Iteration   5: 14226.438 ops/s
[info] Iteration   1: 13697.619 ops/s
[info]                  ·gc.alloc.rate:                   2544.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              292199.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2573.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     295514.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.784 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         40.000 ms
[info] Iteration   2: 14136.392 ops/s
[info]                  ·gc.alloc.rate:                   2140.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              238228.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1918.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     213438.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      12.896 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1435.113 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         26.000 ms
[info] Iteration   3: 14539.687 ops/s
[info]                  ·gc.alloc.rate:                   2188.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              236878.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1907.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     206427.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 205.039 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 13961.366 ops/s
[info]                  ·gc.alloc.rate:               2353.377 MB/sec
[info]                  ·gc.alloc.rate.norm:          265194.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2542.696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 286528.179 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     18.000 ms
[info] Iteration   5: 13557.811 ops/s
[info]                  ·gc.alloc.rate:                   2339.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              271631.795 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1917.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222551.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.215 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 257.076 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   13978.575 ±(99.9%) 1486.403 ops/s [Average]
[info]   (min, avg, max) = (13557.811, 13978.575, 14539.687), stdev = 386.014
[info]   CI (99.9%): [12492.172, 15464.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   2313.389 ±(99.9%) 611.824 MB/sec [Average]
[info]   (min, avg, max) = (2140.798, 2313.389, 2544.252), stdev = 158.889
[info]   CI (99.9%): [1701.565, 2925.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   260826.699 ±(99.9%) 90393.066 B/op [Average]
[info]   (min, avg, max) = (236878.613, 260826.699, 292199.721), stdev = 23474.792
[info]   CI (99.9%): [170433.633, 351219.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2171.642 ±(99.9%) 1358.505 MB/sec [Average]
[info]   (min, avg, max) = (1907.188, 2171.642, 2573.117), stdev = 352.800
[info]   CI (99.9%): [813.136, 3530.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   244892.032 ±(99.9%) 164095.660 B/op [Average]
[info]   (min, avg, max) = (206427.359, 244892.032, 295514.740), stdev = 42615.122
[info]   CI (99.9%): [80796.372, 408987.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3.409 ±(99.9%) 20.798 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 3.409, 12.896), stdev = 5.401
[info]   CI (99.9%): [≈ 0, 24.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   380.402 ±(99.9%) 2313.730 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 380.402, 1435.113), stdev = 600.868
[info]   CI (99.9%): [≈ 0, 2694.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   113.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (14.000, 22.600, 40.000), stdev = 10.807
[info]   CI (99.9%): [113.000, 113.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.87% complete, ETA 01:26:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1198.509 ops/s
[info] # Warmup Iteration   2: 9009.761 ops/s
[info] # Warmup Iteration   3: 12363.891 ops/s
[info] # Warmup Iteration   4: 12463.112 ops/s
[info] # Warmup Iteration   5: 12552.843 ops/s
[info] Iteration   1: 11700.048 ops/s
[info]                  ·gc.alloc.rate:                        1659.625 MB/sec
[info]                  ·gc.alloc.rate.norm:                   223221.649 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.018 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 2.385 B/op
[info]                  ·gc.churn.Metaspace:                   0.051 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              6.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:               1998.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          268827.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           5.423 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      729.397 B/op
[info]                  ·gc.count:                             5.000 counts
[info]                  ·gc.time:                              52.000 ms
[info] Iteration   2: 11864.682 ops/s
[info]                  ·gc.alloc.rate:                   1778.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              235797.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175351.738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.537 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71.242 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 12238.077 ops/s
[info]                  ·gc.alloc.rate:                   1736.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              223361.675 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1979.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     254498.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.677 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 12251.325 ops/s
[info]                  ·gc.alloc.rate:                   1734.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              222713.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1978.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     254087.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.342 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 12207.987 ops/s
[info]                  ·gc.alloc.rate:               1974.154 MB/sec
[info]                  ·gc.alloc.rate.norm:          254448.784 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1322.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 170454.783 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   12052.424 ±(99.9%) 977.268 ops/s [Average]
[info]   (min, avg, max) = (11700.048, 12052.424, 12251.325), stdev = 253.793
[info]   CI (99.9%): [11075.156, 13029.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1776.642 ±(99.9%) 455.942 MB/sec [Average]
[info]   (min, avg, max) = (1659.625, 1776.642, 1974.154), stdev = 118.407
[info]   CI (99.9%): [1320.700, 2232.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   231908.662 ±(99.9%) 52946.166 B/op [Average]
[info]   (min, avg, max) = (222713.625, 231908.662, 254448.784), stdev = 13749.951
[info]   CI (99.9%): [178962.496, 284854.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space":
[info]   0.004 ±(99.9%) 0.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm":
[info]   0.477 ±(99.9%) 4.108 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.477, 2.385), stdev = 1.067
[info]   CI (99.9%): [≈ 0, 4.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.Metaspace":
[info]   0.010 ±(99.9%) 0.087 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.051), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.Metaspace.norm":
[info]   1.365 ±(99.9%) 11.755 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.365, 6.826), stdev = 3.053
[info]   CI (99.9%): [≈ 0, 13.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1720.240 ±(99.9%) 1398.667 MB/sec [Average]
[info]   (min, avg, max) = (1322.401, 1720.240, 1998.695), stdev = 363.229
[info]   CI (99.9%): [321.573, 3118.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   224643.974 ±(99.9%) 183427.397 B/op [Average]
[info]   (min, avg, max) = (170454.783, 224643.974, 268827.026), stdev = 47635.513
[info]   CI (99.9%): [41216.577, 408071.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.205 ±(99.9%) 9.121 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.205, 5.423), stdev = 2.369
[info]   CI (99.9%): [≈ 0, 10.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   161.732 ±(99.9%) 1227.302 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 161.732, 729.397), stdev = 318.726
[info]   CI (99.9%): [≈ 0, 1389.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 5.000), stdev = 1.225
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   68.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 13.600, 52.000), stdev = 21.501
[info]   CI (99.9%): [68.000, 68.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.10% complete, ETA 01:25:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84025.270 ops/s
[info] # Warmup Iteration   2: 200657.464 ops/s
[info] # Warmup Iteration   3: 228864.950 ops/s
[info] # Warmup Iteration   4: 229141.177 ops/s
[info] # Warmup Iteration   5: 225096.664 ops/s
[info] Iteration   1: 229679.203 ops/s
[info]                  ·gc.alloc.rate:               613.635 MB/sec
[info]                  ·gc.alloc.rate.norm:          4204.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4537.077 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 230053.492 ops/s
[info]                  ·gc.alloc.rate:               619.594 MB/sec
[info]                  ·gc.alloc.rate.norm:          4238.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4532.217 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 227459.946 ops/s
[info]                  ·gc.alloc.rate:               659.051 MB/sec
[info]                  ·gc.alloc.rate.norm:          4559.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4584.017 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 229374.425 ops/s
[info]                  ·gc.alloc.rate:               613.956 MB/sec
[info]                  ·gc.alloc.rate.norm:          4212.631 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4552.428 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 227590.477 ops/s
[info]                  ·gc.alloc.rate:                   609.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              4216.757 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4588.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   228831.509 ±(99.9%) 4687.647 ops/s [Average]
[info]   (min, avg, max) = (227459.946, 228831.509, 230053.492), stdev = 1217.367
[info]   CI (99.9%): [224143.862, 233519.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   623.199 ±(99.9%) 78.346 MB/sec [Average]
[info]   (min, avg, max) = (609.760, 623.199, 659.051), stdev = 20.346
[info]   CI (99.9%): [544.853, 701.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4286.441 ±(99.9%) 588.853 B/op [Average]
[info]   (min, avg, max) = (4204.919, 4286.441, 4559.068), stdev = 152.923
[info]   CI (99.9%): [3697.589, 4875.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   662.836 ±(99.9%) 2.348 MB/sec [Average]
[info]   (min, avg, max) = (662.108, 662.836, 663.479), stdev = 0.610
[info]   CI (99.9%): [660.488, 665.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4558.765 ±(99.9%) 100.279 B/op [Average]
[info]   (min, avg, max) = (4532.217, 4558.765, 4588.087), stdev = 26.042
[info]   CI (99.9%): [4458.487, 4659.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.093 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.054), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 26.33% complete, ETA 01:25:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 544.646 ops/s
[info] # Warmup Iteration   2: 4188.392 ops/s
[info] # Warmup Iteration   3: 6453.087 ops/s
[info] # Warmup Iteration   4: 6962.072 ops/s
[info] # Warmup Iteration   5: 6962.886 ops/s
[info] Iteration   1: 6640.931 ops/s
[info]                  ·gc.alloc.rate:                   1704.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              403981.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     472269.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.933 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 6803.956 ops/s
[info]                  ·gc.alloc.rate:                   1770.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              409598.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     308024.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.815 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 6631.050 ops/s
[info]                  ·gc.alloc.rate:                   1702.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              403912.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     475044.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 568.446 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 6678.671 ops/s
[info]                  ·gc.alloc.rate:                   1689.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              398135.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     314572.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.865 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6703.668 ops/s
[info]                  ·gc.alloc.rate:                   1708.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              400911.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     470099.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.887 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   6691.655 ±(99.9%) 266.575 ops/s [Average]
[info]   (min, avg, max) = (6631.050, 6691.655, 6803.956), stdev = 69.229
[info]   CI (99.9%): [6425.081, 6958.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1715.070 ±(99.9%) 122.782 MB/sec [Average]
[info]   (min, avg, max) = (1689.620, 1715.070, 1770.731), stdev = 31.886
[info]   CI (99.9%): [1592.288, 1837.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   403307.885 ±(99.9%) 16436.966 B/op [Average]
[info]   (min, avg, max) = (398135.174, 403307.885, 409598.047), stdev = 4268.628
[info]   CI (99.9%): [386870.919, 419744.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1732.864 ±(99.9%) 1404.595 MB/sec [Average]
[info]   (min, avg, max) = (1331.617, 1732.864, 2002.885), stdev = 364.769
[info]   CI (99.9%): [328.269, 3137.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   408002.186 ±(99.9%) 340111.266 B/op [Average]
[info]   (min, avg, max) = (308024.015, 408002.186, 475044.607), stdev = 88325.816
[info]   CI (99.9%): [67890.920, 748113.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.542 ±(99.9%) 4.010 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.542, 2.396), stdev = 1.041
[info]   CI (99.9%): [≈ 0, 4.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   128.389 ±(99.9%) 951.523 B/op [Average]
[info]   (min, avg, max) = (4.815, 128.389, 568.446), stdev = 247.108
[info]   CI (99.9%): [≈ 0, 1079.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.789
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26.56% complete, ETA 01:25:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6112.952 ops/s
[info] # Warmup Iteration   2: 18882.731 ops/s
[info] # Warmup Iteration   3: 31796.247 ops/s
[info] # Warmup Iteration   4: 35299.207 ops/s
[info] # Warmup Iteration   5: 32703.119 ops/s
[info] Iteration   1: 30495.731 ops/s
[info]                  ·gc.alloc.rate:                   2427.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              125228.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2468.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127341.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.596 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         71.000 ms
[info] Iteration   2: 33075.496 ops/s
[info]                  ·gc.alloc.rate:                   2000.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              95163.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1745.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83015.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.565 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74.461 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         41.000 ms
[info] Iteration   3: 33517.657 ops/s
[info]                  ·gc.alloc.rate:                   2014.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              94601.922 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2381.441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111823.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.566 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         54.000 ms
[info] Iteration   4: 34789.929 ops/s
[info]                  ·gc.alloc.rate:                   2071.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              93688.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1822.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82446.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.125 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         41.000 ms
[info] Iteration   5: 35235.670 ops/s
[info]                  ·gc.alloc.rate:                   2080.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              92916.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1854.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82823.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      9.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 417.712 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         33.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   33422.896 ±(99.9%) 7165.946 ops/s [Average]
[info]   (min, avg, max) = (30495.731, 33422.896, 35235.670), stdev = 1860.973
[info]   CI (99.9%): [26256.950, 40588.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2118.812 ±(99.9%) 677.791 MB/sec [Average]
[info]   (min, avg, max) = (2000.633, 2118.812, 2427.589), stdev = 176.020
[info]   CI (99.9%): [1441.021, 2796.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   100319.789 ±(99.9%) 53719.711 B/op [Average]
[info]   (min, avg, max) = (92916.200, 100319.789, 125228.425), stdev = 13950.838
[info]   CI (99.9%): [46600.078, 154039.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2054.388 ±(99.9%) 1317.011 MB/sec [Average]
[info]   (min, avg, max) = (1745.233, 2054.388, 2468.558), stdev = 342.024
[info]   CI (99.9%): [737.377, 3371.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   97490.211 ±(99.9%) 80484.385 B/op [Average]
[info]   (min, avg, max) = (82446.876, 97490.211, 127341.820), stdev = 20901.539
[info]   CI (99.9%): [17005.826, 177974.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2.255 ±(99.9%) 15.472 MB/sec [Average]
[info]   (min, avg, max) = (0.012, 2.255, 9.351), stdev = 4.018
[info]   CI (99.9%): [≈ 0, 17.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   101.692 ±(99.9%) 690.232 B/op [Average]
[info]   (min, avg, max) = (0.596, 101.692, 417.712), stdev = 179.251
[info]   CI (99.9%): [≈ 0, 791.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   240.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (33.000, 48.000, 71.000), stdev = 14.900
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.79% complete, ETA 01:25:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5608.928 ops/s
[info] # Warmup Iteration   2: 25357.086 ops/s
[info] # Warmup Iteration   3: 29355.020 ops/s
[info] # Warmup Iteration   4: 38406.683 ops/s
[info] # Warmup Iteration   5: 36877.727 ops/s
[info] Iteration   1: 39897.252 ops/s
[info]                  ·gc.alloc.rate:                   1924.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              75902.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1882.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74260.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.634 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.023 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         28.000 ms
[info] Iteration   2: 39419.866 ops/s
[info]                  ·gc.alloc.rate:                   1877.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              74960.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1890.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75479.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      10.211 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 407.627 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         25.000 ms
[info] Iteration   3: 37818.240 ops/s
[info]                  ·gc.alloc.rate:                   2221.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              92424.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1890.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78674.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      12.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 510.619 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   4: 44110.598 ops/s
[info]                  ·gc.alloc.rate:                   2074.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              74020.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1885.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67285.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.634 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.311 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 44362.125 ops/s
[info]                  ·gc.alloc.rate:                   2113.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              74970.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2515.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89248.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.950 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 175.607 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   41121.616 ±(99.9%) 11348.336 ops/s [Average]
[info]   (min, avg, max) = (37818.240, 41121.616, 44362.125), stdev = 2947.127
[info]   CI (99.9%): [29773.280, 52469.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2042.159 ±(99.9%) 541.487 MB/sec [Average]
[info]   (min, avg, max) = (1877.729, 2042.159, 2221.188), stdev = 140.623
[info]   CI (99.9%): [1500.672, 2583.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   78455.714 ±(99.9%) 30178.076 B/op [Average]
[info]   (min, avg, max) = (74020.935, 78455.714, 92424.661), stdev = 7837.150
[info]   CI (99.9%): [48277.638, 108633.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2013.079 ±(99.9%) 1081.696 MB/sec [Average]
[info]   (min, avg, max) = (1882.540, 2013.079, 2515.553), stdev = 280.913
[info]   CI (99.9%): [931.383, 3094.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   76989.659 ±(99.9%) 30865.656 B/op [Average]
[info]   (min, avg, max) = (67285.885, 76989.659, 89248.304), stdev = 8015.713
[info]   CI (99.9%): [46124.003, 107855.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   5.940 ±(99.9%) 19.822 MB/sec [Average]
[info]   (min, avg, max) = (0.634, 5.940, 12.271), stdev = 5.148
[info]   CI (99.9%): [≈ 0, 25.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   235.437 ±(99.9%) 827.222 B/op [Average]
[info]   (min, avg, max) = (25.023, 235.437, 510.619), stdev = 214.827
[info]   CI (99.9%): [≈ 0, 1062.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   95.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (11.000, 19.000, 28.000), stdev = 7.583
[info]   CI (99.9%): [95.000, 95.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.02% complete, ETA 01:24:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 162504.878 ops/s
[info] # Warmup Iteration   2: 302608.640 ops/s
[info] # Warmup Iteration   3: 318443.274 ops/s
[info] # Warmup Iteration   4: 321183.643 ops/s
[info] # Warmup Iteration   5: 319649.709 ops/s
[info] Iteration   1: 319670.210 ops/s
[info]                  ·gc.alloc.rate:               724.258 MB/sec
[info]                  ·gc.alloc.rate.norm:          3565.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3291.159 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 319323.672 ops/s
[info]                  ·gc.alloc.rate:               727.806 MB/sec
[info]                  ·gc.alloc.rate.norm:          3587.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3296.387 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 319778.064 ops/s
[info]                  ·gc.alloc.rate:                   720.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              3545.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3291.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 318816.535 ops/s
[info]                  ·gc.alloc.rate:               727.350 MB/sec
[info]                  ·gc.alloc.rate.norm:          3590.494 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3304.968 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 320199.190 ops/s
[info]                  ·gc.alloc.rate:                   727.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              3574.946 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3290.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   319557.534 ±(99.9%) 1997.909 ops/s [Average]
[info]   (min, avg, max) = (318816.535, 319557.534, 320199.190), stdev = 518.851
[info]   CI (99.9%): [317559.626, 321555.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   725.464 ±(99.9%) 12.172 MB/sec [Average]
[info]   (min, avg, max) = (720.424, 725.464, 727.806), stdev = 3.161
[info]   CI (99.9%): [713.292, 737.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3572.716 ±(99.9%) 69.758 B/op [Average]
[info]   (min, avg, max) = (3545.689, 3572.716, 3590.494), stdev = 18.116
[info]   CI (99.9%): [3502.958, 3642.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   669.073 ±(99.9%) 1.857 MB/sec [Average]
[info]   (min, avg, max) = (668.560, 669.073, 669.661), stdev = 0.482
[info]   CI (99.9%): [667.216, 670.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3294.998 ±(99.9%) 23.164 B/op [Average]
[info]   (min, avg, max) = (3290.798, 3294.998, 3304.968), stdev = 6.016
[info]   CI (99.9%): [3271.834, 3318.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.061 ±(99.9%) 0.352 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.205), stdev = 0.092
[info]   CI (99.9%): [≈ 0, 0.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 27.25% complete, ETA 01:24:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 198157.269 ops/s
[info] # Warmup Iteration   2: 337918.023 ops/s
[info] # Warmup Iteration   3: 357023.004 ops/s
[info] # Warmup Iteration   4: 357186.328 ops/s
[info] # Warmup Iteration   5: 357104.377 ops/s
[info] Iteration   1: 356962.506 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 357163.238 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 357193.785 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 357216.833 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 357315.189 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   357170.310 ±(99.9%) 498.127 ops/s [Average]
[info]   (min, avg, max) = (356962.506, 357170.310, 357315.189), stdev = 129.362
[info]   CI (99.9%): [356672.184, 357668.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 27.48% complete, ETA 01:24:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5089.003 ops/s
[info] # Warmup Iteration   2: 17384.400 ops/s
[info] # Warmup Iteration   3: 35248.730 ops/s
[info] # Warmup Iteration   4: 35708.175 ops/s
[info] # Warmup Iteration   5: 37267.187 ops/s
[info] Iteration   1: 38980.194 ops/s
[info]                  ·gc.alloc.rate:                   2522.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              101789.573 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2857.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115317.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 259.611 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         50.000 ms
[info] Iteration   2: 37552.372 ops/s
[info]                  ·gc.alloc.rate:                   2710.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              113324.427 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2272.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94998.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      45.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1884.784 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         56.000 ms
[info] Iteration   3: 35656.122 ops/s
[info]                  ·gc.alloc.rate:                   2996.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              132181.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3452.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152308.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      44.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1980.597 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         89.000 ms
[info] Iteration   4: 41814.612 ops/s
[info]                  ·gc.alloc.rate:                   2990.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              112504.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2905.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109318.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      26.960 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1014.313 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         39.000 ms
[info] Iteration   5: 41388.805 ops/s
[info]                  ·gc.alloc.rate:               2354.251 MB/sec
[info]                  ·gc.alloc.rate.norm:          89477.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2393.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 90963.556 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     59.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   39078.421 ±(99.9%) 9981.122 ops/s [Average]
[info]   (min, avg, max) = (35656.122, 39078.421, 41814.612), stdev = 2592.066
[info]   CI (99.9%): [29097.299, 49059.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2714.720 ±(99.9%) 1092.799 MB/sec [Average]
[info]   (min, avg, max) = (2354.251, 2714.720, 2996.175), stdev = 283.797
[info]   CI (99.9%): [1621.921, 3807.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   109855.379 ±(99.9%) 60816.858 B/op [Average]
[info]   (min, avg, max) = (89477.731, 109855.379, 132181.135), stdev = 15793.945
[info]   CI (99.9%): [49038.521, 170672.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2776.225 ±(99.9%) 1807.341 MB/sec [Average]
[info]   (min, avg, max) = (2272.217, 2776.225, 3452.404), stdev = 469.361
[info]   CI (99.9%): [968.884, 4583.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   112581.186 ±(99.9%) 93786.495 B/op [Average]
[info]   (min, avg, max) = (90963.556, 112581.186, 152308.443), stdev = 24356.055
[info]   CI (99.9%): [18794.691, 206367.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   24.674 ±(99.9%) 81.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 24.674, 45.081), stdev = 21.048
[info]   CI (99.9%): [≈ 0, 105.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1027.861 ±(99.9%) 3491.641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1027.861, 1980.597), stdev = 906.768
[info]   CI (99.9%): [≈ 0, 4519.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   293.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (39.000, 58.600, 89.000), stdev = 18.636
[info]   CI (99.9%): [293.000, 293.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27.71% complete, ETA 01:24:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20489.442 ops/s
[info] # Warmup Iteration   2: 125156.070 ops/s
[info] # Warmup Iteration   3: 151041.343 ops/s
[info] # Warmup Iteration   4: 180033.347 ops/s
[info] # Warmup Iteration   5: 178557.736 ops/s
[info] Iteration   1: 181048.925 ops/s
[info]                  ·gc.alloc.rate:                   2538.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              22068.387 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23197.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.848 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 181818.085 ops/s
[info]                  ·gc.alloc.rate:                   2544.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              22022.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17286.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.622 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 181745.402 ops/s
[info]                  ·gc.alloc.rate:                   2554.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              22120.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2664.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23068.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.541 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 181648.837 ops/s
[info]                  ·gc.alloc.rate:                   2568.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              22246.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23144.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.361 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 182224.177 ops/s
[info]                  ·gc.alloc.rate:               2562.254 MB/sec
[info]                  ·gc.alloc.rate.norm:          22127.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17366.855 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   181697.085 ±(99.9%) 1630.557 ops/s [Average]
[info]   (min, avg, max) = (181048.925, 181697.085, 182224.177), stdev = 423.450
[info]   CI (99.9%): [180066.528, 183327.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2553.675 ±(99.9%) 46.624 MB/sec [Average]
[info]   (min, avg, max) = (2538.544, 2553.675, 2568.002), stdev = 12.108
[info]   CI (99.9%): [2507.051, 2600.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22117.041 ±(99.9%) 322.996 B/op [Average]
[info]   (min, avg, max) = (22022.799, 22117.041, 22246.579), stdev = 83.881
[info]   CI (99.9%): [21794.044, 22440.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2402.595 ±(99.9%) 1400.198 MB/sec [Average]
[info]   (min, avg, max) = (1997.602, 2402.595, 2671.675), stdev = 363.627
[info]   CI (99.9%): [1002.397, 3802.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   20812.925 ±(99.9%) 12255.786 B/op [Average]
[info]   (min, avg, max) = (17286.849, 20812.925, 23197.457), stdev = 3182.789
[info]   CI (99.9%): [8557.139, 33068.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.354 ±(99.9%) 2.434 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.354, 1.478), stdev = 0.632
[info]   CI (99.9%): [≈ 0, 2.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.074 ±(99.9%) 21.167 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.074, 12.848), stdev = 5.497
[info]   CI (99.9%): [≈ 0, 24.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 1.871
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 27.94% complete, ETA 01:23:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.560 ops/s
[info] # Warmup Iteration   2: 493520.001 ops/s
[info] # Warmup Iteration   3: 519605.233 ops/s
[info] # Warmup Iteration   4: 538771.929 ops/s
[info] # Warmup Iteration   5: 560993.812 ops/s
[info] Iteration   1: 569843.217 ops/s
[info]                  ·gc.alloc.rate:               607.894 MB/sec
[info]                  ·gc.alloc.rate.norm:          1678.536 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1826.967 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 567766.635 ops/s
[info]                  ·gc.alloc.rate:               610.048 MB/sec
[info]                  ·gc.alloc.rate.norm:          1690.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1835.438 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 567890.704 ops/s
[info]                  ·gc.alloc.rate:               609.248 MB/sec
[info]                  ·gc.alloc.rate.norm:          1688.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1835.034 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 567879.975 ops/s
[info]                  ·gc.alloc.rate:                   605.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              1678.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1836.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 568461.339 ops/s
[info]                  ·gc.alloc.rate:                   610.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.891 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1835.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   568368.374 ±(99.9%) 3341.748 ops/s [Average]
[info]   (min, avg, max) = (567766.635, 568368.374, 569843.217), stdev = 867.841
[info]   CI (99.9%): [565026.626, 571710.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   608.587 ±(99.9%) 7.007 MB/sec [Average]
[info]   (min, avg, max) = (605.731, 608.587, 610.048), stdev = 1.820
[info]   CI (99.9%): [601.581, 615.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1684.948 ±(99.9%) 23.535 B/op [Average]
[info]   (min, avg, max) = (1678.106, 1684.948, 1690.738), stdev = 6.112
[info]   CI (99.9%): [1661.414, 1708.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   662.384 ±(99.9%) 2.168 MB/sec [Average]
[info]   (min, avg, max) = (661.650, 662.384, 663.058), stdev = 0.563
[info]   CI (99.9%): [660.217, 664.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1833.892 ±(99.9%) 15.195 B/op [Average]
[info]   (min, avg, max) = (1826.967, 1833.892, 1836.922), stdev = 3.946
[info]   CI (99.9%): [1818.697, 1849.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.028), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.133 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.078), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.18% complete, ETA 01:23:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87294.047 ops/s
[info] # Warmup Iteration   2: 291964.481 ops/s
[info] # Warmup Iteration   3: 389208.708 ops/s
[info] # Warmup Iteration   4: 518826.984 ops/s
[info] # Warmup Iteration   5: 519842.750 ops/s
[info] Iteration   1: 516162.396 ops/s
[info]                  ·gc.alloc.rate:               521.668 MB/sec
[info]                  ·gc.alloc.rate.norm:          1590.633 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2020.957 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 521853.097 ops/s
[info]                  ·gc.alloc.rate:      514.844 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 516694.272 ops/s
[info]                  ·gc.alloc.rate:               530.675 MB/sec
[info]                  ·gc.alloc.rate.norm:          1616.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2018.884 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 519208.517 ops/s
[info]                  ·gc.alloc.rate:               534.218 MB/sec
[info]                  ·gc.alloc.rate.norm:          1618.775 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2009.153 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 520398.556 ops/s
[info]                  ·gc.alloc.rate:                   526.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2006.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   518863.367 ±(99.9%) 9316.377 ops/s [Average]
[info]   (min, avg, max) = (516162.396, 518863.367, 521853.097), stdev = 2419.434
[info]   CI (99.9%): [509546.990, 528179.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   525.613 ±(99.9%) 29.344 MB/sec [Average]
[info]   (min, avg, max) = (514.844, 525.613, 534.218), stdev = 7.621
[info]   CI (99.9%): [496.269, 554.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1594.009 ±(99.9%) 103.347 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1594.009, 1618.775), stdev = 26.839
[info]   CI (99.9%): [1490.662, 1697.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   530.476 ±(99.9%) 1141.891 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 530.476, 663.613), stdev = 296.545
[info]   CI (99.9%): [≈ 0, 1672.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1611.121 ±(99.9%) 3468.141 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1611.121, 2020.957), stdev = 900.665
[info]   CI (99.9%): [≈ 0, 5079.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.108 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.063), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 5.000), stdev = 2.236
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.41% complete, ETA 01:23:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 271462.784 ops/s
[info] # Warmup Iteration   2: 572969.053 ops/s
[info] # Warmup Iteration   3: 682116.775 ops/s
[info] # Warmup Iteration   4: 684579.524 ops/s
[info] # Warmup Iteration   5: 655592.349 ops/s
[info] Iteration   1: 658813.271 ops/s
[info]                  ·gc.alloc.rate:                   442.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              1057.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1596.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 664068.998 ops/s
[info]                  ·gc.alloc.rate:      432.171 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 659897.442 ops/s
[info]                  ·gc.alloc.rate:                   444.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              1059.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1593.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.987 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 662818.957 ops/s
[info]                  ·gc.alloc.rate:                   448.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              1063.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1583.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 664142.496 ops/s
[info]                  ·gc.alloc.rate:      432.191 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   661948.233 ±(99.9%) 9452.590 ops/s [Average]
[info]   (min, avg, max) = (658813.271, 661948.233, 664142.496), stdev = 2454.808
[info]   CI (99.9%): [652495.643, 671400.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   439.939 ±(99.9%) 28.258 MB/sec [Average]
[info]   (min, avg, max) = (432.171, 439.939, 448.096), stdev = 7.338
[info]   CI (99.9%): [411.681, 468.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1045.921 ±(99.9%) 77.511 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1045.921, 1063.886), stdev = 20.129
[info]   CI (99.9%): [968.410, 1123.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   400.653 ±(99.9%) 1408.352 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 400.653, 668.234), stdev = 365.745
[info]   CI (99.9%): [≈ 0, 1809.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   954.622 ±(99.9%) 3355.679 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 954.622, 1596.161), stdev = 871.459
[info]   CI (99.9%): [≈ 0, 4310.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.760 ±(99.9%) 6.475 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.760, 3.768), stdev = 1.682
[info]   CI (99.9%): [≈ 0, 7.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.813 ±(99.9%) 15.441 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.813, 8.987), stdev = 4.010
[info]   CI (99.9%): [≈ 0, 17.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28.64% complete, ETA 01:23:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6286.131 ops/s
[info] # Warmup Iteration   2: 79584.404 ops/s
[info] # Warmup Iteration   3: 106459.147 ops/s
[info] # Warmup Iteration   4: 108637.125 ops/s
[info] # Warmup Iteration   5: 111671.009 ops/s
[info] Iteration   1: 111671.676 ops/s
[info]                  ·gc.alloc.rate:                   3785.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              53341.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4005.926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56448.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.880 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 110399.216 ops/s
[info]                  ·gc.alloc.rate:                   3764.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              53656.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3352.336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47783.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.297 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 111158.962 ops/s
[info]                  ·gc.alloc.rate:                   3829.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              54191.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4041.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57199.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.589 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 112051.515 ops/s
[info]                  ·gc.alloc.rate:                   3838.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              53909.966 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3379.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47463.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.585 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 112785.573 ops/s
[info]                  ·gc.alloc.rate:                   3890.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              54287.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4066.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56736.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.871 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   111613.389 ±(99.9%) 3470.970 ops/s [Average]
[info]   (min, avg, max) = (110399.216, 111613.389, 112785.573), stdev = 901.400
[info]   CI (99.9%): [108142.419, 115084.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3821.644 ±(99.9%) 189.785 MB/sec [Average]
[info]   (min, avg, max) = (3764.363, 3821.644, 3890.823), stdev = 49.287
[info]   CI (99.9%): [3631.859, 4011.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   53877.449 ±(99.9%) 1497.165 B/op [Average]
[info]   (min, avg, max) = (53341.272, 53877.449, 54287.852), stdev = 388.809
[info]   CI (99.9%): [52380.285, 55374.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3769.157 ±(99.9%) 1420.555 MB/sec [Average]
[info]   (min, avg, max) = (3352.336, 3769.157, 4066.286), stdev = 368.914
[info]   CI (99.9%): [2348.602, 5189.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   53126.399 ±(99.9%) 19375.245 B/op [Average]
[info]   (min, avg, max) = (47463.939, 53126.399, 57199.942), stdev = 5031.690
[info]   CI (99.9%): [33751.153, 72501.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.645 ±(99.9%) 0.932 B/op [Average]
[info]   (min, avg, max) = (0.297, 0.645, 0.880), stdev = 0.242
[info]   CI (99.9%): [≈ 0, 1.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28.87% complete, ETA 01:22:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57296.859 ops/s
[info] # Warmup Iteration   2: 229391.050 ops/s
[info] # Warmup Iteration   3: 239030.975 ops/s
[info] # Warmup Iteration   4: 247976.250 ops/s
[info] # Warmup Iteration   5: 244790.494 ops/s
[info] Iteration   1: 247843.044 ops/s
[info]                  ·gc.alloc.rate:                   1755.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              11145.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8494.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 247599.388 ops/s
[info]                  ·gc.alloc.rate:                   1766.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              11227.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12749.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.218 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.811 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 246842.681 ops/s
[info]                  ·gc.alloc.rate:                   1768.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              11275.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12750.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.531 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 243485.923 ops/s
[info]                  ·gc.alloc.rate:                   1730.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              11186.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8611.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 248239.199 ops/s
[info]                  ·gc.alloc.rate:                   1776.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              11262.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12681.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   246802.047 ±(99.9%) 7402.647 ops/s [Average]
[info]   (min, avg, max) = (243485.923, 246802.047, 248239.199), stdev = 1922.444
[info]   CI (99.9%): [239399.400, 254204.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1759.469 ±(99.9%) 68.268 MB/sec [Average]
[info]   (min, avg, max) = (1730.859, 1759.469, 1776.622), stdev = 17.729
[info]   CI (99.9%): [1691.201, 1827.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11219.537 ±(99.9%) 206.734 B/op [Average]
[info]   (min, avg, max) = (11145.746, 11219.537, 11275.430), stdev = 53.688
[info]   CI (99.9%): [11012.804, 11426.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1735.171 ±(99.9%) 1406.604 MB/sec [Average]
[info]   (min, avg, max) = (1332.418, 1735.171, 2005.643), stdev = 365.291
[info]   CI (99.9%): [328.567, 3141.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11057.242 ±(99.9%) 8804.967 B/op [Average]
[info]   (min, avg, max) = (8494.193, 11057.242, 12750.116), stdev = 2286.622
[info]   CI (99.9%): [2252.275, 19862.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.873 ±(99.9%) 7.201 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.873, 4.218), stdev = 1.870
[info]   CI (99.9%): [≈ 0, 8.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.548 ±(99.9%) 45.775 B/op [Average]
[info]   (min, avg, max) = (0.132, 5.548, 26.811), stdev = 11.888
[info]   CI (99.9%): [≈ 0, 51.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 8.000), stdev = 2.302
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 29.10% complete, ETA 01:22:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.787 ops/s
[info] # Warmup Iteration   2: 1005906.854 ops/s
[info] # Warmup Iteration   3: 1114622.531 ops/s
[info] # Warmup Iteration   4: 1239643.257 ops/s
[info] # Warmup Iteration   5: 1258336.822 ops/s
[info] Iteration   1: 1259056.877 ops/s
[info]                  ·gc.alloc.rate:               702.201 MB/sec
[info]                  ·gc.alloc.rate.norm:          877.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 829.336 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1228526.070 ops/s
[info]                  ·gc.alloc.rate:               692.333 MB/sec
[info]                  ·gc.alloc.rate.norm:          886.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 850.881 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1261195.888 ops/s
[info]                  ·gc.alloc.rate:               705.080 MB/sec
[info]                  ·gc.alloc.rate.norm:          879.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 828.845 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1151358.354 ops/s
[info]                  ·gc.alloc.rate:                   644.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              880.400 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     908.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1211824.002 ops/s
[info]                  ·gc.alloc.rate:                   684.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              889.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     863.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   1222392.238 ±(99.9%) 172691.219 ops/s [Average]
[info]   (min, avg, max) = (1151358.354, 1222392.238, 1261195.888), stdev = 44847.361
[info]   CI (99.9%): [1049701.019, 1395083.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   685.662 ±(99.9%) 94.680 MB/sec [Average]
[info]   (min, avg, max) = (644.166, 685.662, 705.080), stdev = 24.588
[info]   CI (99.9%): [590.981, 780.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   882.688 ±(99.9%) 19.176 B/op [Average]
[info]   (min, avg, max) = (877.629, 882.688, 889.052), stdev = 4.980
[info]   CI (99.9%): [863.511, 901.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   664.403 ±(99.9%) 2.098 MB/sec [Average]
[info]   (min, avg, max) = (663.561, 664.403, 664.938), stdev = 0.545
[info]   CI (99.9%): [662.305, 666.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   856.256 ±(99.9%) 126.488 B/op [Average]
[info]   (min, avg, max) = (828.845, 856.256, 908.789), stdev = 32.848
[info]   CI (99.9%): [729.768, 982.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.007), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.009), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.33% complete, ETA 01:22:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 366107.487 ops/s
[info] # Warmup Iteration   2: 932789.228 ops/s
[info] # Warmup Iteration   3: 1185274.339 ops/s
[info] # Warmup Iteration   4: 1185336.248 ops/s
[info] # Warmup Iteration   5: 1222377.170 ops/s
[info] Iteration   1: 1208002.398 ops/s
[info]                  ·gc.alloc.rate:               680.103 MB/sec
[info]                  ·gc.alloc.rate.norm:          886.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 861.342 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1190938.650 ops/s
[info]                  ·gc.alloc.rate:               703.776 MB/sec
[info]                  ·gc.alloc.rate.norm:          929.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 874.613 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 1228977.556 ops/s
[info]                  ·gc.alloc.rate:                   685.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              878.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     847.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1235481.268 ops/s
[info]                  ·gc.alloc.rate:               694.732 MB/sec
[info]                  ·gc.alloc.rate.norm:          884.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 845.618 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1211380.388 ops/s
[info]                  ·gc.alloc.rate:                   676.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              878.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     862.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   1214956.052 ±(99.9%) 68229.818 ops/s [Average]
[info]   (min, avg, max) = (1190938.650, 1214956.052, 1235481.268), stdev = 17719.067
[info]   CI (99.9%): [1146726.234, 1283185.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   688.169 ±(99.9%) 42.837 MB/sec [Average]
[info]   (min, avg, max) = (676.436, 688.169, 703.776), stdev = 11.125
[info]   CI (99.9%): [645.332, 731.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   891.523 ±(99.9%) 83.782 B/op [Average]
[info]   (min, avg, max) = (878.127, 891.523, 929.917), stdev = 21.758
[info]   CI (99.9%): [807.740, 975.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   662.565 ±(99.9%) 5.007 MB/sec [Average]
[info]   (min, avg, max) = (661.114, 662.565, 663.952), stdev = 1.300
[info]   CI (99.9%): [657.559, 667.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   858.307 ±(99.9%) 45.935 B/op [Average]
[info]   (min, avg, max) = (845.618, 858.307, 874.613), stdev = 11.929
[info]   CI (99.9%): [812.372, 904.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.027), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.56% complete, ETA 01:22:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 389675.781 ops/s
[info] # Warmup Iteration   2: 1048635.902 ops/s
[info] # Warmup Iteration   3: 1144031.910 ops/s
[info] # Warmup Iteration   4: 1136846.877 ops/s
[info] # Warmup Iteration   5: 1135750.352 ops/s
[info] Iteration   1: 1149125.899 ops/s
[info]                  ·gc.alloc.rate:               642.165 MB/sec
[info]                  ·gc.alloc.rate.norm:          879.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 915.110 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1147785.951 ops/s
[info]                  ·gc.alloc.rate:                   645.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              884.815 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     916.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1143247.265 ops/s
[info]                  ·gc.alloc.rate:                   646.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              889.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     920.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1147622.950 ops/s
[info]                  ·gc.alloc.rate:               647.411 MB/sec
[info]                  ·gc.alloc.rate.norm:          887.811 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 916.750 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1144754.158 ops/s
[info]                  ·gc.alloc.rate:               645.800 MB/sec
[info]                  ·gc.alloc.rate.norm:          887.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 919.538 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1146507.245 ±(99.9%) 9321.028 ops/s [Average]
[info]   (min, avg, max) = (1143247.265, 1146507.245, 1149125.899), stdev = 2420.641
[info]   CI (99.9%): [1137186.217, 1155828.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   645.425 ±(99.9%) 7.602 MB/sec [Average]
[info]   (min, avg, max) = (642.165, 645.425, 647.411), stdev = 1.974
[info]   CI (99.9%): [637.822, 653.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   885.889 ±(99.9%) 15.566 B/op [Average]
[info]   (min, avg, max) = (879.346, 885.889, 889.598), stdev = 4.042
[info]   CI (99.9%): [870.324, 901.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   668.501 ±(99.9%) 0.926 MB/sec [Average]
[info]   (min, avg, max) = (668.255, 668.501, 668.830), stdev = 0.240
[info]   CI (99.9%): [667.575, 669.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   917.561 ±(99.9%) 8.542 B/op [Average]
[info]   (min, avg, max) = (915.110, 917.561, 920.239), stdev = 2.218
[info]   CI (99.9%): [909.018, 926.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.057), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 29.79% complete, ETA 01:21:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 400270.420 ops/s
[info] # Warmup Iteration   2: 1067540.216 ops/s
[info] # Warmup Iteration   3: 1162630.033 ops/s
[info] # Warmup Iteration   4: 1160213.966 ops/s
[info] # Warmup Iteration   5: 1159713.116 ops/s
[info] Iteration   1: 1160630.053 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1163085.864 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1164374.206 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1164202.969 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1148488.854 ops/s
[info]                  ·gc.alloc.rate:      3.932 MB/sec
[info]                  ·gc.alloc.rate.norm: 5.387 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1160156.389 ±(99.9%) 25766.415 ops/s [Average]
[info]   (min, avg, max) = (1148488.854, 1160156.389, 1164374.206), stdev = 6691.456
[info]   CI (99.9%): [1134389.974, 1185922.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.787 ±(99.9%) 6.770 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.787, 3.932), stdev = 1.758
[info]   CI (99.9%): [≈ 0, 7.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.078 ±(99.9%) 9.276 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 1.078, 5.387), stdev = 2.409
[info]   CI (99.9%): [≈ 0, 10.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.02% complete, ETA 01:21:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6352.711 ops/s
[info] # Warmup Iteration   2: 20948.913 ops/s
[info] # Warmup Iteration   3: 39961.278 ops/s
[info] # Warmup Iteration   4: 39360.970 ops/s
[info] # Warmup Iteration   5: 36700.293 ops/s
[info] Iteration   1: 40354.338 ops/s
[info]                  ·gc.alloc.rate:                   1941.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              75723.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1984.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77396.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.423 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.508 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 40354.214 ops/s
[info]                  ·gc.alloc.rate:                   1942.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              75743.202 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1984.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77390.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63.323 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 40462.640 ops/s
[info]                  ·gc.alloc.rate:                   1944.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              75622.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1983.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77135.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102.740 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 39589.018 ops/s
[info]                  ·gc.alloc.rate:                   1893.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              75235.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1981.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78732.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.828 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 40090.325 ops/s
[info]                  ·gc.alloc.rate:                   1912.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              75095.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1980.367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77746.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.174 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85.365 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   40170.107 ±(99.9%) 1357.920 ops/s [Average]
[info]   (min, avg, max) = (39589.018, 40170.107, 40462.640), stdev = 352.648
[info]   CI (99.9%): [38812.187, 41528.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1926.880 ±(99.9%) 87.974 MB/sec [Average]
[info]   (min, avg, max) = (1893.270, 1926.880, 1944.261), stdev = 22.846
[info]   CI (99.9%): [1838.906, 2014.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   75484.206 ±(99.9%) 1149.418 B/op [Average]
[info]   (min, avg, max) = (75095.537, 75484.206, 75743.202), stdev = 298.500
[info]   CI (99.9%): [74334.788, 76633.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1982.791 ±(99.9%) 7.405 MB/sec [Average]
[info]   (min, avg, max) = (1980.367, 1982.791, 1984.720), stdev = 1.923
[info]   CI (99.9%): [1975.386, 1990.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   77680.363 ±(99.9%) 2414.688 B/op [Average]
[info]   (min, avg, max) = (77135.851, 77680.363, 78732.579), stdev = 627.087
[info]   CI (99.9%): [75265.675, 80095.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.577 ±(99.9%) 3.820 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.577, 2.641), stdev = 0.992
[info]   CI (99.9%): [≈ 0, 5.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   61.553 ±(99.9%) 149.019 B/op [Average]
[info]   (min, avg, max) = (0.828, 61.553, 102.740), stdev = 38.700
[info]   CI (99.9%): [≈ 0, 210.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.000, 14.000), stdev = 3.808
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30.25% complete, ETA 01:21:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18544.230 ops/s
[info] # Warmup Iteration   2: 82437.217 ops/s
[info] # Warmup Iteration   3: 139648.101 ops/s
[info] # Warmup Iteration   4: 142683.964 ops/s
[info] # Warmup Iteration   5: 139029.331 ops/s
[info] Iteration   1: 136852.649 ops/s
[info]                  ·gc.alloc.rate:                   1715.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              19733.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15321.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.841 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 148505.948 ops/s
[info]                  ·gc.alloc.rate:                   1867.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              19787.103 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21122.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.148 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 148731.672 ops/s
[info]                  ·gc.alloc.rate:                   1875.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              19842.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21019.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.643 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 145884.082 ops/s
[info]                  ·gc.alloc.rate:                   1810.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              19537.719 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14287.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.225 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 145355.832 ops/s
[info]                  ·gc.alloc.rate:               1816.073 MB/sec
[info]                  ·gc.alloc.rate.norm:          19663.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1988.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21529.335 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   145066.037 ±(99.9%) 18615.264 ops/s [Average]
[info]   (min, avg, max) = (136852.649, 145066.037, 148731.672), stdev = 4834.325
[info]   CI (99.9%): [126450.773, 163681.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1817.134 ±(99.9%) 245.021 MB/sec [Average]
[info]   (min, avg, max) = (1715.898, 1817.134, 1875.140), stdev = 63.631
[info]   CI (99.9%): [1572.113, 2062.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19712.763 ±(99.9%) 454.272 B/op [Average]
[info]   (min, avg, max) = (19537.719, 19712.763, 19842.031), stdev = 117.973
[info]   CI (99.9%): [19258.491, 20167.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1725.011 ±(99.9%) 1394.484 MB/sec [Average]
[info]   (min, avg, max) = (1324.335, 1725.011, 1993.601), stdev = 362.143
[info]   CI (99.9%): [330.526, 3119.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   18656.179 ±(99.9%) 13631.577 B/op [Average]
[info]   (min, avg, max) = (14287.461, 18656.179, 21529.335), stdev = 3540.077
[info]   CI (99.9%): [5024.602, 32287.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.008 ±(99.9%) 6.218 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.008, 3.812), stdev = 1.615
[info]   CI (99.9%): [≈ 0, 7.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   11.371 ±(99.9%) 71.665 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.371, 43.841), stdev = 18.611
[info]   CI (99.9%): [≈ 0, 83.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 11.000), stdev = 3.114
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.48% complete, ETA 01:20:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49429.504 ops/s
[info] # Warmup Iteration   2: 157142.193 ops/s
[info] # Warmup Iteration   3: 189143.373 ops/s
[info] # Warmup Iteration   4: 206593.244 ops/s
[info] # Warmup Iteration   5: 204204.415 ops/s
[info] Iteration   1: 198106.413 ops/s
[info]                  ·gc.alloc.rate:               1189.297 MB/sec
[info]                  ·gc.alloc.rate.norm:          9446.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1317.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10462.897 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 199229.815 ops/s
[info]                  ·gc.alloc.rate:               1179.889 MB/sec
[info]                  ·gc.alloc.rate.norm:          9316.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5207.044 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 198733.913 ops/s
[info]                  ·gc.alloc.rate:               1204.297 MB/sec
[info]                  ·gc.alloc.rate.norm:          9537.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1319.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10450.783 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 199614.368 ops/s
[info]                  ·gc.alloc.rate:                   1200.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              9465.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10430.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.173 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.251 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 206501.157 ops/s
[info]                  ·gc.alloc.rate:                   1235.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              9416.633 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10103.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.793 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   200437.133 ±(99.9%) 13233.023 ops/s [Average]
[info]   (min, avg, max) = (198106.413, 200437.133, 206501.157), stdev = 3436.574
[info]   CI (99.9%): [187204.110, 213670.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1201.900 ±(99.9%) 81.074 MB/sec [Average]
[info]   (min, avg, max) = (1179.889, 1201.900, 1235.403), stdev = 21.055
[info]   CI (99.9%): [1120.826, 1282.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9436.460 ±(99.9%) 309.587 B/op [Average]
[info]   (min, avg, max) = (9316.591, 9436.460, 9537.227), stdev = 80.399
[info]   CI (99.9%): [9126.873, 9746.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1188.989 ±(99.9%) 1139.959 MB/sec [Average]
[info]   (min, avg, max) = (659.440, 1188.989, 1325.516), stdev = 296.044
[info]   CI (99.9%): [49.030, 2328.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9331.010 ±(99.9%) 8895.840 B/op [Average]
[info]   (min, avg, max) = (5207.044, 9331.010, 10462.897), stdev = 2310.221
[info]   CI (99.9%): [435.170, 18226.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.255 ±(99.9%) 1.983 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.255, 1.173), stdev = 0.515
[info]   CI (99.9%): [≈ 0, 2.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.009 ±(99.9%) 15.645 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.009, 9.251), stdev = 4.063
[info]   CI (99.9%): [≈ 0, 17.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 5.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.72% complete, ETA 01:20:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105202.084 ops/s
[info] # Warmup Iteration   2: 215143.747 ops/s
[info] # Warmup Iteration   3: 245638.014 ops/s
[info] # Warmup Iteration   4: 253639.656 ops/s
[info] # Warmup Iteration   5: 252242.100 ops/s
[info] Iteration   1: 249066.507 ops/s
[info]                  ·gc.alloc.rate:                   1334.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              8430.812 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8374.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 243141.346 ops/s
[info]                  ·gc.alloc.rate:                   1312.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              8495.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8589.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 244342.414 ops/s
[info]                  ·gc.alloc.rate:                   1304.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              8405.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8560.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.948 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.990 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 252200.762 ops/s
[info]                  ·gc.alloc.rate:                   1354.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              8452.556 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8295.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.417 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 243621.346 ops/s
[info]                  ·gc.alloc.rate:                   1331.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              8601.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8580.917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.672 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   246474.475 ±(99.9%) 15318.689 ops/s [Average]
[info]   (min, avg, max) = (243141.346, 246474.475, 252200.762), stdev = 3978.215
[info]   CI (99.9%): [231155.786, 261793.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1327.755 ±(99.9%) 75.268 MB/sec [Average]
[info]   (min, avg, max) = (1304.973, 1327.755, 1354.692), stdev = 19.547
[info]   CI (99.9%): [1252.487, 1403.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   8477.077 ±(99.9%) 296.354 B/op [Average]
[info]   (min, avg, max) = (8405.262, 8477.077, 8601.415), stdev = 76.962
[info]   CI (99.9%): [8180.723, 8773.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1328.032 ±(99.9%) 6.134 MB/sec [Average]
[info]   (min, avg, max) = (1325.562, 1328.032, 1329.543), stdev = 1.593
[info]   CI (99.9%): [1321.899, 1334.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8480.171 ±(99.9%) 522.630 B/op [Average]
[info]   (min, avg, max) = (8295.637, 8480.171, 8589.478), stdev = 135.725
[info]   CI (99.9%): [7957.541, 9002.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.756 ±(99.9%) 4.850 MB/sec [Average]
[info]   (min, avg, max) = (0.008, 0.756, 2.948), stdev = 1.260
[info]   CI (99.9%): [≈ 0, 5.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.842 ±(99.9%) 31.244 B/op [Average]
[info]   (min, avg, max) = (0.050, 4.842, 18.990), stdev = 8.114
[info]   CI (99.9%): [≈ 0, 36.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 9.000), stdev = 3.114
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.95% complete, ETA 01:20:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2915.748 ops/s
[info] # Warmup Iteration   2: 48954.438 ops/s
[info] # Warmup Iteration   3: 96155.990 ops/s
[info] # Warmup Iteration   4: 95381.757 ops/s
[info] # Warmup Iteration   5: 104047.592 ops/s
[info] Iteration   1: 105194.618 ops/s
[info]                  ·gc.alloc.rate:                   3470.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              51918.273 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3338.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49941.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.492 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 103958.408 ops/s
[info]                  ·gc.alloc.rate:                   3440.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              52072.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3347.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50666.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.630 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 104626.661 ops/s
[info]                  ·gc.alloc.rate:                   3458.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              52025.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3360.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50548.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.313 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 101637.503 ops/s
[info]                  ·gc.alloc.rate:                   3404.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              52720.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3372.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52221.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.322 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 102580.486 ops/s
[info]                  ·gc.alloc.rate:                   3408.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              52276.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2706.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41516.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.319 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   103599.535 ±(99.9%) 5651.434 ops/s [Average]
[info]   (min, avg, max) = (101637.503, 103599.535, 105194.618), stdev = 1467.660
[info]   CI (99.9%): [97948.101, 109250.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3436.548 ±(99.9%) 113.170 MB/sec [Average]
[info]   (min, avg, max) = (3404.772, 3436.548, 3470.491), stdev = 29.390
[info]   CI (99.9%): [3323.378, 3549.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52202.571 ±(99.9%) 1222.060 B/op [Average]
[info]   (min, avg, max) = (51918.273, 52202.571, 52720.486), stdev = 317.365
[info]   CI (99.9%): [50980.511, 53424.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3225.163 ±(99.9%) 1116.781 MB/sec [Average]
[info]   (min, avg, max) = (2706.868, 3225.163, 3372.544), stdev = 290.025
[info]   CI (99.9%): [2108.382, 4341.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   48979.052 ±(99.9%) 16387.554 B/op [Average]
[info]   (min, avg, max) = (41516.226, 48979.052, 52221.461), stdev = 4255.796
[info]   CI (99.9%): [32591.498, 65366.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.244 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.167), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.815 ±(99.9%) 3.646 B/op [Average]
[info]   (min, avg, max) = (0.313, 0.815, 2.492), stdev = 0.947
[info]   CI (99.9%): [≈ 0, 4.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 0.837
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31.18% complete, ETA 01:20:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57169.633 ops/s
[info] # Warmup Iteration   2: 221918.977 ops/s
[info] # Warmup Iteration   3: 221918.270 ops/s
[info] # Warmup Iteration   4: 221227.296 ops/s
[info] # Warmup Iteration   5: 240263.206 ops/s
[info] Iteration   1: 240007.155 ops/s
[info]                  ·gc.alloc.rate:                   1577.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              10344.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13096.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 238786.410 ops/s
[info]                  ·gc.alloc.rate:                   1542.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              10166.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8785.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.345 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.039 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 236404.216 ops/s
[info]                  ·gc.alloc.rate:                   1523.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              10139.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8869.776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.098 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 239382.133 ops/s
[info]                  ·gc.alloc.rate:                   1541.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              10130.258 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8746.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 239315.614 ops/s
[info]                  ·gc.alloc.rate:                   1564.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              10289.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13112.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.274 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   238779.106 ±(99.9%) 5377.043 ops/s [Average]
[info]   (min, avg, max) = (236404.216, 238779.106, 240007.155), stdev = 1396.401
[info]   CI (99.9%): [233402.063, 244156.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1549.921 ±(99.9%) 82.592 MB/sec [Average]
[info]   (min, avg, max) = (1523.244, 1549.921, 1577.801), stdev = 21.449
[info]   CI (99.9%): [1467.329, 1632.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10214.090 ±(99.9%) 373.160 B/op [Average]
[info]   (min, avg, max) = (10130.258, 10214.090, 10344.528), stdev = 96.908
[info]   CI (99.9%): [9840.930, 10587.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1597.549 ±(99.9%) 1399.778 MB/sec [Average]
[info]   (min, avg, max) = (1330.519, 1597.549, 1997.479), stdev = 363.518
[info]   CI (99.9%): [197.771, 2997.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10522.064 ±(99.9%) 9078.333 B/op [Average]
[info]   (min, avg, max) = (8746.382, 10522.064, 13112.402), stdev = 2357.614
[info]   CI (99.9%): [1443.731, 19600.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.869 ±(99.9%) 5.531 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.869, 3.345), stdev = 1.436
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.737 ±(99.9%) 36.452 B/op [Average]
[info]   (min, avg, max) = (0.137, 5.737, 22.039), stdev = 9.467
[info]   CI (99.9%): [≈ 0, 42.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 13.000), stdev = 4.450
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.41% complete, ETA 01:19:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 257789.122 ops/s
[info] # Warmup Iteration   2: 768412.238 ops/s
[info] # Warmup Iteration   3: 856750.025 ops/s
[info] # Warmup Iteration   4: 859831.632 ops/s
[info] # Warmup Iteration   5: 819150.786 ops/s
[info] Iteration   1: 854374.362 ops/s
[info]                  ·gc.alloc.rate:               673.431 MB/sec
[info]                  ·gc.alloc.rate.norm:          1240.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1216.692 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 854710.059 ops/s
[info]                  ·gc.alloc.rate:               677.937 MB/sec
[info]                  ·gc.alloc.rate.norm:          1248.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1218.641 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 854117.904 ops/s
[info]                  ·gc.alloc.rate:                   679.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              1251.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1219.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 843700.945 ops/s
[info]                  ·gc.alloc.rate:                   661.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              1234.297 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1237.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 856515.011 ops/s
[info]                  ·gc.alloc.rate:               681.542 MB/sec
[info]                  ·gc.alloc.rate.norm:          1252.326 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1218.534 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   852683.656 ±(99.9%) 19671.312 ops/s [Average]
[info]   (min, avg, max) = (843700.945, 852683.656, 856515.011), stdev = 5108.577
[info]   CI (99.9%): [833012.344, 872354.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   674.747 ±(99.9%) 30.378 MB/sec [Average]
[info]   (min, avg, max) = (661.658, 674.747, 681.542), stdev = 7.889
[info]   CI (99.9%): [644.370, 705.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1245.252 ±(99.9%) 29.779 B/op [Average]
[info]   (min, avg, max) = (1234.297, 1245.252, 1252.326), stdev = 7.734
[info]   CI (99.9%): [1215.473, 1275.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   662.152 ±(99.9%) 4.018 MB/sec [Average]
[info]   (min, avg, max) = (660.638, 662.152, 663.151), stdev = 1.043
[info]   CI (99.9%): [658.134, 666.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1222.077 ±(99.9%) 32.452 B/op [Average]
[info]   (min, avg, max) = (1216.692, 1222.077, 1237.043), stdev = 8.428
[info]   CI (99.9%): [1189.625, 1254.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.081 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.039), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.64% complete, ETA 01:19:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 363219.456 ops/s
[info] # Warmup Iteration   2: 646854.001 ops/s
[info] # Warmup Iteration   3: 600843.133 ops/s
[info] # Warmup Iteration   4: 683871.167 ops/s
[info] # Warmup Iteration   5: 684181.294 ops/s
[info] Iteration   1: 676805.522 ops/s
[info]                  ·gc.alloc.rate:               540.172 MB/sec
[info]                  ·gc.alloc.rate.norm:          1255.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1553.682 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 689948.209 ops/s
[info]                  ·gc.alloc.rate:      529.739 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 688037.158 ops/s
[info]                  ·gc.alloc.rate:               546.301 MB/sec
[info]                  ·gc.alloc.rate.norm:          1249.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1528.321 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 685821.676 ops/s
[info]                  ·gc.alloc.rate:                   547.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              1255.835 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1534.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 686047.899 ops/s
[info]                  ·gc.alloc.rate:               552.880 MB/sec
[info]                  ·gc.alloc.rate.norm:          1268.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1534.324 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   685332.093 ±(99.9%) 19452.460 ops/s [Average]
[info]   (min, avg, max) = (676805.522, 685332.093, 689948.209), stdev = 5051.742
[info]   CI (99.9%): [665879.633, 704784.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   543.264 ±(99.9%) 33.893 MB/sec [Average]
[info]   (min, avg, max) = (529.739, 543.264, 552.880), stdev = 8.802
[info]   CI (99.9%): [509.371, 577.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1247.526 ±(99.9%) 89.065 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1247.526, 1268.374), stdev = 23.130
[info]   CI (99.9%): [1158.462, 1336.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   534.805 ±(99.9%) 1151.208 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.805, 668.806), stdev = 298.965
[info]   CI (99.9%): [≈ 0, 1686.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1230.219 ±(99.9%) 2648.393 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1230.219, 1553.682), stdev = 687.779
[info]   CI (99.9%): [≈ 0, 3878.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.048), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 31.87% complete, ETA 01:19:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 339643.592 ops/s
[info] # Warmup Iteration   2: 697688.782 ops/s
[info] # Warmup Iteration   3: 689654.351 ops/s
[info] # Warmup Iteration   4: 671058.578 ops/s
[info] # Warmup Iteration   5: 682924.805 ops/s
[info] Iteration   1: 689517.066 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 689723.370 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 686167.202 ops/s
[info]                  ·gc.alloc.rate:      11.158 MB/sec
[info]                  ·gc.alloc.rate.norm: 25.588 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 689628.245 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 640533.874 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   679113.951 ±(99.9%) 83246.648 ops/s [Average]
[info]   (min, avg, max) = (640533.874, 679113.951, 689723.370), stdev = 21618.890
[info]   CI (99.9%): [595867.303, 762360.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   2.232 ±(99.9%) 19.214 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 2.232, 11.158), stdev = 4.990
[info]   CI (99.9%): [≈ 0, 21.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   5.118 ±(99.9%) 44.063 B/op [Average]
[info]   (min, avg, max) = (0.001, 5.118, 25.588), stdev = 11.443
[info]   CI (99.9%): [≈ 0, 49.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32.10% complete, ETA 01:19:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64477.098 ops/s
[info] # Warmup Iteration   2: 537136.620 ops/s
[info] # Warmup Iteration   3: 569524.771 ops/s
[info] # Warmup Iteration   4: 626300.860 ops/s
[info] # Warmup Iteration   5: 623591.084 ops/s
[info] Iteration   1: 613763.442 ops/s
[info]                  ·gc.alloc.rate:                   1522.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              3904.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5133.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 625112.549 ops/s
[info]                  ·gc.alloc.rate:                   1533.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              3860.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3366.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.157 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 628511.621 ops/s
[info]                  ·gc.alloc.rate:                   1551.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              3886.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3351.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.266 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 577035.521 ops/s
[info]                  ·gc.alloc.rate:                   1427.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              3892.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3652.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 628700.112 ops/s
[info]                  ·gc.alloc.rate:                   1551.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              3884.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3352.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.261 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   614624.649 ±(99.9%) 84245.693 ops/s [Average]
[info]   (min, avg, max) = (577035.521, 614624.649, 628700.112), stdev = 21878.339
[info]   CI (99.9%): [530378.956, 698870.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1517.677 ±(99.9%) 199.109 MB/sec [Average]
[info]   (min, avg, max) = (1427.875, 1517.677, 1551.923), stdev = 51.708
[info]   CI (99.9%): [1318.569, 1716.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   3885.723 ±(99.9%) 61.568 B/op [Average]
[info]   (min, avg, max) = (3860.969, 3885.723, 3904.555), stdev = 15.989
[info]   CI (99.9%): [3824.155, 3947.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1471.465 ±(99.9%) 1142.596 MB/sec [Average]
[info]   (min, avg, max) = (1337.426, 1471.465, 2002.267), stdev = 296.729
[info]   CI (99.9%): [328.869, 2614.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3771.375 ±(99.9%) 2974.204 B/op [Average]
[info]   (min, avg, max) = (3351.940, 3771.375, 5133.999), stdev = 772.391
[info]   CI (99.9%): [797.171, 6745.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.460 ±(99.9%) 3.540 MB/sec [Average]
[info]   (min, avg, max) = (0.010, 0.460, 2.103), stdev = 0.919
[info]   CI (99.9%): [≈ 0, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.153 ±(99.9%) 8.861 B/op [Average]
[info]   (min, avg, max) = (0.026, 1.153, 5.266), stdev = 2.301
[info]   CI (99.9%): [≈ 0, 10.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.673
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32.33% complete, ETA 01:18:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1396.455 ops/s
[info] # Warmup Iteration   2: 6857.492 ops/s
[info] # Warmup Iteration   3: 10612.746 ops/s
[info] # Warmup Iteration   4: 10863.309 ops/s
[info] # Warmup Iteration   5: 11238.328 ops/s
[info] Iteration   1: 11431.095 ops/s
[info]                  ·gc.alloc.rate:               1423.991 MB/sec
[info]                  ·gc.alloc.rate.norm:          196041.792 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 182955.144 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   2: 11028.737 ops/s
[info]                  ·gc.alloc.rate:               1664.667 MB/sec
[info]                  ·gc.alloc.rate.norm:          237543.845 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 189734.176 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   3: 10983.489 ops/s
[info]                  ·gc.alloc.rate:                   1491.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              213685.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     190511.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 872.920 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 11536.491 ops/s
[info]                  ·gc.alloc.rate:                   1440.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              196460.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     181017.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.314 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 11320.659 ops/s
[info]                  ·gc.alloc.rate:                   1428.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              198572.513 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     276150.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.364 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   11260.094 ±(99.9%) 941.916 ops/s [Average]
[info]   (min, avg, max) = (10983.489, 11260.094, 11536.491), stdev = 244.613
[info]   CI (99.9%): [10318.179, 12202.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1489.895 ±(99.9%) 390.319 MB/sec [Average]
[info]   (min, avg, max) = (1423.991, 1489.895, 1664.667), stdev = 101.365
[info]   CI (99.9%): [1099.575, 1880.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   208460.787 ±(99.9%) 68589.333 B/op [Average]
[info]   (min, avg, max) = (196041.792, 208460.787, 237543.845), stdev = 17812.432
[info]   CI (99.9%): [139871.454, 277050.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1460.519 ±(99.9%) 1133.401 MB/sec [Average]
[info]   (min, avg, max) = (1326.914, 1460.519, 1987.048), stdev = 294.341
[info]   CI (99.9%): [327.118, 2593.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   204073.804 ±(99.9%) 155965.526 B/op [Average]
[info]   (min, avg, max) = (181017.713, 204073.804, 276150.634), stdev = 40503.752
[info]   CI (99.9%): [48108.278, 360039.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.340 ±(99.9%) 10.263 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.340, 6.094), stdev = 2.665
[info]   CI (99.9%): [≈ 0, 11.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   191.120 ±(99.9%) 1471.233 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 191.120, 872.920), stdev = 382.075
[info]   CI (99.9%): [≈ 0, 1662.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 11.000), stdev = 3.633
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.56% complete, ETA 01:18:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1022.389 ops/s
[info] # Warmup Iteration   2: 7541.693 ops/s
[info] # Warmup Iteration   3: 12433.226 ops/s
[info] # Warmup Iteration   4: 12554.648 ops/s
[info] # Warmup Iteration   5: 12405.366 ops/s
[info] Iteration   1: 12547.190 ops/s
[info]                  ·gc.alloc.rate:               1466.328 MB/sec
[info]                  ·gc.alloc.rate.norm:          183921.700 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 166908.165 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   2: 11798.393 ops/s
[info]                  ·gc.alloc.rate:                        1407.548 MB/sec
[info]                  ·gc.alloc.rate.norm:                   187702.374 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.025 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 3.357 B/op
[info]                  ·gc.churn.Metaspace:                   0.069 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              9.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:               1348.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          179768.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           5.409 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      721.260 B/op
[info]                  ·gc.count:                             4.000 counts
[info]                  ·gc.time:                              55.000 ms
[info] Iteration   3: 12642.575 ops/s
[info]                  ·gc.alloc.rate:                   1471.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              183161.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166014.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.183 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 12624.644 ops/s
[info]                  ·gc.alloc.rate:                   1483.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              184879.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     248277.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.190 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 11655.323 ops/s
[info]                  ·gc.alloc.rate:               1727.908 MB/sec
[info]                  ·gc.alloc.rate.norm:          233214.404 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 179185.330 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   12253.625 ±(99.9%) 1866.987 ops/s [Average]
[info]   (min, avg, max) = (11655.323, 12253.625, 12642.575), stdev = 484.851
[info]   CI (99.9%): [10386.638, 14120.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1511.352 ±(99.9%) 479.659 MB/sec [Average]
[info]   (min, avg, max) = (1407.548, 1511.352, 1727.908), stdev = 124.566
[info]   CI (99.9%): [1031.693, 1991.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   194575.901 ±(99.9%) 83435.528 B/op [Average]
[info]   (min, avg, max) = (183161.716, 194575.901, 233214.404), stdev = 21667.942
[info]   CI (99.9%): [111140.373, 278011.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space":
[info]   0.005 ±(99.9%) 0.043 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm":
[info]   0.671 ±(99.9%) 5.781 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.671, 3.357), stdev = 1.501
[info]   CI (99.9%): [≈ 0, 6.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.Metaspace":
[info]   0.014 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.069), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.Metaspace.norm":
[info]   1.847 ±(99.9%) 15.907 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.847, 9.237), stdev = 4.131
[info]   CI (99.9%): [≈ 0, 17.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1466.462 ±(99.9%) 1132.353 MB/sec [Average]
[info]   (min, avg, max) = (1327.601, 1466.462, 1992.321), stdev = 294.068
[info]   CI (99.9%): [334.109, 2598.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   188030.731 ±(99.9%) 132091.755 B/op [Average]
[info]   (min, avg, max) = (166014.168, 188030.731, 248277.022), stdev = 34303.809
[info]   CI (99.9%): [55938.976, 320122.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.098 ±(99.9%) 9.278 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.098, 5.409), stdev = 2.410
[info]   CI (99.9%): [≈ 0, 10.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   146.326 ±(99.9%) 1237.627 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 146.326, 721.260), stdev = 321.408
[info]   CI (99.9%): [≈ 0, 1383.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   77.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 15.400, 55.000), stdev = 22.300
[info]   CI (99.9%): [77.000, 77.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.79% complete, ETA 01:18:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93541.976 ops/s
[info] # Warmup Iteration   2: 260980.230 ops/s
[info] # Warmup Iteration   3: 305590.576 ops/s
[info] # Warmup Iteration   4: 341285.418 ops/s
[info] # Warmup Iteration   5: 327729.065 ops/s
[info] Iteration   1: 346488.617 ops/s
[info]                  ·gc.alloc.rate:                   2320.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              10539.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2661.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12087.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.817 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 348400.456 ops/s
[info]                  ·gc.alloc.rate:                   2320.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              10481.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8999.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.376 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 336575.105 ops/s
[info]                  ·gc.alloc.rate:               2269.815 MB/sec
[info]                  ·gc.alloc.rate.norm:          10613.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2657.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12425.938 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 337948.501 ops/s
[info]                  ·gc.alloc.rate:                   2252.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              10486.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9305.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 338314.659 ops/s
[info]                  ·gc.alloc.rate:               2281.113 MB/sec
[info]                  ·gc.alloc.rate.norm:          10612.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9326.261 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   341545.467 ±(99.9%) 21047.423 ops/s [Average]
[info]   (min, avg, max) = (336575.105, 341545.467, 348400.456), stdev = 5465.949
[info]   CI (99.9%): [320498.045, 362592.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2288.900 ±(99.9%) 117.730 MB/sec [Average]
[info]   (min, avg, max) = (2252.593, 2288.900, 2320.827), stdev = 30.574
[info]   CI (99.9%): [2171.171, 2406.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10546.489 ±(99.9%) 249.439 B/op [Average]
[info]   (min, avg, max) = (10481.175, 10546.489, 10613.797), stdev = 64.779
[info]   CI (99.9%): [10297.049, 10795.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2262.994 ±(99.9%) 1394.285 MB/sec [Average]
[info]   (min, avg, max) = (1992.082, 2262.994, 2661.872), stdev = 362.092
[info]   CI (99.9%): [868.709, 3657.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10428.939 ±(99.9%) 6461.451 B/op [Average]
[info]   (min, avg, max) = (8999.135, 10428.939, 12425.938), stdev = 1678.018
[info]   CI (99.9%): [3967.487, 16890.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.850 ±(99.9%) 7.092 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.850, 4.144), stdev = 1.842
[info]   CI (99.9%): [≈ 0, 7.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.858 ±(99.9%) 32.205 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.858, 18.817), stdev = 8.364
[info]   CI (99.9%): [≈ 0, 36.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 33.03% complete, ETA 01:17:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 592.781 ops/s
[info] # Warmup Iteration   2: 3674.241 ops/s
[info] # Warmup Iteration   3: 9708.929 ops/s
[info] # Warmup Iteration   4: 10448.865 ops/s
[info] # Warmup Iteration   5: 10500.327 ops/s
[info] Iteration   1: 10399.332 ops/s
[info]                  ·gc.alloc.rate:                   1832.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              277265.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     300651.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.300 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 10256.291 ops/s
[info]                  ·gc.alloc.rate:                   1792.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              275042.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     305792.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.194 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 9689.918 ops/s
[info]                  ·gc.alloc.rate:                   1759.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              285695.490 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216271.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91.285 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 10680.406 ops/s
[info]                  ·gc.alloc.rate:                   1883.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              277543.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     294804.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.211 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 10642.250 ops/s
[info]                  ·gc.alloc.rate:               1875.937 MB/sec
[info]                  ·gc.alloc.rate.norm:          277436.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 296672.926 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   10333.639 ±(99.9%) 1540.454 ops/s [Average]
[info]   (min, avg, max) = (9689.918, 10333.639, 10680.406), stdev = 400.051
[info]   CI (99.9%): [8793.185, 11874.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1828.765 ±(99.9%) 205.453 MB/sec [Average]
[info]   (min, avg, max) = (1759.229, 1828.765, 1883.428), stdev = 53.355
[info]   CI (99.9%): [1623.312, 2034.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   278596.802 ±(99.9%) 15788.678 B/op [Average]
[info]   (min, avg, max) = (275042.996, 278596.802, 285695.490), stdev = 4100.269
[info]   CI (99.9%): [262808.124, 294385.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1863.703 ±(99.9%) 1145.427 MB/sec [Average]
[info]   (min, avg, max) = (1331.736, 1863.703, 2006.007), stdev = 297.464
[info]   CI (99.9%): [718.276, 3009.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   282838.550 ±(99.9%) 144205.431 B/op [Average]
[info]   (min, avg, max) = (216271.505, 282838.550, 305792.075), stdev = 37449.692
[info]   CI (99.9%): [138633.119, 427043.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.200 ±(99.9%) 0.979 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.200, 0.562), stdev = 0.254
[info]   CI (99.9%): [≈ 0, 1.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   31.198 ±(99.9%) 155.993 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.198, 91.285), stdev = 40.511
[info]   CI (99.9%): [≈ 0, 187.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.140
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33.26% complete, ETA 01:17:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5669.571 ops/s
[info] # Warmup Iteration   2: 19798.626 ops/s
[info] # Warmup Iteration   3: 27205.548 ops/s
[info] # Warmup Iteration   4: 27784.459 ops/s
[info] # Warmup Iteration   5: 26949.842 ops/s
[info] Iteration   1: 26229.026 ops/s
[info]                  ·gc.alloc.rate:               1601.141 MB/sec
[info]                  ·gc.alloc.rate.norm:          96029.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1958.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117476.646 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     29.000 ms
[info] Iteration   2: 25326.413 ops/s
[info]                  ·gc.alloc.rate:                   1657.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              102994.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1266.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78733.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.256 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 202.372 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   3: 27456.144 ops/s
[info]                  ·gc.alloc.rate:                   1343.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              76998.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1252.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71788.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.804 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 160.670 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 27282.647 ops/s
[info]                  ·gc.alloc.rate:                   1344.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              77555.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1250.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72112.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.142 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.199 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 27127.583 ops/s
[info]                  ·gc.alloc.rate:                   1343.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              77925.454 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1251.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72618.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.926 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   26684.362 ±(99.9%) 3444.870 ops/s [Average]
[info]   (min, avg, max) = (25326.413, 26684.362, 27456.144), stdev = 894.622
[info]   CI (99.9%): [23239.492, 30129.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1457.969 ±(99.9%) 606.722 MB/sec [Average]
[info]   (min, avg, max) = (1343.282, 1457.969, 1657.253), stdev = 157.564
[info]   CI (99.9%): [851.246, 2064.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   86300.742 ±(99.9%) 47415.189 B/op [Average]
[info]   (min, avg, max) = (76998.799, 86300.742, 102994.595), stdev = 12313.574
[info]   CI (99.9%): [38885.553, 133715.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1396.058 ±(99.9%) 1211.473 MB/sec [Average]
[info]   (min, avg, max) = (1250.259, 1396.058, 1958.733), stdev = 314.616
[info]   CI (99.9%): [184.585, 2607.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   82545.809 ±(99.9%) 75991.230 B/op [Average]
[info]   (min, avg, max) = (71788.889, 82545.809, 117476.646), stdev = 19734.681
[info]   CI (99.9%): [6554.580, 158537.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.250 ±(99.9%) 6.288 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.250, 3.256), stdev = 1.633
[info]   CI (99.9%): [≈ 0, 7.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   74.833 ±(99.9%) 379.464 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 74.833, 202.372), stdev = 98.546
[info]   CI (99.9%): [≈ 0, 454.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   97.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (15.000, 19.400, 29.000), stdev = 5.857
[info]   CI (99.9%): [97.000, 97.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.49% complete, ETA 01:17:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6196.299 ops/s
[info] # Warmup Iteration   2: 22647.804 ops/s
[info] # Warmup Iteration   3: 31127.141 ops/s
[info] # Warmup Iteration   4: 31893.488 ops/s
[info] # Warmup Iteration   5: 29903.283 ops/s
[info] Iteration   1: 28730.626 ops/s
[info]                  ·gc.alloc.rate:                   1384.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              75868.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72450.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.315 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.233 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 31997.047 ops/s
[info]                  ·gc.alloc.rate:                   1231.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              60547.324 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65155.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.816 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89.321 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 30985.290 ops/s
[info]                  ·gc.alloc.rate:                   1184.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              60185.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67352.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.614 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 183.572 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 32481.635 ops/s
[info]                  ·gc.alloc.rate:                   1238.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              59988.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64178.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.438 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 32703.008 ops/s
[info]                  ·gc.alloc.rate:                   1231.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              59273.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31834.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   31379.521 ±(99.9%) 6244.599 ops/s [Average]
[info]   (min, avg, max) = (28730.626, 31379.521, 32703.008), stdev = 1621.703
[info]   CI (99.9%): [25134.922, 37624.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1254.173 ±(99.9%) 293.246 MB/sec [Average]
[info]   (min, avg, max) = (1184.906, 1254.173, 1384.972), stdev = 76.155
[info]   CI (99.9%): [960.927, 1547.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   63172.618 ±(99.9%) 27386.433 B/op [Average]
[info]   (min, avg, max) = (59273.895, 63172.618, 75868.148), stdev = 7112.170
[info]   CI (99.9%): [35786.186, 90559.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1191.901 ±(99.9%) 1141.568 MB/sec [Average]
[info]   (min, avg, max) = (661.579, 1191.901, 1326.015), stdev = 296.462
[info]   CI (99.9%): [50.333, 2333.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   60194.261 ±(99.9%) 62275.690 B/op [Average]
[info]   (min, avg, max) = (31834.290, 60194.261, 72450.851), stdev = 16172.799
[info]   CI (99.9%): [≈ 0, 122469.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.370 ±(99.9%) 5.516 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.370, 3.614), stdev = 1.433
[info]   CI (99.9%): [≈ 0, 6.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   68.714 ±(99.9%) 279.112 B/op [Average]
[info]   (min, avg, max) = (2.004, 68.714, 183.572), stdev = 72.485
[info]   CI (99.9%): [≈ 0, 347.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 10.000), stdev = 3.742
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.72% complete, ETA 01:17:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 328568.406 ops/s
[info] # Warmup Iteration   2: 715774.087 ops/s
[info] # Warmup Iteration   3: 787792.812 ops/s
[info] # Warmup Iteration   4: 791734.590 ops/s
[info] # Warmup Iteration   5: 781729.985 ops/s
[info] Iteration   1: 789256.307 ops/s
[info]                  ·gc.alloc.rate:               1477.336 MB/sec
[info]                  ·gc.alloc.rate.norm:          2945.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2672.675 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 785638.535 ops/s
[info]                  ·gc.alloc.rate:                   1460.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              2925.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2686.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 677949.226 ops/s
[info]                  ·gc.alloc.rate:                   1253.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              2909.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3114.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.284 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 788075.243 ops/s
[info]                  ·gc.alloc.rate:                   1462.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              2920.611 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2671.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.083 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 796421.729 ops/s
[info]                  ·gc.alloc.rate:               1490.131 MB/sec
[info]                  ·gc.alloc.rate.norm:          2944.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2640.706 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   767468.208 ±(99.9%) 193315.042 ops/s [Average]
[info]   (min, avg, max) = (677949.226, 767468.208, 796421.729), stdev = 50203.303
[info]   CI (99.9%): [574153.166, 960783.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1428.856 ±(99.9%) 379.477 MB/sec [Average]
[info]   (min, avg, max) = (1253.887, 1428.856, 1490.131), stdev = 98.549
[info]   CI (99.9%): [1049.379, 1808.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2929.147 ±(99.9%) 59.710 B/op [Average]
[info]   (min, avg, max) = (2909.715, 2929.147, 2945.804), stdev = 15.507
[info]   CI (99.9%): [2869.437, 2988.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1339.555 ±(99.9%) 8.961 MB/sec [Average]
[info]   (min, avg, max) = (1336.607, 1339.555, 1342.153), stdev = 2.327
[info]   CI (99.9%): [1330.593, 1348.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2757.111 ±(99.9%) 772.068 B/op [Average]
[info]   (min, avg, max) = (2640.706, 2757.111, 3114.539), stdev = 200.504
[info]   CI (99.9%): [1985.044, 3529.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.813 ±(99.9%) 6.863 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.813, 4.001), stdev = 1.782
[info]   CI (99.9%): [≈ 0, 7.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.882 ±(99.9%) 15.934 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.882, 9.284), stdev = 4.138
[info]   CI (99.9%): [≈ 0, 17.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 8.000), stdev = 2.550
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 33.95% complete, ETA 01:16:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 525668.246 ops/s
[info] # Warmup Iteration   2: 809080.993 ops/s
[info] # Warmup Iteration   3: 928609.526 ops/s
[info] # Warmup Iteration   4: 933907.681 ops/s
[info] # Warmup Iteration   5: 933378.086 ops/s
[info] Iteration   1: 936232.037 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 938392.163 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 938170.713 ops/s
[info]                  ·gc.alloc.rate:      0.810 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.359 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 941067.028 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 942113.183 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   939195.025 ±(99.9%) 9131.213 ops/s [Average]
[info]   (min, avg, max) = (936232.037, 939195.025, 942113.183), stdev = 2371.347
[info]   CI (99.9%): [930063.811, 948326.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.162 ±(99.9%) 1.394 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.162, 0.810), stdev = 0.362
[info]   CI (99.9%): [≈ 0, 1.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.272 ±(99.9%) 2.339 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.272, 1.359), stdev = 0.607
[info]   CI (99.9%): [≈ 0, 2.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34.18% complete, ETA 01:16:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6453.263 ops/s
[info] # Warmup Iteration   2: 16702.172 ops/s
[info] # Warmup Iteration   3: 24679.980 ops/s
[info] # Warmup Iteration   4: 32512.934 ops/s
[info] # Warmup Iteration   5: 31360.405 ops/s
[info] Iteration   1: 29493.121 ops/s
[info]                  ·gc.alloc.rate:                   1641.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              87612.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1940.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103531.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.549 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 296.100 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 32101.597 ops/s
[info]                  ·gc.alloc.rate:                   1339.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              65681.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1299.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63700.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.161 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 204.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 32153.305 ops/s
[info]                  ·gc.alloc.rate:                   1340.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              65564.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1303.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63777.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 31801.014 ops/s
[info]                  ·gc.alloc.rate:               1336.580 MB/sec
[info]                  ·gc.alloc.rate.norm:          66147.288 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1306.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64649.989 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 32029.486 ops/s
[info]                  ·gc.alloc.rate:               1335.307 MB/sec
[info]                  ·gc.alloc.rate.norm:          65610.562 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1310.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64382.226 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   31515.705 ±(99.9%) 4384.505 ops/s [Average]
[info]   (min, avg, max) = (29493.121, 31515.705, 32153.305), stdev = 1138.642
[info]   CI (99.9%): [27131.200, 35900.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1398.702 ±(99.9%) 523.419 MB/sec [Average]
[info]   (min, avg, max) = (1335.307, 1398.702, 1641.835), stdev = 135.930
[info]   CI (99.9%): [875.283, 1922.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   70123.163 ±(99.9%) 37658.356 B/op [Average]
[info]   (min, avg, max) = (65564.058, 70123.163, 87612.769), stdev = 9779.755
[info]   CI (99.9%): [32464.807, 107781.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1431.933 ±(99.9%) 1094.085 MB/sec [Average]
[info]   (min, avg, max) = (1299.295, 1431.933, 1940.150), stdev = 284.130
[info]   CI (99.9%): [337.848, 2526.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   72008.439 ±(99.9%) 67873.705 B/op [Average]
[info]   (min, avg, max) = (63700.984, 72008.439, 103531.684), stdev = 17626.586
[info]   CI (99.9%): [4134.734, 139882.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.950 ±(99.9%) 10.384 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.950, 5.549), stdev = 2.697
[info]   CI (99.9%): [≈ 0, 12.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   100.430 ±(99.9%) 540.702 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 100.430, 296.100), stdev = 140.419
[info]   CI (99.9%): [≈ 0, 641.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 10.000), stdev = 3.050
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 34.41% complete, ETA 01:16:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3372.512 ops/s
[info] # Warmup Iteration   2: 20405.392 ops/s
[info] # Warmup Iteration   3: 34453.677 ops/s
[info] # Warmup Iteration   4: 51665.408 ops/s
[info] # Warmup Iteration   5: 47100.200 ops/s
[info] Iteration   1: 46125.295 ops/s
[info]                  ·gc.alloc.rate:                   2575.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              87825.758 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2541.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86669.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.209 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.230 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         43.000 ms
[info] Iteration   2: 43808.974 ops/s
[info]                  ·gc.alloc.rate:                   1897.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              68161.240 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1897.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68180.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      17.277 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 620.650 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   3: 45111.999 ops/s
[info]                  ·gc.alloc.rate:                   1907.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              66530.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1888.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65862.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.280 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79.497 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 44056.431 ops/s
[info]                  ·gc.alloc.rate:                   1853.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              66213.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1883.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67273.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.975 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 42068.511 ops/s
[info]                  ·gc.alloc.rate:                   1766.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              66072.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1891.361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70759.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.557 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   44234.242 ±(99.9%) 5855.448 ops/s [Average]
[info]   (min, avg, max) = (42068.511, 44234.242, 46125.295), stdev = 1520.641
[info]   CI (99.9%): [38378.794, 50089.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   2000.018 ±(99.9%) 1256.508 MB/sec [Average]
[info]   (min, avg, max) = (1766.069, 2000.018, 2575.108), stdev = 326.311
[info]   CI (99.9%): [743.509, 3256.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   70960.807 ±(99.9%) 36445.042 B/op [Average]
[info]   (min, avg, max) = (66072.392, 70960.807, 87825.758), stdev = 9464.662
[info]   CI (99.9%): [34515.765, 107405.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2020.500 ±(99.9%) 1121.022 MB/sec [Average]
[info]   (min, avg, max) = (1883.219, 2020.500, 2541.195), stdev = 291.126
[info]   CI (99.9%): [899.478, 3141.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   71749.066 ±(99.9%) 32843.753 B/op [Average]
[info]   (min, avg, max) = (65862.816, 71749.066, 86669.130), stdev = 8529.418
[info]   CI (99.9%): [38905.314, 104592.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   4.178 ±(99.9%) 28.420 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 4.178, 17.277), stdev = 7.380
[info]   CI (99.9%): [≈ 0, 32.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   149.182 ±(99.9%) 1022.347 B/op [Average]
[info]   (min, avg, max) = (1.557, 149.182, 620.650), stdev = 265.500
[info]   CI (99.9%): [≈ 0, 1171.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   78.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 15.600, 43.000), stdev = 16.652
[info]   CI (99.9%): [78.000, 78.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.64% complete, ETA 01:16:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3030.798 ops/s
[info] # Warmup Iteration   2: 26956.081 ops/s
[info] # Warmup Iteration   3: 40470.370 ops/s
[info] # Warmup Iteration   4: 38238.728 ops/s
[info] # Warmup Iteration   5: 37447.889 ops/s
[info] Iteration   1: 40959.084 ops/s
[info]                  ·gc.alloc.rate:                        1412.300 MB/sec
[info]                  ·gc.alloc.rate.norm:                   54266.482 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.022 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0.848 B/op
[info]                  ·gc.churn.Metaspace:                   0.062 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              2.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:               1326.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          50982.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           8.306 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      319.144 B/op
[info]                  ·gc.count:                             4.000 counts
[info]                  ·gc.time:                              53.000 ms
[info] Iteration   2: 41949.428 ops/s
[info]                  ·gc.alloc.rate:               1465.341 MB/sec
[info]                  ·gc.alloc.rate.norm:          54949.925 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1317.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49409.733 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 43191.681 ops/s
[info]                  ·gc.alloc.rate:                   1493.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              54399.465 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47818.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.759 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 43113.064 ops/s
[info]                  ·gc.alloc.rate:                   1520.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              55517.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1968.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71869.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.760 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 43286.210 ops/s
[info]                  ·gc.alloc.rate:                   1493.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              54307.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1313.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47772.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.757 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   42499.893 ±(99.9%) 3922.154 ops/s [Average]
[info]   (min, avg, max) = (40959.084, 42499.893, 43286.210), stdev = 1018.571
[info]   CI (99.9%): [38577.739, 46422.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1477.064 ±(99.9%) 158.578 MB/sec [Average]
[info]   (min, avg, max) = (1412.300, 1477.064, 1520.852), stdev = 41.182
[info]   CI (99.9%): [1318.486, 1635.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   54688.129 ±(99.9%) 2076.089 B/op [Average]
[info]   (min, avg, max) = (54266.482, 54688.129, 55517.579), stdev = 539.154
[info]   CI (99.9%): [52612.040, 56764.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space":
[info]   0.004 ±(99.9%) 0.038 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.022), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm":
[info]   0.170 ±(99.9%) 1.460 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.170, 0.848), stdev = 0.379
[info]   CI (99.9%): [≈ 0, 1.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.Metaspace":
[info]   0.012 ±(99.9%) 0.106 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.Metaspace.norm":
[info]   0.473 ±(99.9%) 4.076 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.473, 2.367), stdev = 1.059
[info]   CI (99.9%): [≈ 0, 4.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1447.936 ±(99.9%) 1121.374 MB/sec [Average]
[info]   (min, avg, max) = (1312.536, 1447.936, 1968.786), stdev = 291.217
[info]   CI (99.9%): [326.562, 2569.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   53570.459 ±(99.9%) 39717.275 B/op [Average]
[info]   (min, avg, max) = (47772.633, 53570.459, 71869.075), stdev = 10314.450
[info]   CI (99.9%): [13853.184, 93287.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.674 ±(99.9%) 14.276 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.674, 8.306), stdev = 3.707
[info]   CI (99.9%): [≈ 0, 15.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   64.284 ±(99.9%) 548.607 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 64.284, 319.144), stdev = 142.471
[info]   CI (99.9%): [≈ 0, 612.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   67.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 13.400, 53.000), stdev = 22.154
[info]   CI (99.9%): [67.000, 67.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.87% complete, ETA 01:15:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 197239.669 ops/s
[info] # Warmup Iteration   2: 509738.583 ops/s
[info] # Warmup Iteration   3: 565323.281 ops/s
[info] # Warmup Iteration   4: 568927.479 ops/s
[info] # Warmup Iteration   5: 569235.121 ops/s
[info] Iteration   1: 569460.543 ops/s
[info]                  ·gc.alloc.rate:                   1515.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              4188.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3700.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 544045.241 ops/s
[info]                  ·gc.alloc.rate:                   1457.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              4216.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3875.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 552504.300 ops/s
[info]                  ·gc.alloc.rate:                   1480.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              4216.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5723.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.822 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.889 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 553102.719 ops/s
[info]                  ·gc.alloc.rate:               1480.253 MB/sec
[info]                  ·gc.alloc.rate.norm:          4210.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3802.348 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 552681.970 ops/s
[info]                  ·gc.alloc.rate:                   1484.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              4225.972 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3801.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   554358.955 ±(99.9%) 35619.019 ops/s [Average]
[info]   (min, avg, max) = (544045.241, 554358.955, 569460.543), stdev = 9250.146
[info]   CI (99.9%): [518739.935, 589977.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1483.546 ±(99.9%) 80.128 MB/sec [Average]
[info]   (min, avg, max) = (1457.443, 1483.546, 1515.596), stdev = 20.809
[info]   CI (99.9%): [1403.418, 1563.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4211.383 ±(99.9%) 54.704 B/op [Average]
[info]   (min, avg, max) = (4188.017, 4211.383, 4225.972), stdev = 14.206
[info]   CI (99.9%): [4156.679, 4266.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1471.965 ±(99.9%) 1156.109 MB/sec [Average]
[info]   (min, avg, max) = (1335.219, 1471.965, 2009.037), stdev = 300.238
[info]   CI (99.9%): [315.855, 2628.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4180.533 ±(99.9%) 3329.038 B/op [Average]
[info]   (min, avg, max) = (3700.493, 4180.533, 5723.059), stdev = 864.541
[info]   CI (99.9%): [851.495, 7509.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.777 ±(99.9%) 6.556 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.777, 3.822), stdev = 1.702
[info]   CI (99.9%): [≈ 0, 7.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.213 ±(99.9%) 18.675 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.213, 10.889), stdev = 4.850
[info]   CI (99.9%): [≈ 0, 20.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 8.000), stdev = 2.881
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35.10% complete, ETA 01:15:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1206.853 ops/s
[info] # Warmup Iteration   2: 10799.432 ops/s
[info] # Warmup Iteration   3: 20633.470 ops/s
[info] # Warmup Iteration   4: 22184.383 ops/s
[info] # Warmup Iteration   5: 22786.874 ops/s
[info] Iteration   1: 22642.158 ops/s
[info]                  ·gc.alloc.rate:                   2100.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              145989.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1985.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137959.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.447 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 20280.973 ops/s
[info]                  ·gc.alloc.rate:                   2150.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              166859.892 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154489.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.253 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 22636.398 ops/s
[info]                  ·gc.alloc.rate:                   2038.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              141677.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138737.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.569 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 248.077 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 22101.884 ops/s
[info]                  ·gc.alloc.rate:               2002.492 MB/sec
[info]                  ·gc.alloc.rate.norm:          142537.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1995.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 142017.395 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 22625.077 ops/s
[info]                  ·gc.alloc.rate:                   2045.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              142308.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138874.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.896 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   22057.298 ±(99.9%) 3925.538 ops/s [Average]
[info]   (min, avg, max) = (20280.973, 22057.298, 22642.158), stdev = 1019.450
[info]   CI (99.9%): [18131.760, 25982.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2067.544 ±(99.9%) 223.713 MB/sec [Average]
[info]   (min, avg, max) = (2002.492, 2067.544, 2150.258), stdev = 58.098
[info]   CI (99.9%): [1843.831, 2291.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   147874.543 ±(99.9%) 41377.371 B/op [Average]
[info]   (min, avg, max) = (141677.118, 147874.543, 166859.892), stdev = 10745.572
[info]   CI (99.9%): [106497.172, 189251.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1992.756 ±(99.9%) 18.373 MB/sec [Average]
[info]   (min, avg, max) = (1985.220, 1992.756, 1996.522), stdev = 4.771
[info]   CI (99.9%): [1974.383, 2011.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   142415.589 ±(99.9%) 26669.159 B/op [Average]
[info]   (min, avg, max) = (137959.560, 142415.589, 154489.715), stdev = 6925.896
[info]   CI (99.9%): [115746.430, 169084.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.907 ±(99.9%) 5.917 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.907, 3.569), stdev = 1.537
[info]   CI (99.9%): [≈ 0, 6.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   64.535 ±(99.9%) 411.427 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 64.535, 248.077), stdev = 106.846
[info]   CI (99.9%): [≈ 0, 475.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 2.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35.33% complete, ETA 01:15:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8929.260 ops/s
[info] # Warmup Iteration   2: 63580.564 ops/s
[info] # Warmup Iteration   3: 68475.431 ops/s
[info] # Warmup Iteration   4: 70584.319 ops/s
[info] # Warmup Iteration   5: 73589.252 ops/s
[info] Iteration   1: 73731.518 ops/s
[info]                  ·gc.alloc.rate:                   1955.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              41745.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42500.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.444 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 74093.299 ops/s
[info]                  ·gc.alloc.rate:                   1955.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              41521.409 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42351.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.321 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 73228.730 ops/s
[info]                  ·gc.alloc.rate:                   1924.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              41358.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42879.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.290 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 72174.440 ops/s
[info]                  ·gc.alloc.rate:                   1896.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              41352.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43533.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.888 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.179 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 74566.114 ops/s
[info]                  ·gc.alloc.rate:                   1971.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              41590.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42146.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.439 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   73558.820 ±(99.9%) 3526.862 ops/s [Average]
[info]   (min, avg, max) = (72174.440, 73558.820, 74566.114), stdev = 915.915
[info]   CI (99.9%): [70031.958, 77085.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1940.559 ±(99.9%) 115.483 MB/sec [Average]
[info]   (min, avg, max) = (1896.373, 1940.559, 1971.290), stdev = 29.991
[info]   CI (99.9%): [1825.076, 2056.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   41513.906 ±(99.9%) 637.752 B/op [Average]
[info]   (min, avg, max) = (41352.802, 41513.906, 41745.658), stdev = 165.622
[info]   CI (99.9%): [40876.154, 42151.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1994.870 ±(99.9%) 9.671 MB/sec [Average]
[info]   (min, avg, max) = (1991.008, 1994.870, 1997.616), stdev = 2.512
[info]   CI (99.9%): [1985.199, 2004.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   42682.348 ±(99.9%) 2102.829 B/op [Average]
[info]   (min, avg, max) = (42146.355, 42682.348, 43533.306), stdev = 546.098
[info]   CI (99.9%): [40579.519, 44785.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.711 ±(99.9%) 3.093 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.711, 1.888), stdev = 0.803
[info]   CI (99.9%): [≈ 0, 3.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   15.335 ±(99.9%) 67.186 B/op [Average]
[info]   (min, avg, max) = (0.439, 15.335, 41.179), stdev = 17.448
[info]   CI (99.9%): [≈ 0, 82.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 9.000), stdev = 2.074
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.57% complete, ETA 01:15:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23954.006 ops/s
[info] # Warmup Iteration   2: 165083.014 ops/s
[info] # Warmup Iteration   3: 171576.013 ops/s
[info] # Warmup Iteration   4: 208114.274 ops/s
[info] # Warmup Iteration   5: 207928.377 ops/s
[info] Iteration   1: 207385.036 ops/s
[info]                  ·gc.alloc.rate:               1626.601 MB/sec
[info]                  ·gc.alloc.rate.norm:          12344.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1988.722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15092.243 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 206969.014 ops/s
[info]                  ·gc.alloc.rate:               1606.492 MB/sec
[info]                  ·gc.alloc.rate.norm:          12216.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10093.226 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 207625.810 ops/s
[info]                  ·gc.alloc.rate:                   1622.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              12298.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10076.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.316 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 208419.609 ops/s
[info]                  ·gc.alloc.rate:                   1634.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              12337.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15088.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.157 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 202222.248 ops/s
[info]                  ·gc.alloc.rate:                   1572.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              12239.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10395.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.842 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   206524.343 ±(99.9%) 9481.465 ops/s [Average]
[info]   (min, avg, max) = (202222.248, 206524.343, 208419.609), stdev = 2462.306
[info]   CI (99.9%): [197042.879, 216005.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1612.503 ±(99.9%) 93.511 MB/sec [Average]
[info]   (min, avg, max) = (1572.975, 1612.503, 1634.028), stdev = 24.285
[info]   CI (99.9%): [1518.991, 1706.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   12287.146 ±(99.9%) 221.306 B/op [Average]
[info]   (min, avg, max) = (12216.023, 12287.146, 12344.137), stdev = 57.472
[info]   CI (99.9%): [12065.840, 12508.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1595.922 ±(99.9%) 1397.885 MB/sec [Average]
[info]   (min, avg, max) = (1327.329, 1595.922, 1998.408), stdev = 363.026
[info]   CI (99.9%): [198.037, 2993.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   12149.027 ±(99.9%) 10350.575 B/op [Average]
[info]   (min, avg, max) = (10076.150, 12149.027, 15092.243), stdev = 2688.011
[info]   CI (99.9%): [1798.452, 22499.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.214 ±(99.9%) 1.710 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.214, 1.008), stdev = 0.444
[info]   CI (99.9%): [≈ 0, 1.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.663 ±(99.9%) 13.311 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.663, 7.842), stdev = 3.457
[info]   CI (99.9%): [≈ 0, 14.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.80% complete, ETA 01:14:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 468107.401 ops/s
[info] # Warmup Iteration   2: 776897.288 ops/s
[info] # Warmup Iteration   3: 875620.095 ops/s
[info] # Warmup Iteration   4: 880092.853 ops/s
[info] # Warmup Iteration   5: 856083.999 ops/s
[info] Iteration   1: 855217.672 ops/s
[info]                  ·gc.alloc.rate:               931.312 MB/sec
[info]                  ·gc.alloc.rate.norm:          1713.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1232.022 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 874777.764 ops/s
[info]                  ·gc.alloc.rate:               961.458 MB/sec
[info]                  ·gc.alloc.rate.norm:          1729.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1205.695 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 856774.927 ops/s
[info]                  ·gc.alloc.rate:               969.254 MB/sec
[info]                  ·gc.alloc.rate.norm:          1780.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2461.972 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 844011.184 ops/s
[info]                  ·gc.alloc.rate:               929.976 MB/sec
[info]                  ·gc.alloc.rate.norm:          1733.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1249.639 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 858236.261 ops/s
[info]                  ·gc.alloc.rate:                   961.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              1763.316 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2460.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   857803.562 ±(99.9%) 42456.968 ops/s [Average]
[info]   (min, avg, max) = (844011.184, 857803.562, 874777.764), stdev = 11025.940
[info]   CI (99.9%): [815346.594, 900260.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   950.725 ±(99.9%) 71.645 MB/sec [Average]
[info]   (min, avg, max) = (929.976, 950.725, 969.254), stdev = 18.606
[info]   CI (99.9%): [879.080, 1022.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1744.163 ±(99.9%) 104.119 B/op [Average]
[info]   (min, avg, max) = (1713.460, 1744.163, 1780.281), stdev = 27.039
[info]   CI (99.9%): [1640.044, 1848.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   938.422 ±(99.9%) 1415.299 MB/sec [Average]
[info]   (min, avg, max) = (669.637, 938.422, 1341.709), stdev = 367.549
[info]   CI (99.9%): [≈ 0, 2353.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1721.920 ±(99.9%) 2599.099 B/op [Average]
[info]   (min, avg, max) = (1205.695, 1721.920, 2461.972), stdev = 674.978
[info]   CI (99.9%): [≈ 0, 4321.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.038), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 9.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36.03% complete, ETA 01:14:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 794500.707 ops/s
[info] # Warmup Iteration   2: 880457.789 ops/s
[info] # Warmup Iteration   3: 911685.464 ops/s
[info] # Warmup Iteration   4: 665317.140 ops/s
[info] # Warmup Iteration   5: 911501.706 ops/s
[info] Iteration   1: 911678.121 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 914269.501 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 913324.339 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 914479.760 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 913809.239 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   913512.192 ±(99.9%) 4303.879 ops/s [Average]
[info]   (min, avg, max) = (911678.121, 913512.192, 914479.760), stdev = 1117.704
[info]   CI (99.9%): [909208.313, 917816.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36.26% complete, ETA 01:14:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15118.403 ops/s
[info] # Warmup Iteration   2: 73064.226 ops/s
[info] # Warmup Iteration   3: 82178.076 ops/s
[info] # Warmup Iteration   4: 94187.103 ops/s
[info] # Warmup Iteration   5: 94013.704 ops/s
[info] Iteration   1: 94975.814 ops/s
[info]                  ·gc.alloc.rate:                   1966.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              32590.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22110.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.575 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 95506.832 ops/s
[info]                  ·gc.alloc.rate:                   1981.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              32656.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32930.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.669 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 91444.352 ops/s
[info]                  ·gc.alloc.rate:                   1928.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              33177.962 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34291.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.717 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 95378.516 ops/s
[info]                  ·gc.alloc.rate:                   1981.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              32698.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32888.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.344 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 94662.307 ops/s
[info]                  ·gc.alloc.rate:               1972.520 MB/sec
[info]                  ·gc.alloc.rate.norm:          32795.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1996.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33198.557 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   94393.564 ±(99.9%) 6477.380 ops/s [Average]
[info]   (min, avg, max) = (91444.352, 94393.564, 95506.832), stdev = 1682.155
[info]   CI (99.9%): [87916.184, 100870.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1966.129 ±(99.9%) 85.536 MB/sec [Average]
[info]   (min, avg, max) = (1928.079, 1966.129, 1981.801), stdev = 22.213
[info]   CI (99.9%): [1880.594, 2051.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32783.615 ±(99.9%) 896.174 B/op [Average]
[info]   (min, avg, max) = (32590.008, 32783.615, 33177.962), stdev = 232.733
[info]   CI (99.9%): [31887.441, 33679.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1863.088 ±(99.9%) 1138.344 MB/sec [Average]
[info]   (min, avg, max) = (1334.276, 1863.088, 1998.476), stdev = 295.624
[info]   CI (99.9%): [724.743, 3001.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   31084.106 ±(99.9%) 19439.775 B/op [Average]
[info]   (min, avg, max) = (22110.725, 31084.106, 34291.393), stdev = 5048.448
[info]   CI (99.9%): [11644.331, 50523.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.971 ±(99.9%) 5.647 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.971, 3.354), stdev = 1.467
[info]   CI (99.9%): [≈ 0, 6.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   16.061 ±(99.9%) 93.526 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.061, 55.575), stdev = 24.288
[info]   CI (99.9%): [≈ 0, 109.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.387
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36.49% complete, ETA 01:13:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2049.191 ops/s
[info] # Warmup Iteration   2: 10689.368 ops/s
[info] # Warmup Iteration   3: 16189.437 ops/s
[info] # Warmup Iteration   4: 19101.977 ops/s
[info] # Warmup Iteration   5: 19092.303 ops/s
[info] Iteration   1: 19102.879 ops/s
[info]                  ·gc.alloc.rate:                   1662.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              136944.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109462.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.715 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 18708.817 ops/s
[info]                  ·gc.alloc.rate:                   1798.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              151230.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     167804.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 302.953 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 17400.946 ops/s
[info]                  ·gc.alloc.rate:                   1818.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              164517.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180144.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73.429 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 18570.420 ops/s
[info]                  ·gc.alloc.rate:                   1730.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              146676.946 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112506.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 190.447 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 19874.965 ops/s
[info]                  ·gc.alloc.rate:                   1746.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              138318.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157776.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.226 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   18731.605 ±(99.9%) 3466.793 ops/s [Average]
[info]   (min, avg, max) = (17400.946, 18731.605, 19874.965), stdev = 900.315
[info]   CI (99.9%): [15264.812, 22198.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1751.421 ±(99.9%) 237.318 MB/sec [Average]
[info]   (min, avg, max) = (1662.189, 1751.421, 1818.962), stdev = 61.631
[info]   CI (99.9%): [1514.103, 1988.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   147537.449 ±(99.9%) 43046.820 B/op [Average]
[info]   (min, avg, max) = (136944.582, 147537.449, 164517.309), stdev = 11179.122
[info]   CI (99.9%): [104490.630, 190584.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1727.195 ±(99.9%) 1403.024 MB/sec [Average]
[info]   (min, avg, max) = (1327.505, 1727.195, 1995.630), stdev = 364.361
[info]   CI (99.9%): [324.171, 3130.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   145539.094 ±(99.9%) 125305.271 B/op [Average]
[info]   (min, avg, max) = (109462.202, 145539.094, 180144.923), stdev = 32541.381
[info]   CI (99.9%): [20233.822, 270844.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.405 ±(99.9%) 5.755 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.405, 3.603), stdev = 1.494
[info]   CI (99.9%): [≈ 0, 7.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   119.154 ±(99.9%) 484.012 B/op [Average]
[info]   (min, avg, max) = (1.715, 119.154, 302.953), stdev = 125.696
[info]   CI (99.9%): [≈ 0, 603.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 13.000), stdev = 3.975
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.72% complete, ETA 01:13:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2027.132 ops/s
[info] # Warmup Iteration   2: 11988.818 ops/s
[info] # Warmup Iteration   3: 18931.489 ops/s
[info] # Warmup Iteration   4: 18489.665 ops/s
[info] # Warmup Iteration   5: 18381.877 ops/s
[info] Iteration   1: 19119.766 ops/s
[info]                  ·gc.alloc.rate:                   1546.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              127271.829 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109337.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.355 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 18446.728 ops/s
[info]                  ·gc.alloc.rate:                        1729.163 MB/sec
[info]                  ·gc.alloc.rate.norm:                   147530.468 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.017 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 1.477 B/op
[info]                  ·gc.churn.Metaspace:                   0.049 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              4.162 B/op
[info]                  ·gc.churn.PS_Eden_Space:               2022.329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          172543.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           6.257 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      533.830 B/op
[info]                  ·gc.count:                             5.000 counts
[info]                  ·gc.time:                              73.000 ms
[info] Iteration   3: 17891.608 ops/s
[info]                  ·gc.alloc.rate:               1659.100 MB/sec
[info]                  ·gc.alloc.rate.norm:          145937.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117133.469 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 18828.024 ops/s
[info]                  ·gc.alloc.rate:                   1495.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              124984.700 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110915.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 256.701 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 18820.349 ops/s
[info]                  ·gc.alloc.rate:                   1497.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              125237.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111056.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.481 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   18621.295 ±(99.9%) 1820.167 ops/s [Average]
[info]   (min, avg, max) = (17891.608, 18621.295, 19119.766), stdev = 472.692
[info]   CI (99.9%): [16801.128, 20441.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1585.551 ±(99.9%) 401.232 MB/sec [Average]
[info]   (min, avg, max) = (1495.246, 1585.551, 1729.163), stdev = 104.199
[info]   CI (99.9%): [1184.319, 1986.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   134192.375 ±(99.9%) 44271.323 B/op [Average]
[info]   (min, avg, max) = (124984.700, 134192.375, 147530.468), stdev = 11497.122
[info]   CI (99.9%): [89921.053, 178463.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space":
[info]   0.003 ±(99.9%) 0.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm":
[info]   0.295 ±(99.9%) 2.543 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.295, 1.477), stdev = 0.660
[info]   CI (99.9%): [≈ 0, 2.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Metaspace":
[info]   0.010 ±(99.9%) 0.084 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Metaspace.norm":
[info]   0.832 ±(99.9%) 7.167 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.832, 4.162), stdev = 1.861
[info]   CI (99.9%): [≈ 0, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1467.526 ±(99.9%) 1194.274 MB/sec [Average]
[info]   (min, avg, max) = (1326.931, 1467.526, 2022.329), stdev = 310.149
[info]   CI (99.9%): [273.251, 2661.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   124197.241 ±(99.9%) 104697.765 B/op [Average]
[info]   (min, avg, max) = (109337.476, 124197.241, 172543.125), stdev = 27189.677
[info]   CI (99.9%): [19499.475, 228895.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.880 ±(99.9%) 10.705 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.880, 6.257), stdev = 2.780
[info]   CI (99.9%): [≈ 0, 12.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   159.273 ±(99.9%) 911.325 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 159.273, 533.830), stdev = 236.668
[info]   CI (99.9%): [≈ 0, 1070.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 5.000), stdev = 1.342
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   102.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 20.400, 73.000), stdev = 29.424
[info]   CI (99.9%): [102.000, 102.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.95% complete, ETA 01:13:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 327129.626 ops/s
[info] # Warmup Iteration   2: 723236.802 ops/s
[info] # Warmup Iteration   3: 792727.950 ops/s
[info] # Warmup Iteration   4: 786105.787 ops/s
[info] # Warmup Iteration   5: 780143.012 ops/s
[info] Iteration   1: 797674.412 ops/s
[info]                  ·gc.alloc.rate:                   2128.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              4200.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3966.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.947 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.788 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 785881.448 ops/s
[info]                  ·gc.alloc.rate:                   2110.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              4226.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4016.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 800499.322 ops/s
[info]                  ·gc.alloc.rate:                   2137.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              4200.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3940.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 796673.512 ops/s
[info]                  ·gc.alloc.rate:               2139.880 MB/sec
[info]                  ·gc.alloc.rate.norm:          4227.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3962.467 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 772140.035 ops/s
[info]                  ·gc.alloc.rate:                   2089.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              4258.172 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4095.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   790573.746 ±(99.9%) 45069.110 ops/s [Average]
[info]   (min, avg, max) = (772140.035, 790573.746, 800499.322), stdev = 11704.305
[info]   CI (99.9%): [745504.635, 835642.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2121.326 ±(99.9%) 80.532 MB/sec [Average]
[info]   (min, avg, max) = (2089.854, 2121.326, 2139.880), stdev = 20.914
[info]   CI (99.9%): [2040.794, 2201.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4222.678 ±(99.9%) 92.143 B/op [Average]
[info]   (min, avg, max) = (4200.417, 4222.678, 4258.172), stdev = 23.929
[info]   CI (99.9%): [4130.535, 4314.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2007.490 ±(99.9%) 10.030 MB/sec [Average]
[info]   (min, avg, max) = (2005.046, 2007.490, 2010.438), stdev = 2.605
[info]   CI (99.9%): [1997.461, 2017.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3996.563 ±(99.9%) 239.144 B/op [Average]
[info]   (min, avg, max) = (3940.937, 3996.563, 4095.857), stdev = 62.105
[info]   CI (99.9%): [3757.420, 4235.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.802 ±(99.9%) 6.771 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.802, 3.947), stdev = 1.758
[info]   CI (99.9%): [≈ 0, 7.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.583 ±(99.9%) 13.358 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.583, 7.788), stdev = 3.469
[info]   CI (99.9%): [≈ 0, 14.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37.18% complete, ETA 01:13:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 571.640 ops/s
[info] # Warmup Iteration   2: 7173.097 ops/s
[info] # Warmup Iteration   3: 13726.053 ops/s
[info] # Warmup Iteration   4: 14863.573 ops/s
[info] # Warmup Iteration   5: 14656.769 ops/s
[info] Iteration   1: 14755.583 ops/s
[info]                  ·gc.alloc.rate:               1999.644 MB/sec
[info]                  ·gc.alloc.rate.norm:          213277.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1988.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 212123.841 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 14642.161 ops/s
[info]                  ·gc.alloc.rate:                   1979.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              212634.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214333.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109.868 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 14637.807 ops/s
[info]                  ·gc.alloc.rate:                   2000.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              215040.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     215072.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.810 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 13800.374 ops/s
[info]                  ·gc.alloc.rate:               2047.945 MB/sec
[info]                  ·gc.alloc.rate.norm:          233546.951 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 228585.466 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 13919.855 ops/s
[info]                  ·gc.alloc.rate:                   2060.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              232998.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     226706.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.528 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 851.166 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   14351.156 ±(99.9%) 1743.236 ops/s [Average]
[info]   (min, avg, max) = (13800.374, 14351.156, 14755.583), stdev = 452.713
[info]   CI (99.9%): [12607.920, 16094.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2017.601 ±(99.9%) 134.648 MB/sec [Average]
[info]   (min, avg, max) = (1979.060, 2017.601, 2060.847), stdev = 34.968
[info]   CI (99.9%): [1882.952, 2152.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   221499.471 ±(99.9%) 41529.614 B/op [Average]
[info]   (min, avg, max) = (212634.724, 221499.471, 233546.951), stdev = 10785.109
[info]   CI (99.9%): [179969.857, 263029.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1998.829 ±(99.9%) 26.654 MB/sec [Average]
[info]   (min, avg, max) = (1988.829, 1998.829, 2005.201), stdev = 6.922
[info]   CI (99.9%): [1972.175, 2025.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   219364.383 ±(99.9%) 29520.881 B/op [Average]
[info]   (min, avg, max) = (212123.841, 219364.383, 228585.466), stdev = 7666.479
[info]   CI (99.9%): [189843.502, 248885.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.777 ±(99.9%) 12.485 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.777, 7.528), stdev = 3.242
[info]   CI (99.9%): [≈ 0, 14.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   199.369 ±(99.9%) 1413.634 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 199.369, 851.166), stdev = 367.116
[info]   CI (99.9%): [≈ 0, 1613.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37.41% complete, ETA 01:12:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7560.366 ops/s
[info] # Warmup Iteration   2: 33431.700 ops/s
[info] # Warmup Iteration   3: 46077.791 ops/s
[info] # Warmup Iteration   4: 48028.469 ops/s
[info] # Warmup Iteration   5: 46330.539 ops/s
[info] Iteration   1: 46479.294 ops/s
[info]                  ·gc.alloc.rate:                   1861.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              63048.736 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1953.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66157.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.906 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132.275 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         27.000 ms
[info] Iteration   2: 47898.730 ops/s
[info]                  ·gc.alloc.rate:                   1687.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              55456.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1278.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42024.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.085 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.796 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 46533.234 ops/s
[info]                  ·gc.alloc.rate:                   1659.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              56116.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1928.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65226.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.543 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   4: 48458.386 ops/s
[info]                  ·gc.alloc.rate:                   1717.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              55777.521 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1292.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41971.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.158 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.138 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   5: 48035.875 ops/s
[info]                  ·gc.alloc.rate:                   1718.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              56289.138 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1947.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63818.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108.470 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   47481.104 ±(99.9%) 3518.309 ops/s [Average]
[info]   (min, avg, max) = (46479.294, 47481.104, 48458.386), stdev = 913.694
[info]   CI (99.9%): [43962.795, 50999.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1728.938 ±(99.9%) 301.237 MB/sec [Average]
[info]   (min, avg, max) = (1659.258, 1728.938, 1861.919), stdev = 78.230
[info]   CI (99.9%): [1427.701, 2030.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   57337.646 ±(99.9%) 12355.216 B/op [Average]
[info]   (min, avg, max) = (55456.122, 57337.646, 63048.736), stdev = 3208.610
[info]   CI (99.9%): [44982.430, 69692.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1680.342 ±(99.9%) 1387.564 MB/sec [Average]
[info]   (min, avg, max) = (1278.974, 1680.342, 1953.731), stdev = 360.346
[info]   CI (99.9%): [292.778, 3067.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   55839.711 ±(99.9%) 48761.050 B/op [Average]
[info]   (min, avg, max) = (41971.598, 55839.711, 66157.709), stdev = 12663.090
[info]   CI (99.9%): [7078.661, 104600.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.566 ±(99.9%) 7.236 MB/sec [Average]
[info]   (min, avg, max) = (0.085, 1.566, 3.906), stdev = 1.879
[info]   CI (99.9%): [≈ 0, 8.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   52.245 ±(99.9%) 242.061 B/op [Average]
[info]   (min, avg, max) = (2.796, 52.245, 132.275), stdev = 62.862
[info]   CI (99.9%): [≈ 0, 294.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   99.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (14.000, 19.800, 27.000), stdev = 5.357
[info]   CI (99.9%): [99.000, 99.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.64% complete, ETA 01:12:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9229.372 ops/s
[info] # Warmup Iteration   2: 31039.496 ops/s
[info] # Warmup Iteration   3: 49931.499 ops/s
[info] # Warmup Iteration   4: 52952.151 ops/s
[info] # Warmup Iteration   5: 54597.832 ops/s
[info] Iteration   1: 52879.595 ops/s
[info]                  ·gc.alloc.rate:                   1426.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              42464.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1300.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38701.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.383 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 130.441 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 54398.398 ops/s
[info]                  ·gc.alloc.rate:                   1458.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              42179.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1302.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37678.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.455 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 53419.433 ops/s
[info]                  ·gc.alloc.rate:                   1447.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              42653.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1305.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38447.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.732 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 54463.889 ops/s
[info]                  ·gc.alloc.rate:                   1467.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              42405.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1305.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37728.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.065 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 204.146 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 53299.494 ops/s
[info]                  ·gc.alloc.rate:                   1464.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              43245.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1950.055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57574.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.891 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   53692.162 ±(99.9%) 2711.333 ops/s [Average]
[info]   (min, avg, max) = (52879.595, 53692.162, 54463.889), stdev = 704.125
[info]   CI (99.9%): [50980.829, 56403.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1453.048 ±(99.9%) 63.715 MB/sec [Average]
[info]   (min, avg, max) = (1426.740, 1453.048, 1467.521), stdev = 16.546
[info]   CI (99.9%): [1389.334, 1516.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   42589.641 ±(99.9%) 1554.512 B/op [Average]
[info]   (min, avg, max) = (42179.107, 42589.641, 43245.270), stdev = 403.702
[info]   CI (99.9%): [41035.130, 44144.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1432.775 ±(99.9%) 1113.512 MB/sec [Average]
[info]   (min, avg, max) = (1300.286, 1432.775, 1950.055), stdev = 289.176
[info]   CI (99.9%): [319.263, 2546.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   42026.021 ±(99.9%) 33513.081 B/op [Average]
[info]   (min, avg, max) = (37678.352, 42026.021, 57574.509), stdev = 8703.241
[info]   CI (99.9%): [8512.940, 75539.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2.814 ±(99.9%) 10.898 MB/sec [Average]
[info]   (min, avg, max) = (0.500, 2.814, 7.065), stdev = 2.830
[info]   CI (99.9%): [≈ 0, 13.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   82.333 ±(99.9%) 316.236 B/op [Average]
[info]   (min, avg, max) = (14.455, 82.333, 204.146), stdev = 82.126
[info]   CI (99.9%): [≈ 0, 398.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.600, 11.000), stdev = 2.191
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.88% complete, ETA 01:12:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 853257.958 ops/s
[info] # Warmup Iteration   2: 954693.902 ops/s
[info] # Warmup Iteration   3: 1019891.233 ops/s
[info] # Warmup Iteration   4: 1002327.960 ops/s
[info] # Warmup Iteration   5: 1009292.764 ops/s
[info] Iteration   1: 1032229.302 ops/s
[info]                  ·gc.alloc.rate:               956.262 MB/sec
[info]                  ·gc.alloc.rate.norm:          1458.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1020.765 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1035046.536 ops/s
[info]                  ·gc.alloc.rate:                   986.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              1500.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2037.911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 1034991.539 ops/s
[info]                  ·gc.alloc.rate:               960.192 MB/sec
[info]                  ·gc.alloc.rate.norm:          1459.813 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1019.060 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1037589.147 ops/s
[info]                  ·gc.alloc.rate:                   973.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              1476.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2033.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1002454.892 ops/s
[info]                  ·gc.alloc.rate:               937.125 MB/sec
[info]                  ·gc.alloc.rate.norm:          1471.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1053.127 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1028462.283 ±(99.9%) 56456.863 ops/s [Average]
[info]   (min, avg, max) = (1002454.892, 1028462.283, 1037589.147), stdev = 14661.668
[info]   CI (99.9%): [972005.420, 1084919.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   962.763 ±(99.9%) 71.843 MB/sec [Average]
[info]   (min, avg, max) = (937.125, 962.763, 986.591), stdev = 18.657
[info]   CI (99.9%): [890.920, 1034.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1473.188 ±(99.9%) 65.415 B/op [Average]
[info]   (min, avg, max) = (1458.031, 1473.188, 1500.167), stdev = 16.988
[info]   CI (99.9%): [1407.773, 1538.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   938.363 ±(99.9%) 1413.876 MB/sec [Average]
[info]   (min, avg, max) = (669.478, 938.363, 1340.934), stdev = 367.179
[info]   CI (99.9%): [≈ 0, 2352.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1432.965 ±(99.9%) 2120.181 B/op [Average]
[info]   (min, avg, max) = (1019.060, 1432.965, 2037.911), stdev = 550.604
[info]   CI (99.9%): [≈ 0, 3553.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.032), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 9.000), stdev = 2.302
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38.11% complete, ETA 01:12:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 516842.808 ops/s
[info] # Warmup Iteration   2: 1059537.668 ops/s
[info] # Warmup Iteration   3: 1115086.749 ops/s
[info] # Warmup Iteration   4: 1113595.532 ops/s
[info] # Warmup Iteration   5: 1114984.856 ops/s
[info] Iteration   1: 1115252.711 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1114123.959 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1111067.778 ops/s
[info]                  ·gc.alloc.rate:      3.557 MB/sec
[info]                  ·gc.alloc.rate.norm: 5.039 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1115321.404 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1116133.494 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1114379.869 ±(99.9%) 7643.062 ops/s [Average]
[info]   (min, avg, max) = (1111067.778, 1114379.869, 1116133.494), stdev = 1984.879
[info]   CI (99.9%): [1106736.807, 1122022.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.712 ±(99.9%) 6.125 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.712, 3.557), stdev = 1.591
[info]   CI (99.9%): [≈ 0, 6.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.008 ±(99.9%) 8.677 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 1.008, 5.039), stdev = 2.253
[info]   CI (99.9%): [≈ 0, 9.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 38.34% complete, ETA 01:11:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1392.833 ops/s
[info] # Warmup Iteration   2: 2713.129 ops/s
[info] # Warmup Iteration   3: 3510.222 ops/s
[info] # Warmup Iteration   4: 3556.038 ops/s
[info] # Warmup Iteration   5: 3815.408 ops/s
[info] Iteration   1: 4051.724 ops/s
[info]                  ·gc.alloc.rate:                   548.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              212954.153 B/op
[info]                  ·gc.churn.PS_Eden_Space:          638.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     247849.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.335 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129.980 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 4067.141 ops/s
[info]                  ·gc.alloc.rate:               549.100 MB/sec
[info]                  ·gc.alloc.rate.norm:          212450.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:      638.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 246936.039 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   3: 4155.463 ops/s
[info]                  ·gc.alloc.rate:                   585.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              221658.433 B/op
[info]                  ·gc.churn.PS_Eden_Space:          636.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     241202.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.150 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 4092.324 ops/s
[info]                  ·gc.alloc.rate:               570.316 MB/sec
[info]                  ·gc.alloc.rate.norm:          219335.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:      636.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 244915.381 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   5: 4052.574 ops/s
[info]                  ·gc.alloc.rate:                   550.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              213659.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:          637.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     247271.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.859 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   4083.845 ±(99.9%) 166.624 ops/s [Average]
[info]   (min, avg, max) = (4051.724, 4083.845, 4155.463), stdev = 43.272
[info]   CI (99.9%): [3917.221, 4250.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   560.685 ±(99.9%) 63.603 MB/sec [Average]
[info]   (min, avg, max) = (548.273, 560.685, 585.290), stdev = 16.518
[info]   CI (99.9%): [497.082, 624.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   216011.843 ±(99.9%) 16165.357 B/op [Average]
[info]   (min, avg, max) = (212450.779, 216011.843, 221658.433), stdev = 4198.092
[info]   CI (99.9%): [199846.486, 232177.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   637.422 ±(99.9%) 2.662 MB/sec [Average]
[info]   (min, avg, max) = (636.827, 637.422, 638.230), stdev = 0.691
[info]   CI (99.9%): [634.759, 640.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   245635.123 ±(99.9%) 10446.433 B/op [Average]
[info]   (min, avg, max) = (241202.756, 245635.123, 247849.940), stdev = 2712.906
[info]   CI (99.9%): [235188.690, 256081.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.548 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.083, 0.335), stdev = 0.142
[info]   CI (99.9%): [≈ 0, 0.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   31.998 ±(99.9%) 213.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.998, 129.980), stdev = 55.322
[info]   CI (99.9%): [≈ 0, 245.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (11.000, 11.400, 12.000), stdev = 0.548
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38.57% complete, ETA 01:11:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23314.924 ops/s
[info] # Warmup Iteration   2: 127978.145 ops/s
[info] # Warmup Iteration   3: 139778.106 ops/s
[info] # Warmup Iteration   4: 147668.777 ops/s
[info] # Warmup Iteration   5: 135069.209 ops/s
[info] Iteration   1: 141342.821 ops/s
[info]                  ·gc.alloc.rate:                   2201.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              24506.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22242.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.232 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 141758.662 ops/s
[info]                  ·gc.alloc.rate:                   2198.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              24410.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22214.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.542 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 145581.272 ops/s
[info]                  ·gc.alloc.rate:                   2249.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              24318.589 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21695.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.225 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 145380.121 ops/s
[info]                  ·gc.alloc.rate:                   2276.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              24641.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29054.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.451 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 145692.647 ops/s
[info]                  ·gc.alloc.rate:                   2256.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              24375.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21801.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.225 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   143951.105 ±(99.9%) 8467.575 ops/s [Average]
[info]   (min, avg, max) = (141342.821, 143951.105, 145692.647), stdev = 2199.002
[info]   CI (99.9%): [135483.529, 152418.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2236.417 ±(99.9%) 133.501 MB/sec [Average]
[info]   (min, avg, max) = (2198.773, 2236.417, 2276.161), stdev = 34.670
[info]   CI (99.9%): [2102.916, 2369.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   24450.497 ±(99.9%) 487.581 B/op [Average]
[info]   (min, avg, max) = (24318.589, 24450.497, 24641.223), stdev = 126.623
[info]   CI (99.9%): [23962.915, 24938.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2141.525 ±(99.9%) 1167.700 MB/sec [Average]
[info]   (min, avg, max) = (1997.848, 2141.525, 2683.815), stdev = 303.248
[info]   CI (99.9%): [973.825, 3309.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   23401.625 ±(99.9%) 12203.995 B/op [Average]
[info]   (min, avg, max) = (21695.446, 23401.625, 29054.397), stdev = 3169.339
[info]   CI (99.9%): [11197.630, 35605.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.351 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.229), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.735 ±(99.9%) 3.909 B/op [Average]
[info]   (min, avg, max) = (0.225, 0.735, 2.542), stdev = 1.015
[info]   CI (99.9%): [≈ 0, 4.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.140
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 38.80% complete, ETA 01:11:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.624 ops/s
[info] # Warmup Iteration   2: 344905.623 ops/s
[info] # Warmup Iteration   3: 382211.905 ops/s
[info] # Warmup Iteration   4: 392972.607 ops/s
[info] # Warmup Iteration   5: 403590.241 ops/s
[info] Iteration   1: 401494.804 ops/s
[info]                  ·gc.alloc.rate:               816.561 MB/sec
[info]                  ·gc.alloc.rate.norm:          3200.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2603.455 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 399276.848 ops/s
[info]                  ·gc.alloc.rate:                   841.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              3317.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5238.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 398518.394 ops/s
[info]                  ·gc.alloc.rate:                   813.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              3212.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2625.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 403474.775 ops/s
[info]                  ·gc.alloc.rate:               826.122 MB/sec
[info]                  ·gc.alloc.rate.norm:          3222.502 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2594.649 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 402722.361 ops/s
[info]                  ·gc.alloc.rate:               822.838 MB/sec
[info]                  ·gc.alloc.rate.norm:          3215.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2599.403 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   401097.436 ±(99.9%) 8262.306 ops/s [Average]
[info]   (min, avg, max) = (398518.394, 401097.436, 403474.775), stdev = 2145.695
[info]   CI (99.9%): [392835.130, 409359.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   824.171 ±(99.9%) 42.464 MB/sec [Average]
[info]   (min, avg, max) = (813.553, 824.171, 841.783), stdev = 11.028
[info]   CI (99.9%): [781.707, 866.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3233.932 ±(99.9%) 182.362 B/op [Average]
[info]   (min, avg, max) = (3200.988, 3233.932, 3317.500), stdev = 47.359
[info]   CI (99.9%): [3051.570, 3416.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   797.683 ±(99.9%) 1144.062 MB/sec [Average]
[info]   (min, avg, max) = (664.132, 797.683, 1329.167), stdev = 297.109
[info]   CI (99.9%): [≈ 0, 1941.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   3132.270 ±(99.9%) 4533.614 B/op [Average]
[info]   (min, avg, max) = (2594.649, 3132.270, 5238.298), stdev = 1177.365
[info]   CI (99.9%): [≈ 0, 7665.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.005 ±(99.9%) 0.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.120 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.071), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.03% complete, ETA 01:10:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80403.849 ops/s
[info] # Warmup Iteration   2: 205474.668 ops/s
[info] # Warmup Iteration   3: 275025.384 ops/s
[info] # Warmup Iteration   4: 283206.939 ops/s
[info] # Warmup Iteration   5: 282430.275 ops/s
[info] Iteration   1: 282140.843 ops/s
[info]                  ·gc.alloc.rate:                   588.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              3278.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3691.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.232 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 282658.208 ops/s
[info]                  ·gc.alloc.rate:               591.993 MB/sec
[info]                  ·gc.alloc.rate.norm:          3295.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3690.680 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 281951.618 ops/s
[info]                  ·gc.alloc.rate:               590.588 MB/sec
[info]                  ·gc.alloc.rate.norm:          3296.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3699.868 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 284502.402 ops/s
[info]                  ·gc.alloc.rate:      572.784 MB/sec
[info]                  ·gc.alloc.rate.norm: 3168.737 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 281672.890 ops/s
[info]                  ·gc.alloc.rate:                   585.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              3269.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3707.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.233 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   282585.192 ±(99.9%) 4353.179 ops/s [Average]
[info]   (min, avg, max) = (281672.890, 282585.192, 284502.402), stdev = 1130.507
[info]   CI (99.9%): [278232.013, 286938.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   585.696 ±(99.9%) 29.588 MB/sec [Average]
[info]   (min, avg, max) = (572.784, 585.696, 591.993), stdev = 7.684
[info]   CI (99.9%): [556.108, 615.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3261.829 ±(99.9%) 205.159 B/op [Average]
[info]   (min, avg, max) = (3168.737, 3261.829, 3296.652), stdev = 53.279
[info]   CI (99.9%): [3056.671, 3466.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   530.258 ±(99.9%) 1141.421 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 530.258, 663.422), stdev = 296.423
[info]   CI (99.9%): [≈ 0, 1671.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2957.871 ±(99.9%) 6367.094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2957.871, 3707.254), stdev = 1653.514
[info]   CI (99.9%): [≈ 0, 9324.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.093 ±(99.9%) 0.490 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.093, 0.233), stdev = 0.127
[info]   CI (99.9%): [≈ 0, 0.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 5.000), stdev = 2.236
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.26% complete, ETA 01:10:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 237387.186 ops/s
[info] # Warmup Iteration   2: 446213.300 ops/s
[info] # Warmup Iteration   3: 493563.211 ops/s
[info] # Warmup Iteration   4: 495992.550 ops/s
[info] # Warmup Iteration   5: 496530.247 ops/s
[info] Iteration   1: 457772.697 ops/s
[info]                  ·gc.alloc.rate:                   600.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              2064.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2299.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 495463.040 ops/s
[info]                  ·gc.alloc.rate:      624.570 MB/sec
[info]                  ·gc.alloc.rate.norm: 1984.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 490330.231 ops/s
[info]                  ·gc.alloc.rate:               647.634 MB/sec
[info]                  ·gc.alloc.rate.norm:          2078.777 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2148.945 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 491753.332 ops/s
[info]                  ·gc.alloc.rate:                   644.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              2061.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2142.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.466 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 447992.206 ops/s
[info]                  ·gc.alloc.rate:               583.671 MB/sec
[info]                  ·gc.alloc.rate.norm:          2049.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2353.192 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   476662.301 ±(99.9%) 84950.363 ops/s [Average]
[info]   (min, avg, max) = (447992.206, 476662.301, 495463.040), stdev = 22061.340
[info]   CI (99.9%): [391711.938, 561612.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   620.073 ±(99.9%) 106.575 MB/sec [Average]
[info]   (min, avg, max) = (583.671, 620.073, 647.634), stdev = 27.677
[info]   CI (99.9%): [513.499, 726.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2047.641 ±(99.9%) 142.690 B/op [Average]
[info]   (min, avg, max) = (1984.001, 2047.641, 2078.777), stdev = 37.056
[info]   CI (99.9%): [1904.951, 2190.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   535.573 ±(99.9%) 1152.862 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535.573, 670.097), stdev = 299.395
[info]   CI (99.9%): [≈ 0, 1688.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1788.854 ±(99.9%) 3866.994 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1788.854, 2353.192), stdev = 1004.246
[info]   CI (99.9%): [≈ 0, 5655.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.244 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.146), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.108 ±(99.9%) 0.781 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.108, 0.466), stdev = 0.203
[info]   CI (99.9%): [≈ 0, 0.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39.49% complete, ETA 01:10:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6426.426 ops/s
[info] # Warmup Iteration   2: 71488.094 ops/s
[info] # Warmup Iteration   3: 98043.120 ops/s
[info] # Warmup Iteration   4: 102037.874 ops/s
[info] # Warmup Iteration   5: 101593.948 ops/s
[info] Iteration   1: 102746.477 ops/s
[info]                  ·gc.alloc.rate:                   3537.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              54186.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3341.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51194.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.276 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 102246.704 ops/s
[info]                  ·gc.alloc.rate:                   3589.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              55249.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4027.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61993.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.641 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 100812.712 ops/s
[info]                  ·gc.alloc.rate:                   3525.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              55036.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3371.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52628.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.325 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 101206.738 ops/s
[info]                  ·gc.alloc.rate:                   3539.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              55038.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3380.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52574.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.647 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 100365.949 ops/s
[info]                  ·gc.alloc.rate:                   3512.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              55081.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3389.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53151.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.326 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   101475.716 ±(99.9%) 3827.840 ops/s [Average]
[info]   (min, avg, max) = (100365.949, 101475.716, 102746.477), stdev = 994.078
[info]   CI (99.9%): [97647.876, 105303.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3540.871 ±(99.9%) 112.159 MB/sec [Average]
[info]   (min, avg, max) = (3512.616, 3540.871, 3589.357), stdev = 29.127
[info]   CI (99.9%): [3428.712, 3653.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54918.422 ±(99.9%) 1610.890 B/op [Average]
[info]   (min, avg, max) = (54186.451, 54918.422, 55249.029), stdev = 418.343
[info]   CI (99.9%): [53307.531, 56529.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3502.295 ±(99.9%) 1132.767 MB/sec [Average]
[info]   (min, avg, max) = (3341.987, 3502.295, 4027.556), stdev = 294.176
[info]   CI (99.9%): [2369.529, 4635.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   54308.712 ±(99.9%) 16776.915 B/op [Average]
[info]   (min, avg, max) = (51194.101, 54308.712, 61993.981), stdev = 4356.911
[info]   CI (99.9%): [37531.798, 71085.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.083), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.643 ±(99.9%) 1.493 B/op [Average]
[info]   (min, avg, max) = (0.325, 0.643, 1.276), stdev = 0.388
[info]   CI (99.9%): [≈ 0, 2.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 0.837
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39.72% complete, ETA 01:10:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65131.895 ops/s
[info] # Warmup Iteration   2: 182005.103 ops/s
[info] # Warmup Iteration   3: 215881.936 ops/s
[info] # Warmup Iteration   4: 215710.384 ops/s
[info] # Warmup Iteration   5: 212857.611 ops/s
[info] Iteration   1: 216861.548 ops/s
[info]                  ·gc.alloc.rate:                   1861.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              13511.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14541.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.812 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 218285.106 ops/s
[info]                  ·gc.alloc.rate:                   1869.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              13476.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14433.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.156 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 219338.153 ops/s
[info]                  ·gc.alloc.rate:               1886.900 MB/sec
[info]                  ·gc.alloc.rate.norm:          13538.966 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9550.325 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 219377.397 ops/s
[info]                  ·gc.alloc.rate:                   1888.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              13550.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14325.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.149 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 219030.916 ops/s
[info]                  ·gc.alloc.rate:                   1885.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              13546.775 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14361.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.150 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   218578.624 ±(99.9%) 4063.293 ops/s [Average]
[info]   (min, avg, max) = (216861.548, 218578.624, 219377.397), stdev = 1055.224
[info]   CI (99.9%): [214515.331, 222641.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1878.373 ±(99.9%) 46.741 MB/sec [Average]
[info]   (min, avg, max) = (1861.724, 1878.373, 1888.791), stdev = 12.138
[info]   CI (99.9%): [1831.632, 1925.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13524.885 ±(99.9%) 119.600 B/op [Average]
[info]   (min, avg, max) = (13476.725, 13524.885, 13550.826), stdev = 31.060
[info]   CI (99.9%): [13405.285, 13644.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1866.401 ±(99.9%) 1152.516 MB/sec [Average]
[info]   (min, avg, max) = (1331.011, 1866.401, 2003.714), stdev = 299.305
[info]   CI (99.9%): [713.885, 3018.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   13442.451 ±(99.9%) 8384.124 B/op [Average]
[info]   (min, avg, max) = (9550.325, 13442.451, 14541.600), stdev = 2177.330
[info]   CI (99.9%): [5058.328, 21826.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.891 ±(99.9%) 5.281 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.891, 3.143), stdev = 1.372
[info]   CI (99.9%): [≈ 0, 6.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.453 ±(99.9%) 38.315 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.453, 22.812), stdev = 9.950
[info]   CI (99.9%): [≈ 0, 44.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 13.000), stdev = 4.087
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39.95% complete, ETA 01:09:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.824 ops/s
[info] # Warmup Iteration   2: 866750.996 ops/s
[info] # Warmup Iteration   3: 920371.267 ops/s
[info] # Warmup Iteration   4: 932227.486 ops/s
[info] # Warmup Iteration   5: 931968.442 ops/s
[info] Iteration   1: 835043.531 ops/s
[info]                  ·gc.alloc.rate:               681.842 MB/sec
[info]                  ·gc.alloc.rate.norm:          1285.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1252.435 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 937515.178 ops/s
[info]                  ·gc.alloc.rate:               749.332 MB/sec
[info]                  ·gc.alloc.rate.norm:          1257.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1115.530 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 932203.343 ops/s
[info]                  ·gc.alloc.rate:                   748.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1123.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 926996.239 ops/s
[info]                  ·gc.alloc.rate:               750.970 MB/sec
[info]                  ·gc.alloc.rate.norm:          1275.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1129.300 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 939313.798 ops/s
[info]                  ·gc.alloc.rate:                   752.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              1259.812 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1115.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   914214.418 ±(99.9%) 171428.380 ops/s [Average]
[info]   (min, avg, max) = (835043.531, 914214.418, 939313.798), stdev = 44519.406
[info]   CI (99.9%): [742786.038, 1085642.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   736.594 ±(99.9%) 117.963 MB/sec [Average]
[info]   (min, avg, max) = (681.842, 736.594, 752.049), stdev = 30.635
[info]   CI (99.9%): [618.631, 854.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1268.336 ±(99.9%) 44.337 B/op [Average]
[info]   (min, avg, max) = (1257.689, 1268.336, 1285.092), stdev = 11.514
[info]   CI (99.9%): [1223.999, 1312.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   665.095 ±(99.9%) 2.213 MB/sec [Average]
[info]   (min, avg, max) = (664.515, 665.095, 665.961), stdev = 0.575
[info]   CI (99.9%): [662.882, 667.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1147.177 ±(99.9%) 227.653 B/op [Average]
[info]   (min, avg, max) = (1115.530, 1147.177, 1252.435), stdev = 59.121
[info]   CI (99.9%): [919.524, 1374.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.035), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.18% complete, ETA 01:09:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191509.112 ops/s
[info] # Warmup Iteration   2: 545237.262 ops/s
[info] # Warmup Iteration   3: 600443.472 ops/s
[info] # Warmup Iteration   4: 610322.238 ops/s
[info] # Warmup Iteration   5: 601993.336 ops/s
[info] Iteration   1: 612904.225 ops/s
[info]                  ·gc.alloc.rate:               501.911 MB/sec
[info]                  ·gc.alloc.rate.norm:          1288.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1708.054 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 615105.898 ops/s
[info]                  ·gc.alloc.rate:      481.623 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 579395.189 ops/s
[info]                  ·gc.alloc.rate:                   470.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              1278.433 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1806.776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 611381.721 ops/s
[info]                  ·gc.alloc.rate:               501.422 MB/sec
[info]                  ·gc.alloc.rate.norm:          1290.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1713.883 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 611187.756 ops/s
[info]                  ·gc.alloc.rate:      478.614 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   605994.958 ±(99.9%) 57575.731 ops/s [Average]
[info]   (min, avg, max) = (579395.189, 605994.958, 615105.898), stdev = 14952.234
[info]   CI (99.9%): [548419.227, 663570.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   486.883 ±(99.9%) 54.131 MB/sec [Average]
[info]   (min, avg, max) = (470.845, 486.883, 501.911), stdev = 14.058
[info]   CI (99.9%): [432.752, 541.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1264.416 ±(99.9%) 115.371 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1264.416, 1290.737), stdev = 29.961
[info]   CI (99.9%): [1149.046, 1379.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   399.273 ±(99.9%) 1403.501 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.273, 665.804), stdev = 364.485
[info]   CI (99.9%): [≈ 0, 1802.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1045.743 ±(99.9%) 3679.026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1045.743, 1806.776), stdev = 955.431
[info]   CI (99.9%): [≈ 0, 4724.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.097 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.057), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.42% complete, ETA 01:09:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 447494.946 ops/s
[info] # Warmup Iteration   2: 766325.899 ops/s
[info] # Warmup Iteration   3: 793094.833 ops/s
[info] # Warmup Iteration   4: 792590.390 ops/s
[info] # Warmup Iteration   5: 799185.466 ops/s
[info] Iteration   1: 698304.838 ops/s
[info]                  ·gc.alloc.rate:      546.631 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 770209.733 ops/s
[info]                  ·gc.alloc.rate:               623.697 MB/sec
[info]                  ·gc.alloc.rate.norm:          1274.479 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1365.963 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 780320.782 ops/s
[info]                  ·gc.alloc.rate:               633.420 MB/sec
[info]                  ·gc.alloc.rate.norm:          1277.409 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1348.993 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 775284.747 ops/s
[info]                  ·gc.alloc.rate:                   637.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              1294.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1357.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.085 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 793928.684 ops/s
[info]                  ·gc.alloc.rate:               650.144 MB/sec
[info]                  ·gc.alloc.rate.norm:          1288.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1327.161 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   763609.757 ±(99.9%) 144631.195 ops/s [Average]
[info]   (min, avg, max) = (698304.838, 763609.757, 793928.684), stdev = 37560.262
[info]   CI (99.9%): [618978.562, 908240.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   618.313 ±(99.9%) 158.573 MB/sec [Average]
[info]   (min, avg, max) = (546.631, 618.313, 650.144), stdev = 41.181
[info]   CI (99.9%): [459.740, 776.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1273.453 ±(99.9%) 94.638 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1273.453, 1294.529), stdev = 24.577
[info]   CI (99.9%): [1178.815, 1368.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   535.127 ±(99.9%) 1151.902 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535.127, 669.472), stdev = 299.145
[info]   CI (99.9%): [≈ 0, 1687.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1079.960 ±(99.9%) 2325.362 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1079.960, 1365.963), stdev = 603.889
[info]   CI (99.9%): [≈ 0, 3405.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.146 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.085), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 40.65% complete, ETA 01:09:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 288118.002 ops/s
[info] # Warmup Iteration   2: 709796.302 ops/s
[info] # Warmup Iteration   3: 800095.576 ops/s
[info] # Warmup Iteration   4: 723075.093 ops/s
[info] # Warmup Iteration   5: 815338.943 ops/s
[info] Iteration   1: 835557.221 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 835418.612 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 835236.371 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 835504.533 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 835546.396 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   835452.627 ±(99.9%) 510.665 ops/s [Average]
[info]   (min, avg, max) = (835236.371, 835452.627, 835557.221), stdev = 132.618
[info]   CI (99.9%): [834941.961, 835963.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40.88% complete, ETA 01:08:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5613.510 ops/s
[info] # Warmup Iteration   2: 21188.231 ops/s
[info] # Warmup Iteration   3: 35475.064 ops/s
[info] # Warmup Iteration   4: 36506.160 ops/s
[info] # Warmup Iteration   5: 33083.032 ops/s
[info] Iteration   1: 35561.997 ops/s
[info]                  ·gc.alloc.rate:                   1619.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              71650.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88120.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.128 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 36349.870 ops/s
[info]                  ·gc.alloc.rate:                   1631.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              70653.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57453.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 178.459 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 36452.056 ops/s
[info]                  ·gc.alloc.rate:                   1644.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              71017.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57236.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.661 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 35609.764 ops/s
[info]                  ·gc.alloc.rate:                   1617.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              71489.584 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87793.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.360 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 36572.063 ops/s
[info]                  ·gc.alloc.rate:                   1634.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              70343.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57005.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.792 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   36109.150 ±(99.9%) 1865.261 ops/s [Average]
[info]   (min, avg, max) = (35561.997, 36109.150, 36572.063), stdev = 484.402
[info]   CI (99.9%): [34243.889, 37974.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1629.591 ±(99.9%) 43.916 MB/sec [Average]
[info]   (min, avg, max) = (1617.533, 1629.591, 1644.827), stdev = 11.405
[info]   CI (99.9%): [1585.675, 1673.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   71030.873 ±(99.9%) 2116.544 B/op [Average]
[info]   (min, avg, max) = (70343.932, 71030.873, 71650.006), stdev = 549.660
[info]   CI (99.9%): [68914.329, 73147.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1591.000 ±(99.9%) 1398.415 MB/sec [Average]
[info]   (min, avg, max) = (1324.735, 1591.000, 1991.213), stdev = 363.164
[info]   CI (99.9%): [192.585, 2989.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   69521.871 ±(99.9%) 64807.074 B/op [Average]
[info]   (min, avg, max) = (57005.588, 69521.871, 88120.833), stdev = 16830.191
[info]   CI (99.9%): [4714.797, 134328.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.207 ±(99.9%) 6.456 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.207, 4.122), stdev = 1.676
[info]   CI (99.9%): [≈ 0, 7.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   52.480 ±(99.9%) 279.342 B/op [Average]
[info]   (min, avg, max) = (1.792, 52.480, 178.459), stdev = 72.544
[info]   CI (99.9%): [≈ 0, 331.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.600, 20.000), stdev = 6.107
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41.11% complete, ETA 01:08:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1084.211 ops/s
[info] # Warmup Iteration   2: 5548.845 ops/s
[info] # Warmup Iteration   3: 7021.346 ops/s
[info] # Warmup Iteration   4: 8923.877 ops/s
[info] # Warmup Iteration   5: 8855.207 ops/s
[info] Iteration   1: 8926.904 ops/s
[info]                  ·gc.alloc.rate:                   1273.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              224485.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     234778.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.670 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 8911.244 ops/s
[info]                  ·gc.alloc.rate:               1271.281 MB/sec
[info]                  ·gc.alloc.rate.norm:          224508.569 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 235291.372 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   3: 8925.161 ops/s
[info]                  ·gc.alloc.rate:                   1273.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              224477.952 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     235039.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 657.511 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 8399.040 ops/s
[info]                  ·gc.alloc.rate:                   1319.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              247284.940 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     249660.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 189.586 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 8587.709 ops/s
[info]                  ·gc.alloc.rate:                   1197.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              219386.538 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121947.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.961 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   8750.011 ±(99.9%) 938.261 ops/s [Average]
[info]   (min, avg, max) = (8399.040, 8750.011, 8926.904), stdev = 243.663
[info]   CI (99.9%): [7811.750, 9688.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1266.950 ±(99.9%) 169.874 MB/sec [Average]
[info]   (min, avg, max) = (1197.090, 1266.950, 1319.930), stdev = 44.116
[info]   CI (99.9%): [1097.076, 1436.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   228028.673 ±(99.9%) 42315.234 B/op [Average]
[info]   (min, avg, max) = (219386.538, 228028.673, 247284.940), stdev = 10989.132
[info]   CI (99.9%): [185713.439, 270343.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1199.019 ±(99.9%) 1148.637 MB/sec [Average]
[info]   (min, avg, max) = (665.410, 1199.019, 1332.994), stdev = 298.297
[info]   CI (99.9%): [50.383, 2347.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   215343.616 ±(99.9%) 202517.164 B/op [Average]
[info]   (min, avg, max) = (121947.314, 215343.616, 249660.952), stdev = 52593.064
[info]   CI (99.9%): [12826.451, 417860.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.998 ±(99.9%) 6.089 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.998, 3.729), stdev = 1.581
[info]   CI (99.9%): [≈ 0, 7.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   178.546 ±(99.9%) 1073.088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 178.546, 657.511), stdev = 278.678
[info]   CI (99.9%): [≈ 0, 1251.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 7.800, 11.000), stdev = 4.604
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.34% complete, ETA 01:08:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 793.599 ops/s
[info] # Warmup Iteration   2: 6992.454 ops/s
[info] # Warmup Iteration   3: 8505.617 ops/s
[info] # Warmup Iteration   4: 9367.584 ops/s
[info] # Warmup Iteration   5: 9271.596 ops/s
[info] Iteration   1: 9310.845 ops/s
[info]                  ·gc.alloc.rate:               1232.629 MB/sec
[info]                  ·gc.alloc.rate.norm:          208334.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 224340.994 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 9300.595 ops/s
[info]                  ·gc.alloc.rate:                   1230.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              207658.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222858.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.493 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 9308.004 ops/s
[info]                  ·gc.alloc.rate:               1239.551 MB/sec
[info]                  ·gc.alloc.rate.norm:          209575.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 112359.497 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 9364.574 ops/s
[info]                  ·gc.alloc.rate:                   1233.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              207342.600 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     223663.377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.498 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 9353.457 ops/s
[info]                  ·gc.alloc.rate:               1231.751 MB/sec
[info]                  ·gc.alloc.rate.norm:          207233.226 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 224286.539 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   9327.495 ±(99.9%) 112.753 ops/s [Average]
[info]   (min, avg, max) = (9300.595, 9327.495, 9364.574), stdev = 29.282
[info]   CI (99.9%): [9214.742, 9440.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1233.681 ±(99.9%) 13.363 MB/sec [Average]
[info]   (min, avg, max) = (1230.701, 1233.681, 1239.551), stdev = 3.470
[info]   CI (99.9%): [1220.318, 1247.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   208028.829 ±(99.9%) 3716.162 B/op [Average]
[info]   (min, avg, max) = (207233.226, 208028.829, 209575.241), stdev = 965.076
[info]   CI (99.9%): [204312.667, 211744.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1195.336 ±(99.9%) 1142.676 MB/sec [Average]
[info]   (min, avg, max) = (664.560, 1195.336, 1333.113), stdev = 296.749
[info]   CI (99.9%): [52.660, 2338.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   201501.826 ±(99.9%) 191899.429 B/op [Average]
[info]   (min, avg, max) = (112359.497, 201501.826, 224340.994), stdev = 49835.672
[info]   CI (99.9%): [9602.397, 393401.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.398 ±(99.9%) 7.372 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.398, 3.498), stdev = 1.915
[info]   CI (99.9%): [≈ 0, 8.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 11.000), stdev = 3.286
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.57% complete, ETA 01:08:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68885.109 ops/s
[info] # Warmup Iteration   2: 154852.760 ops/s
[info] # Warmup Iteration   3: 195448.747 ops/s
[info] # Warmup Iteration   4: 194729.633 ops/s
[info] # Warmup Iteration   5: 190545.184 ops/s
[info] Iteration   1: 195396.057 ops/s
[info]                  ·gc.alloc.rate:                   1949.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              15703.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16038.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.300 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.577 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 196713.093 ops/s
[info]                  ·gc.alloc.rate:                   1960.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              15688.409 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15903.827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.161 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 196891.017 ops/s
[info]                  ·gc.alloc.rate:                   1959.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              15665.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1985.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15868.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.826 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.589 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 197703.416 ops/s
[info]                  ·gc.alloc.rate:                   1968.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              15667.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1980.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15768.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.166 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 197965.189 ops/s
[info]                  ·gc.alloc.rate:                   1957.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              15559.679 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10506.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.165 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   196933.754 ±(99.9%) 3884.796 ops/s [Average]
[info]   (min, avg, max) = (195396.057, 196933.754, 197965.189), stdev = 1008.869
[info]   CI (99.9%): [193048.959, 200818.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1959.092 ±(99.9%) 25.669 MB/sec [Average]
[info]   (min, avg, max) = (1949.627, 1959.092, 1968.074), stdev = 6.666
[info]   CI (99.9%): [1933.423, 1984.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15657.114 ±(99.9%) 218.071 B/op [Average]
[info]   (min, avg, max) = (15559.679, 15657.114, 15703.599), stdev = 56.632
[info]   CI (99.9%): [15439.043, 15875.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1853.268 ±(99.9%) 1144.636 MB/sec [Average]
[info]   (min, avg, max) = (1321.560, 1853.268, 1991.164), stdev = 297.258
[info]   CI (99.9%): [708.632, 2997.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   14817.158 ±(99.9%) 9285.610 B/op [Average]
[info]   (min, avg, max) = (10506.890, 14817.158, 16038.162), stdev = 2411.444
[info]   CI (99.9%): [5531.548, 24102.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1.437 ±(99.9%) 5.960 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.437, 3.300), stdev = 1.548
[info]   CI (99.9%): [≈ 0, 7.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.532 ±(99.9%) 47.877 B/op [Average]
[info]   (min, avg, max) = (0.165, 11.532, 26.577), stdev = 12.434
[info]   CI (99.9%): [≈ 0, 59.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 16.000), stdev = 5.167
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41.80% complete, ETA 01:07:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 614.621 ops/s
[info] # Warmup Iteration   2: 5275.030 ops/s
[info] # Warmup Iteration   3: 8140.679 ops/s
[info] # Warmup Iteration   4: 8885.449 ops/s
[info] # Warmup Iteration   5: 8965.909 ops/s
[info] Iteration   1: 8741.589 ops/s
[info]                  ·gc.alloc.rate:               1382.207 MB/sec
[info]                  ·gc.alloc.rate.norm:          248849.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1317.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 237200.747 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 8674.028 ops/s
[info]                  ·gc.alloc.rate:                   1362.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              247226.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     238938.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.777 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 9011.623 ops/s
[info]                  ·gc.alloc.rate:                   1411.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              246428.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230237.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.636 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 8722.958 ops/s
[info]                  ·gc.alloc.rate:               1395.242 MB/sec
[info]                  ·gc.alloc.rate.norm:          251674.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1321.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 238318.190 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 8878.697 ops/s
[info]                  ·gc.alloc.rate:               1460.651 MB/sec
[info]                  ·gc.alloc.rate.norm:          258903.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1987.346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 352260.612 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   8805.779 ±(99.9%) 530.867 ops/s [Average]
[info]   (min, avg, max) = (8674.028, 8805.779, 9011.623), stdev = 137.865
[info]   CI (99.9%): [8274.912, 9336.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1402.427 ±(99.9%) 142.987 MB/sec [Average]
[info]   (min, avg, max) = (1362.624, 1402.427, 1460.651), stdev = 37.133
[info]   CI (99.9%): [1259.440, 1545.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   250616.445 ±(99.9%) 19439.042 B/op [Average]
[info]   (min, avg, max) = (246428.414, 250616.445, 258903.019), stdev = 5048.257
[info]   CI (99.9%): [231177.403, 270055.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1452.335 ±(99.9%) 1151.669 MB/sec [Average]
[info]   (min, avg, max) = (1316.946, 1452.335, 1987.346), stdev = 299.085
[info]   CI (99.9%): [300.666, 2604.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   259391.239 ±(99.9%) 200357.832 B/op [Average]
[info]   (min, avg, max) = (230237.646, 259391.239, 352260.612), stdev = 52032.293
[info]   CI (99.9%): [59033.407, 459749.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.482 ±(99.9%) 7.819 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.482, 3.777), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 9.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42.03% complete, ETA 01:07:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1865.256 ops/s
[info] # Warmup Iteration   2: 13759.117 ops/s
[info] # Warmup Iteration   3: 22805.333 ops/s
[info] # Warmup Iteration   4: 24296.552 ops/s
[info] # Warmup Iteration   5: 23077.115 ops/s
[info] Iteration   1: 23430.660 ops/s
[info]                  ·gc.alloc.rate:               1507.673 MB/sec
[info]                  ·gc.alloc.rate.norm:          101224.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1314.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 88231.433 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 22827.372 ops/s
[info]                  ·gc.alloc.rate:               1463.236 MB/sec
[info]                  ·gc.alloc.rate.norm:          100886.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1313.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 90569.483 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   3: 21527.163 ops/s
[info]                  ·gc.alloc.rate:                   1580.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              115481.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1940.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141798.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 508.283 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 23447.284 ops/s
[info]                  ·gc.alloc.rate:                   1249.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              83861.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1299.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87236.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 231.451 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 22969.580 ops/s
[info]                  ·gc.alloc.rate:                   1220.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              83529.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1301.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89029.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.600 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   22840.412 ±(99.9%) 3018.622 ops/s [Average]
[info]   (min, avg, max) = (21527.163, 22840.412, 23447.284), stdev = 783.927
[info]   CI (99.9%): [19821.789, 25859.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1404.339 ±(99.9%) 617.065 MB/sec [Average]
[info]   (min, avg, max) = (1220.866, 1404.339, 1580.316), stdev = 160.250
[info]   CI (99.9%): [787.273, 2021.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   96996.770 ±(99.9%) 51969.757 B/op [Average]
[info]   (min, avg, max) = (83529.351, 96996.770, 115481.930), stdev = 13496.381
[info]   CI (99.9%): [45027.013, 148966.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1433.869 ±(99.9%) 1090.758 MB/sec [Average]
[info]   (min, avg, max) = (1299.885, 1433.869, 1940.450), stdev = 283.266
[info]   CI (99.9%): [343.110, 2524.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   99373.076 ±(99.9%) 91445.304 B/op [Average]
[info]   (min, avg, max) = (87236.014, 99373.076, 141798.840), stdev = 23748.055
[info]   CI (99.9%): [7927.772, 190818.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2.094 ±(99.9%) 11.923 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.094, 6.956), stdev = 3.096
[info]   CI (99.9%): [≈ 0, 14.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   148.867 ±(99.9%) 863.471 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 148.867, 508.283), stdev = 224.241
[info]   CI (99.9%): [≈ 0, 1012.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 14.000), stdev = 4.219
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.26% complete, ETA 01:07:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5040.049 ops/s
[info] # Warmup Iteration   2: 19778.660 ops/s
[info] # Warmup Iteration   3: 24272.804 ops/s
[info] # Warmup Iteration   4: 25414.995 ops/s
[info] # Warmup Iteration   5: 25610.070 ops/s
[info] Iteration   1: 22227.205 ops/s
[info]                  ·gc.alloc.rate:               1277.065 MB/sec
[info]                  ·gc.alloc.rate.norm:          90426.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1300.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 92062.266 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     16.000 ms
[info] Iteration   2: 24171.560 ops/s
[info]                  ·gc.alloc.rate:                   1338.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              87130.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1297.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84493.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86.045 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 24143.203 ops/s
[info]                  ·gc.alloc.rate:                   987.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              64387.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1296.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84500.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69.544 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   4: 24543.590 ops/s
[info]                  ·gc.alloc.rate:                   993.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              63715.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:          649.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41624.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 218.873 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 24382.150 ops/s
[info]                  ·gc.alloc.rate:                   1000.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              64581.218 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1298.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83823.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102.772 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   23893.542 ±(99.9%) 3641.660 ops/s [Average]
[info]   (min, avg, max) = (22227.205, 23893.542, 24543.590), stdev = 945.728
[info]   CI (99.9%): [20251.882, 27535.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1119.420 ±(99.9%) 667.021 MB/sec [Average]
[info]   (min, avg, max) = (987.841, 1119.420, 1338.195), stdev = 173.223
[info]   CI (99.9%): [452.398, 1786.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   74048.312 ±(99.9%) 51988.776 B/op [Average]
[info]   (min, avg, max) = (63715.430, 74048.312, 90426.913), stdev = 13501.320
[info]   CI (99.9%): [22059.537, 126037.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1168.374 ±(99.9%) 1117.824 MB/sec [Average]
[info]   (min, avg, max) = (649.084, 1168.374, 1300.161), stdev = 290.295
[info]   CI (99.9%): [50.551, 2286.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   77300.847 ±(99.9%) 77894.067 B/op [Average]
[info]   (min, avg, max) = (41624.397, 77300.847, 92062.266), stdev = 20228.842
[info]   CI (99.9%): [≈ 0, 155194.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.479 ±(99.9%) 4.769 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.479, 3.413), stdev = 1.238
[info]   CI (99.9%): [≈ 0, 6.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   95.447 ±(99.9%) 305.376 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 95.447, 218.873), stdev = 79.305
[info]   CI (99.9%): [≈ 0, 400.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   65.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 13.000, 16.000), stdev = 3.742
[info]   CI (99.9%): [65.000, 65.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.49% complete, ETA 01:06:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 223075.918 ops/s
[info] # Warmup Iteration   2: 482182.099 ops/s
[info] # Warmup Iteration   3: 528861.286 ops/s
[info] # Warmup Iteration   4: 543341.501 ops/s
[info] # Warmup Iteration   5: 540798.126 ops/s
[info] Iteration   1: 541489.334 ops/s
[info]                  ·gc.alloc.rate:                   1269.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              3687.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3895.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 532681.657 ops/s
[info]                  ·gc.alloc.rate:               1250.230 MB/sec
[info]                  ·gc.alloc.rate.norm:          3693.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3960.107 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 535967.935 ops/s
[info]                  ·gc.alloc.rate:                   1255.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              3685.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3939.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.153 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 540163.866 ops/s
[info]                  ·gc.alloc.rate:                   1252.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              3648.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3908.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.085 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.902 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 544113.803 ops/s
[info]                  ·gc.alloc.rate:               1260.071 MB/sec
[info]                  ·gc.alloc.rate.norm:          3644.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1936.484 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   538883.319 ±(99.9%) 17513.992 ops/s [Average]
[info]   (min, avg, max) = (532681.657, 538883.319, 544113.803), stdev = 4548.328
[info]   CI (99.9%): [521369.327, 556397.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1257.533 ±(99.9%) 29.247 MB/sec [Average]
[info]   (min, avg, max) = (1250.230, 1257.533, 1269.361), stdev = 7.595
[info]   CI (99.9%): [1228.286, 1286.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3672.184 ±(99.9%) 90.406 B/op [Average]
[info]   (min, avg, max) = (3644.869, 3672.184, 3693.965), stdev = 23.478
[info]   CI (99.9%): [3581.778, 3762.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1206.900 ±(99.9%) 1156.876 MB/sec [Average]
[info]   (min, avg, max) = (669.463, 1206.900, 1342.232), stdev = 300.437
[info]   CI (99.9%): [50.024, 2363.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3528.132 ±(99.9%) 3427.529 B/op [Average]
[info]   (min, avg, max) = (1936.484, 3528.132, 3960.107), stdev = 890.118
[info]   CI (99.9%): [100.603, 6955.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.832 ±(99.9%) 7.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.832, 4.085), stdev = 1.819
[info]   CI (99.9%): [≈ 0, 7.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.423 ±(99.9%) 20.405 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.423, 11.902), stdev = 5.299
[info]   CI (99.9%): [≈ 0, 22.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 6.000, 8.000), stdev = 2.915
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 42.73% complete, ETA 01:06:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 366421.758 ops/s
[info] # Warmup Iteration   2: 559361.230 ops/s
[info] # Warmup Iteration   3: 601231.658 ops/s
[info] # Warmup Iteration   4: 604443.916 ops/s
[info] # Warmup Iteration   5: 605053.284 ops/s
[info] Iteration   1: 607287.589 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 607411.620 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 609515.693 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 612222.656 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 610754.582 ops/s
[info]                  ·gc.alloc.rate:      9.349 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.090 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   609438.428 ±(99.9%) 8219.167 ops/s [Average]
[info]   (min, avg, max) = (607287.589, 609438.428, 612222.656), stdev = 2134.491
[info]   CI (99.9%): [601219.261, 617657.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.870 ±(99.9%) 16.099 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.870, 9.349), stdev = 4.181
[info]   CI (99.9%): [≈ 0, 17.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4.819 ±(99.9%) 41.483 B/op [Average]
[info]   (min, avg, max) = (0.001, 4.819, 24.090), stdev = 10.773
[info]   CI (99.9%): [≈ 0, 46.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42.96% complete, ETA 01:06:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4880.779 ops/s
[info] # Warmup Iteration   2: 13858.593 ops/s
[info] # Warmup Iteration   3: 19590.428 ops/s
[info] # Warmup Iteration   4: 24999.947 ops/s
[info] # Warmup Iteration   5: 26465.654 ops/s
[info] Iteration   1: 25059.908 ops/s
[info]                  ·gc.alloc.rate:               1487.870 MB/sec
[info]                  ·gc.alloc.rate.norm:          93398.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1286.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 80743.364 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     18.000 ms
[info] Iteration   2: 25155.376 ops/s
[info]                  ·gc.alloc.rate:                   1503.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              93994.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1288.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80605.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.597 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99.842 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         28.000 ms
[info] Iteration   3: 24742.081 ops/s
[info]                  ·gc.alloc.rate:               1273.725 MB/sec
[info]                  ·gc.alloc.rate.norm:          81022.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1253.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79747.031 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     27.000 ms
[info] Iteration   4: 25323.708 ops/s
[info]                  ·gc.alloc.rate:                   1122.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              69788.215 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1241.658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77166.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.968 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 495.164 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   5: 25301.612 ops/s
[info]                  ·gc.alloc.rate:                   1131.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              70359.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1248.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77647.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.878 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 241.126 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   25116.537 ±(99.9%) 907.366 ops/s [Average]
[info]   (min, avg, max) = (24742.081, 25116.537, 25323.708), stdev = 235.640
[info]   CI (99.9%): [24209.171, 26023.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1303.850 ±(99.9%) 712.271 MB/sec [Average]
[info]   (min, avg, max) = (1122.939, 1303.850, 1503.098), stdev = 184.975
[info]   CI (99.9%): [591.579, 2016.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   81712.734 ±(99.9%) 45520.031 B/op [Average]
[info]   (min, avg, max) = (69788.215, 81712.734, 93994.976), stdev = 11821.408
[info]   CI (99.9%): [36192.703, 127232.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1263.884 ±(99.9%) 85.135 MB/sec [Average]
[info]   (min, avg, max) = (1241.658, 1263.884, 1288.978), stdev = 22.109
[info]   CI (99.9%): [1178.748, 1349.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   79181.929 ±(99.9%) 6443.219 B/op [Average]
[info]   (min, avg, max) = (77166.318, 79181.929, 80743.364), stdev = 1673.283
[info]   CI (99.9%): [72738.711, 85625.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2.688 ±(99.9%) 12.906 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.688, 7.968), stdev = 3.352
[info]   CI (99.9%): [≈ 0, 15.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   167.226 ±(99.9%) 801.901 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 167.226, 495.164), stdev = 208.251
[info]   CI (99.9%): [≈ 0, 969.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   114.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (18.000, 22.800, 28.000), stdev = 4.550
[info]   CI (99.9%): [114.000, 114.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 43.19% complete, ETA 01:06:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1584.101 ops/s
[info] # Warmup Iteration   2: 7618.265 ops/s
[info] # Warmup Iteration   3: 11592.473 ops/s
[info] # Warmup Iteration   4: 13467.652 ops/s
[info] # Warmup Iteration   5: 13162.786 ops/s
[info] Iteration   1: 13311.987 ops/s
[info]                  ·gc.alloc.rate:               1260.113 MB/sec
[info]                  ·gc.alloc.rate.norm:          148979.436 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 78278.974 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 12761.296 ops/s
[info]                  ·gc.alloc.rate:                   1460.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              180130.495 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     244974.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.875 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 107.905 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 13765.253 ops/s
[info]                  ·gc.alloc.rate:                   1322.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              151236.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     151635.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.205 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 480.762 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 14353.184 ops/s
[info]                  ·gc.alloc.rate:                   1613.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              176831.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145049.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.647 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 13586.270 ops/s
[info]                  ·gc.alloc.rate:               1479.125 MB/sec
[info]                  ·gc.alloc.rate.norm:          171341.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1321.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 153092.559 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   13555.598 ±(99.9%) 2254.602 ops/s [Average]
[info]   (min, avg, max) = (12761.296, 13555.598, 14353.184), stdev = 585.513
[info]   CI (99.9%): [11300.996, 15810.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1427.253 ±(99.9%) 535.395 MB/sec [Average]
[info]   (min, avg, max) = (1260.113, 1427.253, 1613.473), stdev = 139.040
[info]   CI (99.9%): [891.859, 1962.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   165703.864 ±(99.9%) 56223.181 B/op [Average]
[info]   (min, avg, max) = (148979.436, 165703.864, 180130.495), stdev = 14600.982
[info]   CI (99.9%): [109480.683, 221927.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1324.012 ±(99.9%) 1803.137 MB/sec [Average]
[info]   (min, avg, max) = (662.107, 1324.012, 1986.563), stdev = 468.269
[info]   CI (99.9%): [≈ 0, 3127.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   154606.101 ±(99.9%) 228576.469 B/op [Average]
[info]   (min, avg, max) = (78278.974, 154606.101, 244974.431), stdev = 59360.583
[info]   CI (99.9%): [≈ 0, 383182.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.099 ±(99.9%) 6.829 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.099, 4.205), stdev = 1.773
[info]   CI (99.9%): [≈ 0, 7.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   126.863 ±(99.9%) 780.619 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 126.863, 480.762), stdev = 202.724
[info]   CI (99.9%): [≈ 0, 907.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 16.000), stdev = 5.167
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.42% complete, ETA 01:05:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 608.577 ops/s
[info] # Warmup Iteration   2: 9609.441 ops/s
[info] # Warmup Iteration   3: 11203.094 ops/s
[info] # Warmup Iteration   4: 11719.495 ops/s
[info] # Warmup Iteration   5: 11613.501 ops/s
[info] Iteration   1: 11594.366 ops/s
[info]                  ·gc.alloc.rate:               1032.376 MB/sec
[info]                  ·gc.alloc.rate.norm:          140139.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89513.688 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 11042.519 ops/s
[info]                  ·gc.alloc.rate:               1123.310 MB/sec
[info]                  ·gc.alloc.rate.norm:          160102.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1319.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 188069.629 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 11650.833 ops/s
[info]                  ·gc.alloc.rate:                   1054.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              142407.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178481.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.921 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124.445 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 11720.153 ops/s
[info]                  ·gc.alloc.rate:               1041.524 MB/sec
[info]                  ·gc.alloc.rate.norm:          139859.668 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 88782.774 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 11535.378 ops/s
[info]                  ·gc.alloc.rate:                   1201.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              163789.384 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180760.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.840 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   11508.650 ±(99.9%) 1037.335 ops/s [Average]
[info]   (min, avg, max) = (11042.519, 11508.650, 11720.153), stdev = 269.393
[info]   CI (99.9%): [10471.315, 12545.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1090.497 ±(99.9%) 274.883 MB/sec [Average]
[info]   (min, avg, max) = (1032.376, 1090.497, 1201.028), stdev = 71.386
[info]   CI (99.9%): [815.614, 1365.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   149259.583 ±(99.9%) 45036.437 B/op [Average]
[info]   (min, avg, max) = (139859.668, 149259.583, 163789.384), stdev = 11695.820
[info]   CI (99.9%): [104223.146, 194296.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1057.381 ±(99.9%) 1395.844 MB/sec [Average]
[info]   (min, avg, max) = (659.430, 1057.381, 1325.475), stdev = 362.496
[info]   CI (99.9%): [≈ 0, 2453.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   145121.766 ±(99.9%) 197229.488 B/op [Average]
[info]   (min, avg, max) = (88782.774, 145121.766, 188069.629), stdev = 51219.872
[info]   CI (99.9%): [≈ 0, 342351.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.188 ±(99.9%) 1.578 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.188, 0.921), stdev = 0.410
[info]   CI (99.9%): [≈ 0, 1.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   25.457 ±(99.9%) 213.132 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25.457, 124.445), stdev = 55.350
[info]   CI (99.9%): [≈ 0, 238.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.65% complete, ETA 01:05:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93162.839 ops/s
[info] # Warmup Iteration   2: 275173.163 ops/s
[info] # Warmup Iteration   3: 291592.850 ops/s
[info] # Warmup Iteration   4: 343542.364 ops/s
[info] # Warmup Iteration   5: 360615.153 ops/s
[info] Iteration   1: 358707.443 ops/s
[info]                  ·gc.alloc.rate:               1690.525 MB/sec
[info]                  ·gc.alloc.rate.norm:          7417.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1970.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8645.265 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     19.000 ms
[info] Iteration   2: 363373.163 ops/s
[info]                  ·gc.alloc.rate:                   1689.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              7315.972 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5704.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.843 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.644 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 362923.661 ops/s
[info]                  ·gc.alloc.rate:                   1710.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              7418.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1971.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8551.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.203 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 365452.837 ops/s
[info]                  ·gc.alloc.rate:                   1703.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              7337.151 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5654.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.807 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 365410.877 ops/s
[info]                  ·gc.alloc.rate:                   1716.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              7395.153 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1968.429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8478.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   363173.596 ±(99.9%) 10589.127 ops/s [Average]
[info]   (min, avg, max) = (358707.443, 363173.596, 365452.837), stdev = 2749.963
[info]   CI (99.9%): [352584.469, 373762.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1702.166 ±(99.9%) 47.055 MB/sec [Average]
[info]   (min, avg, max) = (1689.106, 1702.166, 1716.894), stdev = 12.220
[info]   CI (99.9%): [1655.112, 1749.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   7376.850 ±(99.9%) 182.671 B/op [Average]
[info]   (min, avg, max) = (7315.972, 7376.850, 7418.391), stdev = 47.439
[info]   CI (99.9%): [7194.179, 7559.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1708.099 ±(99.9%) 1382.029 MB/sec [Average]
[info]   (min, avg, max) = (1312.914, 1708.099, 1971.862), stdev = 358.909
[info]   CI (99.9%): [326.069, 3090.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   7406.694 ±(99.9%) 6076.862 B/op [Average]
[info]   (min, avg, max) = (5654.363, 7406.694, 8645.265), stdev = 1578.142
[info]   CI (99.9%): [1329.832, 13483.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1.327 ±(99.9%) 6.854 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.327, 3.843), stdev = 1.780
[info]   CI (99.9%): [≈ 0, 8.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.749 ±(99.9%) 29.699 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.749, 16.644), stdev = 7.713
[info]   CI (99.9%): [≈ 0, 35.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 19.000), stdev = 6.380
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43.88% complete, ETA 01:05:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 673.458 ops/s
[info] # Warmup Iteration   2: 5712.211 ops/s
[info] # Warmup Iteration   3: 11209.540 ops/s
[info] # Warmup Iteration   4: 13566.593 ops/s
[info] # Warmup Iteration   5: 13388.371 ops/s
[info] Iteration   1: 13104.235 ops/s
[info]                  ·gc.alloc.rate:                   1525.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              183111.656 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160322.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.500 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 13542.993 ops/s
[info]                  ·gc.alloc.rate:               1581.100 MB/sec
[info]                  ·gc.alloc.rate.norm:          183693.235 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 155292.983 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 13544.316 ops/s
[info]                  ·gc.alloc.rate:                   1568.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              182231.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155397.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 220.131 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 13030.634 ops/s
[info]                  ·gc.alloc.rate:                   1521.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              183707.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     242331.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100.569 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 12985.024 ops/s
[info]                  ·gc.alloc.rate:                   1705.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              206682.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162126.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 136.249 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   13241.440 ±(99.9%) 1074.878 ops/s [Average]
[info]   (min, avg, max) = (12985.024, 13241.440, 13544.316), stdev = 279.142
[info]   CI (99.9%): [12166.563, 14316.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1580.310 ±(99.9%) 288.119 MB/sec [Average]
[info]   (min, avg, max) = (1521.028, 1580.310, 1705.657), stdev = 74.824
[info]   CI (99.9%): [1292.191, 1868.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   187885.354 ±(99.9%) 40529.556 B/op [Average]
[info]   (min, avg, max) = (182231.013, 187885.354, 206682.987), stdev = 10525.397
[info]   CI (99.9%): [147355.798, 228414.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1470.799 ±(99.9%) 1152.951 MB/sec [Average]
[info]   (min, avg, max) = (1335.458, 1470.799, 2006.411), stdev = 299.418
[info]   CI (99.9%): [317.848, 2623.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   175094.339 ±(99.9%) 145196.623 B/op [Average]
[info]   (min, avg, max) = (155292.983, 175094.339, 242331.843), stdev = 37707.102
[info]   CI (99.9%): [29897.716, 320290.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.775 ±(99.9%) 3.074 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.775, 1.895), stdev = 0.798
[info]   CI (99.9%): [≈ 0, 3.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   91.890 ±(99.9%) 359.799 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 91.890, 220.131), stdev = 93.439
[info]   CI (99.9%): [≈ 0, 451.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.11% complete, ETA 01:05:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6109.644 ops/s
[info] # Warmup Iteration   2: 24704.252 ops/s
[info] # Warmup Iteration   3: 36909.290 ops/s
[info] # Warmup Iteration   4: 36325.338 ops/s
[info] # Warmup Iteration   5: 33229.646 ops/s
[info] Iteration   1: 33962.511 ops/s
[info]                  ·gc.alloc.rate:                   1761.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              81606.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1943.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90043.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.593 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         28.000 ms
[info] Iteration   2: 35415.133 ops/s
[info]                  ·gc.alloc.rate:                   1492.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              66333.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1284.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57073.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.550 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 202.203 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 36383.104 ops/s
[info]                  ·gc.alloc.rate:                   1438.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              62216.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1288.345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55729.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.890 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.508 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 36489.369 ops/s
[info]                  ·gc.alloc.rate:                   1440.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              62140.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1291.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55711.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.704 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 159.775 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 35438.504 ops/s
[info]                  ·gc.alloc.rate:                   1412.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              62718.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1292.358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57394.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.106 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.717 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   35537.724 ±(99.9%) 3911.040 ops/s [Average]
[info]   (min, avg, max) = (33962.511, 35537.724, 36489.369), stdev = 1015.685
[info]   CI (99.9%): [31626.684, 39448.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1509.138 ±(99.9%) 555.428 MB/sec [Average]
[info]   (min, avg, max) = (1412.238, 1509.138, 1761.835), stdev = 144.243
[info]   CI (99.9%): [953.710, 2064.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   67003.045 ±(99.9%) 32137.516 B/op [Average]
[info]   (min, avg, max) = (62140.941, 67003.045, 81606.577), stdev = 8346.011
[info]   CI (99.9%): [34865.529, 99140.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1420.117 ±(99.9%) 1127.738 MB/sec [Average]
[info]   (min, avg, max) = (1284.290, 1420.117, 1943.988), stdev = 292.870
[info]   CI (99.9%): [292.379, 2547.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   63190.573 ±(99.9%) 57878.549 B/op [Average]
[info]   (min, avg, max) = (55711.436, 63190.573, 90043.751), stdev = 15030.875
[info]   CI (99.9%): [5312.024, 121069.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2.000 ±(99.9%) 7.652 MB/sec [Average]
[info]   (min, avg, max) = (0.106, 2.000, 4.550), stdev = 1.987
[info]   CI (99.9%): [≈ 0, 9.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   87.959 ±(99.9%) 335.867 B/op [Average]
[info]   (min, avg, max) = (4.717, 87.959, 202.203), stdev = 87.224
[info]   CI (99.9%): [≈ 0, 423.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   75.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 15.000, 28.000), stdev = 7.714
[info]   CI (99.9%): [75.000, 75.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.34% complete, ETA 01:04:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27137.628 ops/s
[info] # Warmup Iteration   2: 98834.153 ops/s
[info] # Warmup Iteration   3: 127072.349 ops/s
[info] # Warmup Iteration   4: 131208.965 ops/s
[info] # Warmup Iteration   5: 132261.199 ops/s
[info] Iteration   1: 128428.023 ops/s
[info]                  ·gc.alloc.rate:                   2426.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              29740.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32759.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.655 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.286 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 130783.478 ops/s
[info]                  ·gc.alloc.rate:                   2452.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              29514.387 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24166.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 131873.031 ops/s
[info]                  ·gc.alloc.rate:                   2473.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              29508.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32008.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.248 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 134817.329 ops/s
[info]                  ·gc.alloc.rate:               2566.623 MB/sec
[info]                  ·gc.alloc.rate.norm:          29963.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31393.979 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 135040.031 ops/s
[info]                  ·gc.alloc.rate:               2544.463 MB/sec
[info]                  ·gc.alloc.rate.norm:          29651.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2021.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23558.490 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   132188.378 ±(99.9%) 10764.042 ops/s [Average]
[info]   (min, avg, max) = (128428.023, 132188.378, 135040.031), stdev = 2795.387
[info]   CI (99.9%): [121424.337, 142952.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2492.800 ±(99.9%) 231.608 MB/sec [Average]
[info]   (min, avg, max) = (2426.767, 2492.800, 2566.623), stdev = 60.148
[info]   CI (99.9%): [2261.193, 2724.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   29675.394 ±(99.9%) 723.953 B/op [Average]
[info]   (min, avg, max) = (29508.122, 29675.394, 29963.022), stdev = 188.008
[info]   CI (99.9%): [28951.441, 30399.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2415.079 ±(99.9%) 1407.154 MB/sec [Average]
[info]   (min, avg, max) = (2008.086, 2415.079, 2689.198), stdev = 365.433
[info]   CI (99.9%): [1007.926, 3822.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   28777.522 ±(99.9%) 17397.101 B/op [Average]
[info]   (min, avg, max) = (23558.490, 28777.522, 32759.837), stdev = 4517.972
[info]   CI (99.9%): [11380.421, 46174.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.352 ±(99.9%) 2.809 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.352, 1.655), stdev = 0.729
[info]   CI (99.9%): [≈ 0, 3.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.307 ±(99.9%) 34.432 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.307, 20.286), stdev = 8.942
[info]   CI (99.9%): [≈ 0, 38.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.57% complete, ETA 01:04:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 371274.658 ops/s
[info] # Warmup Iteration   2: 778649.586 ops/s
[info] # Warmup Iteration   3: 881124.129 ops/s
[info] # Warmup Iteration   4: 851087.811 ops/s
[info] # Warmup Iteration   5: 882984.301 ops/s
[info] Iteration   1: 870976.745 ops/s
[info]                  ·gc.alloc.rate:               1226.691 MB/sec
[info]                  ·gc.alloc.rate.norm:          2216.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1204.965 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 881690.299 ops/s
[info]                  ·gc.alloc.rate:               1254.579 MB/sec
[info]                  ·gc.alloc.rate.norm:          2239.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2381.781 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 855615.956 ops/s
[info]                  ·gc.alloc.rate:               1221.709 MB/sec
[info]                  ·gc.alloc.rate.norm:          2247.305 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2456.268 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 880640.524 ops/s
[info]                  ·gc.alloc.rate:               1244.422 MB/sec
[info]                  ·gc.alloc.rate.norm:          2223.283 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2388.698 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 883823.595 ops/s
[info]                  ·gc.alloc.rate:                   1241.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              2209.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2383.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   874549.424 ±(99.9%) 44961.280 ops/s [Average]
[info]   (min, avg, max) = (855615.956, 874549.424, 883823.595), stdev = 11676.302
[info]   CI (99.9%): [829588.144, 919510.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1237.749 ±(99.9%) 51.670 MB/sec [Average]
[info]   (min, avg, max) = (1221.709, 1237.749, 1254.579), stdev = 13.419
[info]   CI (99.9%): [1186.079, 1289.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2227.230 ±(99.9%) 60.403 B/op [Average]
[info]   (min, avg, max) = (2209.648, 2227.230, 2247.305), stdev = 15.687
[info]   CI (99.9%): [2166.827, 2287.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1202.550 ±(99.9%) 1153.210 MB/sec [Average]
[info]   (min, avg, max) = (666.825, 1202.550, 1339.178), stdev = 299.485
[info]   CI (99.9%): [49.340, 2355.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2163.102 ±(99.9%) 2065.928 B/op [Average]
[info]   (min, avg, max) = (1204.965, 2163.102, 2456.268), stdev = 536.515
[info]   CI (99.9%): [97.174, 4229.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.064 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.037), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 44.80% complete, ETA 01:04:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 289509.973 ops/s
[info] # Warmup Iteration   2: 855842.644 ops/s
[info] # Warmup Iteration   3: 961297.256 ops/s
[info] # Warmup Iteration   4: 959932.418 ops/s
[info] # Warmup Iteration   5: 950438.523 ops/s
[info] Iteration   1: 961554.926 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 964174.315 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 958531.735 ops/s
[info]                  ·gc.alloc.rate:      2.941 MB/sec
[info]                  ·gc.alloc.rate.norm: 4.829 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 963597.012 ops/s
[info]                  ·gc.alloc.rate:      3.633 MB/sec
[info]                  ·gc.alloc.rate.norm: 5.932 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 959258.611 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   961423.320 ±(99.9%) 9695.187 ops/s [Average]
[info]   (min, avg, max) = (958531.735, 961423.320, 964174.315), stdev = 2517.809
[info]   CI (99.9%): [951728.133, 971118.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.315 ±(99.9%) 6.995 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.315, 3.633), stdev = 1.817
[info]   CI (99.9%): [≈ 0, 8.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2.152 ±(99.9%) 11.446 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 2.152, 5.932), stdev = 2.972
[info]   CI (99.9%): [≈ 0, 13.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.03% complete, ETA 01:04:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11969.016 ops/s
[info] # Warmup Iteration   2: 72394.600 ops/s
[info] # Warmup Iteration   3: 103718.838 ops/s
[info] # Warmup Iteration   4: 123495.951 ops/s
[info] # Warmup Iteration   5: 123029.867 ops/s
[info] Iteration   1: 125229.380 ops/s
[info]                  ·gc.alloc.rate:                   2794.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              35119.257 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33530.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.401 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 126118.226 ops/s
[info]                  ·gc.alloc.rate:                   2821.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              35202.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33319.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.260 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 124499.937 ops/s
[info]                  ·gc.alloc.rate:                   2812.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              35539.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33836.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.263 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 124335.496 ops/s
[info]                  ·gc.alloc.rate:                   2821.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              35711.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33986.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.264 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 126159.896 ops/s
[info]                  ·gc.alloc.rate:                   2871.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              35812.419 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2694.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33605.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.260 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   125268.587 ±(99.9%) 3323.251 ops/s [Average]
[info]   (min, avg, max) = (124335.496, 125268.587, 126159.896), stdev = 863.038
[info]   CI (99.9%): [121945.336, 128591.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2824.218 ±(99.9%) 110.338 MB/sec [Average]
[info]   (min, avg, max) = (2794.386, 2824.218, 2871.556), stdev = 28.654
[info]   CI (99.9%): [2713.880, 2934.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   35477.172 ±(99.9%) 1178.985 B/op [Average]
[info]   (min, avg, max) = (35119.257, 35477.172, 35812.419), stdev = 306.179
[info]   CI (99.9%): [34298.187, 36656.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2679.137 ±(99.9%) 42.050 MB/sec [Average]
[info]   (min, avg, max) = (2667.941, 2679.137, 2694.597), stdev = 10.920
[info]   CI (99.9%): [2637.087, 2721.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   33655.667 ±(99.9%) 1007.504 B/op [Average]
[info]   (min, avg, max) = (33319.268, 33655.667, 33986.744), stdev = 261.646
[info]   CI (99.9%): [32648.163, 34663.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.430 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.271), stdev = 0.112
[info]   CI (99.9%): [≈ 0, 0.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.889 ±(99.9%) 5.407 B/op [Average]
[info]   (min, avg, max) = (0.260, 0.889, 3.401), stdev = 1.404
[info]   CI (99.9%): [≈ 0, 6.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 45.27% complete, ETA 01:03:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4687.274 ops/s
[info] # Warmup Iteration   2: 11030.209 ops/s
[info] # Warmup Iteration   3: 17796.081 ops/s
[info] # Warmup Iteration   4: 19500.152 ops/s
[info] # Warmup Iteration   5: 18714.484 ops/s
[info] Iteration   1: 18830.368 ops/s
[info]                  ·gc.alloc.rate:                   952.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              79636.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54421.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.740 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 17802.994 ops/s
[info]                  ·gc.alloc.rate:               1121.905 MB/sec
[info]                  ·gc.alloc.rate.norm:          99171.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1302.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115157.271 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     18.000 ms
[info] Iteration   3: 17780.258 ops/s
[info]                  ·gc.alloc.rate:               1196.635 MB/sec
[info]                  ·gc.alloc.rate.norm:          105878.197 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1302.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115217.764 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     18.000 ms
[info] Iteration   4: 17277.209 ops/s
[info]                  ·gc.alloc.rate:                   1129.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              102849.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1297.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118207.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 617.671 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   5: 18631.116 ops/s
[info]                  ·gc.alloc.rate:                   932.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              78742.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:          647.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54693.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82.645 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   18064.389 ±(99.9%) 2492.986 ops/s [Average]
[info]   (min, avg, max) = (17277.209, 18064.389, 18830.368), stdev = 647.421
[info]   CI (99.9%): [15571.402, 20557.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   1066.549 ±(99.9%) 450.982 MB/sec [Average]
[info]   (min, avg, max) = (932.311, 1066.549, 1196.635), stdev = 117.119
[info]   CI (99.9%): [615.568, 1517.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   93255.562 ±(99.9%) 50297.783 B/op [Average]
[info]   (min, avg, max) = (78742.245, 93255.562, 105878.197), stdev = 13062.175
[info]   CI (99.9%): [42957.778, 143553.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1040.270 ±(99.9%) 1374.205 MB/sec [Average]
[info]   (min, avg, max) = (647.575, 1040.270, 1302.748), stdev = 356.877
[info]   CI (99.9%): [≈ 0, 2414.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   91539.629 ±(99.9%) 130083.579 B/op [Average]
[info]   (min, avg, max) = (54421.952, 91539.629, 118207.526), stdev = 33782.292
[info]   CI (99.9%): [≈ 0, 221623.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.556 ±(99.9%) 11.363 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.556, 6.781), stdev = 2.951
[info]   CI (99.9%): [≈ 0, 12.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   140.411 ±(99.9%) 1036.414 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 140.411, 617.671), stdev = 269.154
[info]   CI (99.9%): [≈ 0, 1176.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   68.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 13.600, 18.000), stdev = 6.066
[info]   CI (99.9%): [68.000, 68.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.50% complete, ETA 01:03:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5126.014 ops/s
[info] # Warmup Iteration   2: 14254.822 ops/s
[info] # Warmup Iteration   3: 17910.371 ops/s
[info] # Warmup Iteration   4: 18747.518 ops/s
[info] # Warmup Iteration   5: 17763.940 ops/s
[info] Iteration   1: 18958.548 ops/s
[info]                  ·gc.alloc.rate:               787.695 MB/sec
[info]                  ·gc.alloc.rate.norm:          65386.230 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55105.262 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 17856.952 ops/s
[info]                  ·gc.alloc.rate:                   1129.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              99501.335 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117040.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.357 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 17803.296 ops/s
[info]                  ·gc.alloc.rate:                   1151.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              101771.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117365.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.464 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129.360 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   4: 16284.788 ops/s
[info]                  ·gc.alloc.rate:                        724.774 MB/sec
[info]                  ·gc.alloc.rate.norm:                   70043.253 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.017 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 1.677 B/op
[info]                  ·gc.churn.Metaspace:                   0.050 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              4.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:               667.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          64492.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           9.326 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      901.277 B/op
[info]                  ·gc.count:                             3.000 counts
[info]                  ·gc.time:                              113.000 ms
[info] Iteration   5: 18715.637 ops/s
[info]                  ·gc.alloc.rate:               771.931 MB/sec
[info]                  ·gc.alloc.rate.norm:          64914.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:      642.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54056.084 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   17923.844 ±(99.9%) 4039.993 ops/s [Average]
[info]   (min, avg, max) = (16284.788, 17923.844, 18958.548), stdev = 1049.173
[info]   CI (99.9%): [13883.851, 21963.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   913.115 ±(99.9%) 805.122 MB/sec [Average]
[info]   (min, avg, max) = (724.774, 913.115, 1151.743), stdev = 209.088
[info]   CI (99.9%): [107.992, 1718.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   80323.332 ±(99.9%) 71886.334 B/op [Average]
[info]   (min, avg, max) = (64914.061, 80323.332, 101771.779), stdev = 18668.653
[info]   CI (99.9%): [8436.998, 152209.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space":
[info]   0.003 ±(99.9%) 0.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm":
[info]   0.335 ±(99.9%) 2.888 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.335, 1.677), stdev = 0.750
[info]   CI (99.9%): [≈ 0, 3.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.Metaspace":
[info]   0.010 ±(99.9%) 0.085 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.050), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.Metaspace.norm":
[info]   0.959 ±(99.9%) 8.254 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.959, 4.793), stdev = 2.144
[info]   CI (99.9%): [≈ 0, 9.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   926.145 ±(99.9%) 1414.319 MB/sec [Average]
[info]   (min, avg, max) = (642.813, 926.145, 1328.511), stdev = 367.294
[info]   CI (99.9%): [≈ 0, 2340.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   81611.970 ±(99.9%) 126082.480 B/op [Average]
[info]   (min, avg, max) = (54056.084, 81611.970, 117365.605), stdev = 32743.220
[info]   CI (99.9%): [≈ 0, 207694.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2.168 ±(99.9%) 15.596 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.168, 9.326), stdev = 4.050
[info]   CI (99.9%): [≈ 0, 17.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   206.999 ±(99.9%) 1509.642 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 206.999, 901.277), stdev = 392.049
[info]   CI (99.9%): [≈ 0, 1716.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   149.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 29.800, 113.000), stdev = 46.880
[info]   CI (99.9%): [149.000, 149.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.73% complete, ETA 01:03:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47197.320 ops/s
[info] # Warmup Iteration   2: 137136.216 ops/s
[info] # Warmup Iteration   3: 152938.146 ops/s
[info] # Warmup Iteration   4: 162508.879 ops/s
[info] # Warmup Iteration   5: 162466.776 ops/s
[info] Iteration   1: 162173.849 ops/s
[info]                  ·gc.alloc.rate:                   419.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              4068.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6409.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 162944.343 ops/s
[info]                  ·gc.alloc.rate:      409.177 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 161793.173 ops/s
[info]                  ·gc.alloc.rate:               418.863 MB/sec
[info]                  ·gc.alloc.rate.norm:          4074.471 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6424.931 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 162528.562 ops/s
[info]                  ·gc.alloc.rate:      408.103 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 161675.344 ops/s
[info]                  ·gc.alloc.rate:                   426.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              4154.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6442.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   162223.054 ±(99.9%) 2020.026 ops/s [Average]
[info]   (min, avg, max) = (161675.344, 162223.054, 162944.343), stdev = 524.594
[info]   CI (99.9%): [160203.028, 164243.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   416.468 ±(99.9%) 30.057 MB/sec [Average]
[info]   (min, avg, max) = (408.103, 416.468, 426.768), stdev = 7.806
[info]   CI (99.9%): [386.411, 446.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4040.313 ±(99.9%) 336.779 B/op [Average]
[info]   (min, avg, max) = (3952.003, 4040.313, 4154.470), stdev = 87.460
[info]   CI (99.9%): [3703.534, 4377.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   396.615 ±(99.9%) 1394.159 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 396.615, 661.783), stdev = 362.059
[info]   CI (99.9%): [≈ 0, 1790.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3855.440 ±(99.9%) 13552.486 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3855.440, 6442.271), stdev = 3519.537
[info]   CI (99.9%): [≈ 0, 17407.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.061 ±(99.9%) 0.349 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.203), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.96% complete, ETA 01:02:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2066.071 ops/s
[info] # Warmup Iteration   2: 11890.004 ops/s
[info] # Warmup Iteration   3: 16428.170 ops/s
[info] # Warmup Iteration   4: 17603.785 ops/s
[info] # Warmup Iteration   5: 17507.262 ops/s
[info] Iteration   1: 17688.174 ops/s
[info]                  ·gc.alloc.rate:                   1214.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              108020.691 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117950.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.704 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 17620.844 ops/s
[info]                  ·gc.alloc.rate:                   1210.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              108078.640 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118458.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.578 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 16173.663 ops/s
[info]                  ·gc.alloc.rate:               1425.616 MB/sec
[info]                  ·gc.alloc.rate.norm:          138729.458 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 129192.135 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     12.000 ms
[info] Iteration   4: 17126.630 ops/s
[info]                  ·gc.alloc.rate:                   1195.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              109850.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122065.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.114 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 561.824 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 17217.775 ops/s
[info]                  ·gc.alloc.rate:                   1213.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              110886.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121048.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.959 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   17165.417 ±(99.9%) 2333.146 ops/s [Average]
[info]   (min, avg, max) = (16173.663, 17165.417, 17688.174), stdev = 605.911
[info]   CI (99.9%): [14832.271, 19498.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1251.672 ±(99.9%) 375.545 MB/sec [Average]
[info]   (min, avg, max) = (1195.391, 1251.672, 1425.616), stdev = 97.528
[info]   CI (99.9%): [876.127, 1627.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   115113.071 ±(99.9%) 51051.218 B/op [Average]
[info]   (min, avg, max) = (108020.691, 115113.071, 138729.458), stdev = 13257.839
[info]   CI (99.9%): [64061.853, 166164.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1326.456 ±(99.9%) 6.203 MB/sec [Average]
[info]   (min, avg, max) = (1324.226, 1326.456, 1328.316), stdev = 1.611
[info]   CI (99.9%): [1320.253, 1332.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   121743.021 ±(99.9%) 17354.086 B/op [Average]
[info]   (min, avg, max) = (117950.723, 121743.021, 129192.135), stdev = 4506.801
[info]   CI (99.9%): [104388.935, 139097.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.331 ±(99.9%) 10.317 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.331, 6.114), stdev = 2.679
[info]   CI (99.9%): [≈ 0, 11.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   122.213 ±(99.9%) 948.322 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 122.213, 561.824), stdev = 246.276
[info]   CI (99.9%): [≈ 0, 1070.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.200, 12.000), stdev = 3.271
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46.19% complete, ETA 01:02:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13912.223 ops/s
[info] # Warmup Iteration   2: 55837.664 ops/s
[info] # Warmup Iteration   3: 57814.760 ops/s
[info] # Warmup Iteration   4: 63486.718 ops/s
[info] # Warmup Iteration   5: 65766.682 ops/s
[info] Iteration   1: 65816.077 ops/s
[info]                  ·gc.alloc.rate:                   1910.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              45676.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47867.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.727 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 66414.235 ops/s
[info]                  ·gc.alloc.rate:                   1921.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              45534.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47356.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.585 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 66485.602 ops/s
[info]                  ·gc.alloc.rate:               1895.831 MB/sec
[info]                  ·gc.alloc.rate.norm:          44878.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31474.941 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 65532.383 ops/s
[info]                  ·gc.alloc.rate:                   1881.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              45177.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47897.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.499 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 66582.950 ops/s
[info]                  ·gc.alloc.rate:               1910.322 MB/sec
[info]                  ·gc.alloc.rate.norm:          45155.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1996.429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47190.880 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   66166.249 ±(99.9%) 1787.057 ops/s [Average]
[info]   (min, avg, max) = (65532.383, 66166.249, 66582.950), stdev = 464.093
[info]   CI (99.9%): [64379.192, 67953.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1903.775 ±(99.9%) 59.993 MB/sec [Average]
[info]   (min, avg, max) = (1881.137, 1903.775, 1921.435), stdev = 15.580
[info]   CI (99.9%): [1843.782, 1963.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   45284.501 ±(99.9%) 1231.734 B/op [Average]
[info]   (min, avg, max) = (44878.322, 45284.501, 45676.911), stdev = 319.877
[info]   CI (99.9%): [44052.767, 46516.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1864.108 ±(99.9%) 1150.571 MB/sec [Average]
[info]   (min, avg, max) = (1329.621, 1864.108, 2001.753), stdev = 298.800
[info]   CI (99.9%): [713.537, 3014.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   44357.515 ±(99.9%) 27756.403 B/op [Average]
[info]   (min, avg, max) = (31474.941, 44357.515, 47897.422), stdev = 7208.250
[info]   CI (99.9%): [16601.112, 72113.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.929 ±(99.9%) 5.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.929, 3.167), stdev = 1.361
[info]   CI (99.9%): [≈ 0, 6.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   22.162 ±(99.9%) 125.285 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.162, 75.727), stdev = 32.536
[info]   CI (99.9%): [≈ 0, 147.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 12.000), stdev = 3.647
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.42% complete, ETA 01:02:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29774.609 ops/s
[info] # Warmup Iteration   2: 79963.864 ops/s
[info] # Warmup Iteration   3: 95255.452 ops/s
[info] # Warmup Iteration   4: 100174.533 ops/s
[info] # Warmup Iteration   5: 98118.206 ops/s
[info] Iteration   1: 99914.293 ops/s
[info]                  ·gc.alloc.rate:                   1899.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              29922.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31484.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.504 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.194 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 101264.520 ops/s
[info]                  ·gc.alloc.rate:                   1918.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              29810.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31023.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.148 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 101408.565 ops/s
[info]                  ·gc.alloc.rate:                   1944.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              30184.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30924.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.292 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 101503.000 ops/s
[info]                  ·gc.alloc.rate:               1919.881 MB/sec
[info]                  ·gc.alloc.rate.norm:          29767.792 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20601.529 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 101100.516 ops/s
[info]                  ·gc.alloc.rate:               1938.494 MB/sec
[info]                  ·gc.alloc.rate.norm:          30174.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1994.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31053.978 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   101038.179 ±(99.9%) 2489.167 ops/s [Average]
[info]   (min, avg, max) = (99914.293, 101038.179, 101503.000), stdev = 646.429
[info]   CI (99.9%): [98549.012, 103527.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1924.257 ±(99.9%) 69.311 MB/sec [Average]
[info]   (min, avg, max) = (1899.563, 1924.257, 1944.983), stdev = 18.000
[info]   CI (99.9%): [1854.946, 1993.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   29971.870 ±(99.9%) 761.201 B/op [Average]
[info]   (min, avg, max) = (29767.792, 29971.870, 30184.117), stdev = 197.681
[info]   CI (99.9%): [29210.669, 30733.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1862.299 ±(99.9%) 1148.642 MB/sec [Average]
[info]   (min, avg, max) = (1328.700, 1862.299, 1998.734), stdev = 298.299
[info]   CI (99.9%): [713.657, 3010.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   29017.466 ±(99.9%) 18134.827 B/op [Average]
[info]   (min, avg, max) = (20601.529, 29017.466, 31484.247), stdev = 4709.557
[info]   CI (99.9%): [10882.639, 47152.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.938 ±(99.9%) 5.808 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.938, 3.504), stdev = 1.508
[info]   CI (99.9%): [≈ 0, 6.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14.727 ±(99.9%) 91.482 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.727, 55.194), stdev = 23.758
[info]   CI (99.9%): [≈ 0, 106.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 14.000), stdev = 4.382
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.65% complete, ETA 01:02:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 158500.001 ops/s
[info] # Warmup Iteration   2: 335320.890 ops/s
[info] # Warmup Iteration   3: 352714.215 ops/s
[info] # Warmup Iteration   4: 353335.293 ops/s
[info] # Warmup Iteration   5: 349039.403 ops/s
[info] Iteration   1: 349791.031 ops/s
[info]                  ·gc.alloc.rate:               685.558 MB/sec
[info]                  ·gc.alloc.rate.norm:          3083.822 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3009.222 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 353260.989 ops/s
[info]                  ·gc.alloc.rate:               690.717 MB/sec
[info]                  ·gc.alloc.rate.norm:          3077.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2982.686 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 353879.979 ops/s
[info]                  ·gc.alloc.rate:                   694.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              3090.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2977.377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 353231.384 ops/s
[info]                  ·gc.alloc.rate:               701.575 MB/sec
[info]                  ·gc.alloc.rate.norm:          3124.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2982.931 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 353561.460 ops/s
[info]                  ·gc.alloc.rate:                   698.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              3107.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2980.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.127 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   352744.969 ±(99.9%) 6438.622 ops/s [Average]
[info]   (min, avg, max) = (349791.031, 352744.969, 353879.979), stdev = 1672.090
[info]   CI (99.9%): [346306.347, 359183.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   694.169 ±(99.9%) 24.096 MB/sec [Average]
[info]   (min, avg, max) = (685.558, 694.169, 701.575), stdev = 6.258
[info]   CI (99.9%): [670.073, 718.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3096.787 ±(99.9%) 73.927 B/op [Average]
[info]   (min, avg, max) = (3077.361, 3096.787, 3124.678), stdev = 19.199
[info]   CI (99.9%): [3022.861, 3170.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   669.419 ±(99.9%) 1.076 MB/sec [Average]
[info]   (min, avg, max) = (668.973, 669.419, 669.749), stdev = 0.280
[info]   CI (99.9%): [668.342, 670.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2986.444 ±(99.9%) 49.798 B/op [Average]
[info]   (min, avg, max) = (2977.377, 2986.444, 3009.222), stdev = 12.932
[info]   CI (99.9%): [2936.647, 3036.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.076 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.042), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.063 ±(99.9%) 0.339 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.063, 0.185), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 46.88% complete, ETA 01:01:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 168438.872 ops/s
[info] # Warmup Iteration   2: 312555.694 ops/s
[info] # Warmup Iteration   3: 374403.694 ops/s
[info] # Warmup Iteration   4: 377846.963 ops/s
[info] # Warmup Iteration   5: 380088.844 ops/s
[info] Iteration   1: 380074.396 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 379123.715 ops/s
[info]                  ·gc.alloc.rate:      10.185 MB/sec
[info]                  ·gc.alloc.rate.norm: 42.282 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 380608.622 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 380849.590 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 385351.743 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   381201.613 ±(99.9%) 9291.033 ops/s [Average]
[info]   (min, avg, max) = (379123.715, 381201.613, 385351.743), stdev = 2412.852
[info]   CI (99.9%): [371910.580, 390492.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   2.037 ±(99.9%) 17.539 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 2.037, 10.185), stdev = 4.555
[info]   CI (99.9%): [≈ 0, 19.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   8.457 ±(99.9%) 72.811 B/op [Average]
[info]   (min, avg, max) = (0.001, 8.457, 42.282), stdev = 18.909
[info]   CI (99.9%): [≈ 0, 81.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 47.11% complete, ETA 01:01:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18693.567 ops/s
[info] # Warmup Iteration   2: 58638.071 ops/s
[info] # Warmup Iteration   3: 79894.608 ops/s
[info] # Warmup Iteration   4: 88158.065 ops/s
[info] # Warmup Iteration   5: 92376.702 ops/s
[info] Iteration   1: 95513.750 ops/s
[info]                  ·gc.alloc.rate:                   1977.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              32577.819 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32941.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71.943 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 96418.646 ops/s
[info]                  ·gc.alloc.rate:                   2002.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              32694.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32533.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.757 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 96536.088 ops/s
[info]                  ·gc.alloc.rate:                   1993.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              32499.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32451.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.376 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 95305.595 ops/s
[info]                  ·gc.alloc.rate:                   1983.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              32738.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32870.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.030 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 95566.337 ops/s
[info]                  ·gc.alloc.rate:                   1965.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              32375.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21909.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.343 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   95868.083 ±(99.9%) 2180.248 ops/s [Average]
[info]   (min, avg, max) = (95305.595, 95868.083, 96536.088), stdev = 566.204
[info]   CI (99.9%): [93687.835, 98048.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1984.527 ±(99.9%) 55.184 MB/sec [Average]
[info]   (min, avg, max) = (1965.920, 1984.527, 2002.936), stdev = 14.331
[info]   CI (99.9%): [1929.343, 2039.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32577.156 ±(99.9%) 565.054 B/op [Average]
[info]   (min, avg, max) = (32375.993, 32577.156, 32738.028), stdev = 146.743
[info]   CI (99.9%): [32012.102, 33142.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1860.866 ±(99.9%) 1142.041 MB/sec [Average]
[info]   (min, avg, max) = (1330.355, 1860.866, 1999.152), stdev = 296.585
[info]   CI (99.9%): [718.825, 3002.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   30541.115 ±(99.9%) 18598.686 B/op [Average]
[info]   (min, avg, max) = (21909.102, 30541.115, 32941.227), stdev = 4830.020
[info]   CI (99.9%): [11942.429, 49139.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.977 ±(99.9%) 7.305 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.977, 4.366), stdev = 1.897
[info]   CI (99.9%): [≈ 0, 8.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   16.090 ±(99.9%) 120.403 B/op [Average]
[info]   (min, avg, max) = (0.343, 16.090, 71.943), stdev = 31.268
[info]   CI (99.9%): [≈ 0, 136.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 12.000), stdev = 3.633
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47.34% complete, ETA 01:01:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15923.504 ops/s
[info] # Warmup Iteration   2: 169342.622 ops/s
[info] # Warmup Iteration   3: 188586.673 ops/s
[info] # Warmup Iteration   4: 217388.603 ops/s
[info] # Warmup Iteration   5: 203854.717 ops/s
[info] Iteration   1: 206689.676 ops/s
[info]                  ·gc.alloc.rate:                   2657.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              20235.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2662.372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20271.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.329 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 207633.607 ops/s
[info]                  ·gc.alloc.rate:                   2652.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              20106.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2664.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20200.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.105 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 210293.617 ops/s
[info]                  ·gc.alloc.rate:                   2695.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              20168.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19966.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.345 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.035 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 210929.967 ops/s
[info]                  ·gc.alloc.rate:                   2701.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              20158.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19886.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.155 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 209850.037 ops/s
[info]                  ·gc.alloc.rate:               2728.779 MB/sec
[info]                  ·gc.alloc.rate.norm:          20464.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2666.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19998.998 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   209079.381 ±(99.9%) 7019.879 ops/s [Average]
[info]   (min, avg, max) = (206689.676, 209079.381, 210929.967), stdev = 1823.040
[info]   CI (99.9%): [202059.502, 216099.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2687.099 ±(99.9%) 122.872 MB/sec [Average]
[info]   (min, avg, max) = (2652.573, 2687.099, 2728.779), stdev = 31.909
[info]   CI (99.9%): [2564.227, 2809.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20226.731 ±(99.9%) 541.391 B/op [Average]
[info]   (min, avg, max) = (20106.754, 20226.731, 20464.609), stdev = 140.598
[info]   CI (99.9%): [19685.340, 20768.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2665.431 ±(99.9%) 8.351 MB/sec [Average]
[info]   (min, avg, max) = (2662.372, 2665.431, 2668.155), stdev = 2.169
[info]   CI (99.9%): [2657.081, 2673.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   20064.904 ±(99.9%) 629.149 B/op [Average]
[info]   (min, avg, max) = (19886.675, 20064.904, 20271.736), stdev = 163.388
[info]   CI (99.9%): [19435.755, 20694.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.790 ±(99.9%) 5.542 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.790, 3.345), stdev = 1.439
[info]   CI (99.9%): [≈ 0, 6.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.925 ±(99.9%) 41.454 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.925, 25.035), stdev = 10.765
[info]   CI (99.9%): [≈ 0, 47.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.600, 13.000), stdev = 3.362
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 47.58% complete, ETA 01:01:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.576 ops/s
[info] # Warmup Iteration   2: 740746.799 ops/s
[info] # Warmup Iteration   3: 798405.658 ops/s
[info] # Warmup Iteration   4: 833494.487 ops/s
[info] # Warmup Iteration   5: 838928.459 ops/s
[info] Iteration   1: 830630.036 ops/s
[info]                  ·gc.alloc.rate:                   475.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              901.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1254.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 835339.795 ops/s
[info]                  ·gc.alloc.rate:               476.113 MB/sec
[info]                  ·gc.alloc.rate.norm:          896.995 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1247.626 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 838575.324 ops/s
[info]                  ·gc.alloc.rate:      464.643 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 834728.425 ops/s
[info]                  ·gc.alloc.rate:                   480.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              905.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1250.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 836577.544 ops/s
[info]                  ·gc.alloc.rate:               482.134 MB/sec
[info]                  ·gc.alloc.rate.norm:          906.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1247.614 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   835170.225 ±(99.9%) 11294.357 ops/s [Average]
[info]   (min, avg, max) = (830630.036, 835170.225, 838575.324), stdev = 2933.109
[info]   CI (99.9%): [823875.868, 846464.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   475.810 ±(99.9%) 26.253 MB/sec [Average]
[info]   (min, avg, max) = (464.643, 475.810, 482.134), stdev = 6.818
[info]   CI (99.9%): [449.557, 502.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   896.634 ±(99.9%) 55.147 B/op [Average]
[info]   (min, avg, max) = (872.001, 896.634, 906.982), stdev = 14.321
[info]   CI (99.9%): [841.487, 951.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   530.167 ±(99.9%) 1141.225 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 530.167, 663.207), stdev = 296.372
[info]   CI (99.9%): [≈ 0, 1671.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1000.069 ±(99.9%) 2152.753 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1000.069, 1254.697), stdev = 559.063
[info]   CI (99.9%): [≈ 0, 3152.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.031), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.058), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.81% complete, ETA 01:00:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75988.937 ops/s
[info] # Warmup Iteration   2: 337149.685 ops/s
[info] # Warmup Iteration   3: 413725.007 ops/s
[info] # Warmup Iteration   4: 413488.748 ops/s
[info] # Warmup Iteration   5: 412764.404 ops/s
[info] Iteration   1: 415861.541 ops/s
[info]                  ·gc.alloc.rate:      348.781 MB/sec
[info]                  ·gc.alloc.rate.norm: 1320.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 414001.486 ops/s
[info]                  ·gc.alloc.rate:               359.775 MB/sec
[info]                  ·gc.alloc.rate.norm:          1367.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2518.448 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 413900.839 ops/s
[info]                  ·gc.alloc.rate:      352.057 MB/sec
[info]                  ·gc.alloc.rate.norm: 1338.683 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 415009.506 ops/s
[info]                  ·gc.alloc.rate:                   367.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              1392.891 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2512.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 416079.800 ops/s
[info]                  ·gc.alloc.rate:      348.970 MB/sec
[info]                  ·gc.alloc.rate.norm: 1320.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   414970.634 ±(99.9%) 3902.844 ops/s [Average]
[info]   (min, avg, max) = (413900.839, 414970.634, 416079.800), stdev = 1013.556
[info]   CI (99.9%): [411067.790, 418873.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   355.371 ±(99.9%) 30.831 MB/sec [Average]
[info]   (min, avg, max) = (348.781, 355.371, 367.272), stdev = 8.007
[info]   CI (99.9%): [324.540, 386.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1347.865 ±(99.9%) 122.675 B/op [Average]
[info]   (min, avg, max) = (1320.001, 1347.865, 1392.891), stdev = 31.858
[info]   CI (99.9%): [1225.190, 1470.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   264.981 ±(99.9%) 1397.171 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 264.981, 662.457), stdev = 362.841
[info]   CI (99.9%): [≈ 0, 1662.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1006.162 ±(99.9%) 5305.209 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1006.162, 2518.448), stdev = 1377.746
[info]   CI (99.9%): [≈ 0, 6311.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.136 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.079), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.04% complete, ETA 01:00:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 431060.496 ops/s
[info] # Warmup Iteration   2: 964593.790 ops/s
[info] # Warmup Iteration   3: 1098156.127 ops/s
[info] # Warmup Iteration   4: 1086000.759 ops/s
[info] # Warmup Iteration   5: 1057146.405 ops/s
[info] Iteration   1: 1084810.210 ops/s
[info]                  ·gc.alloc.rate:               388.546 MB/sec
[info]                  ·gc.alloc.rate.norm:          563.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 742.227 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1094507.798 ops/s
[info]                  ·gc.alloc.rate:      378.916 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.831 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1089279.903 ops/s
[info]                  ·gc.alloc.rate:                   400.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              578.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     965.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1097182.176 ops/s
[info]                  ·gc.alloc.rate:      379.225 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1093721.638 ops/s
[info]                  ·gc.alloc.rate:               394.134 MB/sec
[info]                  ·gc.alloc.rate.norm:          567.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 961.913 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   1091900.345 ±(99.9%) 18780.565 ops/s [Average]
[info]   (min, avg, max) = (1084810.210, 1091900.345, 1097182.176), stdev = 4877.253
[info]   CI (99.9%): [1073119.780, 1110680.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   388.296 ±(99.9%) 36.391 MB/sec [Average]
[info]   (min, avg, max) = (378.916, 388.296, 400.659), stdev = 9.451
[info]   CI (99.9%): [351.905, 424.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   559.696 ±(99.9%) 57.871 B/op [Average]
[info]   (min, avg, max) = (544.000, 559.696, 578.781), stdev = 15.029
[info]   CI (99.9%): [501.826, 617.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   369.727 ±(99.9%) 1322.845 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.727, 668.591), stdev = 343.539
[info]   CI (99.9%): [≈ 0, 1692.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   533.993 ±(99.9%) 1909.134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 533.993, 965.828), stdev = 495.796
[info]   CI (99.9%): [≈ 0, 2443.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.019), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48.27% complete, ETA 01:00:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5009.790 ops/s
[info] # Warmup Iteration   2: 85650.811 ops/s
[info] # Warmup Iteration   3: 107574.233 ops/s
[info] # Warmup Iteration   4: 121399.328 ops/s
[info] # Warmup Iteration   5: 122703.510 ops/s
[info] Iteration   1: 123422.589 ops/s
[info]                  ·gc.alloc.rate:                   3924.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              50047.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4014.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51196.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.531 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 123476.862 ops/s
[info]                  ·gc.alloc.rate:                   3941.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              50236.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3360.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42831.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.265 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 122348.119 ops/s
[info]                  ·gc.alloc.rate:                   3949.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              50797.521 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4048.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52078.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.268 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 120337.238 ops/s
[info]                  ·gc.alloc.rate:                   3919.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              51266.466 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4061.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53118.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.310 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 122990.388 ops/s
[info]                  ·gc.alloc.rate:                   4043.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              51728.606 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4068.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52050.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.533 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   122515.039 ±(99.9%) 5000.424 ops/s [Average]
[info]   (min, avg, max) = (120337.238, 122515.039, 123476.862), stdev = 1298.594
[info]   CI (99.9%): [117514.615, 127515.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3955.547 ±(99.9%) 193.964 MB/sec [Average]
[info]   (min, avg, max) = (3919.782, 3955.547, 4043.088), stdev = 50.372
[info]   CI (99.9%): [3761.583, 4149.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   50815.127 ±(99.9%) 2698.073 B/op [Average]
[info]   (min, avg, max) = (50047.015, 50815.127, 51728.606), stdev = 700.681
[info]   CI (99.9%): [48117.053, 53513.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3910.686 ±(99.9%) 1187.496 MB/sec [Average]
[info]   (min, avg, max) = (3360.254, 3910.686, 4068.280), stdev = 308.389
[info]   CI (99.9%): [2723.189, 5098.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   50255.373 ±(99.9%) 16193.925 B/op [Average]
[info]   (min, avg, max) = (42831.684, 50255.373, 53118.813), stdev = 4205.511
[info]   CI (99.9%): [34061.448, 66449.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.244 ±(99.9%) 1.831 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.244, 1.094), stdev = 0.475
[info]   CI (99.9%): [≈ 0, 2.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.181 ±(99.9%) 23.962 B/op [Average]
[info]   (min, avg, max) = (0.265, 3.181, 14.310), stdev = 6.223
[info]   CI (99.9%): [≈ 0, 27.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.400, 9.000), stdev = 0.894
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 48.50% complete, ETA 00:59:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62659.509 ops/s
[info] # Warmup Iteration   2: 284999.359 ops/s
[info] # Warmup Iteration   3: 302629.434 ops/s
[info] # Warmup Iteration   4: 304901.889 ops/s
[info] # Warmup Iteration   5: 303855.240 ops/s
[info] Iteration   1: 305407.174 ops/s
[info]                  ·gc.alloc.rate:                   1806.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              9306.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10331.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.300 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.003 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 315763.366 ops/s
[info]                  ·gc.alloc.rate:                   1836.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              9154.936 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6655.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.877 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 313337.763 ops/s
[info]                  ·gc.alloc.rate:                   1861.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              9347.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10035.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.418 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 315554.957 ops/s
[info]                  ·gc.alloc.rate:                   1859.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              9274.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9959.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.208 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 316466.159 ops/s
[info]                  ·gc.alloc.rate:                   1850.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              9204.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6626.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   313305.884 ±(99.9%) 17590.693 ops/s [Average]
[info]   (min, avg, max) = (305407.174, 313305.884, 316466.159), stdev = 4568.247
[info]   CI (99.9%): [295715.191, 330896.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1842.995 ±(99.9%) 87.250 MB/sec [Average]
[info]   (min, avg, max) = (1806.300, 1842.995, 1861.230), stdev = 22.659
[info]   CI (99.9%): [1755.745, 1930.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9257.665 ±(99.9%) 299.361 B/op [Average]
[info]   (min, avg, max) = (9154.936, 9257.665, 9347.959), stdev = 77.743
[info]   CI (99.9%): [8958.304, 9557.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1733.610 ±(99.9%) 1404.964 MB/sec [Average]
[info]   (min, avg, max) = (1332.362, 1733.610, 2005.245), stdev = 364.865
[info]   CI (99.9%): [328.646, 3138.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8721.476 ±(99.9%) 7333.083 B/op [Average]
[info]   (min, avg, max) = (6626.052, 8721.476, 10331.212), stdev = 1904.378
[info]   CI (99.9%): [1388.393, 16054.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.885 ±(99.9%) 5.426 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.885, 3.300), stdev = 1.409
[info]   CI (99.9%): [≈ 0, 6.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.522 ±(99.9%) 27.960 B/op [Average]
[info]   (min, avg, max) = (0.104, 4.522, 17.003), stdev = 7.261
[info]   CI (99.9%): [≈ 0, 32.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 14.000), stdev = 4.604
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 48.73% complete, ETA 00:59:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.571 ops/s
[info] # Warmup Iteration   2: 1636867.617 ops/s
[info] # Warmup Iteration   3: 1919835.458 ops/s
[info] # Warmup Iteration   4: 1945418.619 ops/s
[info] # Warmup Iteration   5: 1953725.825 ops/s
[info] Iteration   1: 1957039.831 ops/s
[info]                  ·gc.alloc.rate:                   679.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              546.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     533.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2006237.996 ops/s
[info]                  ·gc.alloc.rate:               699.183 MB/sec
[info]                  ·gc.alloc.rate.norm:          548.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 521.016 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 2032254.455 ops/s
[info]                  ·gc.alloc.rate:                   713.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              552.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     514.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2033116.195 ops/s
[info]                  ·gc.alloc.rate:               715.075 MB/sec
[info]                  ·gc.alloc.rate.norm:          553.550 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 514.396 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2016103.214 ops/s
[info]                  ·gc.alloc.rate:               729.045 MB/sec
[info]                  ·gc.alloc.rate.norm:          569.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1037.966 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   2008950.338 ±(99.9%) 119932.132 ops/s [Average]
[info]   (min, avg, max) = (1957039.831, 2008950.338, 2033116.195), stdev = 31145.994
[info]   CI (99.9%): [1889018.206, 2128882.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   707.305 ±(99.9%) 72.274 MB/sec [Average]
[info]   (min, avg, max) = (679.560, 707.305, 729.045), stdev = 18.769
[info]   CI (99.9%): [635.030, 779.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   554.074 ±(99.9%) 34.315 B/op [Average]
[info]   (min, avg, max) = (546.505, 554.074, 569.142), stdev = 8.911
[info]   CI (99.9%): [519.759, 588.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   797.170 ±(99.9%) 1146.070 MB/sec [Average]
[info]   (min, avg, max) = (663.474, 797.170, 1329.588), stdev = 297.631
[info]   CI (99.9%): [≈ 0, 1943.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   624.255 ±(99.9%) 891.058 B/op [Average]
[info]   (min, avg, max) = (514.326, 624.255, 1037.966), stdev = 231.405
[info]   CI (99.9%): [≈ 0, 1515.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.015 ±(99.9%) 0.082 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.047), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.064 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.036), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.96% complete, ETA 00:59:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 505854.864 ops/s
[info] # Warmup Iteration   2: 1696871.431 ops/s
[info] # Warmup Iteration   3: 1924556.345 ops/s
[info] # Warmup Iteration   4: 1926441.173 ops/s
[info] # Warmup Iteration   5: 1921427.079 ops/s
[info] Iteration   1: 1935738.238 ops/s
[info]                  ·gc.alloc.rate:               683.900 MB/sec
[info]                  ·gc.alloc.rate.norm:          555.952 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 537.821 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1846182.886 ops/s
[info]                  ·gc.alloc.rate:               649.477 MB/sec
[info]                  ·gc.alloc.rate.norm:          553.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 564.776 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 1916028.133 ops/s
[info]                  ·gc.alloc.rate:                   669.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              549.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     544.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1930985.163 ops/s
[info]                  ·gc.alloc.rate:               680.426 MB/sec
[info]                  ·gc.alloc.rate.norm:          554.587 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 541.025 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1932052.707 ops/s
[info]                  ·gc.alloc.rate:               676.671 MB/sec
[info]                  ·gc.alloc.rate.norm:          551.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 540.756 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1912197.425 ±(99.9%) 145026.402 ops/s [Average]
[info]   (min, avg, max) = (1846182.886, 1912197.425, 1935738.238), stdev = 37662.896
[info]   CI (99.9%): [1767171.024, 2057223.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   671.906 ±(99.9%) 52.739 MB/sec [Average]
[info]   (min, avg, max) = (649.477, 671.906, 683.900), stdev = 13.696
[info]   CI (99.9%): [619.167, 724.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   552.957 ±(99.9%) 9.854 B/op [Average]
[info]   (min, avg, max) = (549.564, 552.957, 555.952), stdev = 2.559
[info]   CI (99.9%): [543.103, 562.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   662.896 ±(99.9%) 3.546 MB/sec [Average]
[info]   (min, avg, max) = (661.596, 662.896, 663.787), stdev = 0.921
[info]   CI (99.9%): [659.351, 666.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   545.714 ±(99.9%) 41.941 B/op [Average]
[info]   (min, avg, max) = (537.821, 545.714, 564.776), stdev = 10.892
[info]   CI (99.9%): [503.773, 587.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.19% complete, ETA 00:59:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1156519.306 ops/s
[info] # Warmup Iteration   2: 2081484.503 ops/s
[info] # Warmup Iteration   3: 2242232.682 ops/s
[info] # Warmup Iteration   4: 2246374.804 ops/s
[info] # Warmup Iteration   5: 2149616.454 ops/s
[info] Iteration   1: 2249997.461 ops/s
[info]                  ·gc.alloc.rate:                   790.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              553.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     467.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2274193.382 ops/s
[info]                  ·gc.alloc.rate:               789.870 MB/sec
[info]                  ·gc.alloc.rate.norm:          546.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 462.625 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 2274731.756 ops/s
[info]                  ·gc.alloc.rate:               798.130 MB/sec
[info]                  ·gc.alloc.rate.norm:          552.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 462.745 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2281681.204 ops/s
[info]                  ·gc.alloc.rate:               797.059 MB/sec
[info]                  ·gc.alloc.rate.norm:          549.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 461.327 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2284121.857 ops/s
[info]                  ·gc.alloc.rate:               793.030 MB/sec
[info]                  ·gc.alloc.rate.norm:          546.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 461.056 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   2272945.132 ±(99.9%) 52111.316 ops/s [Average]
[info]   (min, avg, max) = (2249997.461, 2272945.132, 2284121.857), stdev = 13533.143
[info]   CI (99.9%): [2220833.816, 2325056.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   793.745 ±(99.9%) 14.332 MB/sec [Average]
[info]   (min, avg, max) = (789.870, 793.745, 798.130), stdev = 3.722
[info]   CI (99.9%): [779.413, 808.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   549.626 ±(99.9%) 11.857 B/op [Average]
[info]   (min, avg, max) = (546.417, 549.626, 553.056), stdev = 3.079
[info]   CI (99.9%): [537.768, 561.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   668.737 ±(99.9%) 1.069 MB/sec [Average]
[info]   (min, avg, max) = (668.455, 668.737, 669.143), stdev = 0.278
[info]   CI (99.9%): [667.667, 669.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   463.069 ±(99.9%) 10.157 B/op [Average]
[info]   (min, avg, max) = (461.056, 463.069, 467.590), stdev = 2.638
[info]   CI (99.9%): [452.912, 473.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 49.42% complete, ETA 00:58:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1145610.533 ops/s
[info] # Warmup Iteration   2: 1960066.821 ops/s
[info] # Warmup Iteration   3: 2421932.287 ops/s
[info] # Warmup Iteration   4: 2427264.493 ops/s
[info] # Warmup Iteration   5: 2424955.669 ops/s
[info] Iteration   1: 2427561.150 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2428020.606 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2426395.732 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2430160.023 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2424740.229 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   2427375.548 ±(99.9%) 7727.427 ops/s [Average]
[info]   (min, avg, max) = (2424740.229, 2427375.548, 2430160.023), stdev = 2006.788
[info]   CI (99.9%): [2419648.121, 2435102.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 49.65% complete, ETA 00:58:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6933.249 ops/s
[info] # Warmup Iteration   2: 25772.746 ops/s
[info] # Warmup Iteration   3: 47850.902 ops/s
[info] # Warmup Iteration   4: 44106.207 ops/s
[info] # Warmup Iteration   5: 48272.670 ops/s
[info] Iteration   1: 47119.789 ops/s
[info]                  ·gc.alloc.rate:                   1863.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              62245.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1984.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66284.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.383 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 47230.002 ops/s
[info]                  ·gc.alloc.rate:                   1876.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              62542.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1985.307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66153.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.398 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 46861.809 ops/s
[info]                  ·gc.alloc.rate:                   1856.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              62356.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1982.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66579.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.496 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 47545.152 ops/s
[info]                  ·gc.alloc.rate:                   1842.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              60996.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43769.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.689 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 48120.625 ops/s
[info]                  ·gc.alloc.rate:                   1889.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              61807.242 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64966.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66.424 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   47375.475 ±(99.9%) 1861.130 ops/s [Average]
[info]   (min, avg, max) = (46861.809, 47375.475, 48120.625), stdev = 483.330
[info]   CI (99.9%): [45514.345, 49236.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1866.010 ±(99.9%) 69.864 MB/sec [Average]
[info]   (min, avg, max) = (1842.673, 1866.010, 1889.727), stdev = 18.143
[info]   CI (99.9%): [1796.146, 1935.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   61989.628 ±(99.9%) 2378.856 B/op [Average]
[info]   (min, avg, max) = (60996.027, 61989.628, 62542.896), stdev = 617.781
[info]   CI (99.9%): [59610.772, 64368.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1852.255 ±(99.9%) 1140.845 MB/sec [Average]
[info]   (min, avg, max) = (1322.270, 1852.255, 1986.330), stdev = 296.274
[info]   CI (99.9%): [711.410, 2993.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   61550.639 ±(99.9%) 38347.760 B/op [Average]
[info]   (min, avg, max) = (43769.680, 61550.639, 66579.095), stdev = 9958.792
[info]   CI (99.9%): [23202.878, 99898.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.371 ±(99.9%) 5.392 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.371, 3.365), stdev = 1.400
[info]   CI (99.9%): [≈ 0, 6.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   45.478 ±(99.9%) 179.424 B/op [Average]
[info]   (min, avg, max) = (0.689, 45.478, 112.383), stdev = 46.596
[info]   CI (99.9%): [≈ 0, 224.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.400, 21.000), stdev = 6.107
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49.88% complete, ETA 00:58:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3597.298 ops/s
[info] # Warmup Iteration   2: 10036.166 ops/s
[info] # Warmup Iteration   3: 15349.380 ops/s
[info] # Warmup Iteration   4: 18201.881 ops/s
[info] # Warmup Iteration   5: 18119.389 ops/s
[info] Iteration   1: 18584.297 ops/s
[info]                  ·gc.alloc.rate:                   2104.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              178179.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1909.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161722.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 174.351 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         27.000 ms
[info] Iteration   2: 18331.433 ops/s
[info]                  ·gc.alloc.rate:                   2261.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              194099.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2557.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219449.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      9.882 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 848.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         25.000 ms
[info] Iteration   3: 17775.204 ops/s
[info]                  ·gc.alloc.rate:                   2694.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              238516.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2533.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224248.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      15.805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1398.773 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         26.000 ms
[info] Iteration   4: 17491.376 ops/s
[info]                  ·gc.alloc.rate:                   2448.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              220234.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2507.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     225491.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.856 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         44.000 ms
[info] Iteration   5: 16326.057 ops/s
[info]                  ·gc.alloc.rate:                   2320.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              223608.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2339.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     225410.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      9.159 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 882.546 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         66.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   17701.673 ±(99.9%) 3399.474 ops/s [Average]
[info]   (min, avg, max) = (16326.057, 17701.673, 18584.297), stdev = 882.833
[info]   CI (99.9%): [14302.199, 21101.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   2366.060 ±(99.9%) 853.704 MB/sec [Average]
[info]   (min, avg, max) = (2104.150, 2366.060, 2694.988), stdev = 221.704
[info]   CI (99.9%): [1512.356, 3219.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   210927.643 ±(99.9%) 93615.230 B/op [Average]
[info]   (min, avg, max) = (178179.254, 210927.643, 238516.625), stdev = 24311.578
[info]   CI (99.9%): [117312.412, 304542.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2369.457 ±(99.9%) 1042.860 MB/sec [Average]
[info]   (min, avg, max) = (1909.815, 2369.457, 2557.074), stdev = 270.827
[info]   CI (99.9%): [1326.597, 3412.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   211264.457 ±(99.9%) 107066.710 B/op [Average]
[info]   (min, avg, max) = (161722.922, 211264.457, 225491.192), stdev = 27804.885
[info]   CI (99.9%): [104197.747, 318331.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   7.476 ±(99.9%) 24.072 MB/sec [Average]
[info]   (min, avg, max) = (0.477, 7.476, 15.805), stdev = 6.251
[info]   CI (99.9%): [≈ 0, 31.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   669.313 ±(99.9%) 2149.955 B/op [Average]
[info]   (min, avg, max) = (42.856, 669.313, 1398.773), stdev = 558.337
[info]   CI (99.9%): [≈ 0, 2819.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   188.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (25.000, 37.600, 66.000), stdev = 17.700
[info]   CI (99.9%): [188.000, 188.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.12% complete, ETA 00:58:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24497.002 ops/s
[info] # Warmup Iteration   2: 86794.373 ops/s
[info] # Warmup Iteration   3: 101867.022 ops/s
[info] # Warmup Iteration   4: 103851.877 ops/s
[info] # Warmup Iteration   5: 105182.824 ops/s
[info] Iteration   1: 104427.486 ops/s
[info]                  ·gc.alloc.rate:               1141.716 MB/sec
[info]                  ·gc.alloc.rate.norm:          17207.353 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10009.481 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 109596.340 ops/s
[info]                  ·gc.alloc.rate:               1215.649 MB/sec
[info]                  ·gc.alloc.rate.norm:          17453.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19084.498 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 109908.551 ops/s
[info]                  ·gc.alloc.rate:                   1224.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              17535.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19054.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.596 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 110113.640 ops/s
[info]                  ·gc.alloc.rate:               1216.790 MB/sec
[info]                  ·gc.alloc.rate.norm:          17391.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19042.859 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 107365.033 ops/s
[info]                  ·gc.alloc.rate:                   1197.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              17549.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19554.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.149 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.497 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   108282.210 ±(99.9%) 9318.672 ops/s [Average]
[info]   (min, avg, max) = (104427.486, 108282.210, 110113.640), stdev = 2420.030
[info]   CI (99.9%): [98963.538, 117600.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1199.175 ±(99.9%) 129.634 MB/sec [Average]
[info]   (min, avg, max) = (1141.716, 1199.175, 1224.593), stdev = 33.666
[info]   CI (99.9%): [1069.541, 1328.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17427.512 ±(99.9%) 534.153 B/op [Average]
[info]   (min, avg, max) = (17207.353, 17427.512, 17549.334), stdev = 138.718
[info]   CI (99.9%): [16893.359, 17961.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1198.062 ±(99.9%) 1149.340 MB/sec [Average]
[info]   (min, avg, max) = (664.134, 1198.062, 1333.940), stdev = 298.480
[info]   CI (99.9%): [48.722, 2347.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17349.301 ±(99.9%) 15821.104 B/op [Average]
[info]   (min, avg, max) = (10009.481, 17349.301, 19554.969), stdev = 4108.691
[info]   CI (99.9%): [1528.197, 33170.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.438 ±(99.9%) 3.683 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.438, 2.149), stdev = 0.956
[info]   CI (99.9%): [≈ 0, 4.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.419 ±(99.9%) 53.992 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.419, 31.497), stdev = 14.022
[info]   CI (99.9%): [≈ 0, 60.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 5.000), stdev = 1.225
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.35% complete, ETA 00:57:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 131692.219 ops/s
[info] # Warmup Iteration   2: 212910.011 ops/s
[info] # Warmup Iteration   3: 272635.218 ops/s
[info] # Warmup Iteration   4: 280746.706 ops/s
[info] # Warmup Iteration   5: 279432.239 ops/s
[info] Iteration   1: 270700.584 ops/s
[info]                  ·gc.alloc.rate:               903.718 MB/sec
[info]                  ·gc.alloc.rate.norm:          5254.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3880.617 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 270839.071 ops/s
[info]                  ·gc.alloc.rate:               901.513 MB/sec
[info]                  ·gc.alloc.rate.norm:          5238.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3880.690 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 267845.161 ops/s
[info]                  ·gc.alloc.rate:                   911.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              5357.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7849.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 271860.883 ops/s
[info]                  ·gc.alloc.rate:               910.605 MB/sec
[info]                  ·gc.alloc.rate.norm:          5271.439 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3867.719 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 269788.165 ops/s
[info]                  ·gc.alloc.rate:               921.222 MB/sec
[info]                  ·gc.alloc.rate.norm:          5373.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3901.519 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   270206.773 ±(99.9%) 5818.224 ops/s [Average]
[info]   (min, avg, max) = (267845.161, 270206.773, 271860.883), stdev = 1510.974
[info]   CI (99.9%): [264388.549, 276024.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   909.758 ±(99.9%) 29.857 MB/sec [Average]
[info]   (min, avg, max) = (901.513, 909.758, 921.222), stdev = 7.754
[info]   CI (99.9%): [879.901, 939.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5299.013 ±(99.9%) 238.295 B/op [Average]
[info]   (min, avg, max) = (5238.690, 5299.013, 5373.484), stdev = 61.885
[info]   CI (99.9%): [5060.718, 5537.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   801.641 ±(99.9%) 1150.139 MB/sec [Average]
[info]   (min, avg, max) = (667.447, 801.641, 1335.949), stdev = 298.688
[info]   CI (99.9%): [≈ 0, 1951.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4676.055 ±(99.9%) 6831.734 B/op [Average]
[info]   (min, avg, max) = (3867.719, 4676.055, 7849.730), stdev = 1774.180
[info]   CI (99.9%): [≈ 0, 11507.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.024 ±(99.9%) 0.211 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.122), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50.58% complete, ETA 00:57:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 896.387 ops/s
[info] # Warmup Iteration   2: 10349.122 ops/s
[info] # Warmup Iteration   3: 14069.688 ops/s
[info] # Warmup Iteration   4: 16083.884 ops/s
[info] # Warmup Iteration   5: 16133.006 ops/s
[info] Iteration   1: 15463.058 ops/s
[info]                  ·gc.alloc.rate:               1961.219 MB/sec
[info]                  ·gc.alloc.rate.norm:          199612.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1909.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 194379.115 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 14975.540 ops/s
[info]                  ·gc.alloc.rate:                   1894.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              199058.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1910.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     200782.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.502 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 14678.561 ops/s
[info]                  ·gc.alloc.rate:               2075.344 MB/sec
[info]                  ·gc.alloc.rate.norm:          222404.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1921.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 205901.417 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 14899.532 ops/s
[info]                  ·gc.alloc.rate:                   2142.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              226352.189 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1933.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     204198.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.381 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 15826.126 ops/s
[info]                  ·gc.alloc.rate:                   2017.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              200597.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1951.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     194094.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 157.413 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   15168.564 ±(99.9%) 1794.639 ops/s [Average]
[info]   (min, avg, max) = (14678.561, 15168.564, 15826.126), stdev = 466.062
[info]   CI (99.9%): [13373.925, 16963.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2018.265 ±(99.9%) 372.102 MB/sec [Average]
[info]   (min, avg, max) = (1894.540, 2018.265, 2142.889), stdev = 96.634
[info]   CI (99.9%): [1646.164, 2390.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   209605.120 ±(99.9%) 52251.265 B/op [Average]
[info]   (min, avg, max) = (199058.120, 209605.120, 226352.189), stdev = 13569.488
[info]   CI (99.9%): [157353.855, 261856.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1925.438 ±(99.9%) 67.614 MB/sec [Average]
[info]   (min, avg, max) = (1909.797, 1925.438, 1951.940), stdev = 17.559
[info]   CI (99.9%): [1857.824, 1993.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   199871.243 ±(99.9%) 21042.356 B/op [Average]
[info]   (min, avg, max) = (194094.869, 199871.243, 205901.417), stdev = 5464.633
[info]   CI (99.9%): [178828.886, 220913.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.421 ±(99.9%) 2.564 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.421, 1.583), stdev = 0.666
[info]   CI (99.9%): [≈ 0, 2.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   42.459 ±(99.9%) 254.468 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.459, 157.413), stdev = 66.085
[info]   CI (99.9%): [≈ 0, 296.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50.81% complete, ETA 00:57:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9072.285 ops/s
[info] # Warmup Iteration   2: 34468.310 ops/s
[info] # Warmup Iteration   3: 41294.086 ops/s
[info] # Warmup Iteration   4: 39727.528 ops/s
[info] # Warmup Iteration   5: 41817.156 ops/s
[info] Iteration   1: 43362.963 ops/s
[info]                  ·gc.alloc.rate:                   3389.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              123012.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3325.418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120681.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.533 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 43430.101 ops/s
[info]                  ·gc.alloc.rate:                   3376.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              122342.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3332.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120736.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.330 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 193.134 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 43420.147 ops/s
[info]                  ·gc.alloc.rate:                   3385.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              122717.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3320.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120363.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.163 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 44004.297 ops/s
[info]                  ·gc.alloc.rate:                   3482.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              124555.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3314.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118549.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.489 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 43923.222 ops/s
[info]                  ·gc.alloc.rate:                   3465.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              124193.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3327.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119241.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.492 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   43628.146 ±(99.9%) 1188.980 ops/s [Average]
[info]   (min, avg, max) = (43362.963, 43628.146, 44004.297), stdev = 308.774
[info]   CI (99.9%): [42439.166, 44817.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   3420.037 ±(99.9%) 192.704 MB/sec [Average]
[info]   (min, avg, max) = (3376.493, 3420.037, 3482.558), stdev = 50.045
[info]   CI (99.9%): [3227.333, 3612.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   123364.170 ±(99.9%) 3700.467 B/op [Average]
[info]   (min, avg, max) = (122342.127, 123364.170, 124555.308), stdev = 961.000
[info]   CI (99.9%): [119663.703, 127064.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   3324.120 ±(99.9%) 25.939 MB/sec [Average]
[info]   (min, avg, max) = (3314.633, 3324.120, 3332.193), stdev = 6.736
[info]   CI (99.9%): [3298.182, 3350.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   119914.656 ±(99.9%) 3744.878 B/op [Average]
[info]   (min, avg, max) = (118549.387, 119914.656, 120736.995), stdev = 972.533
[info]   CI (99.9%): [116169.778, 123659.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.258 ±(99.9%) 8.841 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.258, 5.330), stdev = 2.296
[info]   CI (99.9%): [≈ 0, 10.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   45.562 ±(99.9%) 320.344 B/op [Average]
[info]   (min, avg, max) = (1.489, 45.562, 193.134), stdev = 83.192
[info]   CI (99.9%): [≈ 0, 365.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 10.200, 14.000), stdev = 3.493
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.04% complete, ETA 00:57:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36718.069 ops/s
[info] # Warmup Iteration   2: 115807.300 ops/s
[info] # Warmup Iteration   3: 127629.243 ops/s
[info] # Warmup Iteration   4: 142802.376 ops/s
[info] # Warmup Iteration   5: 143973.392 ops/s
[info] Iteration   1: 143490.382 ops/s
[info]                  ·gc.alloc.rate:                   1963.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              21538.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14540.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.228 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 143734.977 ops/s
[info]                  ·gc.alloc.rate:                   1972.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              21595.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21814.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.228 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 146867.402 ops/s
[info]                  ·gc.alloc.rate:                   2021.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              21659.980 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21391.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.223 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 147503.991 ops/s
[info]                  ·gc.alloc.rate:                   2026.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              21612.761 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21372.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.222 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 146337.819 ops/s
[info]                  ·gc.alloc.rate:               2022.778 MB/sec
[info]                  ·gc.alloc.rate.norm:          21753.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21615.175 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   145586.914 ±(99.9%) 7127.285 ops/s [Average]
[info]   (min, avg, max) = (143490.382, 145586.914, 147503.991), stdev = 1850.933
[info]   CI (99.9%): [138459.630, 152714.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2001.284 ±(99.9%) 117.350 MB/sec [Average]
[info]   (min, avg, max) = (1963.817, 2001.284, 2026.022), stdev = 30.475
[info]   CI (99.9%): [1883.934, 2118.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21632.259 ±(99.9%) 310.735 B/op [Average]
[info]   (min, avg, max) = (21538.638, 21632.259, 21753.977), stdev = 80.697
[info]   CI (99.9%): [21321.523, 21942.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1865.552 ±(99.9%) 1162.245 MB/sec [Average]
[info]   (min, avg, max) = (1325.753, 1865.552, 2009.872), stdev = 301.831
[info]   CI (99.9%): [703.306, 3027.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20146.677 ±(99.9%) 12087.732 B/op [Average]
[info]   (min, avg, max) = (14540.519, 20146.677, 21814.028), stdev = 3139.146
[info]   CI (99.9%): [8058.945, 32234.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.180 ±(99.9%) 0.388 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.180, 0.228), stdev = 0.101
[info]   CI (99.9%): [≈ 0, 0.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.27% complete, ETA 00:56:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 155346.555 ops/s
[info] # Warmup Iteration   2: 240095.002 ops/s
[info] # Warmup Iteration   3: 252040.604 ops/s
[info] # Warmup Iteration   4: 253080.080 ops/s
[info] # Warmup Iteration   5: 253191.118 ops/s
[info] Iteration   1: 253194.492 ops/s
[info]                  ·gc.alloc.rate:               828.105 MB/sec
[info]                  ·gc.alloc.rate.norm:          5147.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4161.673 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 252899.937 ops/s
[info]                  ·gc.alloc.rate:               829.846 MB/sec
[info]                  ·gc.alloc.rate.norm:          5164.185 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4166.346 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 251982.586 ops/s
[info]                  ·gc.alloc.rate:                   841.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              5256.986 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8362.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.195 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 248634.004 ops/s
[info]                  ·gc.alloc.rate:               830.967 MB/sec
[info]                  ·gc.alloc.rate.norm:          5257.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4242.140 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 252010.805 ops/s
[info]                  ·gc.alloc.rate:                   821.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              5130.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4185.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   251744.365 ±(99.9%) 7005.712 ops/s [Average]
[info]   (min, avg, max) = (248634.004, 251744.365, 253194.492), stdev = 1819.361
[info]   CI (99.9%): [244738.653, 258750.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   830.455 ±(99.9%) 27.891 MB/sec [Average]
[info]   (min, avg, max) = (821.662, 830.455, 841.697), stdev = 7.243
[info]   CI (99.9%): [802.564, 858.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5191.455 ±(99.9%) 236.439 B/op [Average]
[info]   (min, avg, max) = (5130.756, 5191.455, 5257.932), stdev = 61.403
[info]   CI (99.9%): [4955.015, 5427.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   803.723 ±(99.9%) 1152.107 MB/sec [Average]
[info]   (min, avg, max) = (669.501, 803.723, 1338.945), stdev = 299.198
[info]   CI (99.9%): [≈ 0, 1955.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5023.578 ±(99.9%) 7188.653 B/op [Average]
[info]   (min, avg, max) = (4161.673, 5023.578, 8362.646), stdev = 1866.870
[info]   CI (99.9%): [≈ 0, 12212.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.052 ±(99.9%) 0.326 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.195), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 51.50% complete, ETA 00:56:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103749.695 ops/s
[info] # Warmup Iteration   2: 234971.053 ops/s
[info] # Warmup Iteration   3: 278105.455 ops/s
[info] # Warmup Iteration   4: 277645.439 ops/s
[info] # Warmup Iteration   5: 279014.397 ops/s
[info] Iteration   1: 278939.271 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 278950.723 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 278660.771 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 278061.328 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 278773.858 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   278677.190 ±(99.9%) 1404.835 ops/s [Average]
[info]   (min, avg, max) = (278061.328, 278677.190, 278950.723), stdev = 364.831
[info]   CI (99.9%): [277272.355, 280082.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51.73% complete, ETA 00:56:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9612.086 ops/s
[info] # Warmup Iteration   2: 47870.519 ops/s
[info] # Warmup Iteration   3: 53707.564 ops/s
[info] # Warmup Iteration   4: 58258.613 ops/s
[info] # Warmup Iteration   5: 60666.776 ops/s
[info] Iteration   1: 61783.738 ops/s
[info]                  ·gc.alloc.rate:                   3988.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              101606.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3992.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101704.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.121 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 60676.231 ops/s
[info]                  ·gc.alloc.rate:                   3943.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              102281.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4015.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104140.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.540 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 60891.074 ops/s
[info]                  ·gc.alloc.rate:                   4012.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              103695.962 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4037.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104359.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.538 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 61538.945 ops/s
[info]                  ·gc.alloc.rate:                   4034.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              103158.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3377.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86379.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.532 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 61726.495 ops/s
[info]                  ·gc.alloc.rate:                   4057.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              103462.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4064.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103639.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.062 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   61323.296 ±(99.9%) 1950.750 ops/s [Average]
[info]   (min, avg, max) = (60676.231, 61323.296, 61783.738), stdev = 506.604
[info]   CI (99.9%): [59372.546, 63274.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   4007.330 ±(99.9%) 168.615 MB/sec [Average]
[info]   (min, avg, max) = (3943.862, 4007.330, 4057.957), stdev = 43.789
[info]   CI (99.9%): [3838.715, 4175.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   102841.130 ±(99.9%) 3364.282 B/op [Average]
[info]   (min, avg, max) = (101606.916, 102841.130, 103695.962), stdev = 873.693
[info]   CI (99.9%): [99476.847, 106205.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   3897.729 ±(99.9%) 1123.798 MB/sec [Average]
[info]   (min, avg, max) = (3377.857, 3897.729, 4064.916), stdev = 291.847
[info]   CI (99.9%): [2773.931, 5021.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   100044.824 ±(99.9%) 29691.648 B/op [Average]
[info]   (min, avg, max) = (86379.071, 100044.824, 104359.992), stdev = 7710.827
[info]   CI (99.9%): [70353.176, 129736.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.959 ±(99.9%) 2.651 B/op [Average]
[info]   (min, avg, max) = (0.532, 0.959, 2.121), stdev = 0.688
[info]   CI (99.9%): [≈ 0, 3.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.200, 9.000), stdev = 0.837
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51.96% complete, ETA 00:55:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2948.489 ops/s
[info] # Warmup Iteration   2: 16472.370 ops/s
[info] # Warmup Iteration   3: 34586.284 ops/s
[info] # Warmup Iteration   4: 40282.224 ops/s
[info] # Warmup Iteration   5: 37049.569 ops/s
[info] Iteration   1: 35449.577 ops/s
[info]                  ·gc.alloc.rate:                   2041.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              90621.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1977.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87790.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.953 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 219.870 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 39261.256 ops/s
[info]                  ·gc.alloc.rate:                   1677.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              67242.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1977.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79270.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.811 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 39493.205 ops/s
[info]                  ·gc.alloc.rate:                   1689.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              67313.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52402.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.807 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 39424.124 ops/s
[info]                  ·gc.alloc.rate:                   1704.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              68028.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1974.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78805.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.493 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 39511.528 ops/s
[info]                  ·gc.alloc.rate:                   1684.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              67070.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52511.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.829 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   38627.938 ±(99.9%) 6852.200 ops/s [Average]
[info]   (min, avg, max) = (35449.577, 38627.938, 39511.528), stdev = 1779.494
[info]   CI (99.9%): [31775.739, 45480.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1759.282 ±(99.9%) 608.276 MB/sec [Average]
[info]   (min, avg, max) = (1677.468, 1759.282, 2041.318), stdev = 157.967
[info]   CI (99.9%): [1151.006, 2367.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   72055.529 ±(99.9%) 39989.956 B/op [Average]
[info]   (min, avg, max) = (67070.312, 72055.529, 90621.721), stdev = 10385.265
[info]   CI (99.9%): [32065.574, 112045.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1712.562 ±(99.9%) 1391.062 MB/sec [Average]
[info]   (min, avg, max) = (1314.980, 1712.562, 1977.541), stdev = 361.254
[info]   CI (99.9%): [321.500, 3103.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   70155.846 ±(99.9%) 63721.806 B/op [Average]
[info]   (min, avg, max) = (52402.254, 70155.846, 87790.440), stdev = 16548.351
[info]   CI (99.9%): [6434.040, 133877.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.425 ±(99.9%) 8.208 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.425, 4.953), stdev = 2.132
[info]   CI (99.9%): [≈ 0, 9.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   61.362 ±(99.9%) 363.328 B/op [Average]
[info]   (min, avg, max) = (0.829, 61.362, 219.870), stdev = 94.355
[info]   CI (99.9%): [≈ 0, 424.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 17.000), stdev = 5.701
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.19% complete, ETA 00:55:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3515.311 ops/s
[info] # Warmup Iteration   2: 27361.188 ops/s
[info] # Warmup Iteration   3: 40362.854 ops/s
[info] # Warmup Iteration   4: 41471.176 ops/s
[info] # Warmup Iteration   5: 37417.623 ops/s
[info] Iteration   1: 40399.332 ops/s
[info]                  ·gc.alloc.rate:                   1265.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              49306.197 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51253.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.242 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87.335 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 40156.587 ops/s
[info]                  ·gc.alloc.rate:                   1265.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              49598.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51635.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.447 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 40640.508 ops/s
[info]                  ·gc.alloc.rate:                   1280.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              49571.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51089.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.855 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149.238 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 40770.184 ops/s
[info]                  ·gc.alloc.rate:                   1290.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              49802.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50914.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.375 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 40884.229 ops/s
[info]                  ·gc.alloc.rate:                   1280.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              49281.490 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50695.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.205 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   40570.168 ±(99.9%) 1128.939 ops/s [Average]
[info]   (min, avg, max) = (40156.587, 40570.168, 40884.229), stdev = 293.182
[info]   CI (99.9%): [39441.229, 41699.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1276.424 ±(99.9%) 40.986 MB/sec [Average]
[info]   (min, avg, max) = (1265.597, 1276.424, 1290.163), stdev = 10.644
[info]   CI (99.9%): [1235.439, 1317.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   49512.113 ±(99.9%) 841.741 B/op [Average]
[info]   (min, avg, max) = (49281.490, 49512.113, 49802.900), stdev = 218.598
[info]   CI (99.9%): [48670.372, 50353.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1317.763 ±(99.9%) 5.981 MB/sec [Average]
[info]   (min, avg, max) = (1315.622, 1317.763, 1319.552), stdev = 1.553
[info]   CI (99.9%): [1311.782, 1323.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   51117.598 ±(99.9%) 1370.535 B/op [Average]
[info]   (min, avg, max) = (50695.362, 51117.598, 51635.215), stdev = 355.924
[info]   CI (99.9%): [49747.063, 52488.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.452 ±(99.9%) 6.205 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 1.452, 3.855), stdev = 1.611
[info]   CI (99.9%): [≈ 0, 7.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   56.320 ±(99.9%) 240.520 B/op [Average]
[info]   (min, avg, max) = (2.447, 56.320, 149.238), stdev = 62.462
[info]   CI (99.9%): [≈ 0, 296.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 11.000), stdev = 3.209
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.42% complete, ETA 00:55:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 188416.819 ops/s
[info] # Warmup Iteration   2: 534441.432 ops/s
[info] # Warmup Iteration   3: 643269.709 ops/s
[info] # Warmup Iteration   4: 657953.802 ops/s
[info] # Warmup Iteration   5: 664519.306 ops/s
[info] Iteration   1: 656504.745 ops/s
[info]                  ·gc.alloc.rate:                   1773.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              4251.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4809.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.175 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 666401.905 ops/s
[info]                  ·gc.alloc.rate:                   1763.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              4163.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3162.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.538 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 667882.025 ops/s
[info]                  ·gc.alloc.rate:                   1792.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              4223.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4717.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.343 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 666898.598 ops/s
[info]                  ·gc.alloc.rate:                   1801.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              4252.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4717.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 669502.675 ops/s
[info]                  ·gc.alloc.rate:               1782.295 MB/sec
[info]                  ·gc.alloc.rate.norm:          4189.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3135.042 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   665437.990 ±(99.9%) 19762.502 ops/s [Average]
[info]   (min, avg, max) = (656504.745, 665437.990, 669502.675), stdev = 5132.259
[info]   CI (99.9%): [645675.487, 685200.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1782.596 ±(99.9%) 58.285 MB/sec [Average]
[info]   (min, avg, max) = (1763.432, 1782.596, 1801.888), stdev = 15.136
[info]   CI (99.9%): [1724.312, 1840.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4216.052 ±(99.9%) 149.502 B/op [Average]
[info]   (min, avg, max) = (4163.696, 4216.052, 4252.389), stdev = 38.825
[info]   CI (99.9%): [4066.550, 4365.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1735.945 ±(99.9%) 1404.383 MB/sec [Average]
[info]   (min, avg, max) = (1333.584, 1735.945, 2006.026), stdev = 364.714
[info]   CI (99.9%): [331.562, 3140.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4108.272 ±(99.9%) 3376.524 B/op [Average]
[info]   (min, avg, max) = (3135.042, 4108.272, 4809.154), stdev = 876.873
[info]   CI (99.9%): [731.748, 7484.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.856 ±(99.9%) 6.857 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.856, 4.040), stdev = 1.781
[info]   CI (99.9%): [≈ 0, 7.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.021 ±(99.9%) 16.189 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.021, 9.538), stdev = 4.204
[info]   CI (99.9%): [≈ 0, 18.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 12.000), stdev = 3.633
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52.66% complete, ETA 00:55:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1352.132 ops/s
[info] # Warmup Iteration   2: 13177.442 ops/s
[info] # Warmup Iteration   3: 28062.224 ops/s
[info] # Warmup Iteration   4: 35047.971 ops/s
[info] # Warmup Iteration   5: 34100.253 ops/s
[info] Iteration   1: 34575.596 ops/s
[info]                  ·gc.alloc.rate:                   2308.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              105067.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2648.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120546.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.110 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.546 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 33805.960 ops/s
[info]                  ·gc.alloc.rate:                   2121.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              98756.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92743.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.317 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 200.968 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 35198.240 ops/s
[info]                  ·gc.alloc.rate:                   2057.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              91977.235 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89282.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.962 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 34212.141 ops/s
[info]                  ·gc.alloc.rate:                   2013.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              92623.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92039.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.958 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 34268.428 ops/s
[info]                  ·gc.alloc.rate:                   1998.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              91762.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92166.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.649 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   34412.073 ±(99.9%) 1994.152 ops/s [Average]
[info]   (min, avg, max) = (33805.960, 34412.073, 35198.240), stdev = 517.875
[info]   CI (99.9%): [32417.921, 36406.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2099.683 ±(99.9%) 485.237 MB/sec [Average]
[info]   (min, avg, max) = (1998.123, 2099.683, 2308.187), stdev = 126.014
[info]   CI (99.9%): [1614.446, 2584.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   96037.586 ±(99.9%) 22399.596 B/op [Average]
[info]   (min, avg, max) = (91762.798, 96037.586, 105067.974), stdev = 5817.104
[info]   CI (99.9%): [73637.990, 118437.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2129.024 ±(99.9%) 1117.805 MB/sec [Average]
[info]   (min, avg, max) = (1992.399, 2129.024, 2648.224), stdev = 290.290
[info]   CI (99.9%): [1011.219, 3246.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   97355.817 ±(99.9%) 50185.502 B/op [Average]
[info]   (min, avg, max) = (89282.654, 97355.817, 120546.366), stdev = 13033.016
[info]   CI (99.9%): [47170.315, 147541.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.185 ±(99.9%) 6.934 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.185, 4.317), stdev = 1.801
[info]   CI (99.9%): [≈ 0, 8.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   54.817 ±(99.9%) 323.163 B/op [Average]
[info]   (min, avg, max) = (0.958, 54.817, 200.968), stdev = 83.924
[info]   CI (99.9%): [≈ 0, 377.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 2.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52.89% complete, ETA 00:54:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22330.583 ops/s
[info] # Warmup Iteration   2: 76775.427 ops/s
[info] # Warmup Iteration   3: 87971.928 ops/s
[info] # Warmup Iteration   4: 98484.548 ops/s
[info] # Warmup Iteration   5: 98785.047 ops/s
[info] Iteration   1: 97854.207 ops/s
[info]                  ·gc.alloc.rate:                   2182.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              35097.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32147.916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.670 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 96931.874 ops/s
[info]                  ·gc.alloc.rate:                   2142.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              34782.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32549.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.366 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 99239.159 ops/s
[info]                  ·gc.alloc.rate:                   2201.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              34902.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31880.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.990 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 99247.687 ops/s
[info]                  ·gc.alloc.rate:               2202.948 MB/sec
[info]                  ·gc.alloc.rate.norm:          34921.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31950.616 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 98948.279 ops/s
[info]                  ·gc.alloc.rate:                   2235.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              35562.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2693.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42850.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.331 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   98444.241 ±(99.9%) 3930.142 ops/s [Average]
[info]   (min, avg, max) = (96931.874, 98444.241, 99247.687), stdev = 1020.645
[info]   CI (99.9%): [94514.099, 102374.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2192.934 ±(99.9%) 131.807 MB/sec [Average]
[info]   (min, avg, max) = (2142.289, 2192.934, 2235.754), stdev = 34.230
[info]   CI (99.9%): [2061.128, 2324.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   35053.413 ±(99.9%) 1178.393 B/op [Average]
[info]   (min, avg, max) = (34782.300, 35053.413, 35562.508), stdev = 306.025
[info]   CI (99.9%): [33875.020, 36231.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2144.777 ±(99.9%) 1182.356 MB/sec [Average]
[info]   (min, avg, max) = (1998.812, 2144.777, 2693.937), stdev = 307.054
[info]   CI (99.9%): [962.421, 3327.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   34275.843 ±(99.9%) 18484.788 B/op [Average]
[info]   (min, avg, max) = (31880.201, 34275.843, 42850.487), stdev = 4800.441
[info]   CI (99.9%): [15791.055, 52760.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.217 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.146), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.871 ±(99.9%) 3.519 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.871, 2.366), stdev = 0.914
[info]   CI (99.9%): [≈ 0, 4.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.12% complete, ETA 00:54:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29134.787 ops/s
[info] # Warmup Iteration   2: 202329.184 ops/s
[info] # Warmup Iteration   3: 225554.984 ops/s
[info] # Warmup Iteration   4: 239145.403 ops/s
[info] # Warmup Iteration   5: 234768.172 ops/s
[info] Iteration   1: 242478.295 ops/s
[info]                  ·gc.alloc.rate:                   1688.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              10957.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12975.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 244566.939 ops/s
[info]                  ·gc.alloc.rate:                   1671.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              10756.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8586.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.051 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 241986.811 ops/s
[info]                  ·gc.alloc.rate:                   1672.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              10877.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12997.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.333 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 242397.066 ops/s
[info]                  ·gc.alloc.rate:                   1660.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              10779.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8632.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.270 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 245292.413 ops/s
[info]                  ·gc.alloc.rate:                   1692.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              10861.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12798.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   243344.305 ±(99.9%) 5704.929 ops/s [Average]
[info]   (min, avg, max) = (241986.811, 243344.305, 245292.413), stdev = 1481.552
[info]   CI (99.9%): [237639.376, 249049.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1677.094 ±(99.9%) 51.097 MB/sec [Average]
[info]   (min, avg, max) = (1660.168, 1677.094, 1692.842), stdev = 13.270
[info]   CI (99.9%): [1625.997, 1728.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10846.416 ±(99.9%) 310.093 B/op [Average]
[info]   (min, avg, max) = (10756.643, 10846.416, 10957.056), stdev = 80.530
[info]   CI (99.9%): [10536.323, 11156.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1731.310 ±(99.9%) 1404.045 MB/sec [Average]
[info]   (min, avg, max) = (1329.515, 1731.310, 1999.047), stdev = 364.626
[info]   CI (99.9%): [327.265, 3135.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   11198.135 ±(99.9%) 9104.135 B/op [Average]
[info]   (min, avg, max) = (8586.558, 11198.135, 12997.694), stdev = 2364.315
[info]   CI (99.9%): [2094.000, 20302.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.928 ±(99.9%) 6.469 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.928, 3.893), stdev = 1.680
[info]   CI (99.9%): [≈ 0, 7.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.985 ±(99.9%) 41.623 B/op [Average]
[info]   (min, avg, max) = (0.134, 5.985, 25.051), stdev = 10.809
[info]   CI (99.9%): [≈ 0, 47.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 14.000), stdev = 4.637
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.35% complete, ETA 00:54:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 574046.970 ops/s
[info] # Warmup Iteration   2: 1041795.004 ops/s
[info] # Warmup Iteration   3: 1063314.284 ops/s
[info] # Warmup Iteration   4: 1081115.879 ops/s
[info] # Warmup Iteration   5: 1085273.040 ops/s
[info] Iteration   1: 1066636.560 ops/s
[info]                  ·gc.alloc.rate:                   917.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              1354.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1975.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1106537.815 ops/s
[info]                  ·gc.alloc.rate:                   938.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              1334.915 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     952.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1102396.915 ops/s
[info]                  ·gc.alloc.rate:                   953.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              1359.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1905.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1112319.665 ops/s
[info]                  ·gc.alloc.rate:                   938.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     948.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1112814.404 ops/s
[info]                  ·gc.alloc.rate:               946.723 MB/sec
[info]                  ·gc.alloc.rate.norm:          1339.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 948.280 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1100141.072 ±(99.9%) 74005.804 ops/s [Average]
[info]   (min, avg, max) = (1066636.560, 1100141.072, 1112814.404), stdev = 19219.072
[info]   CI (99.9%): [1026135.268, 1174146.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   939.103 ±(99.9%) 51.954 MB/sec [Average]
[info]   (min, avg, max) = (917.804, 939.103, 953.798), stdev = 13.492
[info]   CI (99.9%): [887.149, 991.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1343.253 ±(99.9%) 51.521 B/op [Average]
[info]   (min, avg, max) = (1328.134, 1343.253, 1359.974), stdev = 13.380
[info]   CI (99.9%): [1291.732, 1394.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.225 ±(99.9%) 1408.288 MB/sec [Average]
[info]   (min, avg, max) = (669.814, 937.225, 1339.011), stdev = 365.728
[info]   CI (99.9%): [≈ 0, 2345.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1346.168 ±(99.9%) 2092.501 B/op [Average]
[info]   (min, avg, max) = (948.201, 1346.168, 1975.721), stdev = 543.416
[info]   CI (99.9%): [≈ 0, 3438.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.022 ±(99.9%) 0.095 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.032 ±(99.9%) 0.141 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.092), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 53.58% complete, ETA 00:54:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 866752.404 ops/s
[info] # Warmup Iteration   2: 1066630.925 ops/s
[info] # Warmup Iteration   3: 1126465.662 ops/s
[info] # Warmup Iteration   4: 1131132.520 ops/s
[info] # Warmup Iteration   5: 1130644.521 ops/s
[info] Iteration   1: 1131322.789 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1134214.142 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1138554.713 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1135179.266 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1128008.556 ops/s
[info]                  ·gc.alloc.rate:      4.845 MB/sec
[info]                  ·gc.alloc.rate.norm: 6.759 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1133455.893 ±(99.9%) 15374.457 ops/s [Average]
[info]   (min, avg, max) = (1128008.556, 1133455.893, 1138554.713), stdev = 3992.698
[info]   CI (99.9%): [1118081.437, 1148830.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.969 ±(99.9%) 8.343 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.969, 4.845), stdev = 2.167
[info]   CI (99.9%): [≈ 0, 9.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.352 ±(99.9%) 11.640 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 1.352, 6.759), stdev = 3.023
[info]   CI (99.9%): [≈ 0, 12.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53.81% complete, ETA 00:53:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21883.512 ops/s
[info] # Warmup Iteration   2: 175957.112 ops/s
[info] # Warmup Iteration   3: 211667.185 ops/s
[info] # Warmup Iteration   4: 233877.655 ops/s
[info] # Warmup Iteration   5: 233679.411 ops/s
[info] Iteration   1: 235678.738 ops/s
[info]                  ·gc.alloc.rate:                   2463.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              16451.325 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13394.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.336 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 233969.616 ops/s
[info]                  ·gc.alloc.rate:                   2471.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              16619.490 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17980.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.420 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 236277.863 ops/s
[info]                  ·gc.alloc.rate:               2480.558 MB/sec
[info]                  ·gc.alloc.rate.norm:          16522.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13366.318 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 232673.734 ops/s
[info]                  ·gc.alloc.rate:               2483.834 MB/sec
[info]                  ·gc.alloc.rate.norm:          16800.818 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2682.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18145.086 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 234389.659 ops/s
[info]                  ·gc.alloc.rate:               2515.431 MB/sec
[info]                  ·gc.alloc.rate.norm:          16888.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2690.673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18065.478 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   234597.922 ±(99.9%) 5490.040 ops/s [Average]
[info]   (min, avg, max) = (232673.734, 234597.922, 236277.863), stdev = 1425.746
[info]   CI (99.9%): [229107.882, 240087.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2482.972 ±(99.9%) 76.330 MB/sec [Average]
[info]   (min, avg, max) = (2463.401, 2482.972, 2515.431), stdev = 19.823
[info]   CI (99.9%): [2406.642, 2559.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   16656.515 ±(99.9%) 710.997 B/op [Average]
[info]   (min, avg, max) = (16451.325, 16656.515, 16888.887), stdev = 184.644
[info]   CI (99.9%): [15945.517, 17367.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2411.930 ±(99.9%) 1426.314 MB/sec [Average]
[info]   (min, avg, max) = (2005.670, 2411.930, 2690.673), stdev = 370.409
[info]   CI (99.9%): [985.616, 3838.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   16190.270 ±(99.9%) 9879.755 B/op [Average]
[info]   (min, avg, max) = (13366.318, 16190.270, 18145.086), stdev = 2565.741
[info]   CI (99.9%): [6310.515, 26070.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.840 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.112, 0.500), stdev = 0.218
[info]   CI (99.9%): [≈ 0, 0.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.751 ±(99.9%) 5.609 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.751, 3.336), stdev = 1.457
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.04% complete, ETA 00:53:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4014.459 ops/s
[info] # Warmup Iteration   2: 44291.319 ops/s
[info] # Warmup Iteration   3: 58845.794 ops/s
[info] # Warmup Iteration   4: 49801.180 ops/s
[info] # Warmup Iteration   5: 52831.012 ops/s
[info] Iteration   1: 52479.766 ops/s
[info]                  ·gc.alloc.rate:               1441.733 MB/sec
[info]                  ·gc.alloc.rate.norm:          43225.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39815.801 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   2: 51183.843 ops/s
[info]                  ·gc.alloc.rate:                   1388.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              42690.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40863.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.865 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 118.817 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 53031.468 ops/s
[info]                  ·gc.alloc.rate:                   1451.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              43066.787 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39420.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.801 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 53468.529 ops/s
[info]                  ·gc.alloc.rate:                   1454.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              42814.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39019.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.064 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 53433.744 ops/s
[info]                  ·gc.alloc.rate:                   1450.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              42715.538 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39005.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.453 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   52719.470 ±(99.9%) 3645.030 ops/s [Average]
[info]   (min, avg, max) = (51183.843, 52719.470, 53468.529), stdev = 946.603
[info]   CI (99.9%): [49074.439, 56364.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1437.295 ±(99.9%) 106.164 MB/sec [Average]
[info]   (min, avg, max) = (1388.709, 1437.295, 1454.599), stdev = 27.571
[info]   CI (99.9%): [1331.131, 1543.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   42902.461 ±(99.9%) 900.382 B/op [Average]
[info]   (min, avg, max) = (42690.516, 42902.461, 43225.073), stdev = 233.826
[info]   CI (99.9%): [42002.079, 43802.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1327.115 ±(99.9%) 7.921 MB/sec [Average]
[info]   (min, avg, max) = (1324.289, 1327.115, 1329.266), stdev = 2.057
[info]   CI (99.9%): [1319.194, 1335.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   39624.957 ±(99.9%) 2958.578 B/op [Average]
[info]   (min, avg, max) = (39005.465, 39624.957, 40863.187), stdev = 768.333
[info]   CI (99.9%): [36666.379, 42583.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.998 ±(99.9%) 6.344 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.998, 3.865), stdev = 1.647
[info]   CI (99.9%): [≈ 0, 7.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   30.427 ±(99.9%) 195.178 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.427, 118.817), stdev = 50.687
[info]   CI (99.9%): [≈ 0, 225.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 10.000), stdev = 3.674
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.27% complete, ETA 00:53:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 358696.490 ops/s
[info] # Warmup Iteration   2: 750516.111 ops/s
[info] # Warmup Iteration   3: 773248.402 ops/s
[info] # Warmup Iteration   4: 790518.316 ops/s
[info] # Warmup Iteration   5: 788190.241 ops/s
[info] Iteration   1: 791270.842 ops/s
[info]                  ·gc.alloc.rate:                   1577.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              3137.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2667.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 804544.525 ops/s
[info]                  ·gc.alloc.rate:                   1609.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              3148.536 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2624.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.969 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.808 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 804594.639 ops/s
[info]                  ·gc.alloc.rate:                   1623.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              3175.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3931.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.547 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 808187.402 ops/s
[info]                  ·gc.alloc.rate:                   1616.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              3147.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2604.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 809278.266 ops/s
[info]                  ·gc.alloc.rate:                   1619.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              3149.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2598.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   803575.135 ±(99.9%) 27712.163 ops/s [Average]
[info]   (min, avg, max) = (791270.842, 803575.135, 809278.266), stdev = 7196.761
[info]   CI (99.9%): [775862.972, 831287.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1609.386 ±(99.9%) 71.769 MB/sec [Average]
[info]   (min, avg, max) = (1577.403, 1609.386, 1623.967), stdev = 18.638
[info]   CI (99.9%): [1537.617, 1681.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3151.789 ±(99.9%) 54.117 B/op [Average]
[info]   (min, avg, max) = (3137.507, 3151.789, 3175.347), stdev = 14.054
[info]   CI (99.9%): [3097.672, 3205.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1473.419 ±(99.9%) 1156.295 MB/sec [Average]
[info]   (min, avg, max) = (1336.264, 1473.419, 2010.572), stdev = 300.286
[info]   CI (99.9%): [317.124, 2629.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2885.329 ±(99.9%) 2253.847 B/op [Average]
[info]   (min, avg, max) = (2598.785, 2885.329, 3931.277), stdev = 585.317
[info]   CI (99.9%): [631.482, 5139.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.765 ±(99.9%) 4.916 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.765, 2.969), stdev = 1.277
[info]   CI (99.9%): [≈ 0, 5.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.496 ±(99.9%) 9.617 B/op [Average]
[info]   (min, avg, max) = (0.040, 1.496, 5.808), stdev = 2.497
[info]   CI (99.9%): [≈ 0, 11.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 8.000), stdev = 2.550
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54.50% complete, ETA 00:52:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1007.617 ops/s
[info] # Warmup Iteration   2: 14878.250 ops/s
[info] # Warmup Iteration   3: 47182.721 ops/s
[info] # Warmup Iteration   4: 51078.776 ops/s
[info] # Warmup Iteration   5: 48613.110 ops/s
[info] Iteration   1: 45084.994 ops/s
[info]                  ·gc.alloc.rate:                   2629.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              91785.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93363.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.680 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128.456 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 48263.572 ops/s
[info]                  ·gc.alloc.rate:                   2644.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              86238.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87151.435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.394 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 48285.042 ops/s
[info]                  ·gc.alloc.rate:                   2643.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              86119.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87155.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.393 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 46941.834 ops/s
[info]                  ·gc.alloc.rate:                   2532.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              84904.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67389.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.396 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 48323.058 ops/s
[info]                  ·gc.alloc.rate:                   2631.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              85694.197 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87507.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.678 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   47379.700 ±(99.9%) 5427.974 ops/s [Average]
[info]   (min, avg, max) = (45084.994, 47379.700, 48323.058), stdev = 1409.628
[info]   CI (99.9%): [41951.727, 52807.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2616.119 ±(99.9%) 181.621 MB/sec [Average]
[info]   (min, avg, max) = (2532.644, 2616.119, 2644.584), stdev = 47.166
[info]   CI (99.9%): [2434.498, 2797.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   86948.423 ±(99.9%) 10604.046 B/op [Average]
[info]   (min, avg, max) = (84904.463, 86948.423, 91785.069), stdev = 2753.837
[info]   CI (99.9%): [76344.378, 97552.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2543.760 ±(99.9%) 1148.761 MB/sec [Average]
[info]   (min, avg, max) = (2010.189, 2543.760, 2686.857), stdev = 298.330
[info]   CI (99.9%): [1395.000, 3692.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   84513.489 ±(99.9%) 38238.354 B/op [Average]
[info]   (min, avg, max) = (67389.634, 84513.489, 93363.330), stdev = 9930.379
[info]   CI (99.9%): [46275.135, 122751.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.790 ±(99.9%) 6.222 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.790, 3.680), stdev = 1.616
[info]   CI (99.9%): [≈ 0, 7.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   27.463 ±(99.9%) 217.444 B/op [Average]
[info]   (min, avg, max) = (0.678, 27.463, 128.456), stdev = 56.470
[info]   CI (99.9%): [≈ 0, 244.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 9.000), stdev = 1.817
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.73% complete, ETA 00:52:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138139.650 ops/s
[info] # Warmup Iteration   2: 366382.101 ops/s
[info] # Warmup Iteration   3: 403097.219 ops/s
[info] # Warmup Iteration   4: 415148.021 ops/s
[info] # Warmup Iteration   5: 416410.486 ops/s
[info] Iteration   1: 415394.033 ops/s
[info]                  ·gc.alloc.rate:                   1096.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              4155.479 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5047.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.128 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 414805.755 ops/s
[info]                  ·gc.alloc.rate:                   1092.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5060.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 411271.073 ops/s
[info]                  ·gc.alloc.rate:               1070.705 MB/sec
[info]                  ·gc.alloc.rate.norm:          4097.357 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2553.038 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 415043.493 ops/s
[info]                  ·gc.alloc.rate:                   1092.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              4141.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5062.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.237 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 416478.128 ops/s
[info]                  ·gc.alloc.rate:                   1070.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              4045.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2524.827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.396 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   414598.496 ±(99.9%) 7574.770 ops/s [Average]
[info]   (min, avg, max) = (411271.073, 414598.496, 416478.128), stdev = 1967.144
[info]   CI (99.9%): [407023.726, 422173.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1084.467 ±(99.9%) 49.309 MB/sec [Average]
[info]   (min, avg, max) = (1070.470, 1084.467, 1096.745), stdev = 12.805
[info]   CI (99.9%): [1035.158, 1133.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4116.795 ±(99.9%) 176.028 B/op [Average]
[info]   (min, avg, max) = (4045.281, 4116.795, 4155.479), stdev = 45.714
[info]   CI (99.9%): [3940.767, 4292.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1067.207 ±(99.9%) 1404.549 MB/sec [Average]
[info]   (min, avg, max) = (667.150, 1067.207, 1334.896), stdev = 364.757
[info]   CI (99.9%): [≈ 0, 2471.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4049.552 ±(99.9%) 5310.220 B/op [Average]
[info]   (min, avg, max) = (2524.827, 4049.552, 5062.034), stdev = 1379.047
[info]   CI (99.9%): [≈ 0, 9359.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.785 ±(99.9%) 6.510 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.785, 3.809), stdev = 1.691
[info]   CI (99.9%): [≈ 0, 7.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.968 ±(99.9%) 24.601 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.968, 14.396), stdev = 6.389
[info]   CI (99.9%): [≈ 0, 27.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.97% complete, ETA 00:52:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 801179.206 ops/s
[info] # Warmup Iteration   2: 1514558.323 ops/s
[info] # Warmup Iteration   3: 1618386.231 ops/s
[info] # Warmup Iteration   4: 1601685.624 ops/s
[info] # Warmup Iteration   5: 1631684.984 ops/s
[info] Iteration   1: 1607143.576 ops/s
[info]                  ·gc.alloc.rate:                   963.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              943.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     654.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1642707.151 ops/s
[info]                  ·gc.alloc.rate:                   1001.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              959.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1282.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1584759.202 ops/s
[info]                  ·gc.alloc.rate:               964.016 MB/sec
[info]                  ·gc.alloc.rate.norm:          957.234 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 664.874 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1647358.093 ops/s
[info]                  ·gc.alloc.rate:               979.245 MB/sec
[info]                  ·gc.alloc.rate.norm:          935.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 639.602 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1643645.852 ops/s
[info]                  ·gc.alloc.rate:                   1002.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              960.207 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1283.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   1625122.775 ±(99.9%) 107183.448 ops/s [Average]
[info]   (min, avg, max) = (1584759.202, 1625122.775, 1647358.093), stdev = 27835.201
[info]   CI (99.9%): [1517939.327, 1732306.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   982.357 ±(99.9%) 74.320 MB/sec [Average]
[info]   (min, avg, max) = (963.814, 982.357, 1002.730), stdev = 19.301
[info]   CI (99.9%): [908.037, 1056.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   951.331 ±(99.9%) 42.633 B/op [Average]
[info]   (min, avg, max) = (935.571, 951.331, 960.207), stdev = 11.072
[info]   CI (99.9%): [908.699, 993.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.464 ±(99.9%) 1413.978 MB/sec [Average]
[info]   (min, avg, max) = (668.842, 937.464, 1340.248), stdev = 367.206
[info]   CI (99.9%): [≈ 0, 2351.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   905.139 ±(99.9%) 1329.118 B/op [Average]
[info]   (min, avg, max) = (639.602, 905.139, 1283.412), stdev = 345.168
[info]   CI (99.9%): [≈ 0, 2234.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.018 ±(99.9%) 0.070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.040), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 55.20% complete, ETA 00:52:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1179500.291 ops/s
[info] # Warmup Iteration   2: 1526003.703 ops/s
[info] # Warmup Iteration   3: 1752374.737 ops/s
[info] # Warmup Iteration   4: 1753918.330 ops/s
[info] # Warmup Iteration   5: 1749487.768 ops/s
[info] Iteration   1: 1753355.672 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1753498.556 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1753015.455 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1753076.167 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1720653.186 ops/s
[info]                  ·gc.alloc.rate:      0.845 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.773 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   1746719.807 ±(99.9%) 56115.568 ops/s [Average]
[info]   (min, avg, max) = (1720653.186, 1746719.807, 1753498.556), stdev = 14573.035
[info]   CI (99.9%): [1690604.240, 1802835.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.169 ±(99.9%) 1.455 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.169, 0.845), stdev = 0.378
[info]   CI (99.9%): [≈ 0, 1.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.155 ±(99.9%) 1.331 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.155, 0.773), stdev = 0.346
[info]   CI (99.9%): [≈ 0, 1.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55.43% complete, ETA 00:51:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41121.060 ops/s
[info] # Warmup Iteration   2: 288502.021 ops/s
[info] # Warmup Iteration   3: 338761.602 ops/s
[info] # Warmup Iteration   4: 377940.824 ops/s
[info] # Warmup Iteration   5: 372768.552 ops/s
[info] Iteration   1: 373388.147 ops/s
[info]                  ·gc.alloc.rate:                   2343.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              9873.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8464.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.200 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.270 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 375342.991 ops/s
[info]                  ·gc.alloc.rate:                   2379.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              9976.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11229.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.436 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 378386.994 ops/s
[info]                  ·gc.alloc.rate:               2384.274 MB/sec
[info]                  ·gc.alloc.rate.norm:          9917.145 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8364.935 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 377325.555 ops/s
[info]                  ·gc.alloc.rate:                   2378.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              9917.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8402.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 377668.526 ops/s
[info]                  ·gc.alloc.rate:               2421.424 MB/sec
[info]                  ·gc.alloc.rate.norm:          10087.583 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2693.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11220.298 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   376422.443 ±(99.9%) 7844.350 ops/s [Average]
[info]   (min, avg, max) = (373388.147, 376422.443, 378386.994), stdev = 2037.153
[info]   CI (99.9%): [368578.092, 384266.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2381.366 ±(99.9%) 106.404 MB/sec [Average]
[info]   (min, avg, max) = (2343.591, 2381.366, 2421.424), stdev = 27.633
[info]   CI (99.9%): [2274.962, 2487.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   9954.580 ±(99.9%) 319.261 B/op [Average]
[info]   (min, avg, max) = (9873.698, 9954.580, 10087.583), stdev = 82.911
[info]   CI (99.9%): [9635.319, 10273.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2281.278 ±(99.9%) 1421.684 MB/sec [Average]
[info]   (min, avg, max) = (2009.124, 2281.278, 2693.321), stdev = 369.207
[info]   CI (99.9%): [859.594, 3702.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9536.266 ±(99.9%) 5936.861 B/op [Average]
[info]   (min, avg, max) = (8364.935, 9536.266, 11229.206), stdev = 1541.784
[info]   CI (99.9%): [3599.406, 15473.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.465 ±(99.9%) 3.739 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.465, 2.200), stdev = 0.971
[info]   CI (99.9%): [≈ 0, 4.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.959 ±(99.9%) 15.754 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.959, 9.270), stdev = 4.091
[info]   CI (99.9%): [≈ 0, 17.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 55.66% complete, ETA 00:51:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17740.151 ops/s
[info] # Warmup Iteration   2: 38832.473 ops/s
[info] # Warmup Iteration   3: 78029.799 ops/s
[info] # Warmup Iteration   4: 80613.694 ops/s
[info] # Warmup Iteration   5: 87018.774 ops/s
[info] Iteration   1: 85638.537 ops/s
[info]                  ·gc.alloc.rate:                   1722.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              31652.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24337.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.383 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 85385.229 ops/s
[info]                  ·gc.alloc.rate:                   1743.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              32144.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36615.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.406 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 85998.126 ops/s
[info]                  ·gc.alloc.rate:                   1765.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              32297.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36341.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.442 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.379 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 85435.258 ops/s
[info]                  ·gc.alloc.rate:                   1717.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              31644.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24395.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.587 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 86278.580 ops/s
[info]                  ·gc.alloc.rate:                   1755.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              32019.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1985.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36211.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.638 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   85747.146 ±(99.9%) 1473.175 ops/s [Average]
[info]   (min, avg, max) = (85385.229, 85747.146, 86278.580), stdev = 382.579
[info]   CI (99.9%): [84273.970, 87220.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1741.059 ±(99.9%) 79.616 MB/sec [Average]
[info]   (min, avg, max) = (1717.844, 1741.059, 1765.618), stdev = 20.676
[info]   CI (99.9%): [1661.443, 1820.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31951.834 ±(99.9%) 1130.510 B/op [Average]
[info]   (min, avg, max) = (31644.836, 31951.834, 32297.339), stdev = 293.590
[info]   CI (99.9%): [30821.324, 33082.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1721.433 ±(99.9%) 1395.952 MB/sec [Average]
[info]   (min, avg, max) = (1324.305, 1721.433, 1986.726), stdev = 362.524
[info]   CI (99.9%): [325.481, 3117.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   31580.227 ±(99.9%) 25363.363 B/op [Average]
[info]   (min, avg, max) = (24337.658, 31580.227, 36615.069), stdev = 6586.785
[info]   CI (99.9%): [6216.863, 56943.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.052 ±(99.9%) 3.020 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.052, 2.009), stdev = 0.784
[info]   CI (99.9%): [≈ 0, 4.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19.279 ±(99.9%) 55.126 B/op [Average]
[info]   (min, avg, max) = (0.383, 19.279, 36.638), stdev = 14.316
[info]   CI (99.9%): [≈ 0, 74.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.600, 12.000), stdev = 2.966
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.89% complete, ETA 00:51:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24794.574 ops/s
[info] # Warmup Iteration   2: 62868.750 ops/s
[info] # Warmup Iteration   3: 92819.595 ops/s
[info] # Warmup Iteration   4: 90581.749 ops/s
[info] # Warmup Iteration   5: 93727.150 ops/s
[info] Iteration   1: 94841.910 ops/s
[info]                  ·gc.alloc.rate:               1211.405 MB/sec
[info]                  ·gc.alloc.rate.norm:          20103.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10932.108 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 91705.874 ops/s
[info]                  ·gc.alloc.rate:                   1194.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              20500.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22618.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.501 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 94249.331 ops/s
[info]                  ·gc.alloc.rate:                   1227.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              20499.502 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22036.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.348 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 94631.070 ops/s
[info]                  ·gc.alloc.rate:                   1230.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              20457.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21992.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.311 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 94613.907 ops/s
[info]                  ·gc.alloc.rate:                   1223.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              20345.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22035.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.385 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   94008.418 ±(99.9%) 5023.862 ops/s [Average]
[info]   (min, avg, max) = (91705.874, 94008.418, 94841.910), stdev = 1304.681
[info]   CI (99.9%): [88984.557, 99032.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1217.378 ±(99.9%) 55.985 MB/sec [Average]
[info]   (min, avg, max) = (1194.753, 1217.378, 1230.066), stdev = 14.539
[info]   CI (99.9%): [1161.393, 1273.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20381.234 ±(99.9%) 646.007 B/op [Average]
[info]   (min, avg, max) = (20103.222, 20381.234, 20500.482), stdev = 167.766
[info]   CI (99.9%): [19735.227, 21027.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1188.725 ±(99.9%) 1140.828 MB/sec [Average]
[info]   (min, avg, max) = (658.760, 1188.725, 1324.618), stdev = 296.269
[info]   CI (99.9%): [47.897, 2329.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19923.051 ±(99.9%) 19379.430 B/op [Average]
[info]   (min, avg, max) = (10932.108, 19923.051, 22618.923), stdev = 5032.776
[info]   CI (99.9%): [543.622, 39302.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.258 ±(99.9%) 1.699 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.258, 1.041), stdev = 0.441
[info]   CI (99.9%): [≈ 0, 1.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.309 ±(99.9%) 28.240 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.309, 17.311), stdev = 7.334
[info]   CI (99.9%): [≈ 0, 32.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.12% complete, ETA 00:51:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40869.462 ops/s
[info] # Warmup Iteration   2: 84034.856 ops/s
[info] # Warmup Iteration   3: 100263.208 ops/s
[info] # Warmup Iteration   4: 100020.078 ops/s
[info] # Warmup Iteration   5: 105294.781 ops/s
[info] Iteration   1: 106126.306 ops/s
[info]                  ·gc.alloc.rate:                   1313.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              19472.628 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19678.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.309 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 105158.979 ops/s
[info]                  ·gc.alloc.rate:               1306.943 MB/sec
[info]                  ·gc.alloc.rate.norm:          19560.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19880.014 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   3: 105512.418 ops/s
[info]                  ·gc.alloc.rate:                   1309.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              19537.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19833.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.531 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52.671 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 104158.652 ops/s
[info]                  ·gc.alloc.rate:                   1290.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              19496.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20050.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.324 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 106335.553 ops/s
[info]                  ·gc.alloc.rate:                   1309.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              19377.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19620.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.849 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   105458.382 ±(99.9%) 3333.316 ops/s [Average]
[info]   (min, avg, max) = (104158.652, 105458.382, 106335.553), stdev = 865.652
[info]   CI (99.9%): [102125.065, 108791.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1305.837 ±(99.9%) 34.614 MB/sec [Average]
[info]   (min, avg, max) = (1290.243, 1305.837, 1313.062), stdev = 8.989
[info]   CI (99.9%): [1271.223, 1340.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   19488.873 ±(99.9%) 272.998 B/op [Average]
[info]   (min, avg, max) = (19377.827, 19488.873, 19560.282), stdev = 70.897
[info]   CI (99.9%): [19215.875, 19761.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1327.472 ±(99.9%) 6.038 MB/sec [Average]
[info]   (min, avg, max) = (1325.505, 1327.472, 1329.647), stdev = 1.568
[info]   CI (99.9%): [1321.434, 1333.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   19812.614 ±(99.9%) 657.237 B/op [Average]
[info]   (min, avg, max) = (19620.376, 19812.614, 20050.717), stdev = 170.682
[info]   CI (99.9%): [19155.378, 20469.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.885 ±(99.9%) 5.817 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.885, 3.531), stdev = 1.511
[info]   CI (99.9%): [≈ 0, 6.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13.230 ±(99.9%) 86.763 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.230, 52.671), stdev = 22.532
[info]   CI (99.9%): [≈ 0, 99.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 10.000), stdev = 3.507
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56.35% complete, ETA 00:50:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4474.322 ops/s
[info] # Warmup Iteration   2: 35684.251 ops/s
[info] # Warmup Iteration   3: 58194.909 ops/s
[info] # Warmup Iteration   4: 54069.225 ops/s
[info] # Warmup Iteration   5: 62151.757 ops/s
[info] Iteration   1: 61842.527 ops/s
[info]                  ·gc.alloc.rate:                   2441.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              62119.359 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2664.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67804.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.689 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.985 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 61593.029 ops/s
[info]                  ·gc.alloc.rate:                   2400.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              61350.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51116.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.787 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 62475.494 ops/s
[info]                  ·gc.alloc.rate:                   2456.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              61871.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67308.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.622 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 62843.239 ops/s
[info]                  ·gc.alloc.rate:               2455.502 MB/sec
[info]                  ·gc.alloc.rate.norm:          61497.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50325.041 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 62569.975 ops/s
[info]                  ·gc.alloc.rate:               2459.411 MB/sec
[info]                  ·gc.alloc.rate.norm:          61863.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2686.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67584.393 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   62264.853 ±(99.9%) 2020.860 ops/s [Average]
[info]   (min, avg, max) = (61593.029, 62264.853, 62843.239), stdev = 524.811
[info]   CI (99.9%): [60243.993, 64285.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2442.681 ±(99.9%) 93.970 MB/sec [Average]
[info]   (min, avg, max) = (2400.927, 2442.681, 2459.411), stdev = 24.404
[info]   CI (99.9%): [2348.712, 2536.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   61740.403 ±(99.9%) 1198.017 B/op [Average]
[info]   (min, avg, max) = (61350.139, 61740.403, 62119.359), stdev = 311.121
[info]   CI (99.9%): [60542.386, 62938.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2406.705 ±(99.9%) 1412.738 MB/sec [Average]
[info]   (min, avg, max) = (2000.432, 2406.705, 2686.859), stdev = 366.883
[info]   CI (99.9%): [993.967, 3819.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   60827.781 ±(99.9%) 35550.478 B/op [Average]
[info]   (min, avg, max) = (50325.041, 60827.781, 67804.558), stdev = 9232.346
[info]   CI (99.9%): [25277.302, 96378.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.396 ±(99.9%) 2.800 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.396, 1.689), stdev = 0.727
[info]   CI (99.9%): [≈ 0, 3.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10.079 ±(99.9%) 71.253 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.079, 42.985), stdev = 18.504
[info]   CI (99.9%): [≈ 0, 81.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56.58% complete, ETA 00:50:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47235.889 ops/s
[info] # Warmup Iteration   2: 143073.213 ops/s
[info] # Warmup Iteration   3: 149990.995 ops/s
[info] # Warmup Iteration   4: 165737.860 ops/s
[info] # Warmup Iteration   5: 165332.661 ops/s
[info] Iteration   1: 165747.985 ops/s
[info]                  ·gc.alloc.rate:               1552.373 MB/sec
[info]                  ·gc.alloc.rate.norm:          14740.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12678.827 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   2: 166478.728 ops/s
[info]                  ·gc.alloc.rate:                   1560.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              14754.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12629.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.776 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 168307.933 ops/s
[info]                  ·gc.alloc.rate:                   1578.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              14751.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12477.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.538 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 168388.099 ops/s
[info]                  ·gc.alloc.rate:                   1617.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              15112.784 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18653.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.167 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 167398.497 ops/s
[info]                  ·gc.alloc.rate:                   1560.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              14668.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12500.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   167264.248 ±(99.9%) 4426.750 ops/s [Average]
[info]   (min, avg, max) = (165747.985, 167264.248, 168388.099), stdev = 1149.613
[info]   CI (99.9%): [162837.498, 171690.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1573.831 ±(99.9%) 100.523 MB/sec [Average]
[info]   (min, avg, max) = (1552.373, 1573.831, 1617.395), stdev = 26.105
[info]   CI (99.9%): [1473.309, 1674.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   14805.609 ±(99.9%) 675.161 B/op [Average]
[info]   (min, avg, max) = (14668.134, 14805.609, 15112.784), stdev = 175.337
[info]   CI (99.9%): [14130.448, 15480.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1466.446 ±(99.9%) 1140.653 MB/sec [Average]
[info]   (min, avg, max) = (1329.938, 1466.446, 1996.331), stdev = 296.224
[info]   CI (99.9%): [325.793, 2607.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   13787.946 ±(99.9%) 10478.634 B/op [Average]
[info]   (min, avg, max) = (12477.041, 13787.946, 18653.527), stdev = 2721.268
[info]   CI (99.9%): [3309.312, 24266.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.948 ±(99.9%) 5.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.948, 3.573), stdev = 1.527
[info]   CI (99.9%): [≈ 0, 6.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.935 ±(99.9%) 55.600 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.935, 33.776), stdev = 14.439
[info]   CI (99.9%): [≈ 0, 64.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 10.000), stdev = 3.493
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.81% complete, ETA 00:50:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 140633.988 ops/s
[info] # Warmup Iteration   2: 359795.957 ops/s
[info] # Warmup Iteration   3: 359281.748 ops/s
[info] # Warmup Iteration   4: 365686.403 ops/s
[info] # Warmup Iteration   5: 376858.781 ops/s
[info] Iteration   1: 379097.324 ops/s
[info]                  ·gc.alloc.rate:                   483.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              2006.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2743.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.259 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 375164.087 ops/s
[info]                  ·gc.alloc.rate:               525.462 MB/sec
[info]                  ·gc.alloc.rate.norm:          2204.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2772.221 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 380341.928 ops/s
[info]                  ·gc.alloc.rate:      471.774 MB/sec
[info]                  ·gc.alloc.rate.norm: 1952.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 378758.275 ops/s
[info]                  ·gc.alloc.rate:                   490.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              2036.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2743.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 374951.337 ops/s
[info]                  ·gc.alloc.rate:               488.154 MB/sec
[info]                  ·gc.alloc.rate.norm:          2048.502 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2770.874 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   377662.590 ±(99.9%) 9438.251 ops/s [Average]
[info]   (min, avg, max) = (374951.337, 377662.590, 380341.928), stdev = 2451.084
[info]   CI (99.9%): [368224.339, 387100.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   491.840 ±(99.9%) 77.460 MB/sec [Average]
[info]   (min, avg, max) = (471.774, 491.840, 525.462), stdev = 20.116
[info]   CI (99.9%): [414.381, 569.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2049.564 ±(99.9%) 362.171 B/op [Average]
[info]   (min, avg, max) = (1952.001, 2049.564, 2204.033), stdev = 94.055
[info]   CI (99.9%): [1687.393, 2411.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   528.525 ±(99.9%) 1137.692 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 528.525, 660.989), stdev = 295.455
[info]   CI (99.9%): [≈ 0, 1666.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2205.921 ±(99.9%) 4748.724 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2205.921, 2772.221), stdev = 1233.228
[info]   CI (99.9%): [≈ 0, 6954.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.069 ±(99.9%) 0.434 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.069, 0.259), stdev = 0.113
[info]   CI (99.9%): [≈ 0, 0.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.04% complete, ETA 00:50:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 371028.824 ops/s
[info] # Warmup Iteration   2: 910014.889 ops/s
[info] # Warmup Iteration   3: 1006300.334 ops/s
[info] # Warmup Iteration   4: 999096.295 ops/s
[info] # Warmup Iteration   5: 1004442.381 ops/s
[info] Iteration   1: 1005257.910 ops/s
[info]                  ·gc.alloc.rate:               1288.761 MB/sec
[info]                  ·gc.alloc.rate.norm:          2016.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2094.300 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 993340.763 ops/s
[info]                  ·gc.alloc.rate:               1278.970 MB/sec
[info]                  ·gc.alloc.rate.norm:          2026.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2121.517 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 998121.167 ops/s
[info]                  ·gc.alloc.rate:               1275.515 MB/sec
[info]                  ·gc.alloc.rate.norm:          2010.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2112.284 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 1009285.852 ops/s
[info]                  ·gc.alloc.rate:                   1279.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              1995.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2090.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.239 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.610 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1010985.255 ops/s
[info]                  ·gc.alloc.rate:                   1294.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              2015.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2080.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   1003398.189 ±(99.9%) 28859.638 ops/s [Average]
[info]   (min, avg, max) = (993340.763, 1003398.189, 1010985.255), stdev = 7494.756
[info]   CI (99.9%): [974538.552, 1032257.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1283.472 ±(99.9%) 30.701 MB/sec [Average]
[info]   (min, avg, max) = (1275.515, 1283.472, 1294.706), stdev = 7.973
[info]   CI (99.9%): [1252.771, 1314.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2012.881 ±(99.9%) 44.046 B/op [Average]
[info]   (min, avg, max) = (1995.122, 2012.881, 2026.348), stdev = 11.439
[info]   CI (99.9%): [1968.834, 2056.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1338.784 ±(99.9%) 6.160 MB/sec [Average]
[info]   (min, avg, max) = (1336.276, 1338.784, 1340.293), stdev = 1.600
[info]   CI (99.9%): [1332.625, 1344.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2099.686 ±(99.9%) 64.839 B/op [Average]
[info]   (min, avg, max) = (2080.261, 2099.686, 2121.517), stdev = 16.838
[info]   CI (99.9%): [2034.847, 2164.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.856 ±(99.9%) 7.282 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.856, 4.239), stdev = 1.891
[info]   CI (99.9%): [≈ 0, 8.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.335 ±(99.9%) 11.356 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.335, 6.610), stdev = 2.949
[info]   CI (99.9%): [≈ 0, 12.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 8.000), stdev = 2.302
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 57.27% complete, ETA 00:49:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 596687.160 ops/s
[info] # Warmup Iteration   2: 944176.338 ops/s
[info] # Warmup Iteration   3: 968145.078 ops/s
[info] # Warmup Iteration   4: 979410.984 ops/s
[info] # Warmup Iteration   5: 968901.748 ops/s
[info] Iteration   1: 973233.658 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 974134.252 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 970389.204 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 969035.122 ops/s
[info]                  ·gc.alloc.rate:      4.973 MB/sec
[info]                  ·gc.alloc.rate.norm: 8.076 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 980969.977 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   973552.443 ±(99.9%) 17841.430 ops/s [Average]
[info]   (min, avg, max) = (969035.122, 973552.443, 980969.977), stdev = 4633.363
[info]   CI (99.9%): [955711.013, 991393.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.995 ±(99.9%) 8.564 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.995, 4.973), stdev = 2.224
[info]   CI (99.9%): [≈ 0, 9.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.616 ±(99.9%) 13.906 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 1.616, 8.076), stdev = 3.611
[info]   CI (99.9%): [≈ 0, 15.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57.51% complete, ETA 00:49:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64364.706 ops/s
[info] # Warmup Iteration   2: 128183.733 ops/s
[info] # Warmup Iteration   3: 247083.088 ops/s
[info] # Warmup Iteration   4: 319907.957 ops/s
[info] # Warmup Iteration   5: 315306.433 ops/s
[info] Iteration   1: 318995.779 ops/s
[info]                  ·gc.alloc.rate:               966.145 MB/sec
[info]                  ·gc.alloc.rate.norm:          4766.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3260.275 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 309157.858 ops/s
[info]                  ·gc.alloc.rate:               968.858 MB/sec
[info]                  ·gc.alloc.rate.norm:          4930.335 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3364.157 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 309306.984 ops/s
[info]                  ·gc.alloc.rate:                   957.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              4873.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6728.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.212 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 317275.430 ops/s
[info]                  ·gc.alloc.rate:               958.737 MB/sec
[info]                  ·gc.alloc.rate.norm:          4755.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3281.333 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 318178.001 ops/s
[info]                  ·gc.alloc.rate:                   979.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              4843.573 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6550.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.697 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   314582.810 ±(99.9%) 18953.848 ops/s [Average]
[info]   (min, avg, max) = (309157.858, 314582.810, 318995.779), stdev = 4922.254
[info]   CI (99.9%): [295628.962, 333536.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   966.231 ±(99.9%) 33.753 MB/sec [Average]
[info]   (min, avg, max) = (957.938, 966.231, 979.478), stdev = 8.766
[info]   CI (99.9%): [932.478, 999.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4833.920 ±(99.9%) 283.260 B/op [Average]
[info]   (min, avg, max) = (4755.343, 4833.920, 4930.335), stdev = 73.562
[info]   CI (99.9%): [4550.660, 5117.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   926.121 ±(99.9%) 1397.118 MB/sec [Average]
[info]   (min, avg, max) = (660.803, 926.121, 1324.647), stdev = 362.827
[info]   CI (99.9%): [≈ 0, 2323.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4636.914 ±(99.9%) 7044.781 B/op [Average]
[info]   (min, avg, max) = (3260.275, 4636.914, 6728.355), stdev = 1829.507
[info]   CI (99.9%): [≈ 0, 11681.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.845 ±(99.9%) 7.190 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.845, 4.185), stdev = 1.867
[info]   CI (99.9%): [≈ 0, 8.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.182 ±(99.9%) 35.551 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.182, 20.697), stdev = 9.233
[info]   CI (99.9%): [≈ 0, 39.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 10.000), stdev = 2.550
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57.74% complete, ETA 00:49:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21489.501 ops/s
[info] # Warmup Iteration   2: 92063.461 ops/s
[info] # Warmup Iteration   3: 145496.892 ops/s
[info] # Warmup Iteration   4: 141169.204 ops/s
[info] # Warmup Iteration   5: 143296.962 ops/s
[info] Iteration   1: 141592.839 ops/s
[info]                  ·gc.alloc.rate:                   1796.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              19965.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22154.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.231 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 144604.166 ops/s
[info]                  ·gc.alloc.rate:               1796.801 MB/sec
[info]                  ·gc.alloc.rate.norm:          19554.301 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14492.767 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 143145.420 ops/s
[info]                  ·gc.alloc.rate:                   1785.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              19626.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22006.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.433 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 144551.329 ops/s
[info]                  ·gc.alloc.rate:                   1785.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              19443.226 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14556.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.907 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 137597.272 ops/s
[info]                  ·gc.alloc.rate:                   1897.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              21705.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22990.911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.220 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   142298.205 ±(99.9%) 11178.167 ops/s [Average]
[info]   (min, avg, max) = (137597.272, 142298.205, 144604.166), stdev = 2902.934
[info]   CI (99.9%): [131120.038, 153476.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1812.445 ±(99.9%) 184.643 MB/sec [Average]
[info]   (min, avg, max) = (1785.499, 1812.445, 1897.660), stdev = 47.951
[info]   CI (99.9%): [1627.802, 1997.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20058.845 ±(99.9%) 3622.945 B/op [Average]
[info]   (min, avg, max) = (19443.226, 20058.845, 21705.448), stdev = 940.867
[info]   CI (99.9%): [16435.900, 23681.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1734.824 ±(99.9%) 1408.001 MB/sec [Average]
[info]   (min, avg, max) = (1331.708, 1734.824, 2010.045), stdev = 365.653
[info]   CI (99.9%): [326.824, 3142.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19239.990 ±(99.9%) 16639.016 B/op [Average]
[info]   (min, avg, max) = (14492.767, 19239.990, 22990.911), stdev = 4321.100
[info]   CI (99.9%): [2600.974, 35879.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.349 ±(99.9%) 2.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.349, 1.331), stdev = 0.562
[info]   CI (99.9%): [≈ 0, 2.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.958 ±(99.9%) 24.805 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.958, 15.220), stdev = 6.442
[info]   CI (99.9%): [≈ 0, 28.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.97% complete, ETA 00:48:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51130.899 ops/s
[info] # Warmup Iteration   2: 179102.953 ops/s
[info] # Warmup Iteration   3: 200576.526 ops/s
[info] # Warmup Iteration   4: 210630.570 ops/s
[info] # Warmup Iteration   5: 210000.088 ops/s
[info] Iteration   1: 209353.254 ops/s
[info]                  ·gc.alloc.rate:                   1200.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              9021.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9940.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 209357.605 ops/s
[info]                  ·gc.alloc.rate:               1218.279 MB/sec
[info]                  ·gc.alloc.rate.norm:          9156.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1323.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9947.831 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   3: 212091.687 ops/s
[info]                  ·gc.alloc.rate:               1197.157 MB/sec
[info]                  ·gc.alloc.rate.norm:          8882.776 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4911.160 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 213518.859 ops/s
[info]                  ·gc.alloc.rate:                   1216.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              8967.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9766.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.757 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 218793.338 ops/s
[info]                  ·gc.alloc.rate:                   1240.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              8922.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9507.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.198 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   212622.948 ±(99.9%) 14976.972 ops/s [Average]
[info]   (min, avg, max) = (209353.254, 212622.948, 218793.338), stdev = 3889.472
[info]   CI (99.9%): [197645.977, 227599.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1214.501 ±(99.9%) 66.578 MB/sec [Average]
[info]   (min, avg, max) = (1197.157, 1214.501, 1240.362), stdev = 17.290
[info]   CI (99.9%): [1147.923, 1281.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8990.283 ±(99.9%) 409.747 B/op [Average]
[info]   (min, avg, max) = (8882.776, 8990.283, 9156.510), stdev = 106.410
[info]   CI (99.9%): [8580.536, 9400.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1190.855 ±(99.9%) 1138.645 MB/sec [Average]
[info]   (min, avg, max) = (661.891, 1190.855, 1324.943), stdev = 295.703
[info]   CI (99.9%): [52.210, 2329.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8814.502 ±(99.9%) 8430.430 B/op [Average]
[info]   (min, avg, max) = (4911.160, 8814.502, 9947.831), stdev = 2189.356
[info]   CI (99.9%): [384.072, 17244.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.951 ±(99.9%) 7.816 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.951, 4.580), stdev = 2.030
[info]   CI (99.9%): [≈ 0, 8.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.003 ±(99.9%) 57.624 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.003, 33.757), stdev = 14.965
[info]   CI (99.9%): [≈ 0, 64.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 10.000), stdev = 2.881
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.20% complete, ETA 00:48:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 119448.831 ops/s
[info] # Warmup Iteration   2: 397766.079 ops/s
[info] # Warmup Iteration   3: 461898.234 ops/s
[info] # Warmup Iteration   4: 464414.426 ops/s
[info] # Warmup Iteration   5: 465376.971 ops/s
[info] Iteration   1: 455653.560 ops/s
[info]                  ·gc.alloc.rate:               905.548 MB/sec
[info]                  ·gc.alloc.rate.norm:          3127.242 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2279.113 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 464241.866 ops/s
[info]                  ·gc.alloc.rate:                   938.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              3182.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4476.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 465116.440 ops/s
[info]                  ·gc.alloc.rate:               929.652 MB/sec
[info]                  ·gc.alloc.rate.norm:          3145.717 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2237.185 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 466624.949 ops/s
[info]                  ·gc.alloc.rate:                   926.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              3123.792 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2229.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 462900.629 ops/s
[info]                  ·gc.alloc.rate:                   943.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              3207.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4500.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   462907.489 ±(99.9%) 16461.117 ops/s [Average]
[info]   (min, avg, max) = (455653.560, 462907.489, 466624.949), stdev = 4274.900
[info]   CI (99.9%): [446446.372, 479368.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   928.761 ±(99.9%) 56.747 MB/sec [Average]
[info]   (min, avg, max) = (905.548, 928.761, 943.624), stdev = 14.737
[info]   CI (99.9%): [872.014, 985.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3157.381 ±(99.9%) 140.758 B/op [Average]
[info]   (min, avg, max) = (3123.792, 3157.381, 3207.928), stdev = 36.554
[info]   CI (99.9%): [3016.624, 3298.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   925.324 ±(99.9%) 1395.034 MB/sec [Average]
[info]   (min, avg, max) = (659.957, 925.324, 1323.828), stdev = 362.286
[info]   CI (99.9%): [≈ 0, 2320.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3144.553 ±(99.9%) 4724.022 B/op [Average]
[info]   (min, avg, max) = (2229.928, 3144.553, 4500.462), stdev = 1226.813
[info]   CI (99.9%): [≈ 0, 7868.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.053 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.041 ±(99.9%) 0.179 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.106), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 9.000), stdev = 2.490
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58.43% complete, ETA 00:48:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1938.060 ops/s
[info] # Warmup Iteration   2: 53416.551 ops/s
[info] # Warmup Iteration   3: 94185.692 ops/s
[info] # Warmup Iteration   4: 95989.806 ops/s
[info] # Warmup Iteration   5: 98813.145 ops/s
[info] Iteration   1: 99396.601 ops/s
[info]                  ·gc.alloc.rate:                   3139.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              49705.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3337.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52844.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.285 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 99547.475 ops/s
[info]                  ·gc.alloc.rate:                   3128.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              49459.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42368.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.329 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 98680.730 ops/s
[info]                  ·gc.alloc.rate:                   3141.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              50101.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3363.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53649.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.332 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 98297.670 ops/s
[info]                  ·gc.alloc.rate:                   3130.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              50123.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43218.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.667 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 99738.873 ops/s
[info]                  ·gc.alloc.rate:                   3203.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              50521.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3384.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53382.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.328 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   99132.270 ±(99.9%) 2366.408 ops/s [Average]
[info]   (min, avg, max) = (98297.670, 99132.270, 99738.873), stdev = 614.549
[info]   CI (99.9%): [96765.862, 101498.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3148.503 ±(99.9%) 119.489 MB/sec [Average]
[info]   (min, avg, max) = (3128.509, 3148.503, 3203.141), stdev = 31.031
[info]   CI (99.9%): [3029.014, 3267.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   49982.194 ±(99.9%) 1582.416 B/op [Average]
[info]   (min, avg, max) = (49459.026, 49982.194, 50521.295), stdev = 410.948
[info]   CI (99.9%): [48399.778, 51564.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3092.977 ±(99.9%) 1419.687 MB/sec [Average]
[info]   (min, avg, max) = (2680.002, 3092.977, 3384.561), stdev = 368.688
[info]   CI (99.9%): [1673.290, 4512.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   49092.797 ±(99.9%) 22201.584 B/op [Average]
[info]   (min, avg, max) = (42368.516, 49092.797, 53649.582), stdev = 5765.681
[info]   CI (99.9%): [26891.213, 71294.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.423 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.271), stdev = 0.110
[info]   CI (99.9%): [≈ 0, 0.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.188 ±(99.9%) 6.690 B/op [Average]
[info]   (min, avg, max) = (0.328, 1.188, 4.285), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 1.095
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58.66% complete, ETA 00:48:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34244.793 ops/s
[info] # Warmup Iteration   2: 192668.049 ops/s
[info] # Warmup Iteration   3: 225450.326 ops/s
[info] # Warmup Iteration   4: 240185.980 ops/s
[info] # Warmup Iteration   5: 240143.398 ops/s
[info] Iteration   1: 239173.890 ops/s
[info]                  ·gc.alloc.rate:                   1513.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              9958.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8793.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 240919.983 ops/s
[info]                  ·gc.alloc.rate:                   1522.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              9942.305 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8734.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 237671.684 ops/s
[info]                  ·gc.alloc.rate:                   1496.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              9906.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8858.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.071 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 226808.902 ops/s
[info]                  ·gc.alloc.rate:                   1453.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              10087.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13876.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.722 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 243283.425 ops/s
[info]                  ·gc.alloc.rate:                   1541.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              9969.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8616.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   237571.577 ±(99.9%) 24524.221 ops/s [Average]
[info]   (min, avg, max) = (226808.902, 237571.577, 243283.425), stdev = 6368.862
[info]   CI (99.9%): [213047.356, 262095.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1505.417 ±(99.9%) 127.525 MB/sec [Average]
[info]   (min, avg, max) = (1453.763, 1505.417, 1541.263), stdev = 33.118
[info]   CI (99.9%): [1377.891, 1632.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9972.821 ±(99.9%) 263.234 B/op [Average]
[info]   (min, avg, max) = (9906.605, 9972.821, 10087.501), stdev = 68.361
[info]   CI (99.9%): [9709.587, 10236.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1468.730 ±(99.9%) 1143.306 MB/sec [Average]
[info]   (min, avg, max) = (1332.083, 1468.730, 1999.849), stdev = 296.913
[info]   CI (99.9%): [325.424, 2612.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9775.817 ±(99.9%) 8834.167 B/op [Average]
[info]   (min, avg, max) = (8616.467, 9775.817, 13876.730), stdev = 2294.205
[info]   CI (99.9%): [941.650, 18609.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.881 ±(99.9%) 7.231 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.881, 4.240), stdev = 1.878
[info]   CI (99.9%): [≈ 0, 8.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.840 ±(99.9%) 47.864 B/op [Average]
[info]   (min, avg, max) = (0.135, 5.840, 28.071), stdev = 12.430
[info]   CI (99.9%): [≈ 0, 53.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 9.000), stdev = 2.793
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.89% complete, ETA 00:47:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 195437.397 ops/s
[info] # Warmup Iteration   2: 672358.208 ops/s
[info] # Warmup Iteration   3: 780962.870 ops/s
[info] # Warmup Iteration   4: 769663.073 ops/s
[info] # Warmup Iteration   5: 772363.186 ops/s
[info] Iteration   1: 765955.205 ops/s
[info]                  ·gc.alloc.rate:               586.167 MB/sec
[info]                  ·gc.alloc.rate.norm:          1204.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1362.681 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 787229.626 ops/s
[info]                  ·gc.alloc.rate:                   603.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              1207.297 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1325.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 787378.049 ops/s
[info]                  ·gc.alloc.rate:                   602.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              1203.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1328.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 778154.719 ops/s
[info]                  ·gc.alloc.rate:                   595.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              1204.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1343.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 786683.994 ops/s
[info]                  ·gc.alloc.rate:               609.291 MB/sec
[info]                  ·gc.alloc.rate.norm:          1219.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1330.729 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   781080.319 ±(99.9%) 35823.655 ops/s [Average]
[info]   (min, avg, max) = (765955.205, 781080.319, 787378.049), stdev = 9303.289
[info]   CI (99.9%): [745256.664, 816903.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   599.444 ±(99.9%) 34.226 MB/sec [Average]
[info]   (min, avg, max) = (586.167, 599.444, 609.291), stdev = 8.888
[info]   CI (99.9%): [565.218, 633.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1207.855 ±(99.9%) 24.610 B/op [Average]
[info]   (min, avg, max) = (1203.941, 1207.855, 1219.043), stdev = 6.391
[info]   CI (99.9%): [1183.245, 1232.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   664.086 ±(99.9%) 3.336 MB/sec [Average]
[info]   (min, avg, max) = (663.164, 664.086, 665.113), stdev = 0.866
[info]   CI (99.9%): [660.750, 667.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1338.278 ±(99.9%) 59.060 B/op [Average]
[info]   (min, avg, max) = (1325.826, 1338.278, 1362.681), stdev = 15.338
[info]   CI (99.9%): [1279.217, 1397.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.057), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.12% complete, ETA 00:47:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 597695.054 ops/s
[info] # Warmup Iteration   2: 1290175.675 ops/s
[info] # Warmup Iteration   3: 1398483.765 ops/s
[info] # Warmup Iteration   4: 1391641.723 ops/s
[info] # Warmup Iteration   5: 1379669.540 ops/s
[info] Iteration   1: 1374391.778 ops/s
[info]                  ·gc.alloc.rate:                   1061.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              1214.894 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1532.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1377877.999 ops/s
[info]                  ·gc.alloc.rate:               1038.415 MB/sec
[info]                  ·gc.alloc.rate.norm:          1186.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 764.701 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1358248.522 ops/s
[info]                  ·gc.alloc.rate:                   1041.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              1206.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1552.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1400988.843 ops/s
[info]                  ·gc.alloc.rate:               1054.371 MB/sec
[info]                  ·gc.alloc.rate.norm:          1184.172 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 752.807 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1366753.213 ops/s
[info]                  ·gc.alloc.rate:                   1067.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              1229.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1544.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.260 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.755 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1375652.071 ±(99.9%) 61807.583 ops/s [Average]
[info]   (min, avg, max) = (1358248.522, 1375652.071, 1400988.843), stdev = 16051.233
[info]   CI (99.9%): [1313844.488, 1437459.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1052.697 ±(99.9%) 48.566 MB/sec [Average]
[info]   (min, avg, max) = (1038.415, 1052.697, 1067.956), stdev = 12.613
[info]   CI (99.9%): [1004.130, 1101.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1204.377 ±(99.9%) 74.720 B/op [Average]
[info]   (min, avg, max) = (1184.172, 1204.377, 1229.823), stdev = 19.405
[info]   CI (99.9%): [1129.657, 1279.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1071.789 ±(99.9%) 1412.756 MB/sec [Average]
[info]   (min, avg, max) = (669.478, 1071.789, 1340.917), stdev = 366.888
[info]   CI (99.9%): [≈ 0, 2484.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1229.291 ±(99.9%) 1654.305 B/op [Average]
[info]   (min, avg, max) = (752.807, 1229.291, 1552.278), stdev = 429.618
[info]   CI (99.9%): [≈ 0, 2883.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.665 ±(99.9%) 5.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.665, 3.260), stdev = 1.451
[info]   CI (99.9%): [≈ 0, 6.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.765 ±(99.9%) 6.435 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.765, 3.755), stdev = 1.671
[info]   CI (99.9%): [≈ 0, 7.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 1.871
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 59.35% complete, ETA 00:47:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 846721.765 ops/s
[info] # Warmup Iteration   2: 1358409.382 ops/s
[info] # Warmup Iteration   3: 1524338.451 ops/s
[info] # Warmup Iteration   4: 1524089.082 ops/s
[info] # Warmup Iteration   5: 1521005.975 ops/s
[info] Iteration   1: 1524569.511 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1524855.942 ops/s
[info]                  ·gc.alloc.rate:      0.080 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.083 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1520829.885 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1517362.310 ops/s
[info]                  ·gc.alloc.rate:      3.855 MB/sec
[info]                  ·gc.alloc.rate.norm: 3.999 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1520058.562 ops/s
[info]                  ·gc.alloc.rate:      0.986 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1521535.242 ±(99.9%) 12226.220 ops/s [Average]
[info]   (min, avg, max) = (1517362.310, 1521535.242, 1524855.942), stdev = 3175.110
[info]   CI (99.9%): [1509309.022, 1533761.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.984 ±(99.9%) 6.385 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.984, 3.855), stdev = 1.658
[info]   CI (99.9%): [≈ 0, 7.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.021 ±(99.9%) 6.623 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.021, 3.999), stdev = 1.720
[info]   CI (99.9%): [≈ 0, 7.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59.58% complete, ETA 00:47:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44753.136 ops/s
[info] # Warmup Iteration   2: 550082.338 ops/s
[info] # Warmup Iteration   3: 564820.674 ops/s
[info] # Warmup Iteration   4: 623665.624 ops/s
[info] # Warmup Iteration   5: 628273.416 ops/s
[info] Iteration   1: 628468.313 ops/s
[info]                  ·gc.alloc.rate:                   1538.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              3852.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3338.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 628003.152 ops/s
[info]                  ·gc.alloc.rate:                   1547.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              3877.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5024.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 626084.836 ops/s
[info]                  ·gc.alloc.rate:                   1518.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              3815.958 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3364.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.657 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 617412.881 ops/s
[info]                  ·gc.alloc.rate:                   1508.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              3844.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3413.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 635037.182 ops/s
[info]                  ·gc.alloc.rate:                   1551.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              3843.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3320.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.155 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   627001.273 ±(99.9%) 24392.312 ops/s [Average]
[info]   (min, avg, max) = (617412.881, 627001.273, 635037.182), stdev = 6334.606
[info]   CI (99.9%): [602608.961, 651393.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1532.809 ±(99.9%) 71.972 MB/sec [Average]
[info]   (min, avg, max) = (1508.168, 1532.809, 1551.046), stdev = 18.691
[info]   CI (99.9%): [1460.837, 1604.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   3846.705 ±(99.9%) 85.359 B/op [Average]
[info]   (min, avg, max) = (3815.958, 3846.705, 3877.919), stdev = 22.167
[info]   CI (99.9%): [3761.346, 3932.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1471.302 ±(99.9%) 1149.349 MB/sec [Average]
[info]   (min, avg, max) = (1333.223, 1471.302, 2005.222), stdev = 298.482
[info]   CI (99.9%): [321.953, 2620.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3692.111 ±(99.9%) 2870.682 B/op [Average]
[info]   (min, avg, max) = (3320.180, 3692.111, 5024.239), stdev = 745.507
[info]   CI (99.9%): [821.430, 6562.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.391 ±(99.9%) 3.148 MB/sec [Average]
[info]   (min, avg, max) = (0.010, 0.391, 1.853), stdev = 0.818
[info]   CI (99.9%): [≈ 0, 3.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.983 ±(99.9%) 7.911 B/op [Average]
[info]   (min, avg, max) = (0.025, 0.983, 4.657), stdev = 2.054
[info]   CI (99.9%): [≈ 0, 8.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59.82% complete, ETA 00:46:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 176.578 ops/s
[info] # Warmup Iteration   2: 547.375 ops/s
[info] # Warmup Iteration   3: 921.676 ops/s
[info] # Warmup Iteration   4: 944.306 ops/s
[info] # Warmup Iteration   5: 954.243 ops/s
[info] Iteration   1: 959.925 ops/s
[info]                  ·gc.alloc.rate:                   2045.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              3353047.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3270116.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10046.085 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 952.012 ops/s
[info]                  ·gc.alloc.rate:                   2038.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              3367567.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3281063.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 825.217 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 856.042 ops/s
[info]                  ·gc.alloc.rate:                        1897.899 MB/sec
[info]                  ·gc.alloc.rate.norm:                   3488040.597 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.018 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 32.653 B/op
[info]                  ·gc.churn.Metaspace:                   0.050 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              92.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:               1333.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          2450923.025 B/op
[info]                  ·gc.churn.PS_Old_Gen:                  2.674 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:             4914.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           1.405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      2582.142 B/op
[info]                  ·gc.count:                             4.000 counts
[info]                  ·gc.time:                              79.000 ms
[info] Iteration   4: 843.382 ops/s
[info]                  ·gc.alloc.rate:                   2204.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              4113032.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2642.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4929798.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11969.630 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 968.964 ops/s
[info]                  ·gc.alloc.rate:                   2094.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              3400538.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1979.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3213831.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67.563 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   916.065 ±(99.9%) 235.013 ops/s [Average]
[info]   (min, avg, max) = (843.382, 916.065, 968.964), stdev = 61.032
[info]   CI (99.9%): [681.052, 1151.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   2056.195 ±(99.9%) 425.908 MB/sec [Average]
[info]   (min, avg, max) = (1897.899, 2056.195, 2204.543), stdev = 110.607
[info]   CI (99.9%): [1630.288, 2482.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3544445.236 ±(99.9%) 1240451.966 B/op [Average]
[info]   (min, avg, max) = (3353047.068, 3544445.236, 4113032.047), stdev = 322141.436
[info]   CI (99.9%): [2303993.270, 4784897.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.Compressed_Class_Space":
[info]   0.004 ±(99.9%) 0.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.Compressed_Class_Space.norm":
[info]   6.531 ±(99.9%) 56.231 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.531, 32.653), stdev = 14.603
[info]   CI (99.9%): [≈ 0, 62.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.Metaspace":
[info]   0.010 ±(99.9%) 0.087 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.050), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.Metaspace.norm":
[info]   18.561 ±(99.9%) 159.820 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.561, 92.807), stdev = 41.505
[info]   CI (99.9%): [≈ 0, 178.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1987.299 ±(99.9%) 1781.855 MB/sec [Average]
[info]   (min, avg, max) = (1333.587, 1987.299, 2642.321), stdev = 462.742
[info]   CI (99.9%): [205.444, 3769.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3429146.586 ±(99.9%) 3498822.224 B/op [Average]
[info]   (min, avg, max) = (2450923.025, 3429146.586, 4929798.066), stdev = 908633.020
[info]   CI (99.9%): [≈ 0, 6927968.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Old_Gen":
[info]   0.535 ±(99.9%) 4.605 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.535, 2.674), stdev = 1.196
[info]   CI (99.9%): [≈ 0, 5.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Old_Gen.norm":
[info]   982.921 ±(99.9%) 8463.245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 982.921, 4914.604), stdev = 2197.878
[info]   CI (99.9%): [≈ 0, 9446.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2.898 ±(99.9%) 12.017 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 2.898, 6.416), stdev = 3.121
[info]   CI (99.9%): [≈ 0, 14.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5098.128 ±(99.9%) 21230.493 B/op [Average]
[info]   (min, avg, max) = (67.563, 5098.128, 11969.630), stdev = 5513.492
[info]   CI (99.9%): [≈ 0, 26328.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   116.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 23.200, 79.000), stdev = 31.483
[info]   CI (99.9%): [116.000, 116.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.05% complete, ETA 00:46:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 185.774 ops/s
[info] # Warmup Iteration   2: 585.511 ops/s
[info] # Warmup Iteration   3: 932.296 ops/s
[info] # Warmup Iteration   4: 950.169 ops/s
[info] # Warmup Iteration   5: 950.765 ops/s
[info] Iteration   1: 928.363 ops/s
[info]                  ·gc.alloc.rate:                   1969.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              3338012.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3373164.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.272 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 933.293 ops/s
[info]                  ·gc.alloc.rate:                   2002.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              3375636.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3364087.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2916.642 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 908.186 ops/s
[info]                  ·gc.alloc.rate:                   1997.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              3459851.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3465261.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.773 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1339.837 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 901.989 ops/s
[info]                  ·gc.alloc.rate:                   1954.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              3409164.890 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3494092.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.160 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 279.610 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 942.562 ops/s
[info]                  ·gc.alloc.rate:                   2000.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              3340551.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3354220.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69.497 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   922.878 ±(99.9%) 66.087 ops/s [Average]
[info]   (min, avg, max) = (901.989, 922.878, 942.562), stdev = 17.163
[info]   CI (99.9%): [856.791, 988.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1984.897 ±(99.9%) 83.256 MB/sec [Average]
[info]   (min, avg, max) = (1954.479, 1984.897, 2002.405), stdev = 21.621
[info]   CI (99.9%): [1901.640, 2068.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3384643.111 ±(99.9%) 196884.895 B/op [Average]
[info]   (min, avg, max) = (3338012.125, 3384643.111, 3459851.300), stdev = 51130.382
[info]   CI (99.9%): [3187758.215, 3581528.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1999.675 ±(99.9%) 27.618 MB/sec [Average]
[info]   (min, avg, max) = (1990.366, 1999.675, 2009.147), stdev = 7.172
[info]   CI (99.9%): [1972.057, 2027.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3410165.005 ±(99.9%) 248816.546 B/op [Average]
[info]   (min, avg, max) = (3354220.047, 3410165.005, 3494092.120), stdev = 64616.867
[info]   CI (99.9%): [3161348.459, 3658981.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.545 ±(99.9%) 2.812 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.545, 1.730), stdev = 0.730
[info]   CI (99.9%): [≈ 0, 3.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   928.172 ±(99.9%) 4746.888 B/op [Average]
[info]   (min, avg, max) = (35.272, 928.172, 2916.642), stdev = 1232.752
[info]   CI (99.9%): [≈ 0, 5675.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.28% complete, ETA 00:46:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16656.520 ops/s
[info] # Warmup Iteration   2: 42398.491 ops/s
[info] # Warmup Iteration   3: 44646.496 ops/s
[info] # Warmup Iteration   4: 41927.929 ops/s
[info] # Warmup Iteration   5: 44877.996 ops/s
[info] Iteration   1: 45190.398 ops/s
[info]                  ·gc.alloc.rate:                   801.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              27920.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:          644.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22458.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.722 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 44963.245 ops/s
[info]                  ·gc.alloc.rate:               803.312 MB/sec
[info]                  ·gc.alloc.rate.norm:          28106.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:      647.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22641.034 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 45289.489 ops/s
[info]                  ·gc.alloc.rate:                   808.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              28110.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:          646.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22477.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.994 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 45010.919 ops/s
[info]                  ·gc.alloc.rate:                   817.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              28583.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1297.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45373.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.456 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 45187.092 ops/s
[info]                  ·gc.alloc.rate:               811.221 MB/sec
[info]                  ·gc.alloc.rate.norm:          28254.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:      650.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22667.023 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   45128.228 ±(99.9%) 524.861 ops/s [Average]
[info]   (min, avg, max) = (44963.245, 45128.228, 45289.489), stdev = 136.305
[info]   CI (99.9%): [44603.367, 45653.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   808.527 ±(99.9%) 24.530 MB/sec [Average]
[info]   (min, avg, max) = (801.662, 808.527, 817.504), stdev = 6.370
[info]   CI (99.9%): [783.996, 833.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28195.151 ±(99.9%) 953.548 B/op [Average]
[info]   (min, avg, max) = (27920.269, 28195.151, 28583.930), stdev = 247.633
[info]   CI (99.9%): [27241.603, 29148.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   777.452 ±(99.9%) 1119.880 MB/sec [Average]
[info]   (min, avg, max) = (644.833, 777.452, 1297.689), stdev = 290.829
[info]   CI (99.9%): [≈ 0, 1897.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   27123.480 ±(99.9%) 39286.290 B/op [Average]
[info]   (min, avg, max) = (22458.217, 27123.480, 45373.541), stdev = 10202.525
[info]   CI (99.9%): [≈ 0, 66409.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.024 ±(99.9%) 0.089 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.049), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.834 ±(99.9%) 3.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.834, 1.722), stdev = 0.805
[info]   CI (99.9%): [≈ 0, 3.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.387
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60.51% complete, ETA 00:46:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 133.834 ops/s
[info] # Warmup Iteration   2: 388.794 ops/s
[info] # Warmup Iteration   3: 782.136 ops/s
[info] # Warmup Iteration   4: 893.498 ops/s
[info] # Warmup Iteration   5: 835.282 ops/s
[info] Iteration   1: 904.183 ops/s
[info]                  ·gc.alloc.rate:                   1987.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              3458739.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3463197.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1449.459 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 905.231 ops/s
[info]                  ·gc.alloc.rate:                   1981.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              3444610.728 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3470948.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1989.227 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 871.029 ops/s
[info]                  ·gc.alloc.rate:                   1990.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              3594446.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3614099.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 300.624 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 911.258 ops/s
[info]                  ·gc.alloc.rate:                   2002.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              3457329.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3463635.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2480.298 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 902.970 ops/s
[info]                  ·gc.alloc.rate:                   1971.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              3434862.743 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2334937.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.496 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   898.934 ±(99.9%) 61.310 ops/s [Average]
[info]   (min, avg, max) = (871.029, 898.934, 911.258), stdev = 15.922
[info]   CI (99.9%): [837.624, 960.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1986.657 ±(99.9%) 44.122 MB/sec [Average]
[info]   (min, avg, max) = (1971.335, 1986.657, 2002.622), stdev = 11.458
[info]   CI (99.9%): [1942.535, 2030.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3477997.821 ±(99.9%) 253482.935 B/op [Average]
[info]   (min, avg, max) = (3434862.743, 3477997.821, 3594446.477), stdev = 65828.713
[info]   CI (99.9%): [3224514.886, 3731480.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1866.853 ±(99.9%) 1134.176 MB/sec [Average]
[info]   (min, avg, max) = (1340.066, 1866.853, 2006.274), stdev = 294.542
[info]   CI (99.9%): [732.676, 3001.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3269363.710 ±(99.9%) 2026573.807 B/op [Average]
[info]   (min, avg, max) = (2334937.487, 3269363.710, 3614099.963), stdev = 526294.782
[info]   CI (99.9%): [1242789.903, 5295937.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.724 ±(99.9%) 2.337 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.724, 1.437), stdev = 0.607
[info]   CI (99.9%): [≈ 0, 3.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1258.421 ±(99.9%) 4032.781 B/op [Average]
[info]   (min, avg, max) = (72.496, 1258.421, 2480.298), stdev = 1047.300
[info]   CI (99.9%): [≈ 0, 5291.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 60.74% complete, ETA 00:45:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1931.104 ops/s
[info] # Warmup Iteration   2: 12933.565 ops/s
[info] # Warmup Iteration   3: 16345.712 ops/s
[info] # Warmup Iteration   4: 16555.076 ops/s
[info] # Warmup Iteration   5: 16721.674 ops/s
[info] Iteration   1: 16244.582 ops/s
[info]                  ·gc.alloc.rate:                   1236.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              119787.536 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1304.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126417.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.919 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 16487.512 ops/s
[info]                  ·gc.alloc.rate:                   1257.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              119962.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1307.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124785.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 15872.749 ops/s
[info]                  ·gc.alloc.rate:                   1592.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              157848.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1965.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     194762.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.150 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 411.303 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         26.000 ms
[info] Iteration   4: 15587.947 ops/s
[info]                  ·gc.alloc.rate:                   1585.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              160032.883 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1282.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129399.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 186.660 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   5: 16656.029 ops/s
[info]                  ·gc.alloc.rate:                   1303.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              123133.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1259.050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118963.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101.799 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   16169.764 ±(99.9%) 1689.181 ops/s [Average]
[info]   (min, avg, max) = (15587.947, 16169.764, 16656.029), stdev = 438.675
[info]   CI (99.9%): [14480.583, 17858.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1395.051 ±(99.9%) 689.124 MB/sec [Average]
[info]   (min, avg, max) = (1236.474, 1395.051, 1592.736), stdev = 178.963
[info]   CI (99.9%): [705.927, 2084.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   136153.174 ±(99.9%) 80320.726 B/op [Average]
[info]   (min, avg, max) = (119787.536, 136153.174, 160032.883), stdev = 20859.037
[info]   CI (99.9%): [55832.448, 216473.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1423.798 ±(99.9%) 1167.876 MB/sec [Average]
[info]   (min, avg, max) = (1259.050, 1423.798, 1965.211), stdev = 303.294
[info]   CI (99.9%): [255.923, 2591.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   138865.576 ±(99.9%) 121210.320 B/op [Average]
[info]   (min, avg, max) = (118963.241, 138865.576, 194762.904), stdev = 31477.935
[info]   CI (99.9%): [17655.256, 260075.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.420 ±(99.9%) 6.594 MB/sec [Average]
[info]   (min, avg, max) = (0.009, 1.420, 4.150), stdev = 1.713
[info]   CI (99.9%): [≈ 0, 8.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   140.344 ±(99.9%) 655.445 B/op [Average]
[info]   (min, avg, max) = (0.919, 140.344, 411.303), stdev = 170.217
[info]   CI (99.9%): [≈ 0, 795.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   85.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (12.000, 17.000, 26.000), stdev = 5.477
[info]   CI (99.9%): [85.000, 85.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.97% complete, ETA 00:45:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4640.982 ops/s
[info] # Warmup Iteration   2: 15527.977 ops/s
[info] # Warmup Iteration   3: 19300.840 ops/s
[info] # Warmup Iteration   4: 20060.526 ops/s
[info] # Warmup Iteration   5: 20189.302 ops/s
[info] Iteration   1: 19151.121 ops/s
[info]                  ·gc.alloc.rate:                   1113.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              91543.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1302.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107019.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.711 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 18390.501 ops/s
[info]                  ·gc.alloc.rate:               1352.044 MB/sec
[info]                  ·gc.alloc.rate.norm:          115700.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1305.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 111675.567 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     13.000 ms
[info] Iteration   3: 17691.206 ops/s
[info]                  ·gc.alloc.rate:                   1362.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              121236.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1306.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116241.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.017 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 624.216 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 19601.688 ops/s
[info]                  ·gc.alloc.rate:                   1118.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              89782.980 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1305.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104830.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.251 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 260.996 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 19729.075 ops/s
[info]                  ·gc.alloc.rate:               1107.268 MB/sec
[info]                  ·gc.alloc.rate.norm:          88328.860 B/op
[info]                  ·gc.churn.PS_Eden_Space:      652.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52022.293 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   18912.718 ±(99.9%) 3313.992 ops/s [Average]
[info]   (min, avg, max) = (17691.206, 18912.718, 19729.075), stdev = 860.633
[info]   CI (99.9%): [15598.727, 22226.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1210.842 ±(99.9%) 515.700 MB/sec [Average]
[info]   (min, avg, max) = (1107.268, 1210.842, 1362.814), stdev = 133.926
[info]   CI (99.9%): [695.142, 1726.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   101318.389 ±(99.9%) 60911.850 B/op [Average]
[info]   (min, avg, max) = (88328.860, 101318.389, 121236.483), stdev = 15818.614
[info]   CI (99.9%): [40406.539, 162230.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1174.327 ±(99.9%) 1124.068 MB/sec [Average]
[info]   (min, avg, max) = (652.138, 1174.327, 1306.668), stdev = 291.917
[info]   CI (99.9%): [50.258, 2298.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   98358.076 ±(99.9%) 101168.493 B/op [Average]
[info]   (min, avg, max) = (52022.293, 98358.076, 116241.767), stdev = 26273.136
[info]   CI (99.9%): [≈ 0, 199526.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2.058 ±(99.9%) 11.967 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.058, 7.017), stdev = 3.108
[info]   CI (99.9%): [≈ 0, 14.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   177.385 ±(99.9%) 1055.317 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 177.385, 624.216), stdev = 274.063
[info]   CI (99.9%): [≈ 0, 1232.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.600, 13.000), stdev = 5.225
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.20% complete, ETA 00:45:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 174713.350 ops/s
[info] # Warmup Iteration   2: 325872.238 ops/s
[info] # Warmup Iteration   3: 339225.685 ops/s
[info] # Warmup Iteration   4: 337031.824 ops/s
[info] # Warmup Iteration   5: 333779.227 ops/s
[info] Iteration   1: 333937.787 ops/s
[info]                  ·gc.alloc.rate:               1222.214 MB/sec
[info]                  ·gc.alloc.rate.norm:          5757.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6298.225 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 338215.201 ops/s
[info]                  ·gc.alloc.rate:               1234.256 MB/sec
[info]                  ·gc.alloc.rate.norm:          5742.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6218.514 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 341519.408 ops/s
[info]                  ·gc.alloc.rate:               1258.409 MB/sec
[info]                  ·gc.alloc.rate.norm:          5799.217 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6161.412 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   4: 342782.252 ops/s
[info]                  ·gc.alloc.rate:                   1236.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              5677.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6141.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.821 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.728 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 315269.321 ops/s
[info]                  ·gc.alloc.rate:                   1125.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              5618.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3322.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.208 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   334344.794 ±(99.9%) 43123.995 ops/s [Average]
[info]   (min, avg, max) = (315269.321, 334344.794, 342782.252), stdev = 11199.165
[info]   CI (99.9%): [291220.799, 377468.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1215.451 ±(99.9%) 199.417 MB/sec [Average]
[info]   (min, avg, max) = (1125.802, 1215.451, 1258.409), stdev = 51.788
[info]   CI (99.9%): [1016.034, 1414.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5719.156 ±(99.9%) 273.951 B/op [Average]
[info]   (min, avg, max) = (5618.840, 5719.156, 5799.217), stdev = 71.144
[info]   CI (99.9%): [5445.205, 5993.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1202.770 ±(99.9%) 1156.239 MB/sec [Average]
[info]   (min, avg, max) = (665.628, 1202.770, 1337.710), stdev = 300.271
[info]   CI (99.9%): [46.531, 2359.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5628.418 ±(99.9%) 4969.968 B/op [Average]
[info]   (min, avg, max) = (3322.130, 5628.418, 6298.225), stdev = 1290.685
[info]   CI (99.9%): [658.450, 10598.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1.173 ±(99.9%) 10.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.173, 5.821), stdev = 2.599
[info]   CI (99.9%): [≈ 0, 11.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.387 ±(99.9%) 45.938 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.387, 26.728), stdev = 11.930
[info]   CI (99.9%): [≈ 0, 51.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 6.800, 9.000), stdev = 3.347
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 61.43% complete, ETA 00:44:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 213206.454 ops/s
[info] # Warmup Iteration   2: 364406.824 ops/s
[info] # Warmup Iteration   3: 393387.013 ops/s
[info] # Warmup Iteration   4: 397194.436 ops/s
[info] # Warmup Iteration   5: 396774.557 ops/s
[info] Iteration   1: 394380.475 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 397476.197 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 391016.702 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 390765.595 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 398026.875 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   394333.169 ±(99.9%) 13234.523 ops/s [Average]
[info]   (min, avg, max) = (390765.595, 394333.169, 398026.875), stdev = 3436.964
[info]   CI (99.9%): [381098.646, 407567.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61.66% complete, ETA 00:44:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2199.697 ops/s
[info] # Warmup Iteration   2: 14670.750 ops/s
[info] # Warmup Iteration   3: 15229.161 ops/s
[info] # Warmup Iteration   4: 16182.918 ops/s
[info] # Warmup Iteration   5: 17993.355 ops/s
[info] Iteration   1: 15205.774 ops/s
[info]                  ·gc.alloc.rate:                   2039.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              211035.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1882.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     194711.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.334 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 551.801 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         46.000 ms
[info] Iteration   2: 16952.404 ops/s
[info]                  ·gc.alloc.rate:                   1581.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              146865.400 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1856.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172361.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.099 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 473.389 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         41.000 ms
[info] Iteration   3: 18432.360 ops/s
[info]                  ·gc.alloc.rate:                   1342.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              114662.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1239.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105852.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 544.250 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         25.000 ms
[info] Iteration   4: 17457.075 ops/s
[info]                  ·gc.alloc.rate:                   1493.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              134596.989 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1246.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112358.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.882 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 349.862 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   5: 17982.635 ops/s
[info]                  ·gc.alloc.rate:                   1459.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              127736.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1873.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163976.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 155.054 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         25.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   17206.050 ±(99.9%) 4807.671 ops/s [Average]
[info]   (min, avg, max) = (15205.774, 17206.050, 18432.360), stdev = 1248.537
[info]   CI (99.9%): [12398.379, 22013.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1583.615 ±(99.9%) 1036.102 MB/sec [Average]
[info]   (min, avg, max) = (1342.946, 1583.615, 2039.910), stdev = 269.072
[info]   CI (99.9%): [547.513, 2619.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   146979.351 ±(99.9%) 144990.873 B/op [Average]
[info]   (min, avg, max) = (114662.796, 146979.351, 211035.533), stdev = 37653.669
[info]   CI (99.9%): [1988.478, 291970.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1619.813 ±(99.9%) 1323.975 MB/sec [Average]
[info]   (min, avg, max) = (1239.765, 1619.813, 1882.123), stdev = 343.832
[info]   CI (99.9%): [295.838, 2943.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   149852.146 ±(99.9%) 149882.009 B/op [Average]
[info]   (min, avg, max) = (105852.994, 149852.146, 194711.903), stdev = 38923.882
[info]   CI (99.9%): [≈ 0, 299734.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   4.492 ±(99.9%) 6.777 MB/sec [Average]
[info]   (min, avg, max) = (1.772, 4.492, 6.374), stdev = 1.760
[info]   CI (99.9%): [≈ 0, 11.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   414.871 ±(99.9%) 640.424 B/op [Average]
[info]   (min, avg, max) = (155.054, 414.871, 551.801), stdev = 166.316
[info]   CI (99.9%): [≈ 0, 1055.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   156.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (19.000, 31.200, 46.000), stdev = 11.628
[info]   CI (99.9%): [156.000, 156.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.89% complete, ETA 00:44:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 771026.058 ops/s
[info] # Warmup Iteration   2: 1295671.354 ops/s
[info] # Warmup Iteration   3: 1406968.366 ops/s
[info] # Warmup Iteration   4: 1403267.338 ops/s
[info] # Warmup Iteration   5: 1407021.418 ops/s
[info] Iteration   1: 1407566.125 ops/s
[info]                  ·gc.alloc.rate:      57.244 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1402112.863 ops/s
[info]                  ·gc.alloc.rate:      57.507 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.550 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1403942.633 ops/s
[info]                  ·gc.alloc.rate:      57.094 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1403804.668 ops/s
[info]                  ·gc.alloc.rate:      57.085 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1396482.621 ops/s
[info]                  ·gc.alloc.rate:                   68.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              76.843 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     576.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.538 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.733 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   1402781.782 ±(99.9%) 15571.403 ops/s [Average]
[info]   (min, avg, max) = (1396482.621, 1402781.782, 1407566.125), stdev = 4043.844
[info]   CI (99.9%): [1387210.379, 1418353.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   59.422 ±(99.9%) 18.865 MB/sec [Average]
[info]   (min, avg, max) = (57.085, 59.422, 68.180), stdev = 4.899
[info]   CI (99.9%): [40.557, 78.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   66.679 ±(99.9%) 21.899 B/op [Average]
[info]   (min, avg, max) = (64.000, 66.679, 76.843), stdev = 5.687
[info]   CI (99.9%): [44.780, 88.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102.315 ±(99.9%) 880.965 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.315, 511.576), stdev = 228.784
[info]   CI (99.9%): [≈ 0, 983.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   115.316 ±(99.9%) 992.903 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 115.316, 576.578), stdev = 257.854
[info]   CI (99.9%): [≈ 0, 1108.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.308 ±(99.9%) 2.649 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.308, 1.538), stdev = 0.688
[info]   CI (99.9%): [≈ 0, 2.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.347 ±(99.9%) 2.985 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.347, 1.733), stdev = 0.775
[info]   CI (99.9%): [≈ 0, 3.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62.12% complete, ETA 00:44:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5559.701 ops/s
[info] # Warmup Iteration   2: 90277.188 ops/s
[info] # Warmup Iteration   3: 113460.473 ops/s
[info] # Warmup Iteration   4: 127203.835 ops/s
[info] # Warmup Iteration   5: 122119.516 ops/s
[info] Iteration   1: 122455.437 ops/s
[info]                  ·gc.alloc.rate:               4303.639 MB/sec
[info]                  ·gc.alloc.rate.norm:          55311.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4017.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51632.187 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 121587.671 ops/s
[info]                  ·gc.alloc.rate:                   4315.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              55862.819 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4034.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52226.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.539 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 121270.101 ops/s
[info]                  ·gc.alloc.rate:                   4357.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              56543.581 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4729.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61366.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.540 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 122699.289 ops/s
[info]                  ·gc.alloc.rate:               4382.031 MB/sec
[info]                  ·gc.alloc.rate.norm:          56194.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4067.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52154.930 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   5: 122220.989 ops/s
[info]                  ·gc.alloc.rate:                   4366.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              56228.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4074.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52466.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.268 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   122046.697 ±(99.9%) 2308.081 ops/s [Average]
[info]   (min, avg, max) = (121270.101, 122046.697, 122699.289), stdev = 599.401
[info]   CI (99.9%): [119738.616, 124354.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4345.141 ±(99.9%) 130.078 MB/sec [Average]
[info]   (min, avg, max) = (4303.639, 4345.141, 4382.031), stdev = 33.781
[info]   CI (99.9%): [4215.063, 4475.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   56028.290 ±(99.9%) 1800.150 B/op [Average]
[info]   (min, avg, max) = (55311.737, 56028.290, 56543.581), stdev = 467.493
[info]   CI (99.9%): [54228.140, 57828.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4184.593 ±(99.9%) 1175.825 MB/sec [Average]
[info]   (min, avg, max) = (4017.344, 4184.593, 4729.236), stdev = 305.358
[info]   CI (99.9%): [3008.768, 5360.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   53969.280 ±(99.9%) 15965.410 B/op [Average]
[info]   (min, avg, max) = (51632.187, 53969.280, 61366.141), stdev = 4146.166
[info]   CI (99.9%): [38003.870, 69934.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.269 ±(99.9%) 1.039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.269, 0.540), stdev = 0.270
[info]   CI (99.9%): [≈ 0, 1.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.200, 11.000), stdev = 1.304
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.36% complete, ETA 00:43:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 257999.885 ops/s
[info] # Warmup Iteration   2: 2059140.468 ops/s
[info] # Warmup Iteration   3: 2218003.657 ops/s
[info] # Warmup Iteration   4: 2204566.077 ops/s
[info] # Warmup Iteration   5: 2216197.127 ops/s
[info] Iteration   1: 2221583.269 ops/s
[info]                  ·gc.alloc.rate:               620.243 MB/sec
[info]                  ·gc.alloc.rate.norm:          439.402 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 469.809 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 2221738.680 ops/s
[info]                  ·gc.alloc.rate:                   620.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              439.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     469.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2222102.157 ops/s
[info]                  ·gc.alloc.rate:               617.198 MB/sec
[info]                  ·gc.alloc.rate.norm:          437.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 469.468 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 2229306.336 ops/s
[info]                  ·gc.alloc.rate:               618.333 MB/sec
[info]                  ·gc.alloc.rate.norm:          436.349 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 467.005 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 2214568.471 ops/s
[info]                  ·gc.alloc.rate:               610.799 MB/sec
[info]                  ·gc.alloc.rate.norm:          434.101 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 470.112 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   2221859.782 ±(99.9%) 20079.202 ops/s [Average]
[info]   (min, avg, max) = (2214568.471, 2221859.782, 2229306.336), stdev = 5214.505
[info]   CI (99.9%): [2201780.580, 2241938.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   617.505 ±(99.9%) 15.536 MB/sec [Average]
[info]   (min, avg, max) = (610.799, 617.505, 620.951), stdev = 4.035
[info]   CI (99.9%): [601.968, 633.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   437.365 ±(99.9%) 9.078 B/op [Average]
[info]   (min, avg, max) = (434.101, 437.365, 439.880), stdev = 2.358
[info]   CI (99.9%): [428.286, 446.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   662.427 ±(99.9%) 2.908 MB/sec [Average]
[info]   (min, avg, max) = (661.467, 662.427, 663.164), stdev = 0.755
[info]   CI (99.9%): [659.520, 665.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   469.186 ±(99.9%) 4.795 B/op [Average]
[info]   (min, avg, max) = (467.005, 469.186, 470.112), stdev = 1.245
[info]   CI (99.9%): [464.391, 473.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.59% complete, ETA 00:43:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 906539.326 ops/s
[info] # Warmup Iteration   2: 1685326.859 ops/s
[info] # Warmup Iteration   3: 1955438.482 ops/s
[info] # Warmup Iteration   4: 1947361.953 ops/s
[info] # Warmup Iteration   5: 1949296.570 ops/s
[info] Iteration   1: 1953117.944 ops/s
[info]                  ·gc.alloc.rate:               545.715 MB/sec
[info]                  ·gc.alloc.rate.norm:          439.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 537.079 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1957972.461 ops/s
[info]                  ·gc.alloc.rate:      539.988 MB/sec
[info]                  ·gc.alloc.rate.norm: 434.070 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1950661.602 ops/s
[info]                  ·gc.alloc.rate:               537.202 MB/sec
[info]                  ·gc.alloc.rate.norm:          433.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 537.729 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1950320.268 ops/s
[info]                  ·gc.alloc.rate:                   550.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              444.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     538.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1949739.710 ops/s
[info]                  ·gc.alloc.rate:               551.747 MB/sec
[info]                  ·gc.alloc.rate.norm:          445.383 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 538.546 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   1952362.397 ±(99.9%) 13056.061 ops/s [Average]
[info]   (min, avg, max) = (1949739.710, 1952362.397, 1957972.461), stdev = 3390.618
[info]   CI (99.9%): [1939306.336, 1965418.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   545.027 ±(99.9%) 24.508 MB/sec [Average]
[info]   (min, avg, max) = (537.202, 545.027, 551.747), stdev = 6.365
[info]   CI (99.9%): [520.520, 569.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   439.360 ±(99.9%) 21.397 B/op [Average]
[info]   (min, avg, max) = (433.420, 439.360, 445.383), stdev = 5.557
[info]   CI (99.9%): [417.963, 460.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   533.472 ±(99.9%) 1148.340 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.472, 667.160), stdev = 298.220
[info]   CI (99.9%): [≈ 0, 1681.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   430.344 ±(99.9%) 926.351 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 430.344, 538.546), stdev = 240.570
[info]   CI (99.9%): [≈ 0, 1356.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62.82% complete, ETA 00:43:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1030427.041 ops/s
[info] # Warmup Iteration   2: 1772629.251 ops/s
[info] # Warmup Iteration   3: 1936690.907 ops/s
[info] # Warmup Iteration   4: 1934107.631 ops/s
[info] # Warmup Iteration   5: 1937582.868 ops/s
[info] Iteration   1: 1934332.354 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1929592.391 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1885229.952 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1956868.862 ops/s
[info]                  ·gc.alloc.rate:      0.073 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.059 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1954702.231 ops/s
[info]                  ·gc.alloc.rate:      0.848 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.683 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1932145.158 ±(99.9%) 111143.287 ops/s [Average]
[info]   (min, avg, max) = (1885229.952, 1932145.158, 1956868.862), stdev = 28863.559
[info]   CI (99.9%): [1821001.871, 2043288.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.184 ±(99.9%) 1.433 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.184, 0.848), stdev = 0.372
[info]   CI (99.9%): [≈ 0, 1.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.148 ±(99.9%) 1.154 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.148, 0.683), stdev = 0.300
[info]   CI (99.9%): [≈ 0, 1.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63.05% complete, ETA 00:43:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5358.909 ops/s
[info] # Warmup Iteration   2: 42569.149 ops/s
[info] # Warmup Iteration   3: 55470.685 ops/s
[info] # Warmup Iteration   4: 53679.583 ops/s
[info] # Warmup Iteration   5: 56332.422 ops/s
[info] Iteration   1: 57435.653 ops/s
[info]                  ·gc.alloc.rate:                   2008.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              55031.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54724.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.648 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 57061.718 ops/s
[info]                  ·gc.alloc.rate:                   1987.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              54812.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55117.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.483 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 57969.405 ops/s
[info]                  ·gc.alloc.rate:                   2011.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              54609.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54329.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.826 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 58097.096 ops/s
[info]                  ·gc.alloc.rate:                   2026.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              54891.481 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54297.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.564 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 56613.037 ops/s
[info]                  ·gc.alloc.rate:                   1949.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              54171.890 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37222.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.579 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   57435.382 ±(99.9%) 2388.426 ops/s [Average]
[info]   (min, avg, max) = (56613.037, 57435.382, 58097.096), stdev = 620.267
[info]   CI (99.9%): [55046.956, 59823.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1996.549 ±(99.9%) 115.019 MB/sec [Average]
[info]   (min, avg, max) = (1949.268, 1996.549, 2026.310), stdev = 29.870
[info]   CI (99.9%): [1881.530, 2111.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   54703.455 ±(99.9%) 1286.148 B/op [Average]
[info]   (min, avg, max) = (54171.890, 54703.455, 55031.730), stdev = 334.009
[info]   CI (99.9%): [53417.307, 55989.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1868.088 ±(99.9%) 1138.154 MB/sec [Average]
[info]   (min, avg, max) = (1339.370, 1868.088, 2004.379), stdev = 295.575
[info]   CI (99.9%): [729.934, 3006.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   51138.214 ±(99.9%) 29982.711 B/op [Average]
[info]   (min, avg, max) = (37222.291, 51138.214, 55117.621), stdev = 7786.415
[info]   CI (99.9%): [21155.503, 81120.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.387 ±(99.9%) 2.215 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.387, 1.374), stdev = 0.575
[info]   CI (99.9%): [≈ 0, 2.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10.620 ±(99.9%) 60.700 B/op [Average]
[info]   (min, avg, max) = (0.564, 10.620, 37.648), stdev = 15.764
[info]   CI (99.9%): [≈ 0, 71.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 63.28% complete, ETA 00:42:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40344.309 ops/s
[info] # Warmup Iteration   2: 669853.149 ops/s
[info] # Warmup Iteration   3: 1085364.903 ops/s
[info] # Warmup Iteration   4: 1201559.185 ops/s
[info] # Warmup Iteration   5: 1221306.099 ops/s
[info] Iteration   1: 1231528.571 ops/s
[info]                  ·gc.alloc.rate:                   3522.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              4500.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3316.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4237.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.186 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1230415.994 ops/s
[info]                  ·gc.alloc.rate:                   3544.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              4534.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3327.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4256.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1230421.552 ops/s
[info]                  ·gc.alloc.rate:               3572.975 MB/sec
[info]                  ·gc.alloc.rate.norm:          4570.219 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3347.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4282.168 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 1219632.441 ops/s
[info]                  ·gc.alloc.rate:                   3543.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              4573.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3362.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4339.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1227620.167 ops/s
[info]                  ·gc.alloc.rate:                   3565.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              4571.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3375.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4328.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   1227923.745 ±(99.9%) 18694.768 ops/s [Average]
[info]   (min, avg, max) = (1219632.441, 1227923.745, 1231528.571), stdev = 4854.972
[info]   CI (99.9%): [1209228.977, 1246618.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   3550.011 ±(99.9%) 77.200 MB/sec [Average]
[info]   (min, avg, max) = (3522.364, 3550.011, 3572.975), stdev = 20.049
[info]   CI (99.9%): [3472.811, 3627.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4550.044 ±(99.9%) 123.432 B/op [Average]
[info]   (min, avg, max) = (4500.545, 4550.044, 4573.251), stdev = 32.055
[info]   CI (99.9%): [4426.612, 4673.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3346.033 ±(99.9%) 93.830 MB/sec [Average]
[info]   (min, avg, max) = (3316.652, 3346.033, 3375.977), stdev = 24.367
[info]   CI (99.9%): [3252.203, 3439.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4288.665 ±(99.9%) 170.004 B/op [Average]
[info]   (min, avg, max) = (4237.706, 4288.665, 4339.019), stdev = 44.149
[info]   CI (99.9%): [4118.662, 4458.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.146), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.059 ±(99.9%) 0.284 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.059, 0.186), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 63.51% complete, ETA 00:42:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.623 ops/s
[info] # Warmup Iteration   2: 4572981.222 ops/s
[info] # Warmup Iteration   3: 5338778.795 ops/s
[info] # Warmup Iteration   4: 4715291.886 ops/s
[info] # Warmup Iteration   5: 5404512.840 ops/s
[info] Iteration   1: 5373551.317 ops/s
[info]                  ·gc.alloc.rate:                   337.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              98.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 5403600.146 ops/s
[info]                  ·gc.alloc.rate:      329.660 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 5368894.095 ops/s
[info]                  ·gc.alloc.rate:               344.629 MB/sec
[info]                  ·gc.alloc.rate.norm:          101.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 194.399 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 5263713.232 ops/s
[info]                  ·gc.alloc.rate:      321.159 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 5352214.901 ops/s
[info]                  ·gc.alloc.rate:               343.861 MB/sec
[info]                  ·gc.alloc.rate.norm:          101.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 195.004 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   5352394.738 ±(99.9%) 203813.908 ops/s [Average]
[info]   (min, avg, max) = (5263713.232, 5352394.738, 5403600.146), stdev = 52929.825
[info]   CI (99.9%): [5148580.830, 5556208.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   335.286 ±(99.9%) 38.286 MB/sec [Average]
[info]   (min, avg, max) = (321.159, 335.286, 344.629), stdev = 9.943
[info]   CI (99.9%): [297.000, 373.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   98.574 ±(99.9%) 9.770 B/op [Average]
[info]   (min, avg, max) = (96.000, 98.574, 101.120), stdev = 2.537
[info]   CI (99.9%): [88.803, 108.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   367.592 ±(99.9%) 1313.895 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 367.592, 663.174), stdev = 341.214
[info]   CI (99.9%): [≈ 0, 1681.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   107.849 ±(99.9%) 385.609 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 107.849, 195.004), stdev = 100.141
[info]   CI (99.9%): [≈ 0, 493.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 63.74% complete, ETA 00:42:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39959.346 ops/s
[info] # Warmup Iteration   2: 670176.554 ops/s
[info] # Warmup Iteration   3: 1055403.810 ops/s
[info] # Warmup Iteration   4: 1081072.813 ops/s
[info] # Warmup Iteration   5: 1085162.809 ops/s
[info] Iteration   1: 1089166.234 ops/s
[info]                  ·gc.alloc.rate:               1208.739 MB/sec
[info]                  ·gc.alloc.rate.norm:          1745.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 960.189 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1065401.300 ops/s
[info]                  ·gc.alloc.rate:               1203.478 MB/sec
[info]                  ·gc.alloc.rate.norm:          1777.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1965.137 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1110469.543 ops/s
[info]                  ·gc.alloc.rate:               1246.537 MB/sec
[info]                  ·gc.alloc.rate.norm:          1766.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1889.193 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1110370.854 ops/s
[info]                  ·gc.alloc.rate:                   1244.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              1764.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1893.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1108707.886 ops/s
[info]                  ·gc.alloc.rate:                   1253.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              1778.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1899.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.300 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   1096823.163 ±(99.9%) 75970.294 ops/s [Average]
[info]   (min, avg, max) = (1065401.300, 1096823.163, 1110469.543), stdev = 19729.244
[info]   CI (99.9%): [1020852.869, 1172793.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1231.306 ±(99.9%) 89.660 MB/sec [Average]
[info]   (min, avg, max) = (1203.478, 1231.306, 1253.055), stdev = 23.284
[info]   CI (99.9%): [1141.646, 1320.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1766.634 ±(99.9%) 51.165 B/op [Average]
[info]   (min, avg, max) = (1745.928, 1766.634, 1778.768), stdev = 13.287
[info]   CI (99.9%): [1715.469, 1817.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1200.414 ±(99.9%) 1153.097 MB/sec [Average]
[info]   (min, avg, max) = (664.756, 1200.414, 1338.210), stdev = 299.456
[info]   CI (99.9%): [47.316, 2353.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1721.455 ±(99.9%) 1643.036 B/op [Average]
[info]   (min, avg, max) = (960.189, 1721.455, 1965.137), stdev = 426.691
[info]   CI (99.9%): [78.420, 3364.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.192 ±(99.9%) 1.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.192, 0.916), stdev = 0.405
[info]   CI (99.9%): [≈ 0, 1.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.272 ±(99.9%) 2.216 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.272, 1.300), stdev = 0.575
[info]   CI (99.9%): [≈ 0, 2.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 63.97% complete, ETA 00:41:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3044639.446 ops/s
[info] # Warmup Iteration   2: 9551953.177 ops/s
[info] # Warmup Iteration   3: 10421103.572 ops/s
[info] # Warmup Iteration   4: 10431444.768 ops/s
[info] # Warmup Iteration   5: 10473871.569 ops/s
[info] Iteration   1: 10493502.712 ops/s
[info]                  ·gc.alloc.rate:               497.176 MB/sec
[info]                  ·gc.alloc.rate.norm:          74.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76.733 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 10510013.727 ops/s
[info]                  ·gc.alloc.rate:                   499.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              74.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 10413838.838 ops/s
[info]                  ·gc.alloc.rate:                   530.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.235 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 10522444.605 ops/s
[info]                  ·gc.alloc.rate:      481.371 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 10479929.289 ops/s
[info]                  ·gc.alloc.rate:               501.896 MB/sec
[info]                  ·gc.alloc.rate.norm:          75.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 100.536 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   10483945.834 ±(99.9%) 163189.043 ops/s [Average]
[info]   (min, avg, max) = (10413838.838, 10483945.834, 10522444.605), stdev = 42379.676
[info]   CI (99.9%): [10320756.791, 10647134.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   502.174 ±(99.9%) 69.225 MB/sec [Average]
[info]   (min, avg, max) = (481.371, 502.174, 530.944), stdev = 17.978
[info]   CI (99.9%): [432.949, 571.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   75.392 ±(99.9%) 11.553 B/op [Average]
[info]   (min, avg, max) = (72.000, 75.392, 80.235), stdev = 3.000
[info]   CI (99.9%): [63.839, 86.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   503.915 ±(99.9%) 1116.120 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503.915, 669.439), stdev = 289.853
[info]   CI (99.9%): [≈ 0, 1620.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   75.722 ±(99.9%) 167.799 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 75.722, 101.133), stdev = 43.577
[info]   CI (99.9%): [≈ 0, 243.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 64.20% complete, ETA 00:41:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1018.591 ops/s
[info] # Warmup Iteration   2: 183911.746 ops/s
[info] # Warmup Iteration   3: 733778.668 ops/s
[info] # Warmup Iteration   4: 786159.890 ops/s
[info] # Warmup Iteration   5: 794090.030 ops/s
[info] Iteration   1: 805439.034 ops/s
[info]                  ·gc.alloc.rate:                   2955.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              5774.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5214.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.058 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 807004.429 ops/s
[info]                  ·gc.alloc.rate:                   2969.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              5791.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5203.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 800664.032 ops/s
[info]                  ·gc.alloc.rate:               2974.376 MB/sec
[info]                  ·gc.alloc.rate.norm:          5846.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3344.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6573.734 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 789694.863 ops/s
[info]                  ·gc.alloc.rate:                   2949.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              5877.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5350.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 800589.492 ops/s
[info]                  ·gc.alloc.rate:                   2988.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              5874.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2693.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5295.660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   800678.370 ±(99.9%) 26068.637 ops/s [Average]
[info]   (min, avg, max) = (789694.863, 800678.370, 807004.429), stdev = 6769.942
[info]   CI (99.9%): [774609.733, 826747.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2967.374 ±(99.9%) 60.318 MB/sec [Average]
[info]   (min, avg, max) = (2949.075, 2967.374, 2988.369), stdev = 15.664
[info]   CI (99.9%): [2907.056, 3027.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   5832.850 ±(99.9%) 183.231 B/op [Average]
[info]   (min, avg, max) = (5774.142, 5832.850, 5877.484), stdev = 47.585
[info]   CI (99.9%): [5649.619, 6016.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2812.042 ±(99.9%) 1146.868 MB/sec [Average]
[info]   (min, avg, max) = (2668.235, 2812.042, 3344.475), stdev = 297.838
[info]   CI (99.9%): [1665.175, 3958.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5527.668 ±(99.9%) 2263.739 B/op [Average]
[info]   (min, avg, max) = (5203.364, 5527.668, 6573.734), stdev = 587.886
[info]   CI (99.9%): [3263.928, 7791.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.906 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.121, 0.541), stdev = 0.235
[info]   CI (99.9%): [≈ 0, 1.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.236 ±(99.9%) 1.770 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.236, 1.058), stdev = 0.460
[info]   CI (99.9%): [≈ 0, 2.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 8.000), stdev = 1.095
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 64.43% complete, ETA 00:41:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 453.538 ops/s
[info] # Warmup Iteration   2: 3448.228 ops/s
[info] # Warmup Iteration   3: 5069.448 ops/s
[info] # Warmup Iteration   4: 5371.967 ops/s
[info] # Warmup Iteration   5: 5594.393 ops/s
[info] Iteration   1: 5603.507 ops/s
[info]                  ·gc.alloc.rate:                   2495.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              700773.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     749437.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.818 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 229.748 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 5517.917 ops/s
[info]                  ·gc.alloc.rate:                   2437.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              694987.274 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     763351.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.788 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 5515.811 ops/s
[info]                  ·gc.alloc.rate:                   2434.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              694561.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     574075.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.445 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5469.622 ops/s
[info]                  ·gc.alloc.rate:                   2454.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              706289.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     774117.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83.852 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 5507.699 ops/s
[info]                  ·gc.alloc.rate:                   2457.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              702306.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     577868.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.585 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   5522.911 ±(99.9%) 189.057 ops/s [Average]
[info]   (min, avg, max) = (5469.622, 5522.911, 5603.507), stdev = 49.097
[info]   CI (99.9%): [5333.855, 5711.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   2455.927 ±(99.9%) 93.151 MB/sec [Average]
[info]   (min, avg, max) = (2434.478, 2455.927, 2495.247), stdev = 24.191
[info]   CI (99.9%): [2362.776, 2549.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   699783.535 ±(99.9%) 19247.292 B/op [Average]
[info]   (min, avg, max) = (694561.567, 699783.535, 706289.048), stdev = 4998.461
[info]   CI (99.9%): [680536.243, 719030.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2414.128 ±(99.9%) 1395.615 MB/sec [Average]
[info]   (min, avg, max) = (2012.167, 2414.128, 2690.119), stdev = 362.437
[info]   CI (99.9%): [1018.513, 3809.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   687770.135 ±(99.9%) 394461.992 B/op [Average]
[info]   (min, avg, max) = (574075.407, 687770.135, 774117.796), stdev = 102440.527
[info]   CI (99.9%): [293308.143, 1082232.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.372 ±(99.9%) 1.023 MB/sec [Average]
[info]   (min, avg, max) = (0.167, 0.372, 0.818), stdev = 0.266
[info]   CI (99.9%): [≈ 0, 1.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   105.484 ±(99.9%) 285.721 B/op [Average]
[info]   (min, avg, max) = (47.585, 105.484, 229.748), stdev = 74.201
[info]   CI (99.9%): [≈ 0, 391.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 64.67% complete, ETA 00:41:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 330.778 ops/s
[info] # Warmup Iteration   2: 5966.209 ops/s
[info] # Warmup Iteration   3: 7248.164 ops/s
[info] # Warmup Iteration   4: 7752.335 ops/s
[info] # Warmup Iteration   5: 7872.201 ops/s
[info] Iteration   1: 7948.467 ops/s
[info]                  ·gc.alloc.rate:                   3231.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              639676.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3340.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     661196.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90.679 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 7767.968 ops/s
[info]                  ·gc.alloc.rate:                   3185.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              645377.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3348.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     678403.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.434 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 7903.598 ops/s
[info]                  ·gc.alloc.rate:                   3239.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              645088.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2687.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     535165.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.145 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 7936.445 ops/s
[info]                  ·gc.alloc.rate:                   3281.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              650521.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3370.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     668338.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.128 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 7891.688 ops/s
[info]                  ·gc.alloc.rate:                   3263.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              650809.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3381.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     674321.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.151 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   7889.633 ±(99.9%) 276.701 ops/s [Average]
[info]   (min, avg, max) = (7767.968, 7889.633, 7948.467), stdev = 71.858
[info]   CI (99.9%): [7612.932, 8166.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3240.333 ±(99.9%) 139.705 MB/sec [Average]
[info]   (min, avg, max) = (3185.608, 3240.333, 3281.096), stdev = 36.281
[info]   CI (99.9%): [3100.628, 3380.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   646294.544 ±(99.9%) 17682.303 B/op [Average]
[info]   (min, avg, max) = (639676.410, 646294.544, 650809.527), stdev = 4592.038
[info]   CI (99.9%): [628612.241, 663976.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   3225.833 ±(99.9%) 1160.544 MB/sec [Average]
[info]   (min, avg, max) = (2687.494, 3225.833, 3381.421), stdev = 301.390
[info]   CI (99.9%): [2065.289, 4386.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   643484.938 ±(99.9%) 234500.491 B/op [Average]
[info]   (min, avg, max) = (535165.069, 643484.938, 678403.031), stdev = 60899.033
[info]   CI (99.9%): [408984.448, 877985.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.745 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.112, 0.458), stdev = 0.193
[info]   CI (99.9%): [≈ 0, 0.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22.307 ±(99.9%) 147.348 B/op [Average]
[info]   (min, avg, max) = (4.128, 22.307, 90.679), stdev = 38.266
[info]   CI (99.9%): [≈ 0, 169.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 64.90% complete, ETA 00:40:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16461.906 ops/s
[info] # Warmup Iteration   2: 50030.657 ops/s
[info] # Warmup Iteration   3: 54352.203 ops/s
[info] # Warmup Iteration   4: 57996.987 ops/s
[info] # Warmup Iteration   5: 57072.844 ops/s
[info] Iteration   1: 57050.975 ops/s
[info]                  ·gc.alloc.rate:               936.817 MB/sec
[info]                  ·gc.alloc.rate.norm:          25832.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18431.856 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 57535.323 ops/s
[info]                  ·gc.alloc.rate:                   976.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              26723.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36590.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.139 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 57783.633 ops/s
[info]                  ·gc.alloc.rate:               950.766 MB/sec
[info]                  ·gc.alloc.rate.norm:          25889.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18225.297 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 56080.841 ops/s
[info]                  ·gc.alloc.rate:                   929.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              26074.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18778.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.584 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 55874.883 ops/s
[info]                  ·gc.alloc.rate:               940.248 MB/sec
[info]                  ·gc.alloc.rate.norm:          26484.819 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37712.487 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   56865.131 ±(99.9%) 3291.706 ops/s [Average]
[info]   (min, avg, max) = (55874.883, 56865.131, 57783.633), stdev = 854.845
[info]   CI (99.9%): [53573.425, 60156.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   946.774 ±(99.9%) 71.461 MB/sec [Average]
[info]   (min, avg, max) = (929.125, 946.774, 976.915), stdev = 18.558
[info]   CI (99.9%): [875.313, 1018.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26200.964 ±(99.9%) 1493.506 B/op [Average]
[info]   (min, avg, max) = (25832.592, 26200.964, 26723.066), stdev = 387.859
[info]   CI (99.9%): [24707.458, 27694.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   936.669 ±(99.9%) 1411.562 MB/sec [Average]
[info]   (min, avg, max) = (668.430, 936.669, 1338.846), stdev = 366.578
[info]   CI (99.9%): [≈ 0, 2348.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25947.678 ±(99.9%) 39419.269 B/op [Average]
[info]   (min, avg, max) = (18225.297, 25947.678, 37712.487), stdev = 10237.059
[info]   CI (99.9%): [≈ 0, 65366.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.345 ±(99.9%) 1.968 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.345, 1.139), stdev = 0.511
[info]   CI (99.9%): [≈ 0, 2.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 65.13% complete, ETA 00:40:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1045.161 ops/s
[info] # Warmup Iteration   2: 3933.222 ops/s
[info] # Warmup Iteration   3: 4739.832 ops/s
[info] # Warmup Iteration   4: 5215.350 ops/s
[info] # Warmup Iteration   5: 5491.148 ops/s
[info] Iteration   1: 5379.770 ops/s
[info]                  ·gc.alloc.rate:               971.138 MB/sec
[info]                  ·gc.alloc.rate.norm:          284099.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1321.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 386614.901 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 5450.949 ops/s
[info]                  ·gc.alloc.rate:               969.575 MB/sec
[info]                  ·gc.alloc.rate.norm:          279934.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 190405.400 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 5436.220 ops/s
[info]                  ·gc.alloc.rate:                   984.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              285042.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     381791.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5463.853 ops/s
[info]                  ·gc.alloc.rate:               974.373 MB/sec
[info]                  ·gc.alloc.rate.norm:          280654.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 189952.468 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 5438.266 ops/s
[info]                  ·gc.alloc.rate:                   983.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              284661.849 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     382036.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.047 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   5433.811 ±(99.9%) 123.915 ops/s [Average]
[info]   (min, avg, max) = (5379.770, 5433.811, 5463.853), stdev = 32.180
[info]   CI (99.9%): [5309.897, 5557.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   976.679 ±(99.9%) 27.143 MB/sec [Average]
[info]   (min, avg, max) = (969.575, 976.679, 984.654), stdev = 7.049
[info]   CI (99.9%): [949.536, 1003.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   282878.866 ±(99.9%) 9226.843 B/op [Average]
[info]   (min, avg, max) = (279934.919, 282878.866, 285042.948), stdev = 2396.182
[info]   CI (99.9%): [273652.023, 292105.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1055.903 ±(99.9%) 1393.494 MB/sec [Average]
[info]   (min, avg, max) = (659.474, 1055.903, 1321.565), stdev = 361.886
[info]   CI (99.9%): [≈ 0, 2449.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   306160.057 ±(99.9%) 407757.570 B/op [Average]
[info]   (min, avg, max) = (189952.468, 306160.057, 386614.901), stdev = 105893.346
[info]   CI (99.9%): [≈ 0, 713917.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.615 ±(99.9%) 20.747 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.615, 12.047), stdev = 5.388
[info]   CI (99.9%): [≈ 0, 24.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.140
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 65.36% complete, ETA 00:40:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 868.538 ops/s
[info] # Warmup Iteration   2: 3689.417 ops/s
[info] # Warmup Iteration   3: 5119.529 ops/s
[info] # Warmup Iteration   4: 5302.587 ops/s
[info] # Warmup Iteration   5: 5327.889 ops/s
[info] Iteration   1: 5313.669 ops/s
[info]                  ·gc.alloc.rate:               579.505 MB/sec
[info]                  ·gc.alloc.rate.norm:          171628.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 195806.525 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 5360.304 ops/s
[info]                  ·gc.alloc.rate:                   587.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              172367.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     194517.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.112 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5372.015 ops/s
[info]                  ·gc.alloc.rate:               583.579 MB/sec
[info]                  ·gc.alloc.rate.norm:          170944.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 194083.162 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 5378.130 ops/s
[info]                  ·gc.alloc.rate:               587.802 MB/sec
[info]                  ·gc.alloc.rate.norm:          172013.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 194256.550 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 5416.553 ops/s
[info]                  ·gc.alloc.rate:      572.099 MB/sec
[info]                  ·gc.alloc.rate.norm: 166199.225 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   5368.134 ±(99.9%) 142.619 ops/s [Average]
[info]   (min, avg, max) = (5313.669, 5368.134, 5416.553), stdev = 37.038
[info]   CI (99.9%): [5225.516, 5510.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   582.011 ±(99.9%) 24.814 MB/sec [Average]
[info]   (min, avg, max) = (572.099, 582.011, 587.802), stdev = 6.444
[info]   CI (99.9%): [557.197, 606.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   170630.731 ±(99.9%) 9753.094 B/op [Average]
[info]   (min, avg, max) = (166199.225, 170630.731, 172367.816), stdev = 2532.847
[info]   CI (99.9%): [160877.637, 180383.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   530.007 ±(99.9%) 1140.885 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 530.007, 663.812), stdev = 296.284
[info]   CI (99.9%): [≈ 0, 1670.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   155732.767 ±(99.9%) 335236.641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 155732.767, 195806.525), stdev = 87059.891
[info]   CI (99.9%): [≈ 0, 490969.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.222 ±(99.9%) 10.526 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.222, 6.112), stdev = 2.734
[info]   CI (99.9%): [≈ 0, 11.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 65.59% complete, ETA 00:40:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3444.205 ops/s
[info] # Warmup Iteration   2: 5827.985 ops/s
[info] # Warmup Iteration   3: 6956.387 ops/s
[info] # Warmup Iteration   4: 6956.877 ops/s
[info] # Warmup Iteration   5: 6919.489 ops/s
[info] Iteration   1: 6943.954 ops/s
[info]                  ·gc.alloc.rate:      224.141 MB/sec
[info]                  ·gc.alloc.rate.norm: 50779.535 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6920.691 ops/s
[info]                  ·gc.alloc.rate:                   233.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              53059.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116340.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.468 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 6636.052 ops/s
[info]                  ·gc.alloc.rate:      214.075 MB/sec
[info]                  ·gc.alloc.rate.norm: 50752.065 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6903.965 ops/s
[info]                  ·gc.alloc.rate:                   233.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              53326.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116609.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.328 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 6592.732 ops/s
[info]                  ·gc.alloc.rate:      374.052 MB/sec
[info]                  ·gc.alloc.rate.norm: 89301.810 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   6799.479 ±(99.9%) 655.558 ops/s [Average]
[info]   (min, avg, max) = (6592.732, 6799.479, 6943.954), stdev = 170.246
[info]   CI (99.9%): [6143.921, 7455.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   255.907 ±(99.9%) 256.216 MB/sec [Average]
[info]   (min, avg, max) = (214.075, 255.907, 374.052), stdev = 66.539
[info]   CI (99.9%): [≈ 0, 512.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   59443.849 ±(99.9%) 64442.199 B/op [Average]
[info]   (min, avg, max) = (50752.065, 59443.849, 89301.810), stdev = 16735.435
[info]   CI (99.9%): [≈ 0, 123886.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.633 ±(99.9%) 1078.972 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.633, 511.608), stdev = 280.206
[info]   CI (99.9%): [≈ 0, 1283.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   46589.959 ±(99.9%) 245655.681 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46589.959, 116609.668), stdev = 63796.000
[info]   CI (99.9%): [≈ 0, 292245.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.559 ±(99.9%) 15.873 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.559, 9.468), stdev = 4.122
[info]   CI (99.9%): [≈ 0, 18.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 2.490
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 65.82% complete, ETA 00:39:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2344.119 ops/s
[info] # Warmup Iteration   2: 6352.607 ops/s
[info] # Warmup Iteration   3: 6447.655 ops/s
[info] # Warmup Iteration   4: 6924.127 ops/s
[info] # Warmup Iteration   5: 6932.756 ops/s
[info] Iteration   1: 6902.132 ops/s
[info]                  ·gc.alloc.rate:                   180.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              41163.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116643.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.778 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 6932.206 ops/s
[info]                  ·gc.alloc.rate:      172.881 MB/sec
[info]                  ·gc.alloc.rate.norm: 39248.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6925.356 ops/s
[info]                  ·gc.alloc.rate:      172.716 MB/sec
[info]                  ·gc.alloc.rate.norm: 39248.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6627.538 ops/s
[info]                  ·gc.alloc.rate:               178.795 MB/sec
[info]                  ·gc.alloc.rate.norm:          42441.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 121482.330 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 6728.063 ops/s
[info]                  ·gc.alloc.rate:      247.449 MB/sec
[info]                  ·gc.alloc.rate.norm: 57882.183 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   6823.059 ±(99.9%) 530.366 ops/s [Average]
[info]   (min, avg, max) = (6627.538, 6823.059, 6932.206), stdev = 137.734
[info]   CI (99.9%): [6292.693, 7353.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   190.474 ±(99.9%) 123.376 MB/sec [Average]
[info]   (min, avg, max) = (172.716, 190.474, 247.449), stdev = 32.040
[info]   CI (99.9%): [67.098, 313.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   43996.592 ±(99.9%) 30341.611 B/op [Average]
[info]   (min, avg, max) = (39248.062, 43996.592, 57882.183), stdev = 7879.620
[info]   CI (99.9%): [13654.981, 74338.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   204.667 ±(99.9%) 1079.148 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.667, 511.773), stdev = 280.251
[info]   CI (99.9%): [≈ 0, 1283.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   47625.156 ±(99.9%) 251200.095 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47625.156, 121482.330), stdev = 65235.867
[info]   CI (99.9%): [≈ 0, 298825.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.356 ±(99.9%) 3.061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.356, 1.778), stdev = 0.795
[info]   CI (99.9%): [≈ 0, 3.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 2.490
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 66.05% complete, ETA 00:39:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 469.651 ops/s
[info] # Warmup Iteration   2: 4001.133 ops/s
[info] # Warmup Iteration   3: 7799.105 ops/s
[info] # Warmup Iteration   4: 9343.236 ops/s
[info] # Warmup Iteration   5: 8832.817 ops/s
[info] Iteration   1: 9138.983 ops/s
[info]                  ·gc.alloc.rate:               1918.758 MB/sec
[info]                  ·gc.alloc.rate.norm:          330436.336 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1996.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 343904.480 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     16.000 ms
[info] Iteration   2: 9264.909 ops/s
[info]                  ·gc.alloc.rate:                   1941.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              329839.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     339115.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 801.744 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 9441.567 ops/s
[info]                  ·gc.alloc.rate:                   1982.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              330450.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     331906.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.241 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40.231 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 9000.408 ops/s
[info]                  ·gc.alloc.rate:                   1989.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              347830.551 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     348108.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.283 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 224.435 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 9442.995 ops/s
[info]                  ·gc.alloc.rate:                   1988.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              331395.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     332189.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.113 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.754 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   9257.772 ±(99.9%) 741.901 ops/s [Average]
[info]   (min, avg, max) = (9000.408, 9257.772, 9442.995), stdev = 192.669
[info]   CI (99.9%): [8515.871, 9999.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1964.208 ±(99.9%) 123.740 MB/sec [Average]
[info]   (min, avg, max) = (1918.758, 1964.208, 1989.159), stdev = 32.135
[info]   CI (99.9%): [1840.468, 2087.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   333990.362 ±(99.9%) 29869.212 B/op [Average]
[info]   (min, avg, max) = (329839.170, 333990.362, 347830.551), stdev = 7756.939
[info]   CI (99.9%): [304121.150, 363859.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1993.789 ±(99.9%) 11.045 MB/sec [Average]
[info]   (min, avg, max) = (1990.747, 1993.789, 1996.964), stdev = 2.868
[info]   CI (99.9%): [1982.744, 2004.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   339044.846 ±(99.9%) 27479.718 B/op [Average]
[info]   (min, avg, max) = (331906.562, 339044.846, 348108.129), stdev = 7136.396
[info]   CI (99.9%): [311565.128, 366524.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.271 ±(99.9%) 7.680 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.271, 4.720), stdev = 1.995
[info]   CI (99.9%): [≈ 0, 8.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   217.033 ±(99.9%) 1305.275 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 217.033, 801.744), stdev = 338.976
[info]   CI (99.9%): [≈ 0, 1522.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.800, 16.000), stdev = 4.970
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 66.28% complete, ETA 00:39:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.796 ops/s
[info] # Warmup Iteration   2: 14632.271 ops/s
[info] # Warmup Iteration   3: 18521.383 ops/s
[info] # Warmup Iteration   4: 18564.749 ops/s
[info] # Warmup Iteration   5: 18542.093 ops/s
[info] Iteration   1: 18608.979 ops/s
[info]                  ·gc.alloc.rate:               476.641 MB/sec
[info]                  ·gc.alloc.rate.norm:          40300.515 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55944.335 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 17971.450 ops/s
[info]                  ·gc.alloc.rate:               573.728 MB/sec
[info]                  ·gc.alloc.rate.norm:          50233.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57930.120 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 17715.159 ops/s
[info]                  ·gc.alloc.rate:      505.610 MB/sec
[info]                  ·gc.alloc.rate.norm: 44917.898 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 17022.635 ops/s
[info]                  ·gc.alloc.rate:               438.747 MB/sec
[info]                  ·gc.alloc.rate.norm:          40567.228 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61248.023 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 17915.381 ops/s
[info]                  ·gc.alloc.rate:                   455.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              40003.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58198.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.829 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   17846.721 ±(99.9%) 2193.292 ops/s [Average]
[info]   (min, avg, max) = (17022.635, 17846.721, 18608.979), stdev = 569.591
[info]   CI (99.9%): [15653.429, 20040.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   490.018 ±(99.9%) 204.295 MB/sec [Average]
[info]   (min, avg, max) = (438.747, 490.018, 573.728), stdev = 53.055
[info]   CI (99.9%): [285.723, 694.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   43204.396 ±(99.9%) 17001.520 B/op [Average]
[info]   (min, avg, max) = (40003.043, 43204.396, 50233.298), stdev = 4415.241
[info]   CI (99.9%): [26202.876, 60205.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   529.641 ±(99.9%) 1140.092 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 529.641, 662.488), stdev = 296.078
[info]   CI (99.9%): [≈ 0, 1669.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   46664.286 ±(99.9%) 100713.439 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46664.286, 61248.023), stdev = 26154.960
[info]   CI (99.9%): [≈ 0, 147377.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.366 ±(99.9%) 3.149 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.366, 1.829), stdev = 0.818
[info]   CI (99.9%): [≈ 0, 3.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 66.51% complete, ETA 00:39:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1042.498 ops/s
[info] # Warmup Iteration   2: 11206.174 ops/s
[info] # Warmup Iteration   3: 14672.975 ops/s
[info] # Warmup Iteration   4: 14756.912 ops/s
[info] # Warmup Iteration   5: 14669.761 ops/s
[info] Iteration   1: 14654.531 ops/s
[info]                  ·gc.alloc.rate:                   402.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              43178.862 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71142.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.707 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14693.000 ops/s
[info]                  ·gc.alloc.rate:      390.257 MB/sec
[info]                  ·gc.alloc.rate.norm: 41800.029 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 14633.235 ops/s
[info]                  ·gc.alloc.rate:               406.977 MB/sec
[info]                  ·gc.alloc.rate.norm:          43758.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71244.711 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 14224.533 ops/s
[info]                  ·gc.alloc.rate:      488.670 MB/sec
[info]                  ·gc.alloc.rate.norm: 54066.330 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 14670.227 ops/s
[info]                  ·gc.alloc.rate:               407.479 MB/sec
[info]                  ·gc.alloc.rate.norm:          43714.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71141.376 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   14575.105 ±(99.9%) 759.308 ops/s [Average]
[info]   (min, avg, max) = (14224.533, 14575.105, 14693.000), stdev = 197.190
[info]   CI (99.9%): [13815.797, 15334.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   419.093 ±(99.9%) 152.131 MB/sec [Average]
[info]   (min, avg, max) = (390.257, 419.093, 488.670), stdev = 39.508
[info]   CI (99.9%): [266.962, 571.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   45303.796 ±(99.9%) 19106.833 B/op [Average]
[info]   (min, avg, max) = (41800.029, 45303.796, 54066.330), stdev = 4961.984
[info]   CI (99.9%): [26196.963, 64410.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   397.644 ±(99.9%) 1397.774 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 397.644, 663.129), stdev = 362.998
[info]   CI (99.9%): [≈ 0, 1795.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   42705.746 ±(99.9%) 150116.800 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42705.746, 71244.711), stdev = 38984.856
[info]   CI (99.9%): [≈ 0, 192822.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.341 ±(99.9%) 11.549 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.341, 6.707), stdev = 2.999
[info]   CI (99.9%): [≈ 0, 12.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 66.74% complete, ETA 00:38:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6559.361 ops/s
[info] # Warmup Iteration   2: 20360.413 ops/s
[info] # Warmup Iteration   3: 23601.395 ops/s
[info] # Warmup Iteration   4: 22324.685 ops/s
[info] # Warmup Iteration   5: 22623.336 ops/s
[info] Iteration   1: 21622.084 ops/s
[info]                  ·gc.alloc.rate:                   566.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              41217.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48680.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.972 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 143.534 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 23721.123 ops/s
[info]                  ·gc.alloc.rate:      438.114 MB/sec
[info]                  ·gc.alloc.rate.norm: 29060.995 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 23490.557 ops/s
[info]                  ·gc.alloc.rate:                   450.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              30189.509 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44808.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99.036 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 22237.892 ops/s
[info]                  ·gc.alloc.rate:               420.747 MB/sec
[info]                  ·gc.alloc.rate.norm:          29764.217 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47334.666 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 23255.212 ops/s
[info]                  ·gc.alloc.rate:      428.453 MB/sec
[info]                  ·gc.alloc.rate.norm: 28990.212 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   22865.374 ±(99.9%) 3451.989 ops/s [Average]
[info]   (min, avg, max) = (21622.084, 22865.374, 23721.123), stdev = 896.471
[info]   CI (99.9%): [19413.384, 26317.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   460.876 ±(99.9%) 230.931 MB/sec [Average]
[info]   (min, avg, max) = (420.747, 460.876, 566.259), stdev = 59.972
[info]   CI (99.9%): [229.945, 691.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   31844.420 ±(99.9%) 20267.001 B/op [Average]
[info]   (min, avg, max) = (28990.212, 31844.420, 41217.165), stdev = 5263.276
[info]   CI (99.9%): [11577.419, 52111.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   401.405 ±(99.9%) 1410.994 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 401.405, 669.122), stdev = 366.431
[info]   CI (99.9%): [≈ 0, 1812.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   28164.741 ±(99.9%) 99147.646 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28164.741, 48680.769), stdev = 25748.329
[info]   CI (99.9%): [≈ 0, 127312.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.690 ±(99.9%) 3.700 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.690, 1.972), stdev = 0.961
[info]   CI (99.9%): [≈ 0, 4.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   48.514 ±(99.9%) 262.876 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48.514, 143.534), stdev = 68.268
[info]   CI (99.9%): [≈ 0, 311.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 2.049
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 66.97% complete, ETA 00:38:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97.795 ops/s
[info] # Warmup Iteration   2: 1789.764 ops/s
[info] # Warmup Iteration   3: 5761.918 ops/s
[info] # Warmup Iteration   4: 6144.924 ops/s
[info] # Warmup Iteration   5: 6325.401 ops/s
[info] Iteration   1: 6350.349 ops/s
[info]                  ·gc.alloc.rate:                   2494.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              617994.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     662128.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 647.418 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 6414.068 ops/s
[info]                  ·gc.alloc.rate:                   2519.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              618049.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     491274.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.072 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 6459.850 ops/s
[info]                  ·gc.alloc.rate:                   2549.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              621047.401 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     651120.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.932 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 6350.372 ops/s
[info]                  ·gc.alloc.rate:                   2507.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              621366.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     663696.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.476 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 6420.018 ops/s
[info]                  ·gc.alloc.rate:               2534.274 MB/sec
[info]                  ·gc.alloc.rate.norm:          621221.101 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 493509.960 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   6398.931 ±(99.9%) 183.696 ops/s [Average]
[info]   (min, avg, max) = (6350.349, 6398.931, 6459.850), stdev = 47.705
[info]   CI (99.9%): [6215.236, 6582.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2520.778 ±(99.9%) 83.376 MB/sec [Average]
[info]   (min, avg, max) = (2494.196, 2520.778, 2549.093), stdev = 21.653
[info]   CI (99.9%): [2437.401, 2604.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   619935.837 ±(99.9%) 6741.198 B/op [Average]
[info]   (min, avg, max) = (617994.470, 619935.837, 621366.306), stdev = 1750.668
[info]   CI (99.9%): [613194.639, 626677.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2407.709 ±(99.9%) 1405.844 MB/sec [Average]
[info]   (min, avg, max) = (2002.325, 2407.709, 2678.102), stdev = 365.093
[info]   CI (99.9%): [1001.865, 3813.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   592345.910 ±(99.9%) 351858.976 B/op [Average]
[info]   (min, avg, max) = (491274.853, 592345.910, 663696.443), stdev = 91376.659
[info]   CI (99.9%): [240486.934, 944204.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.631 ±(99.9%) 4.287 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.631, 2.613), stdev = 1.113
[info]   CI (99.9%): [≈ 0, 4.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   155.980 ±(99.9%) 1062.765 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 155.980, 647.418), stdev = 275.997
[info]   CI (99.9%): [≈ 0, 1218.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 11.000), stdev = 2.490
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 67.21% complete, ETA 00:38:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1331.565 ops/s
[info] # Warmup Iteration   2: 9340.464 ops/s
[info] # Warmup Iteration   3: 10986.488 ops/s
[info] # Warmup Iteration   4: 12253.769 ops/s
[info] # Warmup Iteration   5: 12102.957 ops/s
[info] Iteration   1: 12339.349 ops/s
[info]                  ·gc.alloc.rate:                   2254.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              287490.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1979.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     252458.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108.855 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 12016.028 ops/s
[info]                  ·gc.alloc.rate:                   2222.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              291092.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1978.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     259133.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.985 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 12115.078 ops/s
[info]                  ·gc.alloc.rate:                   2209.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              287094.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1980.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     257255.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.704 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 12093.147 ops/s
[info]                  ·gc.alloc.rate:                   2216.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              288467.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2649.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     344844.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.640 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 11691.445 ops/s
[info]                  ·gc.alloc.rate:                   2498.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              336117.691 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     268689.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.802 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   12051.009 ±(99.9%) 902.092 ops/s [Average]
[info]   (min, avg, max) = (11691.445, 12051.009, 12339.349), stdev = 234.271
[info]   CI (99.9%): [11148.917, 12953.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   2280.226 ±(99.9%) 473.339 MB/sec [Average]
[info]   (min, avg, max) = (2209.983, 2280.226, 2498.027), stdev = 122.925
[info]   CI (99.9%): [1806.887, 2753.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   298052.575 ±(99.9%) 82157.340 B/op [Average]
[info]   (min, avg, max) = (287094.627, 298052.575, 336117.691), stdev = 21336.000
[info]   CI (99.9%): [215895.235, 380209.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2116.965 ±(99.9%) 1147.212 MB/sec [Average]
[info]   (min, avg, max) = (1978.505, 2116.965, 2649.740), stdev = 297.927
[info]   CI (99.9%): [969.753, 3264.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   276476.279 ±(99.9%) 148909.284 B/op [Average]
[info]   (min, avg, max) = (252458.563, 276476.279, 344844.190), stdev = 38671.268
[info]   CI (99.9%): [127566.995, 425385.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.279 ±(99.9%) 1.429 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.279, 0.853), stdev = 0.371
[info]   CI (99.9%): [≈ 0, 1.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   35.997 ±(99.9%) 182.810 B/op [Average]
[info]   (min, avg, max) = (2.704, 35.997, 108.855), stdev = 47.475
[info]   CI (99.9%): [≈ 0, 218.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 67.44% complete, ETA 00:37:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.643 ops/s
[info] # Warmup Iteration   2: 48842.414 ops/s
[info] # Warmup Iteration   3: 68697.011 ops/s
[info] # Warmup Iteration   4: 69326.037 ops/s
[info] # Warmup Iteration   5: 70338.285 ops/s
[info] Iteration   1: 70341.776 ops/s
[info]                  ·gc.alloc.rate:               686.570 MB/sec
[info]                  ·gc.alloc.rate.norm:          15358.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14807.617 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 70466.294 ops/s
[info]                  ·gc.alloc.rate:                   676.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              15104.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14803.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.526 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 70581.316 ops/s
[info]                  ·gc.alloc.rate:               672.510 MB/sec
[info]                  ·gc.alloc.rate.norm:          14994.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14780.183 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 68310.437 ops/s
[info]                  ·gc.alloc.rate:                   659.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              15196.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15278.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 70596.803 ops/s
[info]                  ·gc.alloc.rate:               678.646 MB/sec
[info]                  ·gc.alloc.rate.norm:          15129.336 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14783.840 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   70059.325 ±(99.9%) 3785.288 ops/s [Average]
[info]   (min, avg, max) = (68310.437, 70059.325, 70596.803), stdev = 983.027
[info]   CI (99.9%): [66274.037, 73844.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   674.733 ±(99.9%) 38.180 MB/sec [Average]
[info]   (min, avg, max) = (659.562, 674.733, 686.570), stdev = 9.915
[info]   CI (99.9%): [636.553, 712.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   15156.646 ±(99.9%) 517.587 B/op [Average]
[info]   (min, avg, max) = (14994.408, 15156.646, 15358.705), stdev = 134.416
[info]   CI (99.9%): [14639.058, 15674.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   662.809 ±(99.9%) 1.925 MB/sec [Average]
[info]   (min, avg, max) = (661.935, 662.809, 663.149), stdev = 0.500
[info]   CI (99.9%): [660.883, 664.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   14890.848 ±(99.9%) 836.203 B/op [Average]
[info]   (min, avg, max) = (14780.183, 14890.848, 15278.720), stdev = 217.159
[info]   CI (99.9%): [14054.645, 15727.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.005 ±(99.9%) 0.040 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.024), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.115 ±(99.9%) 0.889 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.115, 0.526), stdev = 0.231
[info]   CI (99.9%): [≈ 0, 1.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 67.67% complete, ETA 00:37:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6220.597 ops/s
[info] # Warmup Iteration   2: 41972.056 ops/s
[info] # Warmup Iteration   3: 46522.903 ops/s
[info] # Warmup Iteration   4: 43788.784 ops/s
[info] # Warmup Iteration   5: 45883.447 ops/s
[info] Iteration   1: 45799.259 ops/s
[info]                  ·gc.alloc.rate:               669.761 MB/sec
[info]                  ·gc.alloc.rate.norm:          23015.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22766.266 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 45709.372 ops/s
[info]                  ·gc.alloc.rate:               684.751 MB/sec
[info]                  ·gc.alloc.rate.norm:          23577.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22811.087 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 45841.355 ops/s
[info]                  ·gc.alloc.rate:                   678.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              23279.747 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22790.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.715 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 45382.561 ops/s
[info]                  ·gc.alloc.rate:               666.684 MB/sec
[info]                  ·gc.alloc.rate.norm:          23120.253 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23021.128 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 45335.621 ops/s
[info]                  ·gc.alloc.rate:                   668.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              23222.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23089.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.723 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   45613.634 ±(99.9%) 915.623 ops/s [Average]
[info]   (min, avg, max) = (45335.621, 45613.634, 45841.355), stdev = 237.784
[info]   CI (99.9%): [44698.011, 46529.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   673.644 ±(99.9%) 29.099 MB/sec [Average]
[info]   (min, avg, max) = (666.684, 673.644, 684.751), stdev = 7.557
[info]   CI (99.9%): [644.546, 702.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23243.047 ±(99.9%) 817.350 B/op [Average]
[info]   (min, avg, max) = (23015.576, 23243.047, 23577.161), stdev = 212.263
[info]   CI (99.9%): [22425.697, 24060.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   663.554 ±(99.9%) 4.216 MB/sec [Average]
[info]   (min, avg, max) = (662.501, 663.554, 665.117), stdev = 1.095
[info]   CI (99.9%): [659.338, 667.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   22895.669 ±(99.9%) 571.544 B/op [Average]
[info]   (min, avg, max) = (22766.266, 22895.669, 23089.206), stdev = 148.428
[info]   CI (99.9%): [22324.125, 23467.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.287 ±(99.9%) 1.516 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.287, 0.723), stdev = 0.394
[info]   CI (99.9%): [≈ 0, 1.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 67.90% complete, ETA 00:37:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29005.186 ops/s
[info] # Warmup Iteration   2: 111183.671 ops/s
[info] # Warmup Iteration   3: 99593.532 ops/s
[info] # Warmup Iteration   4: 122314.041 ops/s
[info] # Warmup Iteration   5: 115809.120 ops/s
[info] Iteration   1: 122640.319 ops/s
[info]                  ·gc.alloc.rate:                   952.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              12220.583 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17166.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.313 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 121546.175 ops/s
[info]                  ·gc.alloc.rate:               951.063 MB/sec
[info]                  ·gc.alloc.rate.norm:          12314.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8660.357 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 119876.267 ops/s
[info]                  ·gc.alloc.rate:                   922.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              12115.337 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8780.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.405 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 122567.943 ops/s
[info]                  ·gc.alloc.rate:               965.967 MB/sec
[info]                  ·gc.alloc.rate.norm:          12403.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17184.722 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 122891.080 ops/s
[info]                  ·gc.alloc.rate:               941.507 MB/sec
[info]                  ·gc.alloc.rate.norm:          12057.818 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8574.116 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   121904.357 ±(99.9%) 4792.874 ops/s [Average]
[info]   (min, avg, max) = (119876.267, 121904.357, 122891.080), stdev = 1244.694
[info]   CI (99.9%): [117111.483, 126697.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   946.728 ±(99.9%) 61.524 MB/sec [Average]
[info]   (min, avg, max) = (922.778, 946.728, 965.967), stdev = 15.978
[info]   CI (99.9%): [885.204, 1008.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   12222.477 ±(99.9%) 544.615 B/op [Average]
[info]   (min, avg, max) = (12057.818, 12222.477, 12403.857), stdev = 141.435
[info]   CI (99.9%): [11677.862, 12767.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   936.632 ±(99.9%) 1410.927 MB/sec [Average]
[info]   (min, avg, max) = (668.802, 936.632, 1338.283), stdev = 366.413
[info]   CI (99.9%): [≈ 0, 2347.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   12073.309 ±(99.9%) 17937.568 B/op [Average]
[info]   (min, avg, max) = (8574.116, 12073.309, 17184.722), stdev = 4658.329
[info]   CI (99.9%): [≈ 0, 30010.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.059 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.031), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.144 ±(99.9%) 0.767 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.144, 0.405), stdev = 0.199
[info]   CI (99.9%): [≈ 0, 0.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 2.191
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 68.13% complete, ETA 00:37:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64479.138 ops/s
[info] # Warmup Iteration   2: 124285.576 ops/s
[info] # Warmup Iteration   3: 126647.151 ops/s
[info] # Warmup Iteration   4: 132489.289 ops/s
[info] # Warmup Iteration   5: 138114.914 ops/s
[info] Iteration   1: 124689.205 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 137838.472 ops/s
[info]                  ·gc.alloc.rate:      1.048 MB/sec
[info]                  ·gc.alloc.rate.norm: 11.963 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 137619.182 ops/s
[info]                  ·gc.alloc.rate:      5.279 MB/sec
[info]                  ·gc.alloc.rate.norm: 60.372 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 132605.537 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 115104.110 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   129571.301 ±(99.9%) 37306.339 ops/s [Average]
[info]   (min, avg, max) = (115104.110, 129571.301, 137838.472), stdev = 9688.338
[info]   CI (99.9%): [92264.963, 166877.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.266 ±(99.9%) 8.815 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.266, 5.279), stdev = 2.289
[info]   CI (99.9%): [≈ 0, 10.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   14.469 ±(99.9%) 100.801 B/op [Average]
[info]   (min, avg, max) = (0.003, 14.469, 60.372), stdev = 26.178
[info]   CI (99.9%): [≈ 0, 115.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 68.36% complete, ETA 00:36:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 700.597 ops/s
[info] # Warmup Iteration   2: 6005.873 ops/s
[info] # Warmup Iteration   3: 8750.489 ops/s
[info] # Warmup Iteration   4: 8901.885 ops/s
[info] # Warmup Iteration   5: 9142.603 ops/s
[info] Iteration   1: 8876.553 ops/s
[info]                  ·gc.alloc.rate:                   2343.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              415481.813 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     474268.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.207 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 391.238 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 9166.669 ops/s
[info]                  ·gc.alloc.rate:                   2378.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              408346.980 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     344455.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.614 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105.428 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 9220.808 ops/s
[info]                  ·gc.alloc.rate:                   2399.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              409774.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     456812.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.106 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 9272.706 ops/s
[info]                  ·gc.alloc.rate:                   2410.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              409094.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     341366.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.533 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 9300.699 ops/s
[info]                  ·gc.alloc.rate:               2430.789 MB/sec
[info]                  ·gc.alloc.rate.norm:          411328.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2688.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 454912.688 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   9167.487 ±(99.9%) 656.597 ops/s [Average]
[info]   (min, avg, max) = (8876.553, 9167.487, 9300.699), stdev = 170.516
[info]   CI (99.9%): [8510.890, 9824.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2392.570 ±(99.9%) 128.475 MB/sec [Average]
[info]   (min, avg, max) = (2343.407, 2392.570, 2430.789), stdev = 33.364
[info]   CI (99.9%): [2264.096, 2521.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   410805.320 ±(99.9%) 10921.042 B/op [Average]
[info]   (min, avg, max) = (408346.980, 410805.320, 415481.813), stdev = 2836.160
[info]   CI (99.9%): [399884.277, 421726.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2411.246 ±(99.9%) 1414.577 MB/sec [Average]
[info]   (min, avg, max) = (2006.269, 2411.246, 2688.354), stdev = 367.361
[info]   CI (99.9%): [996.669, 3825.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   414363.078 ±(99.9%) 252873.638 B/op [Average]
[info]   (min, avg, max) = (341366.602, 414363.078, 474268.633), stdev = 65670.481
[info]   CI (99.9%): [161489.440, 667236.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.577 ±(99.9%) 3.646 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.577, 2.207), stdev = 0.947
[info]   CI (99.9%): [≈ 0, 4.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   101.461 ±(99.9%) 646.557 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 101.461, 391.238), stdev = 167.909
[info]   CI (99.9%): [≈ 0, 748.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 9.000), stdev = 1.643
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 68.59% complete, ETA 00:36:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 607013.241 ops/s
[info] # Warmup Iteration   2: 9508017.130 ops/s
[info] # Warmup Iteration   3: 13587196.017 ops/s
[info] # Warmup Iteration   4: 13461674.677 ops/s
[info] # Warmup Iteration   5: 13714499.892 ops/s
[info] Iteration   1: 13544822.138 ops/s
[info]                  ·gc.alloc.rate:                   5983.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              695.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5394.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     626.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 13758908.404 ops/s
[info]                  ·gc.alloc.rate:                   6119.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              699.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          6100.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     697.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 13825577.348 ops/s
[info]                  ·gc.alloc.rate:                   6146.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              699.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          6116.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     696.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 13914157.928 ops/s
[info]                  ·gc.alloc.rate:                   6158.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5444.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     615.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 13868671.347 ops/s
[info]                  ·gc.alloc.rate:                   6167.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              699.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:          6128.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     695.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   13782427.433 ±(99.9%) 556888.426 ops/s [Average]
[info]   (min, avg, max) = (13544822.138, 13782427.433, 13914157.928), stdev = 144622.156
[info]   CI (99.9%): [13225539.007, 14339315.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   6115.133 ±(99.9%) 291.282 MB/sec [Average]
[info]   (min, avg, max) = (5983.592, 6115.133, 6167.190), stdev = 75.645
[info]   CI (99.9%): [5823.851, 6406.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   698.210 ±(99.9%) 8.292 B/op [Average]
[info]   (min, avg, max) = (695.254, 698.210, 699.756), stdev = 2.153
[info]   CI (99.9%): [689.918, 706.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   5836.700 ±(99.9%) 1469.384 MB/sec [Average]
[info]   (min, avg, max) = (5394.260, 5836.700, 6128.414), stdev = 381.594
[info]   CI (99.9%): [4367.316, 7306.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   666.340 ±(99.9%) 159.056 B/op [Average]
[info]   (min, avg, max) = (615.821, 666.340, 697.530), stdev = 41.306
[info]   CI (99.9%): [507.285, 825.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.050, 0.062), stdev = 0.011
[info]   CI (99.9%): [0.006, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.006, 0.007), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   43.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 11.200, 13.000), stdev = 1.095
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 68.82% complete, ETA 00:36:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.619 ops/s
[info] # Warmup Iteration   2: 34101291.064 ops/s
[info] # Warmup Iteration   3: 39786561.736 ops/s
[info] # Warmup Iteration   4: 37126445.699 ops/s
[info] # Warmup Iteration   5: 37095338.352 ops/s
[info] Iteration   1: 37129577.864 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 37134450.145 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 36860788.696 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 37126775.853 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 37105010.041 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   37071320.520 ±(99.9%) 455261.074 ops/s [Average]
[info]   (min, avg, max) = (36860788.696, 37071320.520, 37134450.145), stdev = 118229.855
[info]   CI (99.9%): [36616059.446, 37526581.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 69.05% complete, ETA 00:36:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 366776.031 ops/s
[info] # Warmup Iteration   2: 17542876.141 ops/s
[info] # Warmup Iteration   3: 20836970.961 ops/s
[info] # Warmup Iteration   4: 26957449.776 ops/s
[info] # Warmup Iteration   5: 20667074.285 ops/s
[info] Iteration   1: 24443304.580 ops/s
[info]                  ·gc.alloc.rate:      0.153 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 23609130.071 ops/s
[info]                  ·gc.alloc.rate:      0.086 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 20832914.984 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 26940212.277 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 20620896.483 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   23289291.679 ±(99.9%) 10172804.949 ops/s [Average]
[info]   (min, avg, max) = (20620896.483, 23289291.679, 26940212.277), stdev = 2641845.140
[info]   CI (99.9%): [13116486.731, 33462096.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   0.048 ±(99.9%) 0.268 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.048, 0.153), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.003, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 69.28% complete, ETA 00:35:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11536793.109 ops/s
[info] # Warmup Iteration   2: 44104592.450 ops/s
[info] # Warmup Iteration   3: 40467584.033 ops/s
[info] # Warmup Iteration   4: 47649866.316 ops/s
[info] # Warmup Iteration   5: 34874458.293 ops/s
[info] Iteration   1: 46189463.256 ops/s
[info]                  ·gc.alloc.rate:      0.126 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 34839318.658 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 34824565.174 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 42933386.576 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 34846969.803 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   38726740.694 ±(99.9%) 20983337.076 ops/s [Average]
[info]   (min, avg, max) = (34824565.174, 38726740.694, 46189463.256), stdev = 5449306.003
[info]   CI (99.9%): [17743403.618, 59710077.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   0.025 ±(99.9%) 0.217 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.025, 0.126), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 69.52% complete, ETA 00:35:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9766356.070 ops/s
[info] # Warmup Iteration   2: 29100298.458 ops/s
[info] # Warmup Iteration   3: 30677054.828 ops/s
[info] # Warmup Iteration   4: 31417909.903 ops/s
[info] # Warmup Iteration   5: 31453784.046 ops/s
[info] Iteration   1: 31540581.110 ops/s
[info]                  ·gc.alloc.rate:               820.206 MB/sec
[info]                  ·gc.alloc.rate.norm:          40.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.423 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 29094345.892 ops/s
[info]                  ·gc.alloc.rate:               763.707 MB/sec
[info]                  ·gc.alloc.rate.norm:          41.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36.234 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 30305737.450 ops/s
[info]                  ·gc.alloc.rate:               800.631 MB/sec
[info]                  ·gc.alloc.rate.norm:          41.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34.802 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 31357684.749 ops/s
[info]                  ·gc.alloc.rate:                   817.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              41.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 31561913.063 ops/s
[info]                  ·gc.alloc.rate:               826.273 MB/sec
[info]                  ·gc.alloc.rate.norm:          41.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.451 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   30772052.453 ±(99.9%) 4124698.560 ops/s [Average]
[info]   (min, avg, max) = (29094345.892, 30772052.453, 31561913.063), stdev = 1071171.118
[info]   CI (99.9%): [26647353.892, 34896751.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   805.718 ±(99.9%) 97.578 MB/sec [Average]
[info]   (min, avg, max) = (763.707, 805.718, 826.273), stdev = 25.341
[info]   CI (99.9%): [708.140, 903.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   41.211 ±(99.9%) 0.984 B/op [Average]
[info]   (min, avg, max) = (40.914, 41.211, 41.579), stdev = 0.256
[info]   CI (99.9%): [40.227, 42.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   670.182 ±(99.9%) 1.406 MB/sec [Average]
[info]   (min, avg, max) = (669.816, 670.182, 670.791), stdev = 0.365
[info]   CI (99.9%): [668.776, 671.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   34.309 ±(99.9%) 4.686 B/op [Average]
[info]   (min, avg, max) = (33.423, 34.309, 36.234), stdev = 1.217
[info]   CI (99.9%): [29.623, 38.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 69.75% complete, ETA 00:35:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 625600.622 ops/s
[info] # Warmup Iteration   2: 19550236.978 ops/s
[info] # Warmup Iteration   3: 26521751.857 ops/s
[info] # Warmup Iteration   4: 26509479.851 ops/s
[info] # Warmup Iteration   5: 26539379.652 ops/s
[info] Iteration   1: 26520681.464 ops/s
[info]                  ·gc.alloc.rate:      0.666 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.040 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 26520599.078 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 26545094.830 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 26529089.938 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 26354061.189 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   26493905.300 ±(99.9%) 303470.216 ops/s [Average]
[info]   (min, avg, max) = (26354061.189, 26493905.300, 26545094.830), stdev = 78810.251
[info]   CI (99.9%): [26190435.083, 26797375.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   0.133 ±(99.9%) 1.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   0.008 ±(99.9%) 0.068 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.008, 0.040), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 69.98% complete, ETA 00:34:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1813911.946 ops/s
[info] # Warmup Iteration   2: 20141183.863 ops/s
[info] # Warmup Iteration   3: 21897954.446 ops/s
[info] # Warmup Iteration   4: 22376147.130 ops/s
[info] # Warmup Iteration   5: 21458644.797 ops/s
[info] Iteration   1: 21836020.702 ops/s
[info]                  ·gc.alloc.rate:                   1711.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              123.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 22244451.982 ops/s
[info]                  ·gc.alloc.rate:                   1750.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              123.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.286 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 22333475.679 ops/s
[info]                  ·gc.alloc.rate:                   1743.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              122.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 22376365.034 ops/s
[info]                  ·gc.alloc.rate:                   1759.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              123.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 22435722.946 ops/s
[info]                  ·gc.alloc.rate:                   1763.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              123.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   22245207.269 ±(99.9%) 920787.342 ops/s [Average]
[info]   (min, avg, max) = (21836020.702, 22245207.269, 22435722.946), stdev = 239125.549
[info]   CI (99.9%): [21324419.927, 23165994.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   1745.776 ±(99.9%) 79.885 MB/sec [Average]
[info]   (min, avg, max) = (1711.491, 1745.776, 1763.961), stdev = 20.746
[info]   CI (99.9%): [1665.891, 1825.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   123.504 ±(99.9%) 1.603 B/op [Average]
[info]   (min, avg, max) = (122.848, 123.504, 123.874), stdev = 0.416
[info]   CI (99.9%): [121.901, 125.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1737.448 ±(99.9%) 1406.961 MB/sec [Average]
[info]   (min, avg, max) = (1336.312, 1737.448, 2008.782), stdev = 365.383
[info]   CI (99.9%): [330.487, 3144.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   122.789 ±(99.9%) 96.705 B/op [Average]
[info]   (min, avg, max) = (94.169, 122.789, 142.126), stdev = 25.114
[info]   CI (99.9%): [26.085, 219.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.841 ±(99.9%) 6.889 MB/sec [Average]
[info]   (min, avg, max) = (0.018, 0.841, 4.041), stdev = 1.789
[info]   CI (99.9%): [≈ 0, 7.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.059 ±(99.9%) 0.487 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.059, 0.286), stdev = 0.127
[info]   CI (99.9%): [≈ 0, 0.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 9.000), stdev = 2.828
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 70.21% complete, ETA 00:34:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.553 ops/s
[info] # Warmup Iteration   2: 57037942.386 ops/s
[info] # Warmup Iteration   3: 60815802.046 ops/s
[info] # Warmup Iteration   4: 61749485.102 ops/s
[info] # Warmup Iteration   5: 61676239.334 ops/s
[info] Iteration   1: 61272123.181 ops/s
[info]                  ·gc.alloc.rate:                   1286.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 61795040.266 ops/s
[info]                  ·gc.alloc.rate:                   1299.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 61280112.300 ops/s
[info]                  ·gc.alloc.rate:               1314.260 MB/sec
[info]                  ·gc.alloc.rate.norm:          33.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34.217 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 62061649.864 ops/s
[info]                  ·gc.alloc.rate:                   1279.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 62041668.079 ops/s
[info]                  ·gc.alloc.rate:                   1293.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   61690118.738 ±(99.9%) 1510434.909 ops/s [Average]
[info]   (min, avg, max) = (61272123.181, 61690118.738, 62061649.864), stdev = 392255.149
[info]   CI (99.9%): [60179683.829, 63200553.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1294.733 ±(99.9%) 50.477 MB/sec [Average]
[info]   (min, avg, max) = (1279.865, 1294.733, 1314.260), stdev = 13.109
[info]   CI (99.9%): [1244.256, 1345.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   33.031 ±(99.9%) 1.824 B/op [Average]
[info]   (min, avg, max) = (32.456, 33.031, 33.745), stdev = 0.474
[info]   CI (99.9%): [31.207, 34.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1198.366 ±(99.9%) 1144.910 MB/sec [Average]
[info]   (min, avg, max) = (666.489, 1198.366, 1332.641), stdev = 297.329
[info]   CI (99.9%): [53.456, 2343.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   30.592 ±(99.9%) 29.478 B/op [Average]
[info]   (min, avg, max) = (16.901, 30.592, 34.217), stdev = 7.655
[info]   CI (99.9%): [1.113, 60.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   1.074 ±(99.9%) 8.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.074, 5.130), stdev = 2.269
[info]   CI (99.9%): [≈ 0, 9.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.027 ±(99.9%) 0.222 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.130), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 8.000), stdev = 2.191
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 70.44% complete, ETA 00:34:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1001978.195 ops/s
[info] # Warmup Iteration   2: 12237097.166 ops/s
[info] # Warmup Iteration   3: 27666528.571 ops/s
[info] # Warmup Iteration   4: 27956877.588 ops/s
[info] # Warmup Iteration   5: 26090304.498 ops/s
[info] Iteration   1: 27082700.312 ops/s
[info]                  ·gc.alloc.rate:               565.718 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38.693 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 22855812.114 ops/s
[info]                  ·gc.alloc.rate:      464.918 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 25086211.349 ops/s
[info]                  ·gc.alloc.rate:               532.763 MB/sec
[info]                  ·gc.alloc.rate.norm:          33.422 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41.750 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 26499707.717 ops/s
[info]                  ·gc.alloc.rate:                   579.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              34.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 25772699.885 ops/s
[info]                  ·gc.alloc.rate:               543.138 MB/sec
[info]                  ·gc.alloc.rate.norm:          33.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40.560 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   25459426.276 ±(99.9%) 6307726.325 ops/s [Average]
[info]   (min, avg, max) = (22855812.114, 25459426.276, 27082700.312), stdev = 1638096.495
[info]   CI (99.9%): [19151699.951, 31767152.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   537.215 ±(99.9%) 170.967 MB/sec [Average]
[info]   (min, avg, max) = (464.918, 537.215, 579.536), stdev = 44.400
[info]   CI (99.9%): [366.247, 708.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   33.176 ±(99.9%) 3.381 B/op [Average]
[info]   (min, avg, max) = (32.000, 33.176, 34.420), stdev = 0.878
[info]   CI (99.9%): [29.795, 36.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   532.221 ±(99.9%) 1145.648 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.221, 665.867), stdev = 297.521
[info]   CI (99.9%): [≈ 0, 1677.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   32.105 ±(99.9%) 69.250 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.105, 41.750), stdev = 17.984
[info]   CI (99.9%): [≈ 0, 101.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 70.67% complete, ETA 00:34:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11361431.853 ops/s
[info] # Warmup Iteration   2: 46872630.031 ops/s
[info] # Warmup Iteration   3: 50435450.676 ops/s
[info] # Warmup Iteration   4: 52430219.989 ops/s
[info] # Warmup Iteration   5: 51975454.316 ops/s
[info] Iteration   1: 51071187.702 ops/s
[info]                  ·gc.alloc.rate:               1058.359 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20.612 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 51344272.099 ops/s
[info]                  ·gc.alloc.rate:                   1086.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 52109565.863 ops/s
[info]                  ·gc.alloc.rate:                   1102.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.304 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 50528020.786 ops/s
[info]                  ·gc.alloc.rate:               1044.848 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20.873 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 51568500.421 ops/s
[info]                  ·gc.alloc.rate:                   1086.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40.916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   51324309.374 ±(99.9%) 2257477.259 ops/s [Average]
[info]   (min, avg, max) = (50528020.786, 51324309.374, 52109565.863), stdev = 586259.675
[info]   CI (99.9%): [49066832.115, 53581786.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1075.819 ±(99.9%) 90.700 MB/sec [Average]
[info]   (min, avg, max) = (1044.848, 1075.819, 1102.710), stdev = 23.554
[info]   CI (99.9%): [985.119, 1166.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.981 ±(99.9%) 1.455 B/op [Average]
[info]   (min, avg, max) = (32.532, 32.981, 33.304), stdev = 0.378
[info]   CI (99.9%): [31.526, 34.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1071.594 ±(99.9%) 1412.964 MB/sec [Average]
[info]   (min, avg, max) = (668.867, 1071.594, 1340.658), stdev = 366.942
[info]   CI (99.9%): [≈ 0, 2484.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   32.774 ±(99.9%) 42.301 B/op [Average]
[info]   (min, avg, max) = (20.612, 32.774, 41.025), stdev = 10.985
[info]   CI (99.9%): [≈ 0, 75.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.785 ±(99.9%) 6.740 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.785, 3.916), stdev = 1.750
[info]   CI (99.9%): [≈ 0, 7.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.024 ±(99.9%) 0.206 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.120), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.588
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 70.90% complete, ETA 00:33:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15570119.541 ops/s
[info] # Warmup Iteration   2: 64941424.782 ops/s
[info] # Warmup Iteration   3: 65596777.615 ops/s
[info] # Warmup Iteration   4: 65567061.093 ops/s
[info] # Warmup Iteration   5: 65603954.417 ops/s
[info] Iteration   1: 65565137.262 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 65560722.427 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 65610371.470 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 63361641.399 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 65594302.994 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   65138435.110 ±(99.9%) 3825502.173 ops/s [Average]
[info]   (min, avg, max) = (63361641.399, 65138435.110, 65610371.470), stdev = 993470.766
[info]   CI (99.9%): [61312932.937, 68963937.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 71.13% complete, ETA 00:33:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7380135.094 ops/s
[info] # Warmup Iteration   2: 24503125.944 ops/s
[info] # Warmup Iteration   3: 26097306.250 ops/s
[info] # Warmup Iteration   4: 26710379.261 ops/s
[info] # Warmup Iteration   5: 26312546.249 ops/s
[info] Iteration   1: 26634657.279 ops/s
[info]                  ·gc.alloc.rate:                   2085.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              123.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.158 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 26885376.794 ops/s
[info]                  ·gc.alloc.rate:                   2104.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              123.193 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 26863423.747 ops/s
[info]                  ·gc.alloc.rate:                   2114.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              123.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 26866862.377 ops/s
[info]                  ·gc.alloc.rate:                   2101.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              123.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 26877587.260 ops/s
[info]                  ·gc.alloc.rate:               2129.791 MB/sec
[info]                  ·gc.alloc.rate.norm:          124.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017.055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118.111 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   26825581.491 ±(99.9%) 412343.921 ops/s [Average]
[info]   (min, avg, max) = (26634657.279, 26825581.491, 26885376.794), stdev = 107084.407
[info]   CI (99.9%): [26413237.571, 27237925.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2107.345 ±(99.9%) 62.650 MB/sec [Average]
[info]   (min, avg, max) = (2085.714, 2107.345, 2129.791), stdev = 16.270
[info]   CI (99.9%): [2044.695, 2169.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   123.629 ±(99.9%) 2.591 B/op [Average]
[info]   (min, avg, max) = (123.130, 123.629, 124.712), stdev = 0.673
[info]   CI (99.9%): [121.038, 126.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   2016.404 ±(99.9%) 6.514 MB/sec [Average]
[info]   (min, avg, max) = (2014.809, 2016.404, 2019.012), stdev = 1.692
[info]   CI (99.9%): [2009.890, 2022.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   118.296 ±(99.9%) 2.183 B/op [Average]
[info]   (min, avg, max) = (117.997, 118.296, 119.307), stdev = 0.567
[info]   CI (99.9%): [116.114, 120.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.598 ±(99.9%) 4.493 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.598, 2.678), stdev = 1.167
[info]   CI (99.9%): [≈ 0, 5.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.035 ±(99.9%) 0.266 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.158), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 71.36% complete, ETA 00:33:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 193601.882 ops/s
[info] # Warmup Iteration   2: 1920073.190 ops/s
[info] # Warmup Iteration   3: 3686900.122 ops/s
[info] # Warmup Iteration   4: 3732644.715 ops/s
[info] # Warmup Iteration   5: 3655673.822 ops/s
[info] Iteration   1: 3701743.869 ops/s
[info]                  ·gc.alloc.rate:                   1527.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              649.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     563.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3696851.505 ops/s
[info]                  ·gc.alloc.rate:                   1544.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              657.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     564.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3736343.634 ops/s
[info]                  ·gc.alloc.rate:                   1530.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              644.301 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     559.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.175 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3609790.859 ops/s
[info]                  ·gc.alloc.rate:                   1509.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              657.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     869.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3664102.630 ops/s
[info]                  ·gc.alloc.rate:                   1498.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              643.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     573.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   3681766.499 ±(99.9%) 183642.024 ops/s [Average]
[info]   (min, avg, max) = (3609790.859, 3681766.499, 3736343.634), stdev = 47691.250
[info]   CI (99.9%): [3498124.476, 3865408.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1521.911 ±(99.9%) 69.351 MB/sec [Average]
[info]   (min, avg, max) = (1498.486, 1521.911, 1544.166), stdev = 18.010
[info]   CI (99.9%): [1452.561, 1591.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   650.444 ±(99.9%) 26.055 B/op [Average]
[info]   (min, avg, max) = (643.677, 650.444, 657.685), stdev = 6.766
[info]   CI (99.9%): [624.389, 676.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1462.512 ±(99.9%) 1147.245 MB/sec [Average]
[info]   (min, avg, max) = (1325.955, 1462.512, 1995.447), stdev = 297.936
[info]   CI (99.9%): [315.267, 2609.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   626.216 ±(99.9%) 523.905 B/op [Average]
[info]   (min, avg, max) = (559.789, 626.216, 869.447), stdev = 136.057
[info]   CI (99.9%): [102.311, 1150.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.162 ±(99.9%) 0.725 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.162, 0.417), stdev = 0.188
[info]   CI (99.9%): [≈ 0, 0.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.069 ±(99.9%) 0.308 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.069, 0.175), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 71.59% complete, ETA 00:33:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49623.448 ops/s
[info] # Warmup Iteration   2: 168437.657 ops/s
[info] # Warmup Iteration   3: 179607.014 ops/s
[info] # Warmup Iteration   4: 194025.115 ops/s
[info] # Warmup Iteration   5: 195911.226 ops/s
[info] Iteration   1: 196743.268 ops/s
[info]                  ·gc.alloc.rate:                   3715.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              29724.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4007.709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32059.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.333 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 196922.396 ops/s
[info]                  ·gc.alloc.rate:                   3745.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              29933.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3354.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26805.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.333 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 196692.974 ops/s
[info]                  ·gc.alloc.rate:               3769.268 MB/sec
[info]                  ·gc.alloc.rate.norm:          30159.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4041.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32339.404 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 196812.853 ops/s
[info]                  ·gc.alloc.rate:                   3745.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              29949.480 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3379.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27025.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.333 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 196852.157 ops/s
[info]                  ·gc.alloc.rate:                   3747.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              29961.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3388.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27090.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.166 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   196804.730 ±(99.9%) 346.705 ops/s [Average]
[info]   (min, avg, max) = (196692.974, 196804.730, 196922.396), stdev = 90.038
[info]   CI (99.9%): [196458.025, 197151.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3744.650 ±(99.9%) 73.339 MB/sec [Average]
[info]   (min, avg, max) = (3715.743, 3744.650, 3769.268), stdev = 19.046
[info]   CI (99.9%): [3671.311, 3817.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29945.471 ±(99.9%) 593.597 B/op [Average]
[info]   (min, avg, max) = (29724.289, 29945.471, 30159.299), stdev = 154.155
[info]   CI (99.9%): [29351.875, 30539.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   3634.327 ±(99.9%) 1373.938 MB/sec [Average]
[info]   (min, avg, max) = (3354.080, 3634.327, 4041.735), stdev = 356.807
[info]   CI (99.9%): [2260.389, 5008.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   29064.180 ±(99.9%) 11035.718 B/op [Average]
[info]   (min, avg, max) = (26805.130, 29064.180, 32339.404), stdev = 2865.941
[info]   CI (99.9%): [18028.463, 40099.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.233 ±(99.9%) 0.573 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.233, 0.333), stdev = 0.149
[info]   CI (99.9%): [≈ 0, 0.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 0.837
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 71.82% complete, ETA 00:32:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2054.986 ops/s
[info] # Warmup Iteration   2: 24660.968 ops/s
[info] # Warmup Iteration   3: 44758.342 ops/s
[info] # Warmup Iteration   4: 43118.894 ops/s
[info] # Warmup Iteration   5: 42846.001 ops/s
[info] Iteration   1: 45318.316 ops/s
[info]                  ·gc.alloc.rate:                   2817.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              97845.423 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92839.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.351 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 46545.200 ops/s
[info]                  ·gc.alloc.rate:                   2878.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              97331.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3344.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113069.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.112 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 45507.361 ops/s
[info]                  ·gc.alloc.rate:                   2818.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              97486.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92776.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.600 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 46618.165 ops/s
[info]                  ·gc.alloc.rate:                   2872.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              96945.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90812.866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.703 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 46642.587 ops/s
[info]                  ·gc.alloc.rate:               2913.595 MB/sec
[info]                  ·gc.alloc.rate.norm:          98311.226 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2697.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 91011.452 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   46126.326 ±(99.9%) 2524.951 ops/s [Average]
[info]   (min, avg, max) = (45318.316, 46126.326, 46642.587), stdev = 655.722
[info]   CI (99.9%): [43601.374, 48651.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2860.185 ±(99.9%) 159.861 MB/sec [Average]
[info]   (min, avg, max) = (2817.382, 2860.185, 2913.595), stdev = 41.515
[info]   CI (99.9%): [2700.324, 3020.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   97584.007 ±(99.9%) 1999.540 B/op [Average]
[info]   (min, avg, max) = (96945.104, 97584.007, 98311.226), stdev = 519.274
[info]   CI (99.9%): [95584.466, 99583.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2817.597 ±(99.9%) 1133.730 MB/sec [Average]
[info]   (min, avg, max) = (2673.231, 2817.597, 3344.035), stdev = 294.426
[info]   CI (99.9%): [1683.867, 3951.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   96101.896 ±(99.9%) 36707.663 B/op [Average]
[info]   (min, avg, max) = (90812.866, 96101.896, 113069.801), stdev = 9532.863
[info]   CI (99.9%): [59394.234, 132809.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.137 ±(99.9%) 0.795 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.137, 0.500), stdev = 0.206
[info]   CI (99.9%): [≈ 0, 0.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.753 ±(99.9%) 27.634 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.753, 17.351), stdev = 7.177
[info]   CI (99.9%): [≈ 0, 32.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72.06% complete, ETA 00:32:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28712.456 ops/s
[info] # Warmup Iteration   2: 151447.801 ops/s
[info] # Warmup Iteration   3: 207264.761 ops/s
[info] # Warmup Iteration   4: 228527.593 ops/s
[info] # Warmup Iteration   5: 233398.967 ops/s
[info] Iteration   1: 233240.191 ops/s
[info]                  ·gc.alloc.rate:               849.784 MB/sec
[info]                  ·gc.alloc.rate.norm:          5732.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4470.279 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 233438.141 ops/s
[info]                  ·gc.alloc.rate:                   875.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              5899.383 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8942.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 231730.181 ops/s
[info]                  ·gc.alloc.rate:               838.120 MB/sec
[info]                  ·gc.alloc.rate.norm:          5692.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4512.665 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 227804.466 ops/s
[info]                  ·gc.alloc.rate:               827.146 MB/sec
[info]                  ·gc.alloc.rate.norm:          5714.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4590.802 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 226536.813 ops/s
[info]                  ·gc.alloc.rate:               823.940 MB/sec
[info]                  ·gc.alloc.rate.norm:          5721.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4625.669 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   230549.958 ±(99.9%) 12270.048 ops/s [Average]
[info]   (min, avg, max) = (226536.813, 230549.958, 233438.141), stdev = 3186.492
[info]   CI (99.9%): [218279.910, 242820.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   842.828 ±(99.9%) 79.803 MB/sec [Average]
[info]   (min, avg, max) = (823.940, 842.828, 875.151), stdev = 20.725
[info]   CI (99.9%): [763.026, 922.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5752.104 ±(99.9%) 322.174 B/op [Average]
[info]   (min, avg, max) = (5692.098, 5752.104, 5899.383), stdev = 83.668
[info]   CI (99.9%): [5429.930, 6074.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   796.843 ±(99.9%) 1140.174 MB/sec [Average]
[info]   (min, avg, max) = (662.632, 796.843, 1326.517), stdev = 296.100
[info]   CI (99.9%): [≈ 0, 1937.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5428.290 ±(99.9%) 7567.310 B/op [Average]
[info]   (min, avg, max) = (4470.279, 5428.290, 8942.035), stdev = 1965.206
[info]   CI (99.9%): [≈ 0, 12995.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.242 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.140), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72.29% complete, ETA 00:32:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 153912.213 ops/s
[info] # Warmup Iteration   2: 450197.381 ops/s
[info] # Warmup Iteration   3: 480169.726 ops/s
[info] # Warmup Iteration   4: 531397.548 ops/s
[info] # Warmup Iteration   5: 533429.854 ops/s
[info] Iteration   1: 532444.211 ops/s
[info]                  ·gc.alloc.rate:               984.909 MB/sec
[info]                  ·gc.alloc.rate.norm:          2910.970 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3953.629 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 521211.113 ops/s
[info]                  ·gc.alloc.rate:               953.928 MB/sec
[info]                  ·gc.alloc.rate.norm:          2880.384 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2021.571 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 504684.435 ops/s
[info]                  ·gc.alloc.rate:                   916.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              2856.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2087.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 526606.586 ops/s
[info]                  ·gc.alloc.rate:               993.349 MB/sec
[info]                  ·gc.alloc.rate.norm:          2968.795 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4001.788 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 527508.421 ops/s
[info]                  ·gc.alloc.rate:                   958.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              2860.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1998.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.627 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   522490.953 ±(99.9%) 41288.656 ops/s [Average]
[info]   (min, avg, max) = (504684.435, 522490.953, 532444.211), stdev = 10722.533
[info]   CI (99.9%): [481202.297, 563779.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   961.378 ±(99.9%) 117.074 MB/sec [Average]
[info]   (min, avg, max) = (916.001, 961.378, 993.349), stdev = 30.404
[info]   CI (99.9%): [844.304, 1078.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2895.429 ±(99.9%) 178.406 B/op [Average]
[info]   (min, avg, max) = (2856.505, 2895.429, 2968.795), stdev = 46.331
[info]   CI (99.9%): [2717.023, 3073.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.084 ±(99.9%) 1410.456 MB/sec [Average]
[info]   (min, avg, max) = (669.447, 937.084, 1338.984), stdev = 366.291
[info]   CI (99.9%): [≈ 0, 2347.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2812.621 ±(99.9%) 4097.909 B/op [Average]
[info]   (min, avg, max) = (1998.478, 2812.621, 4001.788), stdev = 1064.214
[info]   CI (99.9%): [≈ 0, 6910.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.649 ±(99.9%) 5.548 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.649, 3.227), stdev = 1.441
[info]   CI (99.9%): [≈ 0, 6.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.938 ±(99.9%) 16.551 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.938, 9.627), stdev = 4.298
[info]   CI (99.9%): [≈ 0, 18.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 72.52% complete, ETA 00:32:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 176600.246 ops/s
[info] # Warmup Iteration   2: 428104.168 ops/s
[info] # Warmup Iteration   3: 560653.220 ops/s
[info] # Warmup Iteration   4: 558739.505 ops/s
[info] # Warmup Iteration   5: 561623.028 ops/s
[info] Iteration   1: 565604.434 ops/s
[info]                  ·gc.alloc.rate:      391.005 MB/sec
[info]                  ·gc.alloc.rate.norm: 1088.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 566787.818 ops/s
[info]                  ·gc.alloc.rate:                   412.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              1146.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1855.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 574172.398 ops/s
[info]                  ·gc.alloc.rate:      402.907 MB/sec
[info]                  ·gc.alloc.rate.norm: 1104.397 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 562306.100 ops/s
[info]                  ·gc.alloc.rate:               404.057 MB/sec
[info]                  ·gc.alloc.rate.norm:          1130.937 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1870.070 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 543633.826 ops/s
[info]                  ·gc.alloc.rate:      375.828 MB/sec
[info]                  ·gc.alloc.rate.norm: 1088.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   562500.915 ±(99.9%) 43914.136 ops/s [Average]
[info]   (min, avg, max) = (543633.826, 562500.915, 574172.398), stdev = 11404.362
[info]   CI (99.9%): [518586.779, 606415.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   397.347 ±(99.9%) 55.207 MB/sec [Average]
[info]   (min, avg, max) = (375.828, 397.347, 412.935), stdev = 14.337
[info]   CI (99.9%): [342.139, 452.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1111.584 ±(99.9%) 101.213 B/op [Average]
[info]   (min, avg, max) = (1088.001, 1111.584, 1146.585), stdev = 26.285
[info]   CI (99.9%): [1010.371, 1212.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   267.262 ±(99.9%) 1409.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 267.262, 668.175), stdev = 365.963
[info]   CI (99.9%): [≈ 0, 1676.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   745.074 ±(99.9%) 3928.612 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 745.074, 1870.070), stdev = 1020.248
[info]   CI (99.9%): [≈ 0, 4673.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.100 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.058), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 72.75% complete, ETA 00:31:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4510.028 ops/s
[info] # Warmup Iteration   2: 58171.447 ops/s
[info] # Warmup Iteration   3: 77633.123 ops/s
[info] # Warmup Iteration   4: 76802.876 ops/s
[info] # Warmup Iteration   5: 86846.561 ops/s
[info] Iteration   1: 86853.108 ops/s
[info]                  ·gc.alloc.rate:               1446.585 MB/sec
[info]                  ·gc.alloc.rate.norm:          26212.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24190.665 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 88607.934 ops/s
[info]                  ·gc.alloc.rate:                   1451.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              25775.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23723.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.370 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 88515.011 ops/s
[info]                  ·gc.alloc.rate:                   1480.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              26325.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35663.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.352 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 88618.628 ops/s
[info]                  ·gc.alloc.rate:                   1450.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              25767.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23755.451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.176 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 88714.848 ops/s
[info]                  ·gc.alloc.rate:                   1447.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              25675.995 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23731.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.477 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   88261.906 ±(99.9%) 3044.760 ops/s [Average]
[info]   (min, avg, max) = (86853.108, 88261.906, 88714.848), stdev = 790.714
[info]   CI (99.9%): [85217.146, 91306.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1455.409 ±(99.9%) 55.157 MB/sec [Average]
[info]   (min, avg, max) = (1446.585, 1455.409, 1480.770), stdev = 14.324
[info]   CI (99.9%): [1400.251, 1510.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   25951.467 ±(99.9%) 1137.089 B/op [Average]
[info]   (min, avg, max) = (25675.995, 25951.467, 26325.299), stdev = 295.298
[info]   CI (99.9%): [24814.378, 27088.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1470.453 ±(99.9%) 1152.949 MB/sec [Average]
[info]   (min, avg, max) = (1334.982, 1470.453, 2006.062), stdev = 299.417
[info]   CI (99.9%): [317.504, 2623.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   26212.981 ±(99.9%) 20358.149 B/op [Average]
[info]   (min, avg, max) = (23723.439, 26212.981, 35663.997), stdev = 5286.947
[info]   CI (99.9%): [5854.832, 46571.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.421 ±(99.9%) 2.805 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.421, 1.707), stdev = 0.728
[info]   CI (99.9%): [≈ 0, 3.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.475 ±(99.9%) 49.872 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.475, 30.352), stdev = 12.951
[info]   CI (99.9%): [≈ 0, 57.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.673
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 72.98% complete, ETA 00:31:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77943.472 ops/s
[info] # Warmup Iteration   2: 327645.756 ops/s
[info] # Warmup Iteration   3: 420940.382 ops/s
[info] # Warmup Iteration   4: 423832.970 ops/s
[info] # Warmup Iteration   5: 416928.376 ops/s
[info] Iteration   1: 421446.484 ops/s
[info]                  ·gc.alloc.rate:                   3032.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              11324.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2652.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9906.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.855 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 427425.085 ops/s
[info]                  ·gc.alloc.rate:                   3115.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              11470.207 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3317.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12215.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 397398.381 ops/s
[info]                  ·gc.alloc.rate:                   3012.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              11931.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10555.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.348 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.337 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 415051.464 ops/s
[info]                  ·gc.alloc.rate:                   3009.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              11411.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3347.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12694.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.158 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 416565.771 ops/s
[info]                  ·gc.alloc.rate:                   3023.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              11421.297 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10158.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   415577.437 ±(99.9%) 43332.322 ops/s [Average]
[info]   (min, avg, max) = (397398.381, 415577.437, 427425.085), stdev = 11253.266
[info]   CI (99.9%): [372245.115, 458909.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   3038.639 ±(99.9%) 168.344 MB/sec [Average]
[info]   (min, avg, max) = (3009.355, 3038.639, 3115.121), stdev = 43.718
[info]   CI (99.9%): [2870.295, 3206.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   11511.875 ±(99.9%) 925.834 B/op [Average]
[info]   (min, avg, max) = (11324.636, 11511.875, 11931.621), stdev = 240.436
[info]   CI (99.9%): [10586.041, 12437.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2934.428 ±(99.9%) 1401.106 MB/sec [Average]
[info]   (min, avg, max) = (2652.708, 2934.428, 3347.596), stdev = 363.863
[info]   CI (99.9%): [1533.322, 4335.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11105.898 ±(99.9%) 4868.963 B/op [Average]
[info]   (min, avg, max) = (9906.026, 11105.898, 12694.236), stdev = 1264.454
[info]   CI (99.9%): [6236.935, 15974.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.332 ±(99.9%) 2.212 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.332, 1.348), stdev = 0.574
[info]   CI (99.9%): [≈ 0, 2.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.301 ±(99.9%) 8.778 B/op [Average]
[info]   (min, avg, max) = (0.077, 1.301, 5.337), stdev = 2.280
[info]   CI (99.9%): [≈ 0, 10.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.21% complete, ETA 00:31:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32547.412 ops/s
[info] # Warmup Iteration   2: 559640.277 ops/s
[info] # Warmup Iteration   3: 761590.208 ops/s
[info] # Warmup Iteration   4: 859769.114 ops/s
[info] # Warmup Iteration   5: 840943.293 ops/s
[info] Iteration   1: 860894.973 ops/s
[info]                  ·gc.alloc.rate:                   1874.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              3426.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2434.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 841033.499 ops/s
[info]                  ·gc.alloc.rate:                   1841.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              3445.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3747.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.091 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 861493.420 ops/s
[info]                  ·gc.alloc.rate:                   1894.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              3458.936 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3666.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 860529.525 ops/s
[info]                  ·gc.alloc.rate:               1904.152 MB/sec
[info]                  ·gc.alloc.rate.norm:          3482.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3680.685 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 861398.319 ops/s
[info]                  ·gc.alloc.rate:                   1878.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              3433.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2455.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   857069.947 ±(99.9%) 34552.374 ops/s [Average]
[info]   (min, avg, max) = (841033.499, 857069.947, 861493.420), stdev = 8973.142
[info]   CI (99.9%): [822517.574, 891622.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1878.588 ±(99.9%) 92.428 MB/sec [Average]
[info]   (min, avg, max) = (1841.329, 1878.588, 1904.152), stdev = 24.003
[info]   CI (99.9%): [1786.160, 1971.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3449.337 ±(99.9%) 86.143 B/op [Average]
[info]   (min, avg, max) = (3426.434, 3449.337, 3482.605), stdev = 22.371
[info]   CI (99.9%): [3363.194, 3535.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1739.752 ±(99.9%) 1412.935 MB/sec [Average]
[info]   (min, avg, max) = (1331.672, 1739.752, 2012.454), stdev = 366.935
[info]   CI (99.9%): [326.817, 3152.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3197.002 ±(99.9%) 2646.010 B/op [Average]
[info]   (min, avg, max) = (2434.496, 3197.002, 3747.964), stdev = 687.160
[info]   CI (99.9%): [550.991, 5843.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.133 ±(99.9%) 0.970 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.583), stdev = 0.252
[info]   CI (99.9%): [≈ 0, 1.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.249 ±(99.9%) 1.816 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.249, 1.091), stdev = 0.472
[info]   CI (99.9%): [≈ 0, 2.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.44% complete, ETA 00:30:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 564850.996 ops/s
[info] # Warmup Iteration   2: 1616079.987 ops/s
[info] # Warmup Iteration   3: 1654917.752 ops/s
[info] # Warmup Iteration   4: 1664462.065 ops/s
[info] # Warmup Iteration   5: 1677943.026 ops/s
[info] Iteration   1: 1679944.816 ops/s
[info]                  ·gc.alloc.rate:               3372.024 MB/sec
[info]                  ·gc.alloc.rate.norm:          3159.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3345.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3133.993 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 1654399.913 ops/s
[info]                  ·gc.alloc.rate:                   3362.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              3198.720 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3354.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3190.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1665371.511 ops/s
[info]                  ·gc.alloc.rate:                   3384.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              3198.684 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3365.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3180.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1663023.592 ops/s
[info]                  ·gc.alloc.rate:                   3380.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              3199.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3377.780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3196.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 1677979.633 ops/s
[info]                  ·gc.alloc.rate:                   3410.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              3198.767 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3386.346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3176.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   1668143.893 ±(99.9%) 41239.844 ops/s [Average]
[info]   (min, avg, max) = (1654399.913, 1668143.893, 1679944.816), stdev = 10709.857
[info]   CI (99.9%): [1626904.049, 1709383.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3382.058 ±(99.9%) 69.307 MB/sec [Average]
[info]   (min, avg, max) = (3362.418, 3382.058, 3410.357), stdev = 17.999
[info]   CI (99.9%): [3312.750, 3451.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3190.933 ±(99.9%) 68.564 B/op [Average]
[info]   (min, avg, max) = (3159.085, 3190.933, 3199.407), stdev = 17.806
[info]   CI (99.9%): [3122.369, 3259.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   3365.867 ±(99.9%) 64.490 MB/sec [Average]
[info]   (min, avg, max) = (3345.241, 3365.867, 3386.346), stdev = 16.748
[info]   CI (99.9%): [3301.377, 3430.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3175.699 ±(99.9%) 94.965 B/op [Average]
[info]   (min, avg, max) = (3133.993, 3175.699, 3196.565), stdev = 24.662
[info]   CI (99.9%): [3080.735, 3270.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.059), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 9.000), stdev = 1.483
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73.67% complete, ETA 00:30:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9568.433 ops/s
[info] # Warmup Iteration   2: 118603.012 ops/s
[info] # Warmup Iteration   3: 186698.916 ops/s
[info] # Warmup Iteration   4: 190242.083 ops/s
[info] # Warmup Iteration   5: 191998.320 ops/s
[info] Iteration   1: 190963.147 ops/s
[info]                  ·gc.alloc.rate:                   4966.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              40918.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5377.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44311.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.515 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 188411.195 ops/s
[info]                  ·gc.alloc.rate:                   4900.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              40932.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4730.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39516.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.348 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 189679.496 ops/s
[info]                  ·gc.alloc.rate:                   4933.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              40935.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4746.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39387.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.345 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 185534.548 ops/s
[info]                  ·gc.alloc.rate:                   4854.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              41184.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4750.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40295.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.610 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 193106.055 ops/s
[info]                  ·gc.alloc.rate:                   5010.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              40838.772 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4755.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38757.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.679 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   189538.888 ±(99.9%) 10904.768 ops/s [Average]
[info]   (min, avg, max) = (185534.548, 189538.888, 193106.055), stdev = 2831.934
[info]   CI (99.9%): [178634.120, 200443.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4933.122 ±(99.9%) 229.910 MB/sec [Average]
[info]   (min, avg, max) = (4854.956, 4933.122, 5010.590), stdev = 59.707
[info]   CI (99.9%): [4703.213, 5163.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   40962.066 ±(99.9%) 502.934 B/op [Average]
[info]   (min, avg, max) = (40838.772, 40962.066, 41184.706), stdev = 130.610
[info]   CI (99.9%): [40459.132, 41465.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4872.192 ±(99.9%) 1088.923 MB/sec [Average]
[info]   (min, avg, max) = (4730.924, 4872.192, 5377.801), stdev = 282.790
[info]   CI (99.9%): [3783.269, 5961.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   40453.473 ±(99.9%) 8566.653 B/op [Average]
[info]   (min, avg, max) = (38757.021, 40453.473, 44311.054), stdev = 2224.733
[info]   CI (99.9%): [31886.820, 49020.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.320 ±(99.9%) 2.259 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.320, 1.369), stdev = 0.587
[info]   CI (99.9%): [≈ 0, 2.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.699 ±(99.9%) 19.189 B/op [Average]
[info]   (min, avg, max) = (0.345, 2.699, 11.610), stdev = 4.983
[info]   CI (99.9%): [≈ 0, 21.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.000, 11.000), stdev = 1.000
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 73.90% complete, ETA 00:30:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103818.255 ops/s
[info] # Warmup Iteration   2: 391339.830 ops/s
[info] # Warmup Iteration   3: 439152.049 ops/s
[info] # Warmup Iteration   4: 428341.758 ops/s
[info] # Warmup Iteration   5: 443125.601 ops/s
[info] Iteration   1: 451531.206 ops/s
[info]                  ·gc.alloc.rate:               1484.336 MB/sec
[info]                  ·gc.alloc.rate.norm:          5173.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4657.789 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 448291.746 ops/s
[info]                  ·gc.alloc.rate:                   1458.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              5122.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4696.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 452610.875 ops/s
[info]                  ·gc.alloc.rate:                   1472.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              5119.138 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4653.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.111 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.297 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 453864.357 ops/s
[info]                  ·gc.alloc.rate:                   1475.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              5116.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4629.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.505 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 450111.778 ops/s
[info]                  ·gc.alloc.rate:                   1486.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              5196.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4658.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   451281.992 ±(99.9%) 8349.687 ops/s [Average]
[info]   (min, avg, max) = (448291.746, 451281.992, 453864.357), stdev = 2168.387
[info]   CI (99.9%): [442932.305, 459631.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1475.489 ±(99.9%) 42.309 MB/sec [Average]
[info]   (min, avg, max) = (1458.966, 1475.489, 1486.460), stdev = 10.988
[info]   CI (99.9%): [1433.180, 1517.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5145.643 ±(99.9%) 142.053 B/op [Average]
[info]   (min, avg, max) = (5116.612, 5145.643, 5196.344), stdev = 36.891
[info]   CI (99.9%): [5003.590, 5287.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1335.942 ±(99.9%) 8.728 MB/sec [Average]
[info]   (min, avg, max) = (1332.562, 1335.942, 1338.267), stdev = 2.267
[info]   CI (99.9%): [1327.214, 1344.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4659.037 ±(99.9%) 92.400 B/op [Average]
[info]   (min, avg, max) = (4629.199, 4659.037, 4696.209), stdev = 23.996
[info]   CI (99.9%): [4566.636, 4751.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.858 ±(99.9%) 7.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.858, 4.111), stdev = 1.820
[info]   CI (99.9%): [≈ 0, 7.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.982 ±(99.9%) 24.368 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.982, 14.297), stdev = 6.328
[info]   CI (99.9%): [≈ 0, 27.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 9.000), stdev = 3.050
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.13% complete, ETA 00:30:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 298393.972 ops/s
[info] # Warmup Iteration   2: 854322.546 ops/s
[info] # Warmup Iteration   3: 985275.738 ops/s
[info] # Warmup Iteration   4: 1009666.166 ops/s
[info] # Warmup Iteration   5: 1009751.537 ops/s
[info] Iteration   1: 1007562.445 ops/s
[info]                  ·gc.alloc.rate:                   481.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              751.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1031.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1007750.136 ops/s
[info]                  ·gc.alloc.rate:               480.493 MB/sec
[info]                  ·gc.alloc.rate.norm:          750.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1031.001 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 1009609.313 ops/s
[info]                  ·gc.alloc.rate:      467.009 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1008050.128 ops/s
[info]                  ·gc.alloc.rate:               480.682 MB/sec
[info]                  ·gc.alloc.rate.norm:          750.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1032.204 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1008228.939 ops/s
[info]                  ·gc.alloc.rate:                   479.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              747.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1032.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   1008240.192 ±(99.9%) 3110.595 ops/s [Average]
[info]   (min, avg, max) = (1007562.445, 1008240.192, 1009609.313), stdev = 807.812
[info]   CI (99.9%): [1005129.597, 1011350.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   477.698 ±(99.9%) 23.199 MB/sec [Average]
[info]   (min, avg, max) = (467.009, 477.698, 481.190), stdev = 6.025
[info]   CI (99.9%): [454.499, 500.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   745.683 ±(99.9%) 38.405 B/op [Average]
[info]   (min, avg, max) = (728.000, 745.683, 751.570), stdev = 9.974
[info]   CI (99.9%): [707.279, 784.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   528.524 ±(99.9%) 1137.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 528.524, 661.135), stdev = 295.454
[info]   CI (99.9%): [≈ 0, 1666.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   825.296 ±(99.9%) 1776.513 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 825.296, 1032.204), stdev = 461.355
[info]   CI (99.9%): [≈ 0, 2601.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.065), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.36% complete, ETA 00:29:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1427045.627 ops/s
[info] # Warmup Iteration   2: 2630231.965 ops/s
[info] # Warmup Iteration   3: 2758341.735 ops/s
[info] # Warmup Iteration   4: 2766133.996 ops/s
[info] # Warmup Iteration   5: 2696959.128 ops/s
[info] Iteration   1: 2770358.225 ops/s
[info]                  ·gc.alloc.rate:                   1318.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              749.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     760.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2700185.521 ops/s
[info]                  ·gc.alloc.rate:                   1291.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              752.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     780.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2768899.482 ops/s
[info]                  ·gc.alloc.rate:                   1321.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              751.179 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     762.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.870 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2774650.493 ops/s
[info]                  ·gc.alloc.rate:                   1323.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              750.550 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     759.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.472 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2790687.058 ops/s
[info]                  ·gc.alloc.rate:               1304.619 MB/sec
[info]                  ·gc.alloc.rate.norm:          735.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 377.172 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2760956.156 ±(99.9%) 134992.763 ops/s [Average]
[info]   (min, avg, max) = (2700185.521, 2760956.156, 2790687.058), stdev = 35057.192
[info]   CI (99.9%): [2625963.393, 2895948.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1311.886 ±(99.9%) 52.993 MB/sec [Average]
[info]   (min, avg, max) = (1291.107, 1311.886, 1323.152), stdev = 13.762
[info]   CI (99.9%): [1258.893, 1364.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   747.794 ±(99.9%) 26.715 B/op [Average]
[info]   (min, avg, max) = (735.580, 747.794, 752.543), stdev = 6.938
[info]   CI (99.9%): [721.079, 774.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1205.592 ±(99.9%) 1155.168 MB/sec [Average]
[info]   (min, avg, max) = (668.949, 1205.592, 1341.008), stdev = 299.994
[info]   CI (99.9%): [50.424, 2360.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   688.092 ±(99.9%) 670.121 B/op [Average]
[info]   (min, avg, max) = (377.172, 688.092, 780.851), stdev = 174.028
[info]   CI (99.9%): [17.972, 1358.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.835 ±(99.9%) 5.456 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.835, 3.290), stdev = 1.417
[info]   CI (99.9%): [≈ 0, 6.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.475 ±(99.9%) 3.100 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.475, 1.870), stdev = 0.805
[info]   CI (99.9%): [≈ 0, 3.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 5.000, 7.000), stdev = 2.828
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 74.60% complete, ETA 00:29:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1331346.398 ops/s
[info] # Warmup Iteration   2: 2738144.147 ops/s
[info] # Warmup Iteration   3: 2932457.343 ops/s
[info] # Warmup Iteration   4: 2959027.413 ops/s
[info] # Warmup Iteration   5: 2958310.294 ops/s
[info] Iteration   1: 2958453.246 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2959281.597 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2958508.321 ops/s
[info]                  ·gc.alloc.rate:      0.227 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.121 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2952814.839 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2952367.624 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2956285.125 ±(99.9%) 13059.857 ops/s [Average]
[info]   (min, avg, max) = (2952367.624, 2956285.125, 2959281.597), stdev = 3391.603
[info]   CI (99.9%): [2943225.268, 2969344.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.046 ±(99.9%) 0.390 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.046, 0.227), stdev = 0.101
[info]   CI (99.9%): [≈ 0, 0.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.024 ±(99.9%) 0.208 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.024, 0.121), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74.83% complete, ETA 00:29:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97354.818 ops/s
[info] # Warmup Iteration   2: 565559.536 ops/s
[info] # Warmup Iteration   3: 474452.426 ops/s
[info] # Warmup Iteration   4: 602333.990 ops/s
[info] # Warmup Iteration   5: 649143.320 ops/s
[info] Iteration   1: 690583.922 ops/s
[info]                  ·gc.alloc.rate:                   947.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              2158.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1510.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.095 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 675936.269 ops/s
[info]                  ·gc.alloc.rate:                   958.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              2230.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3077.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 681581.060 ops/s
[info]                  ·gc.alloc.rate:               957.696 MB/sec
[info]                  ·gc.alloc.rate.norm:          2210.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1529.023 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 665725.994 ops/s
[info]                  ·gc.alloc.rate:               926.465 MB/sec
[info]                  ·gc.alloc.rate.norm:          2189.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1565.445 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 664901.975 ops/s
[info]                  ·gc.alloc.rate:                   949.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              2247.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3136.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.305 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   675745.844 ±(99.9%) 41839.397 ops/s [Average]
[info]   (min, avg, max) = (664901.975, 675745.844, 690583.922), stdev = 10865.558
[info]   CI (99.9%): [633906.448, 717585.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   947.828 ±(99.9%) 49.811 MB/sec [Average]
[info]   (min, avg, max) = (926.465, 947.828, 958.432), stdev = 12.936
[info]   CI (99.9%): [898.016, 997.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2207.273 ±(99.9%) 133.692 B/op [Average]
[info]   (min, avg, max) = (2158.531, 2207.273, 2247.340), stdev = 34.719
[info]   CI (99.9%): [2073.581, 2340.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   927.039 ±(99.9%) 1394.813 MB/sec [Average]
[info]   (min, avg, max) = (662.348, 927.039, 1325.042), stdev = 362.228
[info]   CI (99.9%): [≈ 0, 2321.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2163.783 ±(99.9%) 3317.149 B/op [Average]
[info]   (min, avg, max) = (1510.580, 2163.783, 3136.399), stdev = 861.453
[info]   CI (99.9%): [≈ 0, 5480.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.887 ±(99.9%) 7.462 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.887, 4.354), stdev = 1.938
[info]   CI (99.9%): [≈ 0, 8.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.099 ±(99.9%) 17.665 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.099, 10.305), stdev = 4.587
[info]   CI (99.9%): [≈ 0, 19.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 10.000), stdev = 2.302
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 75.06% complete, ETA 00:29:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7985.101 ops/s
[info] # Warmup Iteration   2: 45145.778 ops/s
[info] # Warmup Iteration   3: 72478.847 ops/s
[info] # Warmup Iteration   4: 74234.707 ops/s
[info] # Warmup Iteration   5: 78131.662 ops/s
[info] Iteration   1: 79506.453 ops/s
[info]                  ·gc.alloc.rate:                   2312.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              45758.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39454.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.281 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84.735 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 77534.780 ops/s
[info]                  ·gc.alloc.rate:                   2253.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              45733.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2651.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53831.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.803 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 80025.610 ops/s
[info]                  ·gc.alloc.rate:                   2304.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              45320.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39132.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.492 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 79945.579 ops/s
[info]                  ·gc.alloc.rate:                   2341.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              46091.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39185.866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.328 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 80022.959 ops/s
[info]                  ·gc.alloc.rate:                   2356.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              46352.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2657.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52268.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.819 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   79407.076 ±(99.9%) 4114.629 ops/s [Average]
[info]   (min, avg, max) = (77534.780, 79407.076, 80025.610), stdev = 1068.556
[info]   CI (99.9%): [75292.447, 83521.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2313.537 ±(99.9%) 153.774 MB/sec [Average]
[info]   (min, avg, max) = (2253.058, 2313.537, 2356.749), stdev = 39.935
[info]   CI (99.9%): [2159.764, 2467.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   45851.462 ±(99.9%) 1507.728 B/op [Average]
[info]   (min, avg, max) = (45320.705, 45851.462, 46352.839), stdev = 391.552
[info]   CI (99.9%): [44343.734, 47359.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2256.684 ±(99.9%) 1399.301 MB/sec [Average]
[info]   (min, avg, max) = (1989.859, 2256.684, 2657.546), stdev = 363.394
[info]   CI (99.9%): [857.384, 3655.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   44774.586 ±(99.9%) 29170.642 B/op [Average]
[info]   (min, avg, max) = (39132.618, 44774.586, 53831.030), stdev = 7575.523
[info]   CI (99.9%): [15603.944, 73945.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.297 ±(99.9%) 6.924 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.297, 4.281), stdev = 1.798
[info]   CI (99.9%): [≈ 0, 8.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   25.635 ±(99.9%) 136.947 B/op [Average]
[info]   (min, avg, max) = (0.819, 25.635, 84.735), stdev = 35.565
[info]   CI (99.9%): [≈ 0, 162.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.800, 12.000), stdev = 3.194
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.29% complete, ETA 00:28:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6940.526 ops/s
[info] # Warmup Iteration   2: 60412.126 ops/s
[info] # Warmup Iteration   3: 90941.056 ops/s
[info] # Warmup Iteration   4: 102686.693 ops/s
[info] # Warmup Iteration   5: 103100.674 ops/s
[info] Iteration   1: 105883.646 ops/s
[info]                  ·gc.alloc.rate:                   1935.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              28761.461 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29730.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.928 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 105445.798 ops/s
[info]                  ·gc.alloc.rate:                   1914.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              28573.566 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29922.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.157 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 102631.854 ops/s
[info]                  ·gc.alloc.rate:                   1868.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              28657.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30803.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.192 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 102643.008 ops/s
[info]                  ·gc.alloc.rate:               1855.008 MB/sec
[info]                  ·gc.alloc.rate.norm:          28443.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20560.514 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 102591.289 ops/s
[info]                  ·gc.alloc.rate:                   1868.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              28649.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30903.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.319 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   103839.119 ±(99.9%) 6445.303 ops/s [Average]
[info]   (min, avg, max) = (102591.289, 103839.119, 105883.646), stdev = 1673.825
[info]   CI (99.9%): [97393.816, 110284.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1888.460 ±(99.9%) 133.512 MB/sec [Average]
[info]   (min, avg, max) = (1855.008, 1888.460, 1935.654), stdev = 34.673
[info]   CI (99.9%): [1754.948, 2021.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28617.006 ±(99.9%) 453.751 B/op [Average]
[info]   (min, avg, max) = (28443.442, 28617.006, 28761.461), stdev = 117.838
[info]   CI (99.9%): [28163.254, 29070.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1874.144 ±(99.9%) 1148.025 MB/sec [Average]
[info]   (min, avg, max) = (1340.904, 1874.144, 2015.381), stdev = 298.139
[info]   CI (99.9%): [726.119, 3022.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   28383.972 ±(99.9%) 16958.854 B/op [Average]
[info]   (min, avg, max) = (20560.514, 28383.972, 30903.289), stdev = 4404.161
[info]   CI (99.9%): [11425.118, 45342.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.275 ±(99.9%) 1.767 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.275, 1.082), stdev = 0.459
[info]   CI (99.9%): [≈ 0, 2.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.119 ±(99.9%) 26.353 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.119, 16.157), stdev = 6.844
[info]   CI (99.9%): [≈ 0, 30.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.140
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.52% complete, ETA 00:28:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33170.382 ops/s
[info] # Warmup Iteration   2: 112512.224 ops/s
[info] # Warmup Iteration   3: 157574.313 ops/s
[info] # Warmup Iteration   4: 160763.366 ops/s
[info] # Warmup Iteration   5: 162341.562 ops/s
[info] Iteration   1: 164260.759 ops/s
[info]                  ·gc.alloc.rate:                   2571.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              24638.490 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25606.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.992 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 165118.757 ops/s
[info]                  ·gc.alloc.rate:                   2579.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              24583.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19099.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.238 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.325 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 165519.420 ops/s
[info]                  ·gc.alloc.rate:                   2598.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              24701.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25342.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.815 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 165475.943 ops/s
[info]                  ·gc.alloc.rate:               2623.897 MB/sec
[info]                  ·gc.alloc.rate.norm:          24955.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2662.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25321.357 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 162389.049 ops/s
[info]                  ·gc.alloc.rate:                   2590.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              25104.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25851.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.404 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   164552.786 ±(99.9%) 5047.855 ops/s [Average]
[info]   (min, avg, max) = (162389.049, 164552.786, 165519.420), stdev = 1310.912
[info]   CI (99.9%): [159504.931, 169600.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2592.735 ±(99.9%) 77.622 MB/sec [Average]
[info]   (min, avg, max) = (2571.642, 2592.735, 2623.897), stdev = 20.158
[info]   CI (99.9%): [2515.113, 2670.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24796.481 ±(99.9%) 860.028 B/op [Average]
[info]   (min, avg, max) = (24583.332, 24796.481, 25104.539), stdev = 223.346
[info]   CI (99.9%): [23936.453, 25656.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2534.482 ±(99.9%) 1141.578 MB/sec [Average]
[info]   (min, avg, max) = (2004.192, 2534.482, 2672.659), stdev = 296.464
[info]   CI (99.9%): [1392.903, 3676.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   24244.394 ±(99.9%) 11105.597 B/op [Average]
[info]   (min, avg, max) = (19099.768, 24244.394, 25851.708), stdev = 2884.088
[info]   CI (99.9%): [13138.798, 35349.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.872 ±(99.9%) 4.053 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.872, 2.238), stdev = 1.053
[info]   CI (99.9%): [≈ 0, 4.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.307 ±(99.9%) 38.582 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.307, 21.325), stdev = 10.020
[info]   CI (99.9%): [≈ 0, 46.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.400, 13.000), stdev = 3.362
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75.75% complete, ETA 00:28:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 792.640 ops/s
[info] # Warmup Iteration   2: 20953.780 ops/s
[info] # Warmup Iteration   3: 43069.776 ops/s
[info] # Warmup Iteration   4: 43192.109 ops/s
[info] # Warmup Iteration   5: 44172.159 ops/s
[info] Iteration   1: 44585.314 ops/s
[info]                  ·gc.alloc.rate:                   2522.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              89029.207 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94341.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.072 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73.128 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 45470.118 ops/s
[info]                  ·gc.alloc.rate:                   2551.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              88324.275 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92588.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.323 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 45686.515 ops/s
[info]                  ·gc.alloc.rate:                   2553.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              87974.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69202.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.434 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 45589.228 ops/s
[info]                  ·gc.alloc.rate:                   2547.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              87942.552 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92697.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.875 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 45413.155 ops/s
[info]                  ·gc.alloc.rate:                   2577.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              89330.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2693.226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93337.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.721 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   45348.866 ±(99.9%) 1693.439 ops/s [Average]
[info]   (min, avg, max) = (44585.314, 45348.866, 45686.515), stdev = 439.781
[info]   CI (99.9%): [43655.428, 47042.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2550.699 ±(99.9%) 75.955 MB/sec [Average]
[info]   (min, avg, max) = (2522.177, 2550.699, 2577.607), stdev = 19.725
[info]   CI (99.9%): [2474.744, 2626.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   88520.147 ±(99.9%) 2424.889 B/op [Average]
[info]   (min, avg, max) = (87942.552, 88520.147, 89330.653), stdev = 629.736
[info]   CI (99.9%): [86095.258, 90945.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2547.130 ±(99.9%) 1159.115 MB/sec [Average]
[info]   (min, avg, max) = (2008.855, 2547.130, 2693.226), stdev = 301.018
[info]   CI (99.9%): [1388.016, 3706.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   88433.440 ±(99.9%) 41483.847 B/op [Average]
[info]   (min, avg, max) = (69202.069, 88433.440, 94341.741), stdev = 10773.223
[info]   CI (99.9%): [46949.593, 129917.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.468 ±(99.9%) 3.455 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.468, 2.072), stdev = 0.897
[info]   CI (99.9%): [≈ 0, 3.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   16.496 ±(99.9%) 122.021 B/op [Average]
[info]   (min, avg, max) = (0.721, 16.496, 73.128), stdev = 31.689
[info]   CI (99.9%): [≈ 0, 138.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 1.414
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.98% complete, ETA 00:27:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29079.959 ops/s
[info] # Warmup Iteration   2: 183892.989 ops/s
[info] # Warmup Iteration   3: 223060.501 ops/s
[info] # Warmup Iteration   4: 238969.749 ops/s
[info] # Warmup Iteration   5: 237691.885 ops/s
[info] Iteration   1: 232272.165 ops/s
[info]                  ·gc.alloc.rate:               1064.788 MB/sec
[info]                  ·gc.alloc.rate.norm:          7214.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1326.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8986.917 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 234875.017 ops/s
[info]                  ·gc.alloc.rate:                   1062.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              7120.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4448.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.279 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 237946.311 ops/s
[info]                  ·gc.alloc.rate:               1092.197 MB/sec
[info]                  ·gc.alloc.rate.norm:          7224.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8798.974 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 237277.366 ops/s
[info]                  ·gc.alloc.rate:               1067.896 MB/sec
[info]                  ·gc.alloc.rate.norm:          7083.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4420.540 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 230823.101 ops/s
[info]                  ·gc.alloc.rate:                   1071.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              7309.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9097.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.968 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   234638.792 ±(99.9%) 11886.890 ops/s [Average]
[info]   (min, avg, max) = (230823.101, 234638.792, 237946.311), stdev = 3086.988
[info]   CI (99.9%): [222751.902, 246525.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1071.952 ±(99.9%) 45.530 MB/sec [Average]
[info]   (min, avg, max) = (1062.919, 1071.952, 1092.197), stdev = 11.824
[info]   CI (99.9%): [1026.422, 1117.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   7190.477 ±(99.9%) 345.732 B/op [Average]
[info]   (min, avg, max) = (7083.262, 7190.477, 7309.428), stdev = 89.786
[info]   CI (99.9%): [6844.745, 7536.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1064.258 ±(99.9%) 1402.689 MB/sec [Average]
[info]   (min, avg, max) = (664.002, 1064.258, 1334.233), stdev = 364.274
[info]   CI (99.9%): [≈ 0, 2466.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7150.497 ±(99.9%) 9556.387 B/op [Average]
[info]   (min, avg, max) = (4420.540, 7150.497, 9097.791), stdev = 2481.763
[info]   CI (99.9%): [≈ 0, 16706.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.154 ±(99.9%) 1.239 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.154, 0.729), stdev = 0.322
[info]   CI (99.9%): [≈ 0, 1.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.049 ±(99.9%) 8.448 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.049, 4.968), stdev = 2.194
[info]   CI (99.9%): [≈ 0, 9.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 1.000
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.21% complete, ETA 00:27:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 114437.310 ops/s
[info] # Warmup Iteration   2: 405879.347 ops/s
[info] # Warmup Iteration   3: 571186.296 ops/s
[info] # Warmup Iteration   4: 576687.900 ops/s
[info] # Warmup Iteration   5: 582060.932 ops/s
[info] Iteration   1: 583734.007 ops/s
[info]                  ·gc.alloc.rate:                   662.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              1785.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1796.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.112 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 585111.602 ops/s
[info]                  ·gc.alloc.rate:               676.571 MB/sec
[info]                  ·gc.alloc.rate.norm:          1819.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1791.831 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 581420.184 ops/s
[info]                  ·gc.alloc.rate:                   657.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              1780.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1803.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.113 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 571812.580 ops/s
[info]                  ·gc.alloc.rate:               652.934 MB/sec
[info]                  ·gc.alloc.rate.norm:          1796.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1833.489 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 567505.448 ops/s
[info]                  ·gc.alloc.rate:                   648.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              1798.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1847.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   577916.764 ±(99.9%) 30045.914 ops/s [Average]
[info]   (min, avg, max) = (567505.448, 577916.764, 585111.602), stdev = 7802.828
[info]   CI (99.9%): [547870.850, 607962.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   659.661 ±(99.9%) 41.388 MB/sec [Average]
[info]   (min, avg, max) = (648.645, 659.661, 676.571), stdev = 10.748
[info]   CI (99.9%): [618.273, 701.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1796.335 ±(99.9%) 58.679 B/op [Average]
[info]   (min, avg, max) = (1780.577, 1796.335, 1819.934), stdev = 15.239
[info]   CI (99.9%): [1737.656, 1855.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   666.196 ±(99.9%) 0.253 MB/sec [Average]
[info]   (min, avg, max) = (666.124, 666.196, 666.283), stdev = 0.066
[info]   CI (99.9%): [665.943, 666.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1814.403 ±(99.9%) 94.904 B/op [Average]
[info]   (min, avg, max) = (1791.831, 1814.403, 1847.467), stdev = 24.646
[info]   CI (99.9%): [1719.499, 1909.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.057 ±(99.9%) 0.217 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.057, 0.113), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 76.44% complete, ETA 00:27:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 207385.955 ops/s
[info] # Warmup Iteration   2: 426485.301 ops/s
[info] # Warmup Iteration   3: 625506.524 ops/s
[info] # Warmup Iteration   4: 626693.341 ops/s
[info] # Warmup Iteration   5: 626576.682 ops/s
[info] Iteration   1: 626550.860 ops/s
[info]                  ·gc.alloc.rate:      6.370 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 628181.463 ops/s
[info]                  ·gc.alloc.rate:      8.235 MB/sec
[info]                  ·gc.alloc.rate.norm: 20.632 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 630654.076 ops/s
[info]                  ·gc.alloc.rate:      6.413 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 630651.528 ops/s
[info]                  ·gc.alloc.rate:      6.411 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 636380.939 ops/s
[info]                  ·gc.alloc.rate:      6.472 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   630483.773 ±(99.9%) 14356.520 ops/s [Average]
[info]   (min, avg, max) = (626550.860, 630483.773, 636380.939), stdev = 3728.343
[info]   CI (99.9%): [616127.253, 644840.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   6.780 ±(99.9%) 3.134 MB/sec [Average]
[info]   (min, avg, max) = (6.370, 6.780, 8.235), stdev = 0.814
[info]   CI (99.9%): [3.646, 9.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.927 ±(99.9%) 7.975 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.927, 20.632), stdev = 2.071
[info]   CI (99.9%): [8.952, 24.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76.67% complete, ETA 00:27:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4802.942 ops/s
[info] # Warmup Iteration   2: 60630.527 ops/s
[info] # Warmup Iteration   3: 81458.125 ops/s
[info] # Warmup Iteration   4: 82854.776 ops/s
[info] # Warmup Iteration   5: 91033.601 ops/s
[info] Iteration   1: 90909.188 ops/s
[info]                  ·gc.alloc.rate:               1432.141 MB/sec
[info]                  ·gc.alloc.rate.norm:          24791.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23088.208 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 92548.579 ops/s
[info]                  ·gc.alloc.rate:               1468.390 MB/sec
[info]                  ·gc.alloc.rate.norm:          24967.867 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22678.894 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 89999.877 ops/s
[info]                  ·gc.alloc.rate:                   1439.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              25181.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35005.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.127 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 90360.276 ops/s
[info]                  ·gc.alloc.rate:                   1420.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              24744.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23227.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.164 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 92011.621 ops/s
[info]                  ·gc.alloc.rate:                   1455.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              24896.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22823.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   91165.908 ±(99.9%) 4174.703 ops/s [Average]
[info]   (min, avg, max) = (89999.877, 91165.908, 92548.579), stdev = 1084.157
[info]   CI (99.9%): [86991.205, 95340.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1443.336 ±(99.9%) 72.631 MB/sec [Average]
[info]   (min, avg, max) = (1420.720, 1443.336, 1468.390), stdev = 18.862
[info]   CI (99.9%): [1370.705, 1515.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   24916.175 ±(99.9%) 662.693 B/op [Average]
[info]   (min, avg, max) = (24744.106, 24916.175, 25181.224), stdev = 172.099
[info]   CI (99.9%): [24253.482, 25578.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1467.446 ±(99.9%) 1150.167 MB/sec [Average]
[info]   (min, avg, max) = (1333.668, 1467.446, 2001.767), stdev = 298.695
[info]   CI (99.9%): [317.278, 2617.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   25364.781 ±(99.9%) 20769.466 B/op [Average]
[info]   (min, avg, max) = (22678.894, 25364.781, 35005.731), stdev = 5393.764
[info]   CI (99.9%): [4595.315, 46134.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.475 ±(99.9%) 3.106 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.475, 1.894), stdev = 0.807
[info]   CI (99.9%): [≈ 0, 3.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.286 ±(99.9%) 54.345 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.286, 33.127), stdev = 14.113
[info]   CI (99.9%): [≈ 0, 62.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.581
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoubles
[info] # Parameters: (size = 128)
[info] # Run progress: 76.91% complete, ETA 00:26:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7454613.148 ops/s
[info] # Warmup Iteration   2: 8252262.070 ops/s
[info] # Warmup Iteration   3: 10213027.123 ops/s
[info] # Warmup Iteration   4: 10212873.570 ops/s
[info] # Warmup Iteration   5: 9741465.966 ops/s
[info] Iteration   1: 10132229.221 ops/s
[info]                  ·gc.alloc.rate:      7.610 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.182 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 10218360.617 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 10222365.628 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 10243369.049 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 10240616.876 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoubles":
[info]   10211388.278 ±(99.9%) 175535.655 ops/s [Average]
[info]   (min, avg, max) = (10132229.221, 10211388.278, 10243369.049), stdev = 45586.052
[info]   CI (99.9%): [10035852.623, 10386923.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoubles:·gc.alloc.rate":
[info]   1.522 ±(99.9%) 13.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.522, 7.610), stdev = 3.403
[info]   CI (99.9%): [≈ 0, 14.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoubles:·gc.alloc.rate.norm":
[info]   0.236 ±(99.9%) 2.035 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.236, 1.182), stdev = 0.529
[info]   CI (99.9%): [≈ 0, 2.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoubles:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled16
[info] # Parameters: (size = 128)
[info] # Run progress: 77.14% complete, ETA 00:26:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11957932.253 ops/s
[info] # Warmup Iteration   2: 12220348.947 ops/s
[info] # Warmup Iteration   3: 17228308.081 ops/s
[info] # Warmup Iteration   4: 17279201.166 ops/s
[info] # Warmup Iteration   5: 17273727.186 ops/s
[info] Iteration   1: 17281395.020 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 17206523.864 ops/s
[info]                  ·gc.alloc.rate:      3.287 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.301 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 17277951.237 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 17234676.994 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 14820958.165 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled16":
[info]   16764301.056 ±(99.9%) 4184916.068 ops/s [Average]
[info]   (min, avg, max) = (14820958.165, 16764301.056, 17281395.020), stdev = 1086809.413
[info]   CI (99.9%): [12579384.988, 20949217.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled16:·gc.alloc.rate":
[info]   0.658 ±(99.9%) 5.661 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.658, 3.287), stdev = 1.470
[info]   CI (99.9%): [≈ 0, 6.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled16:·gc.alloc.rate.norm":
[info]   0.060 ±(99.9%) 0.518 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.060, 0.301), stdev = 0.134
[info]   CI (99.9%): [≈ 0, 0.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled16:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled4
[info] # Parameters: (size = 128)
[info] # Run progress: 77.37% complete, ETA 00:26:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16732168.475 ops/s
[info] # Warmup Iteration   2: 30160784.029 ops/s
[info] # Warmup Iteration   3: 30657561.946 ops/s
[info] # Warmup Iteration   4: 29338843.069 ops/s
[info] # Warmup Iteration   5: 30935098.701 ops/s
[info] Iteration   1: 30966854.603 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 31003217.835 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 29985234.361 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 30985142.706 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 30975666.155 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled4":
[info]   30783223.132 ±(99.9%) 1718515.785 ops/s [Average]
[info]   (min, avg, max) = (29985234.361, 30783223.132, 31003217.835), stdev = 446293.092
[info]   CI (99.9%): [29064707.347, 32501738.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled4:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled4:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled4:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled8
[info] # Parameters: (size = 128)
[info] # Run progress: 77.60% complete, ETA 00:26:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18622767.478 ops/s
[info] # Warmup Iteration   2: 28943950.396 ops/s
[info] # Warmup Iteration   3: 29056604.318 ops/s
[info] # Warmup Iteration   4: 32386068.393 ops/s
[info] # Warmup Iteration   5: 32388570.471 ops/s
[info] Iteration   1: 32399300.931 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 32387012.983 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 32385272.470 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 32386585.121 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 32378822.262 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled8":
[info]   32387398.753 ±(99.9%) 28592.809 ops/s [Average]
[info]   (min, avg, max) = (32378822.262, 32387398.753, 32399300.931), stdev = 7425.462
[info]   CI (99.9%): [32358805.945, 32415991.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled8:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled8:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled8:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongs
[info] # Parameters: (size = 128)
[info] # Run progress: 77.83% complete, ETA 00:25:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6941018.072 ops/s
[info] # Warmup Iteration   2: 9934604.839 ops/s
[info] # Warmup Iteration   3: 10228326.126 ops/s
[info] # Warmup Iteration   4: 10224834.670 ops/s
[info] # Warmup Iteration   5: 10221896.047 ops/s
[info] Iteration   1: 10224903.154 ops/s
[info]                  ·gc.alloc.rate:      0.071 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 10225926.817 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 10226877.187 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 9833550.176 ops/s
[info]                  ·gc.alloc.rate:      20.073 MB/sec
[info]                  ·gc.alloc.rate.norm: 3.212 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 10241876.347 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongs":
[info]   10150626.736 ±(99.9%) 683055.979 ops/s [Average]
[info]   (min, avg, max) = (9833550.176, 10150626.736, 10241876.347), stdev = 177387.469
[info]   CI (99.9%): [9467570.757, 10833682.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongs:·gc.alloc.rate":
[info]   4.029 ±(99.9%) 34.537 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 4.029, 20.073), stdev = 8.969
[info]   CI (99.9%): [≈ 0, 38.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongs:·gc.alloc.rate.norm":
[info]   0.645 ±(99.9%) 5.527 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.645, 3.212), stdev = 1.435
[info]   CI (99.9%): [≈ 0, 6.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongs:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled16
[info] # Parameters: (size = 128)
[info] # Run progress: 78.06% complete, ETA 00:25:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6590051.572 ops/s
[info] # Warmup Iteration   2: 16446724.685 ops/s
[info] # Warmup Iteration   3: 17222029.457 ops/s
[info] # Warmup Iteration   4: 17182616.932 ops/s
[info] # Warmup Iteration   5: 17218173.679 ops/s
[info] Iteration   1: 17155819.597 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 17152541.044 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 17252844.143 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 17229257.339 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 17237808.644 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled16":
[info]   17205654.153 ±(99.9%) 183889.941 ops/s [Average]
[info]   (min, avg, max) = (17152541.044, 17205654.153, 17252844.143), stdev = 47755.634
[info]   CI (99.9%): [17021764.213, 17389544.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled16:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled16:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled16:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled4
[info] # Parameters: (size = 128)
[info] # Run progress: 78.29% complete, ETA 00:25:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14958922.119 ops/s
[info] # Warmup Iteration   2: 30204834.098 ops/s
[info] # Warmup Iteration   3: 31133678.475 ops/s
[info] # Warmup Iteration   4: 31061852.845 ops/s
[info] # Warmup Iteration   5: 31071156.313 ops/s
[info] Iteration   1: 31071449.408 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 31066228.582 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 31064056.885 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 29748165.554 ops/s
[info]                  ·gc.alloc.rate:      16.320 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.863 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 31031912.062 ops/s
[info]                  ·gc.alloc.rate:      0.848 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.043 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled4":
[info]   30796362.498 ±(99.9%) 2257115.654 ops/s [Average]
[info]   (min, avg, max) = (29748165.554, 30796362.498, 31071449.408), stdev = 586165.767
[info]   CI (99.9%): [28539246.845, 33053478.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled4:·gc.alloc.rate":
[info]   3.434 ±(99.9%) 27.774 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 3.434, 16.320), stdev = 7.213
[info]   CI (99.9%): [≈ 0, 31.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled4:·gc.alloc.rate.norm":
[info]   0.181 ±(99.9%) 1.470 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.181, 0.863), stdev = 0.382
[info]   CI (99.9%): [≈ 0, 1.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled4:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled8
[info] # Parameters: (size = 128)
[info] # Run progress: 78.52% complete, ETA 00:25:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21529905.089 ops/s
[info] # Warmup Iteration   2: 31004400.977 ops/s
[info] # Warmup Iteration   3: 32543099.756 ops/s
[info] # Warmup Iteration   4: 32608209.060 ops/s
[info] # Warmup Iteration   5: 32167245.200 ops/s
[info] Iteration   1: 32640595.593 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 32639035.710 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 32535831.786 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 32544023.603 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 32512461.753 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled8":
[info]   32574389.689 ±(99.9%) 234274.662 ops/s [Average]
[info]   (min, avg, max) = (32512461.753, 32574389.689, 32640595.593), stdev = 60840.386
[info]   CI (99.9%): [32340115.027, 32808664.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled8:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled8:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled8:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 78.75% complete, ETA 00:24:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 205597.729 ops/s
[info] # Warmup Iteration   2: 2599253.901 ops/s
[info] # Warmup Iteration   3: 7978726.319 ops/s
[info] # Warmup Iteration   4: 8349264.754 ops/s
[info] # Warmup Iteration   5: 8458288.565 ops/s
[info] Iteration   1: 8425014.951 ops/s
[info]                  ·gc.alloc.rate:                   7436.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              1388.922 B/op
[info]                  ·gc.churn.PS_Eden_Space:          6736.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1258.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 8453552.791 ops/s
[info]                  ·gc.alloc.rate:                   7474.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              1391.228 B/op
[info]                  ·gc.churn.PS_Eden_Space:          7457.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1388.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 8544627.206 ops/s
[info]                  ·gc.alloc.rate:                   7522.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              1385.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          6799.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1252.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 8546060.935 ops/s
[info]                  ·gc.alloc.rate:                   7553.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              1391.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          7488.086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1379.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 8542521.306 ops/s
[info]                  ·gc.alloc.rate:                   7550.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              1391.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:          7495.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1380.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   8502355.438 ±(99.9%) 225136.081 ops/s [Average]
[info]   (min, avg, max) = (8425014.951, 8502355.438, 8546060.935), stdev = 58467.125
[info]   CI (99.9%): [8277219.356, 8727491.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   7507.601 ±(99.9%) 195.851 MB/sec [Average]
[info]   (min, avg, max) = (7436.529, 7507.601, 7553.179), stdev = 50.862
[info]   CI (99.9%): [7311.750, 7703.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1389.600 ±(99.9%) 9.361 B/op [Average]
[info]   (min, avg, max) = (1385.612, 1389.600, 1391.228), stdev = 2.431
[info]   CI (99.9%): [1380.239, 1398.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   7195.307 ±(99.9%) 1507.042 MB/sec [Average]
[info]   (min, avg, max) = (6736.085, 7195.307, 7495.708), stdev = 391.374
[info]   CI (99.9%): [5688.264, 8702.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1331.711 ±(99.9%) 269.402 B/op [Average]
[info]   (min, avg, max) = (1252.285, 1331.711, 1388.105), stdev = 69.963
[info]   CI (99.9%): [1062.309, 1601.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.125), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.012, 0.023), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   53.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.600, 11.000), stdev = 0.548
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   67.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (13.000, 13.400, 14.000), stdev = 0.548
[info]   CI (99.9%): [67.000, 67.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 78.98% complete, ETA 00:24:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.680 ops/s
[info] # Warmup Iteration   2: 733173.850 ops/s
[info] # Warmup Iteration   3: 886229.576 ops/s
[info] # Warmup Iteration   4: 992384.711 ops/s
[info] # Warmup Iteration   5: 994477.561 ops/s
[info] Iteration   1: 990841.370 ops/s
[info]                  ·gc.alloc.rate:                   630.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              1001.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1054.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 990777.838 ops/s
[info]                  ·gc.alloc.rate:               631.339 MB/sec
[info]                  ·gc.alloc.rate.norm:          1002.884 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1055.541 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 959329.185 ops/s
[info]                  ·gc.alloc.rate:               605.757 MB/sec
[info]                  ·gc.alloc.rate.norm:          993.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1090.170 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 972395.498 ops/s
[info]                  ·gc.alloc.rate:                   624.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              1010.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1076.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 972777.347 ops/s
[info]                  ·gc.alloc.rate:                   626.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              1014.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1076.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   977224.247 ±(99.9%) 52106.584 ops/s [Average]
[info]   (min, avg, max) = (959329.185, 977224.247, 990841.370), stdev = 13531.914
[info]   CI (99.9%): [925117.663, 1029330.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   623.734 ±(99.9%) 40.320 MB/sec [Average]
[info]   (min, avg, max) = (605.757, 623.734, 631.339), stdev = 10.471
[info]   CI (99.9%): [583.414, 664.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1004.543 ±(99.9%) 30.593 B/op [Average]
[info]   (min, avg, max) = (993.791, 1004.543, 1014.306), stdev = 7.945
[info]   CI (99.9%): [973.950, 1035.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   664.607 ±(99.9%) 2.097 MB/sec [Average]
[info]   (min, avg, max) = (663.809, 664.607, 665.137), stdev = 0.545
[info]   CI (99.9%): [662.510, 666.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1070.555 ±(99.9%) 58.972 B/op [Average]
[info]   (min, avg, max) = (1054.394, 1070.555, 1090.170), stdev = 15.315
[info]   CI (99.9%): [1011.583, 1129.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.015 ±(99.9%) 0.056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.031), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.024 ±(99.9%) 0.091 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.049), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 79.21% complete, ETA 00:24:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15522.948 ops/s
[info] # Warmup Iteration   2: 118052.569 ops/s
[info] # Warmup Iteration   3: 344631.517 ops/s
[info] # Warmup Iteration   4: 432128.764 ops/s
[info] # Warmup Iteration   5: 437820.519 ops/s
[info] Iteration   1: 442447.156 ops/s
[info]                  ·gc.alloc.rate:               1013.972 MB/sec
[info]                  ·gc.alloc.rate.norm:          3606.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4720.241 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 449923.468 ops/s
[info]                  ·gc.alloc.rate:               1008.151 MB/sec
[info]                  ·gc.alloc.rate.norm:          3526.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2323.122 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 436625.691 ops/s
[info]                  ·gc.alloc.rate:                   1026.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              3699.275 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4791.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 442757.076 ops/s
[info]                  ·gc.alloc.rate:                   994.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              3533.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2364.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 442572.839 ops/s
[info]                  ·gc.alloc.rate:               1008.781 MB/sec
[info]                  ·gc.alloc.rate.norm:          3587.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4735.362 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   442865.246 ±(99.9%) 18165.752 ops/s [Average]
[info]   (min, avg, max) = (436625.691, 442865.246, 449923.468), stdev = 4717.588
[info]   CI (99.9%): [424699.494, 461030.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1010.253 ±(99.9%) 44.591 MB/sec [Average]
[info]   (min, avg, max) = (994.119, 1010.253, 1026.242), stdev = 11.580
[info]   CI (99.9%): [965.662, 1054.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3590.626 ±(99.9%) 268.216 B/op [Average]
[info]   (min, avg, max) = (3526.484, 3590.626, 3699.275), stdev = 69.655
[info]   CI (99.9%): [3322.410, 3858.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1063.467 ±(99.9%) 1401.993 MB/sec [Average]
[info]   (min, avg, max) = (664.134, 1063.467, 1331.648), stdev = 364.093
[info]   CI (99.9%): [≈ 0, 2465.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3786.925 ±(99.9%) 5074.440 B/op [Average]
[info]   (min, avg, max) = (2323.122, 3786.925, 4791.598), stdev = 1317.816
[info]   CI (99.9%): [≈ 0, 8861.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.030 ±(99.9%) 0.157 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.075), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 5.000), stdev = 1.414
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 79.45% complete, ETA 00:23:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 339395.111 ops/s
[info] # Warmup Iteration   2: 612773.054 ops/s
[info] # Warmup Iteration   3: 764391.868 ops/s
[info] # Warmup Iteration   4: 758073.063 ops/s
[info] # Warmup Iteration   5: 762111.764 ops/s
[info] Iteration   1: 762113.608 ops/s
[info]                  ·gc.alloc.rate:               694.349 MB/sec
[info]                  ·gc.alloc.rate.norm:          1433.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1383.248 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 740631.273 ops/s
[info]                  ·gc.alloc.rate:               675.823 MB/sec
[info]                  ·gc.alloc.rate.norm:          1435.995 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1424.146 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 724221.452 ops/s
[info]                  ·gc.alloc.rate:               661.036 MB/sec
[info]                  ·gc.alloc.rate.norm:          1435.906 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1456.414 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 798219.796 ops/s
[info]                  ·gc.alloc.rate:               727.264 MB/sec
[info]                  ·gc.alloc.rate.norm:          1433.680 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1322.686 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 800235.038 ops/s
[info]                  ·gc.alloc.rate:                   715.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1319.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   765084.233 ±(99.9%) 130724.730 ops/s [Average]
[info]   (min, avg, max) = (724221.452, 765084.233, 800235.038), stdev = 33948.797
[info]   CI (99.9%): [634359.503, 895808.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   694.890 ±(99.9%) 105.503 MB/sec [Average]
[info]   (min, avg, max) = (661.036, 694.890, 727.264), stdev = 27.399
[info]   CI (99.9%): [589.387, 800.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1429.502 ±(99.9%) 46.470 B/op [Average]
[info]   (min, avg, max) = (1408.001, 1429.502, 1435.995), stdev = 12.068
[info]   CI (99.9%): [1383.033, 1475.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   670.480 ±(99.9%) 1.850 MB/sec [Average]
[info]   (min, avg, max) = (669.807, 670.480, 670.959), stdev = 0.480
[info]   CI (99.9%): [668.630, 672.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1381.172 ±(99.9%) 233.850 B/op [Average]
[info]   (min, avg, max) = (1319.369, 1381.172, 1456.414), stdev = 60.730
[info]   CI (99.9%): [1147.322, 1615.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.141 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.082), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 79.68% complete, ETA 00:23:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 905591.279 ops/s
[info] # Warmup Iteration   2: 4085359.662 ops/s
[info] # Warmup Iteration   3: 4399711.845 ops/s
[info] # Warmup Iteration   4: 4335969.952 ops/s
[info] # Warmup Iteration   5: 4448569.248 ops/s
[info] Iteration   1: 4482150.181 ops/s
[info]                  ·gc.alloc.rate:                   2711.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     941.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4488237.841 ops/s
[info]                  ·gc.alloc.rate:                   2715.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.321 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     939.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4461362.306 ops/s
[info]                  ·gc.alloc.rate:                   2691.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              949.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     946.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 8279642.309 ops/s
[info]                  ·gc.alloc.rate:                   4793.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              911.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4710.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     895.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 8236897.652 ops/s
[info]                  ·gc.alloc.rate:                   4822.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              921.385 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4731.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     904.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   5989658.058 ±(99.9%) 7974795.189 ops/s [Average]
[info]   (min, avg, max) = (4461362.306, 5989658.058, 8279642.309), stdev = 2071028.985
[info]   CI (99.9%): [≈ 0, 13964453.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   3546.694 ±(99.9%) 4432.752 MB/sec [Average]
[info]   (min, avg, max) = (2691.060, 3546.694, 4822.155), stdev = 1151.172
[info]   CI (99.9%): [≈ 0, 7979.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   937.227 ±(99.9%) 75.147 B/op [Average]
[info]   (min, avg, max) = (911.137, 937.227, 952.321), stdev = 19.515
[info]   CI (99.9%): [862.080, 1012.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   3496.485 ±(99.9%) 4303.609 MB/sec [Average]
[info]   (min, avg, max) = (2678.233, 3496.485, 4731.175), stdev = 1117.634
[info]   CI (99.9%): [≈ 0, 7800.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   925.177 ±(99.9%) 90.854 B/op [Average]
[info]   (min, avg, max) = (895.400, 925.177, 946.163), stdev = 23.594
[info]   CI (99.9%): [834.323, 1016.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.010, 0.022), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 9.000), stdev = 1.871
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 79.91% complete, ETA 00:23:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2148754.548 ops/s
[info] # Warmup Iteration   2: 7098914.579 ops/s
[info] # Warmup Iteration   3: 29657799.869 ops/s
[info] # Warmup Iteration   4: 30415319.835 ops/s
[info] # Warmup Iteration   5: 29602055.058 ops/s
[info] Iteration   1: 30445782.441 ops/s
[info]                  ·gc.alloc.rate:                   2709.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              140.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.593 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.186 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 29783132.994 ops/s
[info]                  ·gc.alloc.rate:                   2653.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              140.228 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 30027502.410 ops/s
[info]                  ·gc.alloc.rate:                   2686.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              140.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 30522764.386 ops/s
[info]                  ·gc.alloc.rate:                   2744.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              141.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 30648280.842 ops/s
[info]                  ·gc.alloc.rate:               2755.568 MB/sec
[info]                  ·gc.alloc.rate.norm:          141.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2691.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 138.204 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   30285492.615 ±(99.9%) 1404997.229 ops/s [Average]
[info]   (min, avg, max) = (29783132.994, 30285492.615, 30648280.842), stdev = 364873.318
[info]   CI (99.9%): [28880495.386, 31690489.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   2709.919 ±(99.9%) 160.686 MB/sec [Average]
[info]   (min, avg, max) = (2653.725, 2709.919, 2755.568), stdev = 41.730
[info]   CI (99.9%): [2549.234, 2870.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   140.821 ±(99.9%) 2.613 B/op [Average]
[info]   (min, avg, max) = (140.070, 140.821, 141.505), stdev = 0.679
[info]   CI (99.9%): [138.208, 143.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   2683.315 ±(99.9%) 20.072 MB/sec [Average]
[info]   (min, avg, max) = (2678.625, 2683.315, 2691.275), stdev = 5.213
[info]   CI (99.9%): [2663.243, 2703.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   139.456 ±(99.9%) 5.597 B/op [Average]
[info]   (min, avg, max) = (138.204, 139.456, 141.544), stdev = 1.453
[info]   CI (99.9%): [133.859, 145.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0.731 ±(99.9%) 6.161 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.731, 3.593), stdev = 1.600
[info]   CI (99.9%): [≈ 0, 6.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.318 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.186), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 9.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 80.14% complete, ETA 00:23:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 679.604 ops/s
[info] # Warmup Iteration   2: 55193.916 ops/s
[info] # Warmup Iteration   3: 284066.846 ops/s
[info] # Warmup Iteration   4: 349392.291 ops/s
[info] # Warmup Iteration   5: 405306.668 ops/s
[info] Iteration   1: 403716.213 ops/s
[info]                  ·gc.alloc.rate:                   2848.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              11103.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10414.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.686 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 405548.991 ops/s
[info]                  ·gc.alloc.rate:                   2889.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              11212.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10361.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.889 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 401875.850 ops/s
[info]                  ·gc.alloc.rate:                   2848.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              11154.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10466.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.163 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 404713.288 ops/s
[info]                  ·gc.alloc.rate:                   2882.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              11210.925 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10420.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.081 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 397580.327 ops/s
[info]                  ·gc.alloc.rate:                   2860.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              11320.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10643.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   402686.934 ±(99.9%) 12190.829 ops/s [Average]
[info]   (min, avg, max) = (397580.327, 402686.934, 405548.991), stdev = 3165.920
[info]   CI (99.9%): [390496.105, 414877.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2865.767 ±(99.9%) 74.058 MB/sec [Average]
[info]   (min, avg, max) = (2848.242, 2865.767, 2889.194), stdev = 19.233
[info]   CI (99.9%): [2791.709, 2939.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11200.332 ±(99.9%) 311.347 B/op [Average]
[info]   (min, avg, max) = (11103.375, 11200.332, 11320.437), stdev = 80.856
[info]   CI (99.9%): [10888.985, 11511.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2676.578 ±(99.9%) 30.472 MB/sec [Average]
[info]   (min, avg, max) = (2669.991, 2676.578, 2689.118), stdev = 7.913
[info]   CI (99.9%): [2646.106, 2707.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10461.302 ±(99.9%) 417.197 B/op [Average]
[info]   (min, avg, max) = (10361.464, 10461.302, 10643.380), stdev = 108.345
[info]   CI (99.9%): [10044.105, 10878.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.662 ±(99.9%) 5.039 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.662, 2.998), stdev = 1.309
[info]   CI (99.9%): [≈ 0, 5.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.580 ±(99.9%) 19.644 B/op [Average]
[info]   (min, avg, max) = (0.081, 2.580, 11.686), stdev = 5.102
[info]   CI (99.9%): [≈ 0, 22.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 9.000), stdev = 1.304
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.37% complete, ETA 00:22:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 783117.786 ops/s
[info] # Warmup Iteration   2: 1386344.662 ops/s
[info] # Warmup Iteration   3: 1471048.821 ops/s
[info] # Warmup Iteration   4: 1471518.816 ops/s
[info] # Warmup Iteration   5: 1474861.080 ops/s
[info] Iteration   1: 1474763.412 ops/s
[info]                  ·gc.alloc.rate:      44.987 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1464711.839 ops/s
[info]                  ·gc.alloc.rate:      45.523 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.912 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1468100.912 ops/s
[info]                  ·gc.alloc.rate:      44.782 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1473651.997 ops/s
[info]                  ·gc.alloc.rate:      44.951 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1470796.696 ops/s
[info]                  ·gc.alloc.rate:      44.860 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   1470404.971 ±(99.9%) 15807.946 ops/s [Average]
[info]   (min, avg, max) = (1464711.839, 1470404.971, 1474763.412), stdev = 4105.273
[info]   CI (99.9%): [1454597.026, 1486212.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   45.021 ±(99.9%) 1.124 MB/sec [Average]
[info]   (min, avg, max) = (44.782, 45.021, 45.523), stdev = 0.292
[info]   CI (99.9%): [43.897, 46.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.183 ±(99.9%) 1.569 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.183, 48.912), stdev = 0.408
[info]   CI (99.9%): [46.613, 49.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.60% complete, ETA 00:22:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2795.809 ops/s
[info] # Warmup Iteration   2: 60455.196 ops/s
[info] # Warmup Iteration   3: 109858.358 ops/s
[info] # Warmup Iteration   4: 113209.948 ops/s
[info] # Warmup Iteration   5: 108634.509 ops/s
[info] Iteration   1: 112736.742 ops/s
[info]                  ·gc.alloc.rate:                   3981.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              55588.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4015.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56050.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.162 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 111800.608 ops/s
[info]                  ·gc.alloc.rate:                   3955.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              55674.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4030.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56729.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.293 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 112617.430 ops/s
[info]                  ·gc.alloc.rate:                   3982.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              55645.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3372.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47121.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.291 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 110122.801 ops/s
[info]                  ·gc.alloc.rate:                   3938.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              56277.758 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4059.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58008.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.893 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 110369.266 ops/s
[info]                  ·gc.alloc.rate:                   3959.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              56459.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4069.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58028.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.594 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   111529.370 ±(99.9%) 4731.543 ops/s [Average]
[info]   (min, avg, max) = (110122.801, 111529.370, 112736.742), stdev = 1228.767
[info]   CI (99.9%): [106797.826, 116260.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3963.697 ±(99.9%) 72.396 MB/sec [Average]
[info]   (min, avg, max) = (3938.583, 3963.697, 3982.925), stdev = 18.801
[info]   CI (99.9%): [3891.301, 4036.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   55929.126 ±(99.9%) 1569.978 B/op [Average]
[info]   (min, avg, max) = (55588.262, 55929.126, 56459.923), stdev = 407.718
[info]   CI (99.9%): [54359.149, 57499.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3909.518 ±(99.9%) 1158.355 MB/sec [Average]
[info]   (min, avg, max) = (3372.815, 3909.518, 4069.427), stdev = 300.821
[info]   CI (99.9%): [2751.162, 5067.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   55187.728 ±(99.9%) 17668.568 B/op [Average]
[info]   (min, avg, max) = (47121.310, 55187.728, 58028.887), stdev = 4588.471
[info]   CI (99.9%): [37519.160, 72856.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.647 ±(99.9%) 1.467 B/op [Average]
[info]   (min, avg, max) = (0.291, 0.647, 1.162), stdev = 0.381
[info]   CI (99.9%): [≈ 0, 2.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.83% complete, ETA 00:22:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 423421.072 ops/s
[info] # Warmup Iteration   2: 1902056.042 ops/s
[info] # Warmup Iteration   3: 2108966.328 ops/s
[info] # Warmup Iteration   4: 2144079.767 ops/s
[info] # Warmup Iteration   5: 2142325.644 ops/s
[info] Iteration   1: 2145299.786 ops/s
[info]                  ·gc.alloc.rate:                   592.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              434.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     484.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2143247.024 ops/s
[info]                  ·gc.alloc.rate:               596.852 MB/sec
[info]                  ·gc.alloc.rate.norm:          438.288 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 485.510 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 2145394.368 ops/s
[info]                  ·gc.alloc.rate:      577.979 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2098148.956 ops/s
[info]                  ·gc.alloc.rate:                   586.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     495.926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2128916.042 ops/s
[info]                  ·gc.alloc.rate:               597.762 MB/sec
[info]                  ·gc.alloc.rate.norm:          441.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 489.763 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   2132201.235 ±(99.9%) 77921.813 ops/s [Average]
[info]   (min, avg, max) = (2098148.956, 2132201.235, 2145394.368), stdev = 20236.047
[info]   CI (99.9%): [2054279.423, 2210123.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   590.437 ±(99.9%) 31.440 MB/sec [Average]
[info]   (min, avg, max) = (577.979, 590.437, 597.762), stdev = 8.165
[info]   CI (99.9%): [558.998, 621.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   435.829 ±(99.9%) 27.495 B/op [Average]
[info]   (min, avg, max) = (424.000, 435.829, 441.939), stdev = 7.140
[info]   CI (99.9%): [408.333, 463.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   529.091 ±(99.9%) 1138.912 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 529.091, 662.448), stdev = 295.772
[info]   CI (99.9%): [≈ 0, 1668.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   391.152 ±(99.9%) 842.161 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 391.152, 495.926), stdev = 218.707
[info]   CI (99.9%): [≈ 0, 1233.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.06% complete, ETA 00:22:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1069647.351 ops/s
[info] # Warmup Iteration   2: 1883711.157 ops/s
[info] # Warmup Iteration   3: 1989794.054 ops/s
[info] # Warmup Iteration   4: 1986060.633 ops/s
[info] # Warmup Iteration   5: 1982336.014 ops/s
[info] Iteration   1: 1984094.165 ops/s
[info]                  ·gc.alloc.rate:               558.438 MB/sec
[info]                  ·gc.alloc.rate.norm:          442.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 530.529 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1978496.545 ops/s
[info]                  ·gc.alloc.rate:               552.979 MB/sec
[info]                  ·gc.alloc.rate.norm:          439.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 532.012 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1994920.137 ops/s
[info]                  ·gc.alloc.rate:      537.532 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1977883.841 ops/s
[info]                  ·gc.alloc.rate:               552.433 MB/sec
[info]                  ·gc.alloc.rate.norm:          439.572 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 532.175 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1977071.562 ops/s
[info]                  ·gc.alloc.rate:                   558.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              444.812 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     532.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   1982493.250 ±(99.9%) 28790.193 ops/s [Average]
[info]   (min, avg, max) = (1977071.562, 1982493.250, 1994920.137), stdev = 7476.722
[info]   CI (99.9%): [1953703.057, 2011283.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   552.046 ±(99.9%) 33.282 MB/sec [Average]
[info]   (min, avg, max) = (537.532, 552.046, 558.848), stdev = 8.643
[info]   CI (99.9%): [518.765, 585.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   438.247 ±(99.9%) 31.802 B/op [Average]
[info]   (min, avg, max) = (424.000, 438.247, 444.812), stdev = 8.259
[info]   CI (99.9%): [406.445, 470.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   535.060 ±(99.9%) 1151.757 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535.060, 668.870), stdev = 299.108
[info]   CI (99.9%): [≈ 0, 1686.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   425.420 ±(99.9%) 915.752 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 425.420, 532.383), stdev = 237.818
[info]   CI (99.9%): [≈ 0, 1341.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 81.29% complete, ETA 00:21:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 562913.637 ops/s
[info] # Warmup Iteration   2: 1900968.303 ops/s
[info] # Warmup Iteration   3: 2031278.795 ops/s
[info] # Warmup Iteration   4: 1835275.147 ops/s
[info] # Warmup Iteration   5: 2027127.762 ops/s
[info] Iteration   1: 2030892.365 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2030743.310 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2030855.675 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2015258.934 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2026210.032 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   2026792.063 ±(99.9%) 25994.670 ops/s [Average]
[info]   (min, avg, max) = (2015258.934, 2026792.063, 2030892.365), stdev = 6750.733
[info]   CI (99.9%): [2000797.393, 2052786.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.52% complete, ETA 00:21:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4037.458 ops/s
[info] # Warmup Iteration   2: 35961.522 ops/s
[info] # Warmup Iteration   3: 55171.432 ops/s
[info] # Warmup Iteration   4: 51208.595 ops/s
[info] # Warmup Iteration   5: 57424.531 ops/s
[info] Iteration   1: 58072.439 ops/s
[info]                  ·gc.alloc.rate:                   2014.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              54597.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53879.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.403 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 57038.284 ops/s
[info]                  ·gc.alloc.rate:                   1997.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              55105.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54995.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.658 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 57244.453 ops/s
[info]                  ·gc.alloc.rate:                   1988.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              54675.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54871.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.717 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 57025.447 ops/s
[info]                  ·gc.alloc.rate:                   1977.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              54565.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55219.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.022 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 57667.131 ops/s
[info]                  ·gc.alloc.rate:               1997.972 MB/sec
[info]                  ·gc.alloc.rate.norm:          54526.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54748.546 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   57409.551 ±(99.9%) 1741.753 ops/s [Average]
[info]   (min, avg, max) = (57025.447, 57409.551, 58072.439), stdev = 452.328
[info]   CI (99.9%): [55667.798, 59151.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1995.172 ±(99.9%) 53.097 MB/sec [Average]
[info]   (min, avg, max) = (1977.280, 1995.172, 2014.848), stdev = 13.789
[info]   CI (99.9%): [1942.074, 2048.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   54694.192 ±(99.9%) 911.148 B/op [Average]
[info]   (min, avg, max) = (54526.931, 54694.192, 55105.941), stdev = 236.622
[info]   CI (99.9%): [53783.043, 55605.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1996.863 ±(99.9%) 26.546 MB/sec [Average]
[info]   (min, avg, max) = (1988.363, 1996.863, 2006.092), stdev = 6.894
[info]   CI (99.9%): [1970.317, 2023.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   54742.868 ±(99.9%) 1976.022 B/op [Average]
[info]   (min, avg, max) = (53879.364, 54742.868, 55219.659), stdev = 513.167
[info]   CI (99.9%): [52766.846, 56718.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.416 ±(99.9%) 2.051 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.416, 1.270), stdev = 0.533
[info]   CI (99.9%): [≈ 0, 2.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11.360 ±(99.9%) 55.633 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.360, 34.403), stdev = 14.448
[info]   CI (99.9%): [≈ 0, 66.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.76% complete, ETA 00:21:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145344.411 ops/s
[info] # Warmup Iteration   2: 253236.842 ops/s
[info] # Warmup Iteration   3: 274089.792 ops/s
[info] # Warmup Iteration   4: 273334.291 ops/s
[info] # Warmup Iteration   5: 267897.492 ops/s
[info] Iteration   1: 274461.910 ops/s
[info]                  ·gc.alloc.rate:               1098.647 MB/sec
[info]                  ·gc.alloc.rate.norm:          6299.208 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3840.707 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 271618.280 ops/s
[info]                  ·gc.alloc.rate:               1103.471 MB/sec
[info]                  ·gc.alloc.rate.norm:          6393.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7764.185 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 267839.466 ops/s
[info]                  ·gc.alloc.rate:               1104.673 MB/sec
[info]                  ·gc.alloc.rate.norm:          6491.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3937.939 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 270195.692 ops/s
[info]                  ·gc.alloc.rate:               1091.238 MB/sec
[info]                  ·gc.alloc.rate.norm:          6356.365 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7814.741 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 273110.911 ops/s
[info]                  ·gc.alloc.rate:                   1098.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              6329.584 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7731.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.947 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.748 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   271445.252 ±(99.9%) 9905.156 ops/s [Average]
[info]   (min, avg, max) = (267839.466, 271445.252, 274461.910), stdev = 2572.337
[info]   CI (99.9%): [261540.096, 281350.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1099.271 ±(99.9%) 20.434 MB/sec [Average]
[info]   (min, avg, max) = (1091.238, 1099.271, 1104.673), stdev = 5.307
[info]   CI (99.9%): [1078.836, 1119.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6373.867 ±(99.9%) 285.245 B/op [Average]
[info]   (min, avg, max) = (6299.208, 6373.867, 6491.079), stdev = 74.077
[info]   CI (99.9%): [6088.622, 6659.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1072.665 ±(99.9%) 1415.372 MB/sec [Average]
[info]   (min, avg, max) = (669.859, 1072.665, 1341.606), stdev = 367.568
[info]   CI (99.9%): [≈ 0, 2488.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6217.783 ±(99.9%) 8186.735 B/op [Average]
[info]   (min, avg, max) = (3840.707, 6217.783, 7814.741), stdev = 2126.069
[info]   CI (99.9%): [≈ 0, 14404.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.789 ±(99.9%) 6.797 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.789, 3.947), stdev = 1.765
[info]   CI (99.9%): [≈ 0, 7.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.550 ±(99.9%) 39.173 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.550, 22.748), stdev = 10.173
[info]   CI (99.9%): [≈ 0, 43.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.99% complete, ETA 00:20:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1828.242 ops/s
[info] # Warmup Iteration   2: 28784.974 ops/s
[info] # Warmup Iteration   3: 47704.615 ops/s
[info] # Warmup Iteration   4: 49644.510 ops/s
[info] # Warmup Iteration   5: 51991.448 ops/s
[info] Iteration   1: 52595.684 ops/s
[info]                  ·gc.alloc.rate:                   2112.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              63227.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59922.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74.130 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 53584.697 ops/s
[info]                  ·gc.alloc.rate:                   2140.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              62847.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58777.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.395 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 52818.400 ops/s
[info]                  ·gc.alloc.rate:                   2114.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              62987.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59627.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.101 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 53606.241 ops/s
[info]                  ·gc.alloc.rate:                   2129.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              62519.159 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58809.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.834 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 54366.188 ops/s
[info]                  ·gc.alloc.rate:               2185.192 MB/sec
[info]                  ·gc.alloc.rate.norm:          63257.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58132.089 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   53394.242 ±(99.9%) 2719.536 ops/s [Average]
[info]   (min, avg, max) = (52595.684, 53394.242, 54366.188), stdev = 706.255
[info]   CI (99.9%): [50674.706, 56113.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2136.518 ±(99.9%) 113.290 MB/sec [Average]
[info]   (min, avg, max) = (2112.985, 2136.518, 2185.192), stdev = 29.421
[info]   CI (99.9%): [2023.227, 2249.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   62967.612 ±(99.9%) 1166.440 B/op [Average]
[info]   (min, avg, max) = (62519.159, 62967.612, 63257.061), stdev = 302.921
[info]   CI (99.9%): [61801.172, 64134.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2003.463 ±(99.9%) 10.327 MB/sec [Average]
[info]   (min, avg, max) = (2001.640, 2003.463, 2008.151), stdev = 2.682
[info]   CI (99.9%): [1993.135, 2013.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   59053.556 ±(99.9%) 2768.982 B/op [Average]
[info]   (min, avg, max) = (58132.089, 59053.556, 59922.046), stdev = 719.096
[info]   CI (99.9%): [56284.574, 61822.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.600 ±(99.9%) 4.075 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.477), stdev = 1.058
[info]   CI (99.9%): [≈ 0, 4.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   17.892 ±(99.9%) 122.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.892, 74.130), stdev = 31.685
[info]   CI (99.9%): [≈ 0, 139.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.22% complete, ETA 00:20:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26514.946 ops/s
[info] # Warmup Iteration   2: 158311.693 ops/s
[info] # Warmup Iteration   3: 172301.939 ops/s
[info] # Warmup Iteration   4: 156956.867 ops/s
[info] # Warmup Iteration   5: 157010.187 ops/s
[info] Iteration   1: 156496.493 ops/s
[info]                  ·gc.alloc.rate:                   1589.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              15981.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20062.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.419 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 157067.795 ops/s
[info]                  ·gc.alloc.rate:                   1569.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              15726.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13357.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.417 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 157583.398 ops/s
[info]                  ·gc.alloc.rate:                   1569.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              15670.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13339.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 157375.936 ops/s
[info]                  ·gc.alloc.rate:                   1604.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              16048.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20075.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.457 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 157754.494 ops/s
[info]                  ·gc.alloc.rate:                   1580.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              15773.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13377.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.208 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   157255.623 ±(99.9%) 1908.247 ops/s [Average]
[info]   (min, avg, max) = (156496.493, 157255.623, 157754.494), stdev = 495.566
[info]   CI (99.9%): [155347.376, 159163.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1582.834 ±(99.9%) 57.292 MB/sec [Average]
[info]   (min, avg, max) = (1569.216, 1582.834, 1604.903), stdev = 14.879
[info]   CI (99.9%): [1525.542, 1640.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15840.173 ±(99.9%) 638.205 B/op [Average]
[info]   (min, avg, max) = (15670.113, 15840.173, 16048.737), stdev = 165.740
[info]   CI (99.9%): [15201.968, 16478.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1602.506 ±(99.9%) 1401.848 MB/sec [Average]
[info]   (min, avg, max) = (1333.296, 1602.506, 2007.599), stdev = 364.055
[info]   CI (99.9%): [200.659, 3004.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16042.382 ±(99.9%) 14153.775 B/op [Average]
[info]   (min, avg, max) = (13339.561, 16042.382, 20075.628), stdev = 3675.690
[info]   CI (99.9%): [1888.607, 30196.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.192 ±(99.9%) 1.127 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.192, 0.708), stdev = 0.293
[info]   CI (99.9%): [≈ 0, 1.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.914 ±(99.9%) 11.255 B/op [Average]
[info]   (min, avg, max) = (0.208, 1.914, 7.069), stdev = 2.923
[info]   CI (99.9%): [≈ 0, 13.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.45% complete, ETA 00:20:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 159890.151 ops/s
[info] # Warmup Iteration   2: 471367.136 ops/s
[info] # Warmup Iteration   3: 517463.674 ops/s
[info] # Warmup Iteration   4: 525087.907 ops/s
[info] # Warmup Iteration   5: 529390.798 ops/s
[info] Iteration   1: 527488.766 ops/s
[info]                  ·gc.alloc.rate:               731.570 MB/sec
[info]                  ·gc.alloc.rate.norm:          2182.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1995.607 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 530892.208 ops/s
[info]                  ·gc.alloc.rate:               723.105 MB/sec
[info]                  ·gc.alloc.rate.norm:          2143.573 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1984.802 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 513693.517 ops/s
[info]                  ·gc.alloc.rate:                   703.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              2153.772 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2051.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 531273.695 ops/s
[info]                  ·gc.alloc.rate:               734.459 MB/sec
[info]                  ·gc.alloc.rate.norm:          2175.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1983.304 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 530045.978 ops/s
[info]                  ·gc.alloc.rate:               729.065 MB/sec
[info]                  ·gc.alloc.rate.norm:          2164.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1987.895 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   526678.833 ±(99.9%) 28523.200 ops/s [Average]
[info]   (min, avg, max) = (513693.517, 526678.833, 531273.695), stdev = 7407.384
[info]   CI (99.9%): [498155.633, 555202.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   724.241 ±(99.9%) 48.464 MB/sec [Average]
[info]   (min, avg, max) = (703.005, 724.241, 734.459), stdev = 12.586
[info]   CI (99.9%): [675.777, 772.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2164.091 ±(99.9%) 61.193 B/op [Average]
[info]   (min, avg, max) = (2143.573, 2164.091, 2182.702), stdev = 15.892
[info]   CI (99.9%): [2102.899, 2225.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   669.393 ±(99.9%) 1.146 MB/sec [Average]
[info]   (min, avg, max) = (668.861, 669.393, 669.546), stdev = 0.298
[info]   CI (99.9%): [668.246, 670.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2000.565 ±(99.9%) 110.553 B/op [Average]
[info]   (min, avg, max) = (1983.304, 2000.565, 2051.217), stdev = 28.710
[info]   CI (99.9%): [1890.012, 2111.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.110 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.064), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82.68% complete, ETA 00:20:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 203933.248 ops/s
[info] # Warmup Iteration   2: 548079.714 ops/s
[info] # Warmup Iteration   3: 589217.267 ops/s
[info] # Warmup Iteration   4: 589333.551 ops/s
[info] # Warmup Iteration   5: 589460.384 ops/s
[info] Iteration   1: 589544.720 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 589327.158 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 587607.054 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 581388.673 ops/s
[info]                  ·gc.alloc.rate:      0.112 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.304 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 589414.502 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   587456.422 ±(99.9%) 13413.151 ops/s [Average]
[info]   (min, avg, max) = (581388.673, 587456.422, 589544.720), stdev = 3483.353
[info]   CI (99.9%): [574043.270, 600869.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.023 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.023, 0.112), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.062 ±(99.9%) 0.523 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.062, 0.304), stdev = 0.136
[info]   CI (99.9%): [≈ 0, 0.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82.91% complete, ETA 00:19:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5845.256 ops/s
[info] # Warmup Iteration   2: 45589.673 ops/s
[info] # Warmup Iteration   3: 72611.089 ops/s
[info] # Warmup Iteration   4: 78585.314 ops/s
[info] # Warmup Iteration   5: 86789.076 ops/s
[info] Iteration   1: 87632.634 ops/s
[info]                  ·gc.alloc.rate:               1607.013 MB/sec
[info]                  ·gc.alloc.rate.norm:          28861.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23975.382 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 87743.327 ops/s
[info]                  ·gc.alloc.rate:                   1620.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              29052.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23968.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.043 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 87475.466 ops/s
[info]                  ·gc.alloc.rate:                   1644.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              29575.365 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36099.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.985 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 87996.290 ops/s
[info]                  ·gc.alloc.rate:                   1617.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              28923.355 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23923.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.585 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 87870.906 ops/s
[info]                  ·gc.alloc.rate:                   1609.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              28824.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23963.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.864 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   87743.725 ±(99.9%) 780.334 ops/s [Average]
[info]   (min, avg, max) = (87475.466, 87743.725, 87996.290), stdev = 202.650
[info]   CI (99.9%): [86963.391, 88524.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1619.627 ±(99.9%) 57.504 MB/sec [Average]
[info]   (min, avg, max) = (1607.013, 1619.627, 1644.531), stdev = 14.934
[info]   CI (99.9%): [1562.124, 1677.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   29047.424 ±(99.9%) 1184.432 B/op [Average]
[info]   (min, avg, max) = (28824.248, 29047.424, 29575.365), stdev = 307.593
[info]   CI (99.9%): [27862.992, 30231.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1470.881 ±(99.9%) 1154.701 MB/sec [Average]
[info]   (min, avg, max) = (1334.945, 1470.881, 2007.304), stdev = 299.872
[info]   CI (99.9%): [316.179, 2625.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   26386.103 ±(99.9%) 20909.008 B/op [Average]
[info]   (min, avg, max) = (23923.336, 26386.103, 36099.520), stdev = 5430.003
[info]   CI (99.9%): [5477.096, 47295.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.429 ±(99.9%) 1.679 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.429, 1.062), stdev = 0.436
[info]   CI (99.9%): [≈ 0, 2.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.695 ±(99.9%) 30.126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.695, 19.043), stdev = 7.824
[info]   CI (99.9%): [≈ 0, 37.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.140
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 83.14% complete, ETA 00:19:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6433.371 ops/s
[info] # Warmup Iteration   2: 64379.805 ops/s
[info] # Warmup Iteration   3: 97921.640 ops/s
[info] # Warmup Iteration   4: 103578.326 ops/s
[info] # Warmup Iteration   5: 102058.922 ops/s
[info] Iteration   1: 104499.974 ops/s
[info]                  ·gc.alloc.rate:                   1637.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              24654.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20146.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 103813.618 ops/s
[info]                  ·gc.alloc.rate:                   1638.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              24830.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30439.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.796 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 105225.015 ops/s
[info]                  ·gc.alloc.rate:                   1636.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              24479.285 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19997.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.653 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 104510.111 ops/s
[info]                  ·gc.alloc.rate:                   1650.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              24847.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30114.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.194 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 103568.277 ops/s
[info]                  ·gc.alloc.rate:               1634.299 MB/sec
[info]                  ·gc.alloc.rate.norm:          24836.822 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20245.320 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   104323.399 ±(99.9%) 2516.977 ops/s [Average]
[info]   (min, avg, max) = (103568.277, 104323.399, 105225.015), stdev = 653.651
[info]   CI (99.9%): [101806.422, 106840.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1639.348 ±(99.9%) 24.425 MB/sec [Average]
[info]   (min, avg, max) = (1634.299, 1639.348, 1650.397), stdev = 6.343
[info]   CI (99.9%): [1614.923, 1663.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   24729.808 ±(99.9%) 620.906 B/op [Average]
[info]   (min, avg, max) = (24479.285, 24729.808, 24847.791), stdev = 161.247
[info]   CI (99.9%): [24108.903, 25350.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1603.110 ±(99.9%) 1410.286 MB/sec [Average]
[info]   (min, avg, max) = (1332.172, 1603.110, 2008.345), stdev = 366.247
[info]   CI (99.9%): [192.824, 3013.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   24188.814 ±(99.9%) 21409.333 B/op [Average]
[info]   (min, avg, max) = (19997.644, 24188.814, 30439.760), stdev = 5559.936
[info]   CI (99.9%): [2779.482, 45598.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.921 ±(99.9%) 6.308 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.921, 3.813), stdev = 1.638
[info]   CI (99.9%): [≈ 0, 7.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13.936 ±(99.9%) 95.633 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.936, 57.796), stdev = 24.836
[info]   CI (99.9%): [≈ 0, 109.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 13.000), stdev = 4.438
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.37% complete, ETA 00:19:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15989.488 ops/s
[info] # Warmup Iteration   2: 85914.024 ops/s
[info] # Warmup Iteration   3: 130648.038 ops/s
[info] # Warmup Iteration   4: 152565.503 ops/s
[info] # Warmup Iteration   5: 152935.286 ops/s
[info] Iteration   1: 153077.584 ops/s
[info]                  ·gc.alloc.rate:               751.658 MB/sec
[info]                  ·gc.alloc.rate.norm:          7724.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6783.941 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 153568.873 ops/s
[info]                  ·gc.alloc.rate:               734.404 MB/sec
[info]                  ·gc.alloc.rate.norm:          7524.980 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6761.989 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 152928.596 ops/s
[info]                  ·gc.alloc.rate:                   738.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              7594.878 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6804.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.428 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 152788.929 ops/s
[info]                  ·gc.alloc.rate:               734.568 MB/sec
[info]                  ·gc.alloc.rate.norm:          7566.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6810.539 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 152923.813 ops/s
[info]                  ·gc.alloc.rate:               731.632 MB/sec
[info]                  ·gc.alloc.rate.norm:          7530.197 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6818.195 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   153057.559 ±(99.9%) 1168.791 ops/s [Average]
[info]   (min, avg, max) = (152788.929, 153057.559, 153568.873), stdev = 303.531
[info]   CI (99.9%): [151888.768, 154226.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   738.058 ±(99.9%) 30.550 MB/sec [Average]
[info]   (min, avg, max) = (731.632, 738.058, 751.658), stdev = 7.934
[info]   CI (99.9%): [707.507, 768.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7588.265 ±(99.9%) 313.206 B/op [Average]
[info]   (min, avg, max) = (7524.980, 7588.265, 7724.567), stdev = 81.339
[info]   CI (99.9%): [7275.059, 7901.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   660.977 ±(99.9%) 3.881 MB/sec [Average]
[info]   (min, avg, max) = (659.940, 660.977, 662.454), stdev = 1.008
[info]   CI (99.9%): [657.096, 664.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6795.794 ±(99.9%) 87.701 B/op [Average]
[info]   (min, avg, max) = (6761.989, 6795.794, 6818.195), stdev = 22.776
[info]   CI (99.9%): [6708.093, 6883.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.086 ±(99.9%) 0.738 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.086, 0.428), stdev = 0.192
[info]   CI (99.9%): [≈ 0, 0.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.60% complete, ETA 00:19:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30029.980 ops/s
[info] # Warmup Iteration   2: 270244.177 ops/s
[info] # Warmup Iteration   3: 328242.278 ops/s
[info] # Warmup Iteration   4: 351184.845 ops/s
[info] # Warmup Iteration   5: 349780.817 ops/s
[info] Iteration   1: 350800.431 ops/s
[info]                  ·gc.alloc.rate:                   1482.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              6650.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6002.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.152 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 350421.973 ops/s
[info]                  ·gc.alloc.rate:                   1477.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              6632.810 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6012.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 349352.009 ops/s
[info]                  ·gc.alloc.rate:                   1489.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              6709.888 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9054.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.938 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.737 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 343713.765 ops/s
[info]                  ·gc.alloc.rate:                   1463.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              6698.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6112.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.286 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 352366.342 ops/s
[info]                  ·gc.alloc.rate:                   1490.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              6656.219 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5962.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.279 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   349330.904 ±(99.9%) 12788.040 ops/s [Average]
[info]   (min, avg, max) = (343713.765, 349330.904, 352366.342), stdev = 3321.013
[info]   CI (99.9%): [336542.864, 362118.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1480.676 ±(99.9%) 42.278 MB/sec [Average]
[info]   (min, avg, max) = (1463.542, 1480.676, 1490.195), stdev = 10.979
[info]   CI (99.9%): [1438.398, 1522.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6669.571 ±(99.9%) 127.711 B/op [Average]
[info]   (min, avg, max) = (6632.810, 6669.571, 6709.888), stdev = 33.166
[info]   CI (99.9%): [6541.860, 6797.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1471.564 ±(99.9%) 1159.283 MB/sec [Average]
[info]   (min, avg, max) = (1334.946, 1471.564, 2010.111), stdev = 301.062
[info]   CI (99.9%): [312.281, 2630.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6628.785 ±(99.9%) 5225.155 B/op [Average]
[info]   (min, avg, max) = (5962.772, 6628.785, 9054.169), stdev = 1356.956
[info]   CI (99.9%): [1403.630, 11853.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.821 ±(99.9%) 6.709 MB/sec [Average]
[info]   (min, avg, max) = (0.010, 0.821, 3.938), stdev = 1.742
[info]   CI (99.9%): [≈ 0, 7.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.700 ±(99.9%) 30.218 B/op [Average]
[info]   (min, avg, max) = (0.047, 3.700, 17.737), stdev = 7.847
[info]   CI (99.9%): [≈ 0, 33.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 9.000), stdev = 3.130
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.83% complete, ETA 00:18:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 974.455 ops/s
[info] # Warmup Iteration   2: 21083.365 ops/s
[info] # Warmup Iteration   3: 43635.601 ops/s
[info] # Warmup Iteration   4: 49667.660 ops/s
[info] # Warmup Iteration   5: 52242.017 ops/s
[info] Iteration   1: 52941.009 ops/s
[info]                  ·gc.alloc.rate:                   2275.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              67655.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59587.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68.073 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 53122.544 ops/s
[info]                  ·gc.alloc.rate:                   2286.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              67755.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79120.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.035 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 51764.046 ops/s
[info]                  ·gc.alloc.rate:                   2197.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              66801.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60882.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.165 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 51871.424 ops/s
[info]                  ·gc.alloc.rate:               2199.904 MB/sec
[info]                  ·gc.alloc.rate.norm:          66747.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60843.399 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 51819.884 ops/s
[info]                  ·gc.alloc.rate:                   2224.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              67549.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61029.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.529 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   52303.781 ±(99.9%) 2575.066 ops/s [Average]
[info]   (min, avg, max) = (51764.046, 52303.781, 53122.544), stdev = 668.736
[info]   CI (99.9%): [49728.715, 54878.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2236.770 ±(99.9%) 162.616 MB/sec [Average]
[info]   (min, avg, max) = (2197.146, 2236.770, 2286.985), stdev = 42.231
[info]   CI (99.9%): [2074.154, 2399.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67301.992 ±(99.9%) 1875.260 B/op [Average]
[info]   (min, avg, max) = (66747.832, 67301.992, 67755.028), stdev = 486.999
[info]   CI (99.9%): [65426.732, 69177.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2138.424 ±(99.9%) 1145.602 MB/sec [Average]
[info]   (min, avg, max) = (2002.459, 2138.424, 2670.606), stdev = 297.509
[info]   CI (99.9%): [992.822, 3284.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64292.681 ±(99.9%) 31995.747 B/op [Average]
[info]   (min, avg, max) = (59587.633, 64292.681, 79120.310), stdev = 8309.194
[info]   CI (99.9%): [32296.934, 96288.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.604 ±(99.9%) 3.719 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.604, 2.290), stdev = 0.966
[info]   CI (99.9%): [≈ 0, 4.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   17.960 ±(99.9%) 110.511 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.960, 68.073), stdev = 28.699
[info]   CI (99.9%): [≈ 0, 128.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.400, 9.000), stdev = 1.140
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.06% complete, ETA 00:18:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31531.910 ops/s
[info] # Warmup Iteration   2: 192854.142 ops/s
[info] # Warmup Iteration   3: 231772.865 ops/s
[info] # Warmup Iteration   4: 251256.652 ops/s
[info] # Warmup Iteration   5: 252088.027 ops/s
[info] Iteration   1: 257759.004 ops/s
[info]                  ·gc.alloc.rate:               905.806 MB/sec
[info]                  ·gc.alloc.rate.norm:          5530.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4045.156 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 257978.749 ops/s
[info]                  ·gc.alloc.rate:                   931.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              5679.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8072.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.253 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 257156.842 ops/s
[info]                  ·gc.alloc.rate:               910.997 MB/sec
[info]                  ·gc.alloc.rate.norm:          5575.454 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4062.510 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 258093.309 ops/s
[info]                  ·gc.alloc.rate:               911.589 MB/sec
[info]                  ·gc.alloc.rate.norm:          5559.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4056.029 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 258524.599 ops/s
[info]                  ·gc.alloc.rate:                   927.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              5644.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8110.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.253 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   257902.501 ±(99.9%) 1930.923 ops/s [Average]
[info]   (min, avg, max) = (257156.842, 257902.501, 258524.599), stdev = 501.455
[info]   CI (99.9%): [255971.578, 259833.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   917.469 ±(99.9%) 43.533 MB/sec [Average]
[info]   (min, avg, max) = (905.806, 917.469, 931.752), stdev = 11.305
[info]   CI (99.9%): [873.937, 961.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5597.892 ±(99.9%) 238.493 B/op [Average]
[info]   (min, avg, max) = (5530.801, 5597.892, 5679.290), stdev = 61.936
[info]   CI (99.9%): [5359.399, 5836.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   929.610 ±(99.9%) 1401.578 MB/sec [Average]
[info]   (min, avg, max) = (662.494, 929.610, 1332.257), stdev = 363.985
[info]   CI (99.9%): [≈ 0, 2331.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5669.415 ±(99.9%) 8514.830 B/op [Average]
[info]   (min, avg, max) = (4045.156, 5669.415, 8110.860), stdev = 2211.274
[info]   CI (99.9%): [≈ 0, 14184.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.101 ±(99.9%) 0.535 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.101, 0.253), stdev = 0.139
[info]   CI (99.9%): [≈ 0, 0.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 1.095
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.30% complete, ETA 00:18:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 225230.857 ops/s
[info] # Warmup Iteration   2: 644498.374 ops/s
[info] # Warmup Iteration   3: 626787.425 ops/s
[info] # Warmup Iteration   4: 675773.785 ops/s
[info] # Warmup Iteration   5: 671264.500 ops/s
[info] Iteration   1: 670097.007 ops/s
[info]                  ·gc.alloc.rate:                   754.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              1771.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1569.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 670480.546 ops/s
[info]                  ·gc.alloc.rate:               750.774 MB/sec
[info]                  ·gc.alloc.rate.norm:          1762.353 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1569.940 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 624237.888 ops/s
[info]                  ·gc.alloc.rate:               701.054 MB/sec
[info]                  ·gc.alloc.rate.norm:          1766.953 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1686.237 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 670470.364 ops/s
[info]                  ·gc.alloc.rate:                   767.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              1802.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3141.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.075 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.177 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 662552.734 ops/s
[info]                  ·gc.alloc.rate:               792.503 MB/sec
[info]                  ·gc.alloc.rate.norm:          1882.357 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1590.351 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   659567.708 ±(99.9%) 77155.476 ops/s [Average]
[info]   (min, avg, max) = (624237.888, 659567.708, 670480.546), stdev = 20037.032
[info]   CI (99.9%): [582412.231, 736723.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   753.222 ±(99.9%) 128.883 MB/sec [Average]
[info]   (min, avg, max) = (701.054, 753.222, 792.503), stdev = 33.471
[info]   CI (99.9%): [624.339, 882.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1796.987 ±(99.9%) 193.338 B/op [Average]
[info]   (min, avg, max) = (1762.353, 1796.987, 1882.357), stdev = 50.209
[info]   CI (99.9%): [1603.648, 1990.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   802.752 ±(99.9%) 1152.674 MB/sec [Average]
[info]   (min, avg, max) = (668.123, 802.752, 1338.237), stdev = 299.346
[info]   CI (99.9%): [≈ 0, 1955.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1911.438 ±(99.9%) 2654.092 B/op [Average]
[info]   (min, avg, max) = (1569.265, 1911.438, 3141.397), stdev = 689.259
[info]   CI (99.9%): [≈ 0, 4565.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.019 ±(99.9%) 0.126 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.075), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.044 ±(99.9%) 0.295 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.177), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 7.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84.53% complete, ETA 00:18:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 290467.646 ops/s
[info] # Warmup Iteration   2: 668534.543 ops/s
[info] # Warmup Iteration   3: 768915.063 ops/s
[info] # Warmup Iteration   4: 759415.287 ops/s
[info] # Warmup Iteration   5: 770328.079 ops/s
[info] Iteration   1: 770246.723 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 770489.595 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 768464.373 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 770349.805 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 769748.880 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   769859.875 ±(99.9%) 3190.449 ops/s [Average]
[info]   (min, avg, max) = (768464.373, 769859.875, 770489.595), stdev = 828.550
[info]   CI (99.9%): [766669.426, 773050.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 84.76% complete, ETA 00:17:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2719.813 ops/s
[info] # Warmup Iteration   2: 51314.703 ops/s
[info] # Warmup Iteration   3: 79039.034 ops/s
[info] # Warmup Iteration   4: 86918.327 ops/s
[info] # Warmup Iteration   5: 86728.147 ops/s
[info] Iteration   1: 86422.858 ops/s
[info]                  ·gc.alloc.rate:                   1749.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              31866.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36551.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.153 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 85784.856 ops/s
[info]                  ·gc.alloc.rate:                   1720.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              31560.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24565.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.838 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.719 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 85688.089 ops/s
[info]                  ·gc.alloc.rate:                   1738.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              31940.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36865.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.646 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.240 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 92886.694 ops/s
[info]                  ·gc.alloc.rate:                   1460.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              24749.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22687.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.199 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 93007.220 ops/s
[info]                  ·gc.alloc.rate:                   1466.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              24819.405 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22634.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.409 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   88757.944 ±(99.9%) 14765.953 ops/s [Average]
[info]   (min, avg, max) = (85688.089, 88757.944, 93007.220), stdev = 3834.671
[info]   CI (99.9%): [73991.990, 103523.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1627.314 ±(99.9%) 576.381 MB/sec [Average]
[info]   (min, avg, max) = (1460.620, 1627.314, 1749.806), stdev = 149.684
[info]   CI (99.9%): [1050.933, 2203.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28987.262 ±(99.9%) 14784.555 B/op [Average]
[info]   (min, avg, max) = (24749.146, 28987.262, 31940.073), stdev = 3839.502
[info]   CI (99.9%): [14202.706, 43771.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1605.974 ±(99.9%) 1410.019 MB/sec [Average]
[info]   (min, avg, max) = (1337.809, 1605.974, 2007.171), stdev = 366.178
[info]   CI (99.9%): [195.955, 3015.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   28660.870 ±(99.9%) 28450.133 B/op [Average]
[info]   (min, avg, max) = (22634.867, 28660.870, 36865.768), stdev = 7388.409
[info]   CI (99.9%): [210.737, 57111.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.280 ±(99.9%) 2.844 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 1.280, 1.838), stdev = 0.739
[info]   CI (99.9%): [≈ 0, 4.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   22.944 ±(99.9%) 50.942 B/op [Average]
[info]   (min, avg, max) = (1.409, 22.944, 33.719), stdev = 13.230
[info]   CI (99.9%): [≈ 0, 73.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 11.000), stdev = 3.114
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84.99% complete, ETA 00:17:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14255.598 ops/s
[info] # Warmup Iteration   2: 75126.502 ops/s
[info] # Warmup Iteration   3: 116397.827 ops/s
[info] # Warmup Iteration   4: 113570.635 ops/s
[info] # Warmup Iteration   5: 119085.224 ops/s
[info] Iteration   1: 117736.045 ops/s
[info]                  ·gc.alloc.rate:                   1923.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              25707.659 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26713.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.150 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 120790.967 ops/s
[info]                  ·gc.alloc.rate:                   1960.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              25544.860 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25969.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.882 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 118306.252 ops/s
[info]                  ·gc.alloc.rate:                   1938.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              25783.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26479.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.939 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 119260.955 ops/s
[info]                  ·gc.alloc.rate:                   1935.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              25537.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26289.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.374 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 113909.362 ops/s
[info]                  ·gc.alloc.rate:                   2228.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              30790.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27579.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   118000.716 ±(99.9%) 9869.276 ops/s [Average]
[info]   (min, avg, max) = (113909.362, 118000.716, 120790.967), stdev = 2563.020
[info]   CI (99.9%): [108131.440, 127869.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1997.164 ±(99.9%) 501.329 MB/sec [Average]
[info]   (min, avg, max) = (1923.130, 1997.164, 2228.801), stdev = 130.193
[info]   CI (99.9%): [1495.836, 2498.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   26672.759 ±(99.9%) 8872.680 B/op [Average]
[info]   (min, avg, max) = (25537.199, 26672.759, 30790.298), stdev = 2304.207
[info]   CI (99.9%): [17800.079, 35545.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1994.107 ±(99.9%) 12.417 MB/sec [Average]
[info]   (min, avg, max) = (1990.481, 1994.107, 1998.408), stdev = 3.225
[info]   CI (99.9%): [1981.690, 2006.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   26606.283 ±(99.9%) 2342.771 B/op [Average]
[info]   (min, avg, max) = (25969.418, 26606.283, 27579.331), stdev = 608.410
[info]   CI (99.9%): [24263.512, 28949.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.007 ±(99.9%) 6.414 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 1.007, 3.976), stdev = 1.666
[info]   CI (99.9%): [≈ 0, 7.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13.471 ±(99.9%) 85.740 B/op [Average]
[info]   (min, avg, max) = (1.374, 13.471, 53.150), stdev = 22.266
[info]   CI (99.9%): [≈ 0, 99.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 13.000), stdev = 3.647
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.22% complete, ETA 00:17:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24387.165 ops/s
[info] # Warmup Iteration   2: 101154.715 ops/s
[info] # Warmup Iteration   3: 202577.441 ops/s
[info] # Warmup Iteration   4: 210295.447 ops/s
[info] # Warmup Iteration   5: 203967.955 ops/s
[info] Iteration   1: 205298.741 ops/s
[info]                  ·gc.alloc.rate:               857.789 MB/sec
[info]                  ·gc.alloc.rate.norm:          6575.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5065.708 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 207525.482 ops/s
[info]                  ·gc.alloc.rate:               875.603 MB/sec
[info]                  ·gc.alloc.rate.norm:          6640.569 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5011.599 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 212315.012 ops/s
[info]                  ·gc.alloc.rate:               911.698 MB/sec
[info]                  ·gc.alloc.rate.norm:          6757.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1320.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9787.453 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 212689.051 ops/s
[info]                  ·gc.alloc.rate:                   884.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              6547.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4885.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.154 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 212845.955 ops/s
[info]                  ·gc.alloc.rate:               890.934 MB/sec
[info]                  ·gc.alloc.rate.norm:          6587.646 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4881.519 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   210134.848 ±(99.9%) 13453.012 ops/s [Average]
[info]   (min, avg, max) = (205298.741, 210134.848, 212845.955), stdev = 3493.705
[info]   CI (99.9%): [196681.836, 223587.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   884.175 ±(99.9%) 76.370 MB/sec [Average]
[info]   (min, avg, max) = (857.789, 884.175, 911.698), stdev = 19.833
[info]   CI (99.9%): [807.805, 960.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6621.822 ±(99.9%) 320.622 B/op [Average]
[info]   (min, avg, max) = (6547.598, 6621.822, 6757.984), stdev = 83.265
[info]   CI (99.9%): [6301.200, 6942.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   792.488 ±(99.9%) 1136.359 MB/sec [Average]
[info]   (min, avg, max) = (660.188, 792.488, 1320.394), stdev = 295.109
[info]   CI (99.9%): [≈ 0, 1928.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5926.290 ±(99.9%) 8317.151 B/op [Average]
[info]   (min, avg, max) = (4881.519, 5926.290, 9787.453), stdev = 2159.938
[info]   CI (99.9%): [≈ 0, 14243.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.031 ±(99.9%) 0.265 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.154), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.45% complete, ETA 00:16:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72208.899 ops/s
[info] # Warmup Iteration   2: 194479.435 ops/s
[info] # Warmup Iteration   3: 261807.229 ops/s
[info] # Warmup Iteration   4: 290748.767 ops/s
[info] # Warmup Iteration   5: 289541.425 ops/s
[info] Iteration   1: 290021.993 ops/s
[info]                  ·gc.alloc.rate:                   1078.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              5852.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7251.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.113 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 291441.594 ops/s
[info]                  ·gc.alloc.rate:               1061.698 MB/sec
[info]                  ·gc.alloc.rate.norm:          5733.475 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3611.723 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 287803.504 ops/s
[info]                  ·gc.alloc.rate:                   1069.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              5848.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7314.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.156 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 291663.677 ops/s
[info]                  ·gc.alloc.rate:                   1059.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              5714.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3608.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.295 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 284900.677 ops/s
[info]                  ·gc.alloc.rate:                   1045.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              5776.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7393.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.622 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   289166.289 ±(99.9%) 10925.049 ops/s [Average]
[info]   (min, avg, max) = (284900.677, 289166.289, 291663.677), stdev = 2837.200
[info]   CI (99.9%): [278241.241, 300091.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1062.936 ±(99.9%) 46.860 MB/sec [Average]
[info]   (min, avg, max) = (1045.695, 1062.936, 1078.349), stdev = 12.169
[info]   CI (99.9%): [1016.076, 1109.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5785.158 ±(99.9%) 245.044 B/op [Average]
[info]   (min, avg, max) = (5714.844, 5785.158, 5852.140), stdev = 63.637
[info]   CI (99.9%): [5540.114, 6030.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1069.986 ±(99.9%) 1409.883 MB/sec [Average]
[info]   (min, avg, max) = (668.802, 1069.986, 1338.289), stdev = 366.142
[info]   CI (99.9%): [≈ 0, 2479.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5835.972 ±(99.9%) 7826.023 B/op [Average]
[info]   (min, avg, max) = (3608.826, 5835.972, 7393.097), stdev = 2032.393
[info]   CI (99.9%): [≈ 0, 13661.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.745 ±(99.9%) 6.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 3.622), stdev = 1.608
[info]   CI (99.9%): [≈ 0, 6.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.115 ±(99.9%) 34.218 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.115, 20.010), stdev = 8.886
[info]   CI (99.9%): [≈ 0, 38.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 10.000), stdev = 2.588
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85.68% complete, ETA 00:16:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5452.138 ops/s
[info] # Warmup Iteration   2: 46456.615 ops/s
[info] # Warmup Iteration   3: 99148.762 ops/s
[info] # Warmup Iteration   4: 86118.569 ops/s
[info] # Warmup Iteration   5: 103358.017 ops/s
[info] Iteration   1: 102637.145 ops/s
[info]                  ·gc.alloc.rate:                   3312.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              50794.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40920.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.384 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 100328.705 ops/s
[info]                  ·gc.alloc.rate:                   3228.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              50625.851 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3343.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52430.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.653 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 103989.236 ops/s
[info]                  ·gc.alloc.rate:               3354.387 MB/sec
[info]                  ·gc.alloc.rate.norm:          50759.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3354.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50767.794 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 100664.449 ops/s
[info]                  ·gc.alloc.rate:                   3302.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              51642.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3368.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52668.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.325 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 100841.417 ops/s
[info]                  ·gc.alloc.rate:                   3282.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              51215.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42184.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.650 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   101692.190 ±(99.9%) 6029.830 ops/s [Average]
[info]   (min, avg, max) = (100328.705, 101692.190, 103989.236), stdev = 1565.928
[info]   CI (99.9%): [95662.360, 107722.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3296.144 ±(99.9%) 177.530 MB/sec [Average]
[info]   (min, avg, max) = (3228.249, 3296.144, 3354.387), stdev = 46.104
[info]   CI (99.9%): [3118.614, 3473.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   51007.683 ±(99.9%) 1610.300 B/op [Average]
[info]   (min, avg, max) = (50625.851, 51007.683, 51642.696), stdev = 418.190
[info]   CI (99.9%): [49397.383, 52617.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3087.842 ±(99.9%) 1413.184 MB/sec [Average]
[info]   (min, avg, max) = (2668.592, 3087.842, 3368.568), stdev = 366.999
[info]   CI (99.9%): [1674.658, 4501.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   47794.447 ±(99.9%) 22188.282 B/op [Average]
[info]   (min, avg, max) = (40920.338, 47794.447, 52668.344), stdev = 5762.226
[info]   CI (99.9%): [25606.165, 69982.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.675 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.104, 0.416), stdev = 0.175
[info]   CI (99.9%): [≈ 0, 0.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.603 ±(99.9%) 10.345 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.603, 6.384), stdev = 2.687
[info]   CI (99.9%): [≈ 0, 11.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85.91% complete, ETA 00:16:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46394.200 ops/s
[info] # Warmup Iteration   2: 220329.509 ops/s
[info] # Warmup Iteration   3: 233815.247 ops/s
[info] # Warmup Iteration   4: 256060.481 ops/s
[info] # Warmup Iteration   5: 255853.768 ops/s
[info] Iteration   1: 249478.850 ops/s
[info]                  ·gc.alloc.rate:               1713.298 MB/sec
[info]                  ·gc.alloc.rate.norm:          10808.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12645.294 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     14.000 ms
[info] Iteration   2: 251913.215 ops/s
[info]                  ·gc.alloc.rate:                   1700.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              10621.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8356.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.963 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 251037.859 ops/s
[info]                  ·gc.alloc.rate:                   1731.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              10852.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12537.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.044 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 252833.558 ops/s
[info]                  ·gc.alloc.rate:                   1714.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              10673.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8293.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 253456.074 ops/s
[info]                  ·gc.alloc.rate:               1732.031 MB/sec
[info]                  ·gc.alloc.rate.norm:          10755.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12409.086 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   251743.911 ±(99.9%) 6019.983 ops/s [Average]
[info]   (min, avg, max) = (249478.850, 251743.911, 253456.074), stdev = 1563.370
[info]   CI (99.9%): [245723.929, 257763.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1718.436 ±(99.9%) 52.030 MB/sec [Average]
[info]   (min, avg, max) = (1700.299, 1718.436, 1732.031), stdev = 13.512
[info]   CI (99.9%): [1666.406, 1770.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10742.297 ±(99.9%) 365.885 B/op [Average]
[info]   (min, avg, max) = (10621.136, 10742.297, 10852.514), stdev = 95.019
[info]   CI (99.9%): [10376.412, 11108.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1734.722 ±(99.9%) 1404.664 MB/sec [Average]
[info]   (min, avg, max) = (1332.433, 1734.722, 2004.416), stdev = 364.787
[info]   CI (99.9%): [330.057, 3139.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10848.462 ±(99.9%) 8875.634 B/op [Average]
[info]   (min, avg, max) = (8293.629, 10848.462, 12645.294), stdev = 2304.974
[info]   CI (99.9%): [1972.828, 19724.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.869 ±(99.9%) 7.082 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.869, 4.156), stdev = 1.839
[info]   CI (99.9%): [≈ 0, 7.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.427 ±(99.9%) 44.236 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.427, 25.963), stdev = 11.488
[info]   CI (99.9%): [≈ 0, 49.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 14.000), stdev = 4.658
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.14% complete, ETA 00:16:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 155204.316 ops/s
[info] # Warmup Iteration   2: 743511.769 ops/s
[info] # Warmup Iteration   3: 839621.311 ops/s
[info] # Warmup Iteration   4: 837107.004 ops/s
[info] # Warmup Iteration   5: 842147.423 ops/s
[info] Iteration   1: 842510.119 ops/s
[info]                  ·gc.alloc.rate:               462.159 MB/sec
[info]                  ·gc.alloc.rate.norm:          863.379 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1231.950 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 847135.749 ops/s
[info]                  ·gc.alloc.rate:               460.613 MB/sec
[info]                  ·gc.alloc.rate.norm:          855.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1225.212 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 818814.001 ops/s
[info]                  ·gc.alloc.rate:      476.311 MB/sec
[info]                  ·gc.alloc.rate.norm: 915.515 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 804881.176 ops/s
[info]                  ·gc.alloc.rate:               445.697 MB/sec
[info]                  ·gc.alloc.rate.norm:          871.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1291.485 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 839943.926 ops/s
[info]                  ·gc.alloc.rate:                   460.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              863.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1237.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   830656.994 ±(99.9%) 69496.985 ops/s [Average]
[info]   (min, avg, max) = (804881.176, 830656.994, 847135.749), stdev = 18048.146
[info]   CI (99.9%): [761160.010, 900153.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   461.110 ±(99.9%) 41.744 MB/sec [Average]
[info]   (min, avg, max) = (445.697, 461.110, 476.311), stdev = 10.841
[info]   CI (99.9%): [419.366, 502.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   873.868 ±(99.9%) 92.210 B/op [Average]
[info]   (min, avg, max) = (855.673, 873.868, 915.515), stdev = 23.947
[info]   CI (99.9%): [781.658, 966.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   528.008 ±(99.9%) 1136.580 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 528.008, 660.583), stdev = 295.166
[info]   CI (99.9%): [≈ 0, 1664.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   997.250 ±(99.9%) 2149.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 997.250, 1291.485), stdev = 558.100
[info]   CI (99.9%): [≈ 0, 3146.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.039), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.37% complete, ETA 00:15:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 323805.026 ops/s
[info] # Warmup Iteration   2: 764968.652 ops/s
[info] # Warmup Iteration   3: 891650.671 ops/s
[info] # Warmup Iteration   4: 890647.714 ops/s
[info] # Warmup Iteration   5: 893594.735 ops/s
[info] Iteration   1: 865742.069 ops/s
[info]                  ·gc.alloc.rate:               470.351 MB/sec
[info]                  ·gc.alloc.rate.norm:          855.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 930.030 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 876563.282 ops/s
[info]                  ·gc.alloc.rate:               476.948 MB/sec
[info]                  ·gc.alloc.rate.norm:          856.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1199.683 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 900565.197 ops/s
[info]                  ·gc.alloc.rate:      476.067 MB/sec
[info]                  ·gc.alloc.rate.norm: 832.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 897431.237 ops/s
[info]                  ·gc.alloc.rate:                   492.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              864.422 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1171.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 889097.556 ops/s
[info]                  ·gc.alloc.rate:               517.150 MB/sec
[info]                  ·gc.alloc.rate.norm:          915.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1183.320 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   885879.868 ±(99.9%) 56190.919 ops/s [Average]
[info]   (min, avg, max) = (865742.069, 885879.868, 900565.197), stdev = 14592.603
[info]   CI (99.9%): [829688.949, 942070.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   486.702 ±(99.9%) 73.118 MB/sec [Average]
[info]   (min, avg, max) = (470.351, 486.702, 517.150), stdev = 18.989
[info]   CI (99.9%): [413.584, 559.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   864.601 ±(99.9%) 118.943 B/op [Average]
[info]   (min, avg, max) = (832.000, 864.601, 915.487), stdev = 30.889
[info]   CI (99.9%): [745.658, 983.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   503.342 ±(99.9%) 1114.580 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503.342, 668.446), stdev = 289.453
[info]   CI (99.9%): [≈ 0, 1617.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   896.953 ±(99.9%) 1977.347 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 896.953, 1199.683), stdev = 513.511
[info]   CI (99.9%): [≈ 0, 2874.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.037), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86.61% complete, ETA 00:15:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 391277.919 ops/s
[info] # Warmup Iteration   2: 898596.096 ops/s
[info] # Warmup Iteration   3: 906143.209 ops/s
[info] # Warmup Iteration   4: 909333.755 ops/s
[info] # Warmup Iteration   5: 910459.329 ops/s
[info] Iteration   1: 906771.357 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 910462.830 ops/s
[info]                  ·gc.alloc.rate:      0.085 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.148 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 912163.643 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 904295.866 ops/s
[info]                  ·gc.alloc.rate:      0.128 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.223 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 906159.420 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   907970.623 ±(99.9%) 12479.746 ops/s [Average]
[info]   (min, avg, max) = (904295.866, 907970.623, 912163.643), stdev = 3240.950
[info]   CI (99.9%): [895490.877, 920450.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.043 ±(99.9%) 0.232 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.043, 0.128), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.074 ±(99.9%) 0.403 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.074, 0.223), stdev = 0.105
[info]   CI (99.9%): [≈ 0, 0.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86.84% complete, ETA 00:15:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5918.269 ops/s
[info] # Warmup Iteration   2: 22459.443 ops/s
[info] # Warmup Iteration   3: 38675.067 ops/s
[info] # Warmup Iteration   4: 39191.621 ops/s
[info] # Warmup Iteration   5: 36433.441 ops/s
[info] Iteration   1: 37384.604 ops/s
[info]                  ·gc.alloc.rate:                   1881.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              79193.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84074.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 152.210 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 39506.355 ops/s
[info]                  ·gc.alloc.rate:                   1844.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              73496.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52968.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.610 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 39309.060 ops/s
[info]                  ·gc.alloc.rate:                   1863.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              74620.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79853.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.335 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 39221.409 ops/s
[info]                  ·gc.alloc.rate:                   1844.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              74014.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80097.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.835 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 39546.073 ops/s
[info]                  ·gc.alloc.rate:                   1838.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              73160.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53008.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.971 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   38993.500 ±(99.9%) 3501.983 ops/s [Average]
[info]   (min, avg, max) = (37384.604, 38993.500, 39546.073), stdev = 909.454
[info]   CI (99.9%): [35491.517, 42495.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1854.537 ±(99.9%) 68.498 MB/sec [Average]
[info]   (min, avg, max) = (1838.212, 1854.537, 1881.409), stdev = 17.789
[info]   CI (99.9%): [1786.038, 1923.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   74896.891 ±(99.9%) 9488.806 B/op [Average]
[info]   (min, avg, max) = (73160.486, 74896.891, 79193.110), stdev = 2464.213
[info]   CI (99.9%): [65408.085, 84385.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1729.864 ±(99.9%) 1402.973 MB/sec [Average]
[info]   (min, avg, max) = (1329.622, 1729.864, 1997.378), stdev = 364.348
[info]   CI (99.9%): [326.892, 3132.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   70000.432 ±(99.9%) 60146.659 B/op [Average]
[info]   (min, avg, max) = (52968.838, 70000.432, 84074.533), stdev = 15619.896
[info]   CI (99.9%): [9853.773, 130147.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.852 ±(99.9%) 5.962 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.852, 3.616), stdev = 1.548
[info]   CI (99.9%): [≈ 0, 6.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   35.592 ±(99.9%) 251.499 B/op [Average]
[info]   (min, avg, max) = (0.835, 35.592, 152.210), stdev = 65.314
[info]   CI (99.9%): [≈ 0, 287.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.800, 17.000), stdev = 4.324
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 87.07% complete, ETA 00:15:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40785.797 ops/s
[info] # Warmup Iteration   2: 405559.122 ops/s
[info] # Warmup Iteration   3: 1029179.397 ops/s
[info] # Warmup Iteration   4: 1100074.512 ops/s
[info] # Warmup Iteration   5: 1100155.552 ops/s
[info] Iteration   1: 1108830.541 ops/s
[info]                  ·gc.alloc.rate:                   2529.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              3590.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2663.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3780.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.563 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 1106250.937 ops/s
[info]                  ·gc.alloc.rate:                   2515.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              3578.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2833.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.296 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1106530.629 ops/s
[info]                  ·gc.alloc.rate:               2542.801 MB/sec
[info]                  ·gc.alloc.rate.norm:          3616.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2656.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3778.856 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 1105347.971 ops/s
[info]                  ·gc.alloc.rate:                   2552.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              3634.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2663.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3793.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1127346.858 ops/s
[info]                  ·gc.alloc.rate:                   2615.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              3651.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3733.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   1110861.387 ±(99.9%) 35828.816 ops/s [Average]
[info]   (min, avg, max) = (1105347.971, 1110861.387, 1127346.858), stdev = 9304.630
[info]   CI (99.9%): [1075032.571, 1146690.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2551.254 ±(99.9%) 148.564 MB/sec [Average]
[info]   (min, avg, max) = (2515.619, 2551.254, 2615.588), stdev = 38.582
[info]   CI (99.9%): [2402.690, 2699.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3614.443 ±(99.9%) 116.733 B/op [Average]
[info]   (min, avg, max) = (3578.477, 3614.443, 3651.627), stdev = 30.315
[info]   CI (99.9%): [3497.710, 3731.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2530.074 ±(99.9%) 1158.410 MB/sec [Average]
[info]   (min, avg, max) = (1992.044, 2530.074, 2674.564), stdev = 300.835
[info]   CI (99.9%): [1371.664, 3688.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3583.948 ±(99.9%) 1617.287 B/op [Average]
[info]   (min, avg, max) = (2833.690, 3583.948, 3793.082), stdev = 420.004
[info]   CI (99.9%): [1966.662, 5201.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.975 ±(99.9%) 7.862 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.975, 4.624), stdev = 2.042
[info]   CI (99.9%): [≈ 0, 8.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.384 ±(99.9%) 11.159 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.384, 6.563), stdev = 2.898
[info]   CI (99.9%): [≈ 0, 12.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 11.000), stdev = 2.775
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87.30% complete, ETA 00:14:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55619.252 ops/s
[info] # Warmup Iteration   2: 1153396.066 ops/s
[info] # Warmup Iteration   3: 1609469.964 ops/s
[info] # Warmup Iteration   4: 1855819.787 ops/s
[info] # Warmup Iteration   5: 1822152.988 ops/s
[info] Iteration   1: 1758205.492 ops/s
[info]                  ·gc.alloc.rate:               1119.414 MB/sec
[info]                  ·gc.alloc.rate.norm:          1001.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1189.649 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 1773078.158 ops/s
[info]                  ·gc.alloc.rate:               1090.987 MB/sec
[info]                  ·gc.alloc.rate.norm:          968.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 590.424 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1762088.264 ops/s
[info]                  ·gc.alloc.rate:                   1106.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              988.159 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1190.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1779487.908 ops/s
[info]                  ·gc.alloc.rate:               1109.673 MB/sec
[info]                  ·gc.alloc.rate.norm:          981.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1181.304 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1821981.970 ops/s
[info]                  ·gc.alloc.rate:                   1117.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              964.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     578.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1778968.358 ±(99.9%) 98194.618 ops/s [Average]
[info]   (min, avg, max) = (1758205.492, 1778968.358, 1821981.970), stdev = 25500.830
[info]   CI (99.9%): [1680773.740, 1877162.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1108.690 ±(99.9%) 43.294 MB/sec [Average]
[info]   (min, avg, max) = (1090.987, 1108.690, 1119.414), stdev = 11.243
[info]   CI (99.9%): [1065.396, 1151.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   980.913 ±(99.9%) 57.475 B/op [Average]
[info]   (min, avg, max) = (964.961, 980.913, 1001.580), stdev = 14.926
[info]   CI (99.9%): [923.439, 1038.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1066.483 ±(99.9%) 1403.743 MB/sec [Average]
[info]   (min, avg, max) = (665.168, 1066.483, 1335.606), stdev = 364.548
[info]   CI (99.9%): [≈ 0, 2470.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   945.992 ±(99.9%) 1271.877 B/op [Average]
[info]   (min, avg, max) = (578.010, 945.992, 1190.572), stdev = 330.303
[info]   CI (99.9%): [≈ 0, 2217.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.064 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.037), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 5.000), stdev = 1.342
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87.53% complete, ETA 00:14:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3039987.896 ops/s
[info] # Warmup Iteration   2: 8496839.910 ops/s
[info] # Warmup Iteration   3: 9389538.068 ops/s
[info] # Warmup Iteration   4: 9928221.786 ops/s
[info] # Warmup Iteration   5: 9892175.644 ops/s
[info] Iteration   1: 9898287.250 ops/s
[info]                  ·gc.alloc.rate:               312.926 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.757 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 81.346 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 9934787.877 ops/s
[info]                  ·gc.alloc.rate:      303.002 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 9678203.479 ops/s
[info]                  ·gc.alloc.rate:                   317.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              51.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9810565.165 ops/s
[info]                  ·gc.alloc.rate:      299.294 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 9762182.843 ops/s
[info]                  ·gc.alloc.rate:               317.114 MB/sec
[info]                  ·gc.alloc.rate.norm:          51.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 107.885 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   9816805.323 ±(99.9%) 398277.472 ops/s [Average]
[info]   (min, avg, max) = (9678203.479, 9816805.323, 9934787.877), stdev = 103431.395
[info]   CI (99.9%): [9418527.851, 10215082.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   310.050 ±(99.9%) 32.524 MB/sec [Average]
[info]   (min, avg, max) = (299.294, 310.050, 317.914), stdev = 8.446
[info]   CI (99.9%): [277.526, 342.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   49.717 ±(99.9%) 6.618 B/op [Average]
[info]   (min, avg, max) = (48.000, 49.717, 51.699), stdev = 1.719
[info]   CI (99.9%): [43.099, 56.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.467 ±(99.9%) 1215.270 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.467, 669.153), stdev = 315.602
[info]   CI (99.9%): [≈ 0, 1553.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   54.485 ±(99.9%) 195.727 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 54.485, 107.885), stdev = 50.830
[info]   CI (99.9%): [≈ 0, 250.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87.76% complete, ETA 00:14:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1473.359 ops/s
[info] # Warmup Iteration   2: 105760.514 ops/s
[info] # Warmup Iteration   3: 436127.697 ops/s
[info] # Warmup Iteration   4: 465237.449 ops/s
[info] # Warmup Iteration   5: 462120.685 ops/s
[info] Iteration   1: 465124.804 ops/s
[info]                  ·gc.alloc.rate:                   2291.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              7753.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9038.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.298 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 471369.955 ops/s
[info]                  ·gc.alloc.rate:                   2308.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              7708.822 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6690.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.529 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 475931.474 ops/s
[info]                  ·gc.alloc.rate:               2356.274 MB/sec
[info]                  ·gc.alloc.rate.norm:          7791.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2670.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8830.195 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 480192.380 ops/s
[info]                  ·gc.alloc.rate:                   2348.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              7697.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6570.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 479620.612 ops/s
[info]                  ·gc.alloc.rate:               2374.024 MB/sec
[info]                  ·gc.alloc.rate.norm:          7790.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6593.642 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   474447.845 ±(99.9%) 24227.778 ops/s [Average]
[info]   (min, avg, max) = (465124.804, 474447.845, 480192.380), stdev = 6291.877
[info]   CI (99.9%): [450220.067, 498675.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2335.758 ±(99.9%) 132.483 MB/sec [Average]
[info]   (min, avg, max) = (2291.387, 2335.758, 2374.024), stdev = 34.405
[info]   CI (99.9%): [2203.275, 2468.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7748.238 ±(99.9%) 170.855 B/op [Average]
[info]   (min, avg, max) = (7697.029, 7748.238, 7791.854), stdev = 44.371
[info]   CI (99.9%): [7577.383, 7919.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2271.868 ±(99.9%) 1402.298 MB/sec [Average]
[info]   (min, avg, max) = (2003.865, 2271.868, 2671.314), stdev = 364.172
[info]   CI (99.9%): [869.570, 3674.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7544.695 ±(99.9%) 4896.437 B/op [Average]
[info]   (min, avg, max) = (6570.411, 7544.695, 9038.671), stdev = 1271.589
[info]   CI (99.9%): [2648.259, 12441.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.645 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.645, 2.748), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.179 ±(99.9%) 15.529 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.179, 9.298), stdev = 4.033
[info]   CI (99.9%): [≈ 0, 17.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 13.000), stdev = 3.647
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 87.99% complete, ETA 00:13:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59141.742 ops/s
[info] # Warmup Iteration   2: 787603.727 ops/s
[info] # Warmup Iteration   3: 1806023.182 ops/s
[info] # Warmup Iteration   4: 2006561.337 ops/s
[info] # Warmup Iteration   5: 1970690.217 ops/s
[info] Iteration   1: 2018736.374 ops/s
[info]                  ·gc.alloc.rate:                   2064.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              1609.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1982.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1545.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2027326.887 ops/s
[info]                  ·gc.alloc.rate:                   2064.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              1601.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1543.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2021638.966 ops/s
[info]                  ·gc.alloc.rate:                   2068.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              1610.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1552.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.178 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2024483.112 ops/s
[info]                  ·gc.alloc.rate:               2069.433 MB/sec
[info]                  ·gc.alloc.rate.norm:          1608.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1556.432 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 2023113.627 ops/s
[info]                  ·gc.alloc.rate:                   2068.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              1609.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1562.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   2023059.793 ±(99.9%) 12320.184 ops/s [Average]
[info]   (min, avg, max) = (2018736.374, 2023059.793, 2027326.887), stdev = 3199.513
[info]   CI (99.9%): [2010739.609, 2035379.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   2067.126 ±(99.9%) 9.535 MB/sec [Average]
[info]   (min, avg, max) = (2064.224, 2067.126, 2069.433), stdev = 2.476
[info]   CI (99.9%): [2057.591, 2076.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1608.071 ±(99.9%) 13.485 B/op [Average]
[info]   (min, avg, max) = (1601.889, 1608.071, 1610.373), stdev = 3.502
[info]   CI (99.9%): [1594.586, 1621.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1995.242 ±(99.9%) 38.606 MB/sec [Average]
[info]   (min, avg, max) = (1982.624, 1995.242, 2007.975), stdev = 10.026
[info]   CI (99.9%): [1956.636, 2033.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1552.147 ±(99.9%) 28.921 B/op [Average]
[info]   (min, avg, max) = (1543.897, 1552.147, 1562.128), stdev = 7.511
[info]   CI (99.9%): [1523.226, 1581.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.387 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.229), stdev = 0.100
[info]   CI (99.9%): [≈ 0, 0.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.071 ±(99.9%) 0.301 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.178), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88.22% complete, ETA 00:13:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126402.739 ops/s
[info] # Warmup Iteration   2: 2124264.606 ops/s
[info] # Warmup Iteration   3: 2840110.972 ops/s
[info] # Warmup Iteration   4: 2976716.066 ops/s
[info] # Warmup Iteration   5: 2984561.304 ops/s
[info] Iteration   1: 2990521.451 ops/s
[info]                  ·gc.alloc.rate:                   1157.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.888 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     349.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2939228.774 ops/s
[info]                  ·gc.alloc.rate:               1164.176 MB/sec
[info]                  ·gc.alloc.rate.norm:          623.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 710.921 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 2983514.573 ops/s
[info]                  ·gc.alloc.rate:               1173.915 MB/sec
[info]                  ·gc.alloc.rate.norm:          619.258 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 701.776 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2956263.186 ops/s
[info]                  ·gc.alloc.rate:                   1143.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     354.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2930681.233 ops/s
[info]                  ·gc.alloc.rate:               1147.586 MB/sec
[info]                  ·gc.alloc.rate.norm:          616.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 716.910 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2960041.844 ±(99.9%) 101686.951 ops/s [Average]
[info]   (min, avg, max) = (2930681.233, 2960041.844, 2990521.451), stdev = 26407.778
[info]   CI (99.9%): [2858354.892, 3061728.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1157.221 ±(99.9%) 47.642 MB/sec [Average]
[info]   (min, avg, max) = (1143.350, 1157.221, 1173.915), stdev = 12.372
[info]   CI (99.9%): [1109.579, 1204.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   615.230 ±(99.9%) 24.497 B/op [Average]
[info]   (min, avg, max) = (608.706, 615.230, 623.100), stdev = 6.362
[info]   CI (99.9%): [590.733, 639.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1064.549 ±(99.9%) 1406.260 MB/sec [Average]
[info]   (min, avg, max) = (663.233, 1064.549, 1335.144), stdev = 365.201
[info]   CI (99.9%): [≈ 0, 2470.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   566.613 ±(99.9%) 755.666 B/op [Average]
[info]   (min, avg, max) = (349.012, 566.613, 716.910), stdev = 196.244
[info]   CI (99.9%): [≈ 0, 1322.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.022), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88.45% complete, ETA 00:13:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 495511.082 ops/s
[info] # Warmup Iteration   2: 8003508.241 ops/s
[info] # Warmup Iteration   3: 9102788.907 ops/s
[info] # Warmup Iteration   4: 8897480.875 ops/s
[info] # Warmup Iteration   5: 9149469.267 ops/s
[info] Iteration   1: 9141418.751 ops/s
[info]                  ·gc.alloc.rate:                   763.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              131.376 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 9137477.295 ops/s
[info]                  ·gc.alloc.rate:               760.039 MB/sec
[info]                  ·gc.alloc.rate.norm:          130.912 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115.082 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 9138745.203 ops/s
[info]                  ·gc.alloc.rate:               761.724 MB/sec
[info]                  ·gc.alloc.rate.norm:          131.185 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115.064 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 9143003.520 ops/s
[info]                  ·gc.alloc.rate:                   769.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              132.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 9102258.237 ops/s
[info]                  ·gc.alloc.rate:                   780.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              134.940 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   9132580.601 ±(99.9%) 65804.785 ops/s [Average]
[info]   (min, avg, max) = (9102258.237, 9132580.601, 9143003.520), stdev = 17089.294
[info]   CI (99.9%): [9066775.816, 9198385.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   766.951 ±(99.9%) 32.497 MB/sec [Average]
[info]   (min, avg, max) = (760.039, 766.951, 780.715), stdev = 8.439
[info]   CI (99.9%): [734.454, 799.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   132.166 ±(99.9%) 6.361 B/op [Average]
[info]   (min, avg, max) = (130.912, 132.166, 134.940), stdev = 1.652
[info]   CI (99.9%): [125.805, 138.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   802.264 ±(99.9%) 1154.265 MB/sec [Average]
[info]   (min, avg, max) = (667.793, 802.264, 1338.489), stdev = 299.759
[info]   CI (99.9%): [≈ 0, 1956.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   138.319 ±(99.9%) 200.249 B/op [Average]
[info]   (min, avg, max) = (114.975, 138.319, 231.346), stdev = 52.004
[info]   CI (99.9%): [≈ 0, 338.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.038 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88.68% complete, ETA 00:13:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 885021.223 ops/s
[info] # Warmup Iteration   2: 7725584.969 ops/s
[info] # Warmup Iteration   3: 8997092.829 ops/s
[info] # Warmup Iteration   4: 9076013.441 ops/s
[info] # Warmup Iteration   5: 9034574.341 ops/s
[info] Iteration   1: 9075511.003 ops/s
[info]                  ·gc.alloc.rate:      276.797 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 8875447.125 ops/s
[info]                  ·gc.alloc.rate:                   310.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              55.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 9018778.533 ops/s
[info]                  ·gc.alloc.rate:               285.124 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89.275 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 9068384.764 ops/s
[info]                  ·gc.alloc.rate:      276.565 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 9075971.373 ops/s
[info]                  ·gc.alloc.rate:      276.855 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   9022818.560 ±(99.9%) 330194.995 ops/s [Average]
[info]   (min, avg, max) = (8875447.125, 9022818.560, 9075971.373), stdev = 85750.592
[info]   CI (99.9%): [8692623.565, 9353013.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   285.264 ±(99.9%) 57.093 MB/sec [Average]
[info]   (min, avg, max) = (276.565, 285.264, 310.979), stdev = 14.827
[info]   CI (99.9%): [228.171, 342.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   49.779 ±(99.9%) 11.911 B/op [Average]
[info]   (min, avg, max) = (48.000, 49.779, 55.144), stdev = 3.093
[info]   CI (99.9%): [37.868, 61.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   204.648 ±(99.9%) 1079.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.648, 511.627), stdev = 280.226
[info]   CI (99.9%): [≈ 0, 1283.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   36.000 ±(99.9%) 189.826 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.000, 90.723), stdev = 49.297
[info]   CI (99.9%): [≈ 0, 225.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 2.490
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.91% complete, ETA 00:12:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4454.267 ops/s
[info] # Warmup Iteration   2: 231797.895 ops/s
[info] # Warmup Iteration   3: 534997.940 ops/s
[info] # Warmup Iteration   4: 563815.441 ops/s
[info] # Warmup Iteration   5: 555492.757 ops/s
[info] Iteration   1: 564808.605 ops/s
[info]                  ·gc.alloc.rate:                   2711.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              7554.867 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7451.868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.649 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 568531.723 ops/s
[info]                  ·gc.alloc.rate:                   2730.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              7557.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7398.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.115 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 568239.787 ops/s
[info]                  ·gc.alloc.rate:               2729.355 MB/sec
[info]                  ·gc.alloc.rate.norm:          7559.274 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2675.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7410.793 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 565924.314 ops/s
[info]                  ·gc.alloc.rate:                   2758.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              7672.328 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7460.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 555761.935 ops/s
[info]                  ·gc.alloc.rate:                   2713.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              7682.273 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7621.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   564653.273 ±(99.9%) 20064.129 ops/s [Average]
[info]   (min, avg, max) = (555761.935, 564653.273, 568531.723), stdev = 5210.591
[info]   CI (99.9%): [544589.144, 584717.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2728.637 ±(99.9%) 72.846 MB/sec [Average]
[info]   (min, avg, max) = (2711.158, 2728.637, 2758.720), stdev = 18.918
[info]   CI (99.9%): [2655.791, 2801.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   7605.205 ±(99.9%) 253.860 B/op [Average]
[info]   (min, avg, max) = (7554.867, 7605.205, 7682.273), stdev = 65.927
[info]   CI (99.9%): [7351.345, 7859.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2679.466 ±(99.9%) 31.032 MB/sec [Average]
[info]   (min, avg, max) = (2672.695, 2679.466, 2692.250), stdev = 8.059
[info]   CI (99.9%): [2648.435, 2710.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7468.472 ±(99.9%) 343.770 B/op [Average]
[info]   (min, avg, max) = (7398.389, 7468.472, 7621.109), stdev = 89.276
[info]   CI (99.9%): [7124.703, 7812.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.637 ±(99.9%) 5.309 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.637, 3.104), stdev = 1.379
[info]   CI (99.9%): [≈ 0, 5.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.776 ±(99.9%) 14.795 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.776, 8.649), stdev = 3.842
[info]   CI (99.9%): [≈ 0, 16.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89.15% complete, ETA 00:12:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7454.026 ops/s
[info] # Warmup Iteration   2: 76167.313 ops/s
[info] # Warmup Iteration   3: 92573.300 ops/s
[info] # Warmup Iteration   4: 87138.836 ops/s
[info] # Warmup Iteration   5: 96340.153 ops/s
[info] Iteration   1: 96379.888 ops/s
[info]                  ·gc.alloc.rate:                   2673.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              43650.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2549.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41629.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73.837 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         26.000 ms
[info] Iteration   2: 97598.075 ops/s
[info]                  ·gc.alloc.rate:                   2686.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              43318.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2555.989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41216.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.494 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104.713 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   3: 97895.304 ops/s
[info]                  ·gc.alloc.rate:                   2698.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              43375.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2554.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41069.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.024 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 99139.739 ops/s
[info]                  ·gc.alloc.rate:                   2754.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              43722.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2564.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40704.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.991 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 99275.350 ops/s
[info]                  ·gc.alloc.rate:               2762.530 MB/sec
[info]                  ·gc.alloc.rate.norm:          43796.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2585.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40995.972 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   98057.671 ±(99.9%) 4599.126 ops/s [Average]
[info]   (min, avg, max) = (96379.888, 98057.671, 99275.350), stdev = 1194.378
[info]   CI (99.9%): [93458.545, 102656.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2715.010 ±(99.9%) 157.503 MB/sec [Average]
[info]   (min, avg, max) = (2673.206, 2715.010, 2762.530), stdev = 40.903
[info]   CI (99.9%): [2557.507, 2872.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   43572.746 ±(99.9%) 821.555 B/op [Average]
[info]   (min, avg, max) = (43318.342, 43572.746, 43796.136), stdev = 213.355
[info]   CI (99.9%): [42751.191, 44394.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2562.138 ±(99.9%) 55.296 MB/sec [Average]
[info]   (min, avg, max) = (2549.427, 2562.138, 2585.904), stdev = 14.360
[info]   CI (99.9%): [2506.842, 2617.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   41123.250 ±(99.9%) 1305.394 B/op [Average]
[info]   (min, avg, max) = (40704.457, 41123.250, 41629.756), stdev = 339.007
[info]   CI (99.9%): [39817.855, 42428.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2.291 ±(99.9%) 11.636 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.291, 6.494), stdev = 3.022
[info]   CI (99.9%): [≈ 0, 13.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   37.113 ±(99.9%) 188.319 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.113, 104.713), stdev = 48.906
[info]   CI (99.9%): [≈ 0, 225.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   64.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 12.800, 26.000), stdev = 9.550
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.38% complete, ETA 00:12:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5685.818 ops/s
[info] # Warmup Iteration   2: 89309.890 ops/s
[info] # Warmup Iteration   3: 138443.662 ops/s
[info] # Warmup Iteration   4: 144989.492 ops/s
[info] # Warmup Iteration   5: 143303.987 ops/s
[info] Iteration   1: 143718.238 ops/s
[info]                  ·gc.alloc.rate:                   2254.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              24692.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29248.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.802 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 144262.380 ops/s
[info]                  ·gc.alloc.rate:                   2252.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              24576.758 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21903.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.271 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 139437.232 ops/s
[info]                  ·gc.alloc.rate:               2193.229 MB/sec
[info]                  ·gc.alloc.rate.norm:          24752.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22710.951 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 139701.645 ops/s
[info]                  ·gc.alloc.rate:                   2183.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              24602.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22712.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.235 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 144435.125 ops/s
[info]                  ·gc.alloc.rate:               2310.289 MB/sec
[info]                  ·gc.alloc.rate.norm:          25174.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2694.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29360.999 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   142310.924 ±(99.9%) 9697.086 ops/s [Average]
[info]   (min, avg, max) = (139437.232, 142310.924, 144435.125), stdev = 2518.302
[info]   CI (99.9%): [132613.838, 152008.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2239.005 ±(99.9%) 198.772 MB/sec [Average]
[info]   (min, avg, max) = (2183.864, 2239.005, 2310.289), stdev = 51.620
[info]   CI (99.9%): [2040.233, 2437.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24759.765 ±(99.9%) 933.249 B/op [Average]
[info]   (min, avg, max) = (24576.758, 24759.765, 25174.769), stdev = 242.362
[info]   CI (99.9%): [23826.516, 25693.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2280.326 ±(99.9%) 1414.750 MB/sec [Average]
[info]   (min, avg, max) = (2007.792, 2280.326, 2694.459), stdev = 367.406
[info]   CI (99.9%): [865.576, 3695.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   25187.454 ±(99.9%) 14529.292 B/op [Average]
[info]   (min, avg, max) = (21903.927, 25187.454, 29360.999), stdev = 3773.211
[info]   CI (99.9%): [10658.162, 39716.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.225 ±(99.9%) 1.482 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.225, 0.895), stdev = 0.385
[info]   CI (99.9%): [≈ 0, 1.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.462 ±(99.9%) 16.223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.462, 9.802), stdev = 4.213
[info]   CI (99.9%): [≈ 0, 18.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.61% complete, ETA 00:12:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39211.418 ops/s
[info] # Warmup Iteration   2: 109642.069 ops/s
[info] # Warmup Iteration   3: 167156.859 ops/s
[info] # Warmup Iteration   4: 173971.289 ops/s
[info] # Warmup Iteration   5: 173585.346 ops/s
[info] Iteration   1: 174028.786 ops/s
[info]                  ·gc.alloc.rate:                   2628.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              23774.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2651.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23982.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.200 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 172423.600 ops/s
[info]                  ·gc.alloc.rate:                   2586.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              23612.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2652.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24211.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.835 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.259 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 179072.102 ops/s
[info]                  ·gc.alloc.rate:               2696.526 MB/sec
[info]                  ·gc.alloc.rate.norm:          23699.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2641.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23219.982 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 167727.783 ops/s
[info]                  ·gc.alloc.rate:                   2657.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              24933.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2643.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24802.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.744 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 178844.840 ops/s
[info]                  ·gc.alloc.rate:                   2707.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              23822.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2652.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23342.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   174419.422 ±(99.9%) 18279.985 ops/s [Average]
[info]   (min, avg, max) = (167727.783, 174419.422, 179072.102), stdev = 4747.254
[info]   CI (99.9%): [156139.437, 192699.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2655.438 ±(99.9%) 190.407 MB/sec [Average]
[info]   (min, avg, max) = (2586.932, 2655.438, 2707.180), stdev = 49.448
[info]   CI (99.9%): [2465.031, 2845.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23968.600 ±(99.9%) 2100.128 B/op [Average]
[info]   (min, avg, max) = (23612.597, 23968.600, 24933.820), stdev = 545.397
[info]   CI (99.9%): [21868.472, 26068.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2648.550 ±(99.9%) 19.965 MB/sec [Average]
[info]   (min, avg, max) = (2641.968, 2648.550, 2652.629), stdev = 5.185
[info]   CI (99.9%): [2628.585, 2668.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   23911.901 ±(99.9%) 2503.440 B/op [Average]
[info]   (min, avg, max) = (23219.982, 23911.901, 24802.685), stdev = 650.135
[info]   CI (99.9%): [21408.461, 26415.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1.812 ±(99.9%) 9.795 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.812, 5.835), stdev = 2.544
[info]   CI (99.9%): [≈ 0, 11.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16.677 ±(99.9%) 89.716 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.677, 53.259), stdev = 23.299
[info]   CI (99.9%): [≈ 0, 106.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.600, 17.000), stdev = 5.177
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89.84% complete, ETA 00:11:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4765.471 ops/s
[info] # Warmup Iteration   2: 41669.452 ops/s
[info] # Warmup Iteration   3: 80639.843 ops/s
[info] # Warmup Iteration   4: 81364.694 ops/s
[info] # Warmup Iteration   5: 86505.016 ops/s
[info] Iteration   1: 87308.079 ops/s
[info]                  ·gc.alloc.rate:                   3823.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              68929.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3982.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71790.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.377 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 87674.548 ops/s
[info]                  ·gc.alloc.rate:                   3818.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              68525.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3331.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59784.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.374 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 86978.506 ops/s
[info]                  ·gc.alloc.rate:                   3870.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              70027.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4018.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72720.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.377 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 87013.839 ops/s
[info]                  ·gc.alloc.rate:                   3845.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              69548.767 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3367.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60902.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.377 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 87259.619 ops/s
[info]                  ·gc.alloc.rate:                   3883.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              70047.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4056.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73155.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.751 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   87246.918 ±(99.9%) 1077.389 ops/s [Average]
[info]   (min, avg, max) = (86978.506, 87246.918, 87674.548), stdev = 279.794
[info]   CI (99.9%): [86169.530, 88324.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3848.324 ±(99.9%) 109.089 MB/sec [Average]
[info]   (min, avg, max) = (3818.765, 3848.324, 3883.748), stdev = 28.330
[info]   CI (99.9%): [3739.235, 3957.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   69415.709 ±(99.9%) 2597.953 B/op [Average]
[info]   (min, avg, max) = (68525.464, 69415.709, 70047.934), stdev = 674.680
[info]   CI (99.9%): [66817.756, 72013.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3751.259 ±(99.9%) 1416.945 MB/sec [Average]
[info]   (min, avg, max) = (3331.634, 3751.259, 4056.036), stdev = 367.976
[info]   CI (99.9%): [2334.314, 5168.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67670.529 ±(99.9%) 25871.003 B/op [Average]
[info]   (min, avg, max) = (59784.186, 67670.529, 73155.348), stdev = 6718.617
[info]   CI (99.9%): [41799.526, 93541.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.280 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.187), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.051 ±(99.9%) 5.046 B/op [Average]
[info]   (min, avg, max) = (0.374, 1.051, 3.377), stdev = 1.311
[info]   CI (99.9%): [≈ 0, 6.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 1.000
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 90.07% complete, ETA 00:11:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33336.907 ops/s
[info] # Warmup Iteration   2: 215389.479 ops/s
[info] # Warmup Iteration   3: 243527.554 ops/s
[info] # Warmup Iteration   4: 249718.632 ops/s
[info] # Warmup Iteration   5: 247200.222 ops/s
[info] Iteration   1: 249522.398 ops/s
[info]                  ·gc.alloc.rate:               1724.702 MB/sec
[info]                  ·gc.alloc.rate.norm:          10878.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12615.450 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     14.000 ms
[info] Iteration   2: 244122.943 ops/s
[info]                  ·gc.alloc.rate:                   1678.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              10822.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8606.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.378 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 248144.868 ops/s
[info]                  ·gc.alloc.rate:                   1706.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              10821.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12658.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.188 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 248962.104 ops/s
[info]                  ·gc.alloc.rate:                   1702.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              10761.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8405.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.526 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 251693.046 ops/s
[info]                  ·gc.alloc.rate:                   1732.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12475.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   248489.072 ±(99.9%) 10674.436 ops/s [Average]
[info]   (min, avg, max) = (244122.943, 248489.072, 251693.046), stdev = 2772.117
[info]   CI (99.9%): [237814.636, 259163.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1708.863 ±(99.9%) 80.998 MB/sec [Average]
[info]   (min, avg, max) = (1678.660, 1708.863, 1732.463), stdev = 21.035
[info]   CI (99.9%): [1627.865, 1789.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10823.234 ±(99.9%) 160.602 B/op [Average]
[info]   (min, avg, max) = (10761.639, 10823.234, 10878.623), stdev = 41.708
[info]   CI (99.9%): [10662.632, 10983.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1731.137 ±(99.9%) 1401.951 MB/sec [Average]
[info]   (min, avg, max) = (1329.651, 1731.137, 2000.059), stdev = 364.082
[info]   CI (99.9%): [329.186, 3133.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10952.247 ±(99.9%) 8607.215 B/op [Average]
[info]   (min, avg, max) = (8405.554, 10952.247, 12658.338), stdev = 2235.267
[info]   CI (99.9%): [2345.031, 19559.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.908 ±(99.9%) 7.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.908, 4.247), stdev = 1.868
[info]   CI (99.9%): [≈ 0, 8.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.845 ±(99.9%) 46.387 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.845, 27.378), stdev = 12.047
[info]   CI (99.9%): [≈ 0, 52.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.400, 14.000), stdev = 3.782
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.30% complete, ETA 00:11:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 129722.624 ops/s
[info] # Warmup Iteration   2: 726973.806 ops/s
[info] # Warmup Iteration   3: 769980.710 ops/s
[info] # Warmup Iteration   4: 795814.055 ops/s
[info] # Warmup Iteration   5: 806530.812 ops/s
[info] Iteration   1: 807133.712 ops/s
[info]                  ·gc.alloc.rate:      467.757 MB/sec
[info]                  ·gc.alloc.rate.norm: 912.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 805950.332 ops/s
[info]                  ·gc.alloc.rate:               487.692 MB/sec
[info]                  ·gc.alloc.rate.norm:          952.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1289.730 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 807041.183 ops/s
[info]                  ·gc.alloc.rate:                   484.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1287.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 806210.517 ops/s
[info]                  ·gc.alloc.rate:      467.155 MB/sec
[info]                  ·gc.alloc.rate.norm: 912.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 806165.852 ops/s
[info]                  ·gc.alloc.rate:               484.981 MB/sec
[info]                  ·gc.alloc.rate.norm:          946.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1293.272 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   806500.319 ±(99.9%) 2102.096 ops/s [Average]
[info]   (min, avg, max) = (805950.332, 806500.319, 807133.712), stdev = 545.908
[info]   CI (99.9%): [804398.223, 808602.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   478.334 ±(99.9%) 38.585 MB/sec [Average]
[info]   (min, avg, max) = (467.155, 478.334, 487.692), stdev = 10.020
[info]   CI (99.9%): [439.748, 516.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   933.388 ±(99.9%) 76.025 B/op [Average]
[info]   (min, avg, max) = (912.001, 933.388, 952.181), stdev = 19.744
[info]   CI (99.9%): [857.362, 1009.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   396.708 ±(99.9%) 1394.489 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 396.708, 662.497), stdev = 362.144
[info]   CI (99.9%): [≈ 0, 1791.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   774.196 ±(99.9%) 2721.420 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 774.196, 1293.272), stdev = 706.744
[info]   CI (99.9%): [≈ 0, 3495.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.070 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.041), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.53% complete, ETA 00:11:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 210822.504 ops/s
[info] # Warmup Iteration   2: 627980.809 ops/s
[info] # Warmup Iteration   3: 813565.736 ops/s
[info] # Warmup Iteration   4: 783307.334 ops/s
[info] # Warmup Iteration   5: 813860.450 ops/s
[info] Iteration   1: 823919.790 ops/s
[info]                  ·gc.alloc.rate:      444.209 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.510 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 817033.671 ops/s
[info]                  ·gc.alloc.rate:               454.512 MB/sec
[info]                  ·gc.alloc.rate.norm:          875.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1286.473 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 801501.392 ops/s
[info]                  ·gc.alloc.rate:               450.813 MB/sec
[info]                  ·gc.alloc.rate.norm:          884.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1311.407 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 822139.974 ops/s
[info]                  ·gc.alloc.rate:      442.981 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 819131.166 ops/s
[info]                  ·gc.alloc.rate:                   454.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              873.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1283.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.095 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   816745.199 ±(99.9%) 34372.690 ops/s [Average]
[info]   (min, avg, max) = (801501.392, 816745.199, 823919.790), stdev = 8926.478
[info]   CI (99.9%): [782372.509, 851117.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   449.398 ±(99.9%) 21.271 MB/sec [Average]
[info]   (min, avg, max) = (442.981, 449.398, 454.512), stdev = 5.524
[info]   CI (99.9%): [428.127, 470.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   866.002 ±(99.9%) 64.575 B/op [Average]
[info]   (min, avg, max) = (848.001, 866.002, 884.783), stdev = 16.770
[info]   CI (99.9%): [801.427, 930.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   400.842 ±(99.9%) 1409.015 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 400.842, 668.186), stdev = 365.917
[info]   CI (99.9%): [≈ 0, 1809.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   776.329 ±(99.9%) 2729.223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 776.329, 1311.407), stdev = 708.771
[info]   CI (99.9%): [≈ 0, 3505.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.085 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.019 ±(99.9%) 0.164 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.095), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90.76% complete, ETA 00:10:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 221121.525 ops/s
[info] # Warmup Iteration   2: 689593.118 ops/s
[info] # Warmup Iteration   3: 833577.866 ops/s
[info] # Warmup Iteration   4: 824500.489 ops/s
[info] # Warmup Iteration   5: 839900.981 ops/s
[info] Iteration   1: 840237.918 ops/s
[info]                  ·gc.alloc.rate:      8.544 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 828423.938 ops/s
[info]                  ·gc.alloc.rate:      8.422 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 832627.637 ops/s
[info]                  ·gc.alloc.rate:      8.466 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 830169.451 ops/s
[info]                  ·gc.alloc.rate:                   22.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              42.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     969.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.865 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.326 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 821399.459 ops/s
[info]                  ·gc.alloc.rate:      12.046 MB/sec
[info]                  ·gc.alloc.rate.norm: 23.081 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   830571.681 ±(99.9%) 26297.907 ops/s [Average]
[info]   (min, avg, max) = (821399.459, 830571.681, 840237.918), stdev = 6829.483
[info]   CI (99.9%): [804273.773, 856869.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   12.012 ±(99.9%) 23.518 MB/sec [Average]
[info]   (min, avg, max) = (8.422, 12.012, 22.581), stdev = 6.107
[info]   CI (99.9%): [≈ 0, 35.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   22.777 ±(99.9%) 44.693 B/op [Average]
[info]   (min, avg, max) = (16.001, 22.777, 42.802), stdev = 11.607
[info]   CI (99.9%): [≈ 0, 67.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   102.339 ±(99.9%) 881.169 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.339, 511.695), stdev = 228.837
[info]   CI (99.9%): [≈ 0, 983.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   193.978 ±(99.9%) 1670.207 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 193.978, 969.889), stdev = 433.747
[info]   CI (99.9%): [≈ 0, 1864.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.773 ±(99.9%) 6.656 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.773, 3.865), stdev = 1.729
[info]   CI (99.9%): [≈ 0, 7.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   1.465 ±(99.9%) 12.616 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 7.326), stdev = 3.276
[info]   CI (99.9%): [≈ 0, 14.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 5.000), stdev = 2.236
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90.99% complete, ETA 00:10:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6378.171 ops/s
[info] # Warmup Iteration   2: 25638.328 ops/s
[info] # Warmup Iteration   3: 34838.490 ops/s
[info] # Warmup Iteration   4: 38586.640 ops/s
[info] # Warmup Iteration   5: 37463.917 ops/s
[info] Iteration   1: 37967.722 ops/s
[info]                  ·gc.alloc.rate:                   2002.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              83002.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82643.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131.844 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 39368.109 ops/s
[info]                  ·gc.alloc.rate:                   1786.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              71436.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53046.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.350 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.951 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 39254.269 ops/s
[info]                  ·gc.alloc.rate:                   1803.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              72328.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79644.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.693 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 39425.541 ops/s
[info]                  ·gc.alloc.rate:                   1798.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              71805.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79297.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.831 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 38986.256 ops/s
[info]                  ·gc.alloc.rate:                   1757.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              70901.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53512.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.521 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   39000.379 ±(99.9%) 2316.017 ops/s [Average]
[info]   (min, avg, max) = (37967.722, 39000.379, 39425.541), stdev = 601.462
[info]   CI (99.9%): [36684.362, 41316.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1829.849 ±(99.9%) 378.316 MB/sec [Average]
[info]   (min, avg, max) = (1757.069, 1829.849, 2002.573), stdev = 98.248
[info]   CI (99.9%): [1451.533, 2208.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   73894.953 ±(99.9%) 19708.189 B/op [Average]
[info]   (min, avg, max) = (70901.057, 73894.953, 83002.942), stdev = 5118.154
[info]   CI (99.9%): [54186.764, 93603.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1723.953 ±(99.9%) 1396.972 MB/sec [Average]
[info]   (min, avg, max) = (1326.146, 1723.953, 1993.902), stdev = 362.789
[info]   CI (99.9%): [326.981, 3120.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   69628.953 ±(99.9%) 57691.852 B/op [Average]
[info]   (min, avg, max) = (53046.612, 69628.953, 82643.528), stdev = 14982.391
[info]   CI (99.9%): [11937.101, 127320.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.006 ±(99.9%) 5.115 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.006, 3.181), stdev = 1.328
[info]   CI (99.9%): [≈ 0, 6.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   41.168 ±(99.9%) 211.832 B/op [Average]
[info]   (min, avg, max) = (0.831, 41.168, 131.844), stdev = 55.012
[info]   CI (99.9%): [≈ 0, 253.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 13.000), stdev = 4.266
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91.22% complete, ETA 00:10:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 880060.909 ops/s
[info] # Warmup Iteration   2: 3370156.065 ops/s
[info] # Warmup Iteration   3: 3803817.054 ops/s
[info] # Warmup Iteration   4: 4176986.751 ops/s
[info] # Warmup Iteration   5: 4208302.842 ops/s
[info] Iteration   1: 4273166.574 ops/s
[info]                  ·gc.alloc.rate:                   3307.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              1218.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3329.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1226.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 4307499.126 ops/s
[info]                  ·gc.alloc.rate:                   3319.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              1212.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     975.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 4272915.808 ops/s
[info]                  ·gc.alloc.rate:                   3350.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              1234.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3350.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1234.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 4249214.457 ops/s
[info]                  ·gc.alloc.rate:                   3327.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3366.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1246.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 4234372.289 ops/s
[info]                  ·gc.alloc.rate:                   3320.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              1234.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3377.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1255.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   4267433.651 ±(99.9%) 107078.983 ops/s [Average]
[info]   (min, avg, max) = (4234372.289, 4267433.651, 4307499.126), stdev = 27808.072
[info]   CI (99.9%): [4160354.667, 4374512.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3325.158 ±(99.9%) 61.281 MB/sec [Average]
[info]   (min, avg, max) = (3307.452, 3325.158, 3350.430), stdev = 15.914
[info]   CI (99.9%): [3263.877, 3386.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1226.392 ±(99.9%) 38.762 B/op [Average]
[info]   (min, avg, max) = (1212.977, 1226.392, 1234.097), stdev = 10.066
[info]   CI (99.9%): [1187.630, 1265.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3218.796 ±(99.9%) 1182.218 MB/sec [Average]
[info]   (min, avg, max) = (2670.549, 3218.796, 3377.594), stdev = 307.018
[info]   CI (99.9%): [2036.577, 4401.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1187.653 ±(99.9%) 458.184 B/op [Average]
[info]   (min, avg, max) = (975.760, 1187.653, 1255.422), stdev = 118.989
[info]   CI (99.9%): [729.469, 1645.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.025, 0.042), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (0.008, 0.009, 0.015), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 7.000), stdev = 1.304
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91.45% complete, ETA 00:09:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.575 ops/s
[info] # Warmup Iteration   2: 5326789.301 ops/s
[info] # Warmup Iteration   3: 6343685.339 ops/s
[info] # Warmup Iteration   4: 6323421.827 ops/s
[info] # Warmup Iteration   5: 6357235.890 ops/s
[info] Iteration   1: 6498394.316 ops/s
[info]                  ·gc.alloc.rate:                   1257.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     321.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 6379847.863 ops/s
[info]                  ·gc.alloc.rate:               1267.448 MB/sec
[info]                  ·gc.alloc.rate.norm:          312.679 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 327.512 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 6493975.709 ops/s
[info]                  ·gc.alloc.rate:                   1263.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              306.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     322.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 6501315.398 ops/s
[info]                  ·gc.alloc.rate:                   1255.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              303.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     322.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.225 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 6318091.931 ops/s
[info]                  ·gc.alloc.rate:                   1216.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              303.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     330.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   6438325.043 ±(99.9%) 325309.231 ops/s [Average]
[info]   (min, avg, max) = (6318091.931, 6438325.043, 6501315.398), stdev = 84481.774
[info]   CI (99.9%): [6113015.813, 6763634.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1252.153 ±(99.9%) 78.530 MB/sec [Average]
[info]   (min, avg, max) = (1216.659, 1252.153, 1267.448), stdev = 20.394
[info]   CI (99.9%): [1173.624, 1330.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   306.076 ±(99.9%) 14.838 B/op [Average]
[info]   (min, avg, max) = (303.066, 306.076, 312.679), stdev = 3.853
[info]   CI (99.9%): [291.238, 320.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1328.245 ±(99.9%) 6.855 MB/sec [Average]
[info]   (min, avg, max) = (1325.632, 1328.245, 1330.220), stdev = 1.780
[info]   CI (99.9%): [1321.390, 1335.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   324.713 ±(99.9%) 16.496 B/op [Average]
[info]   (min, avg, max) = (321.056, 324.713, 330.885), stdev = 4.284
[info]   CI (99.9%): [308.216, 341.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   1.069 ±(99.9%) 8.597 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.069, 5.061), stdev = 2.233
[info]   CI (99.9%): [≈ 0, 9.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.259 ±(99.9%) 2.081 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.259, 1.225), stdev = 0.540
[info]   CI (99.9%): [≈ 0, 2.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.69% complete, ETA 00:09:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 521807.787 ops/s
[info] # Warmup Iteration   2: 4700421.997 ops/s
[info] # Warmup Iteration   3: 4960201.883 ops/s
[info] # Warmup Iteration   4: 5027501.508 ops/s
[info] # Warmup Iteration   5: 4975704.173 ops/s
[info] Iteration   1: 5050710.836 ops/s
[info]                  ·gc.alloc.rate:               1019.978 MB/sec
[info]                  ·gc.alloc.rate.norm:          317.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 207.266 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 5026212.175 ops/s
[info]                  ·gc.alloc.rate:                   1039.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              325.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     416.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 5032408.966 ops/s
[info]                  ·gc.alloc.rate:               1016.721 MB/sec
[info]                  ·gc.alloc.rate.norm:          317.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 208.438 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 5153498.584 ops/s
[info]                  ·gc.alloc.rate:               1104.259 MB/sec
[info]                  ·gc.alloc.rate.norm:          337.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 407.281 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   5: 5190823.437 ops/s
[info]                  ·gc.alloc.rate:                   1069.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              324.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     404.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.295 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   5090730.799 ±(99.9%) 292775.688 ops/s [Average]
[info]   (min, avg, max) = (5026212.175, 5090730.799, 5190823.437), stdev = 76032.916
[info]   CI (99.9%): [4797955.111, 5383506.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1050.102 ±(99.9%) 142.026 MB/sec [Average]
[info]   (min, avg, max) = (1016.721, 1050.102, 1104.259), stdev = 36.884
[info]   CI (99.9%): [908.076, 1192.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   324.555 ±(99.9%) 30.589 B/op [Average]
[info]   (min, avg, max) = (317.695, 324.555, 337.250), stdev = 7.944
[info]   CI (99.9%): [293.966, 355.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1066.422 ±(99.9%) 1407.744 MB/sec [Average]
[info]   (min, avg, max) = (665.438, 1066.422, 1334.797), stdev = 365.587
[info]   CI (99.9%): [≈ 0, 2474.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   328.923 ±(99.9%) 425.953 B/op [Average]
[info]   (min, avg, max) = (207.266, 328.923, 416.974), stdev = 110.619
[info]   CI (99.9%): [≈ 0, 754.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.860 ±(99.9%) 7.341 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.860, 4.271), stdev = 1.906
[info]   CI (99.9%): [≈ 0, 8.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.261 ±(99.9%) 2.225 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.261, 1.295), stdev = 0.578
[info]   CI (99.9%): [≈ 0, 2.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 9.000), stdev = 2.490
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.92% complete, ETA 00:09:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2342440.432 ops/s
[info] # Warmup Iteration   2: 5759979.853 ops/s
[info] # Warmup Iteration   3: 6623435.263 ops/s
[info] # Warmup Iteration   4: 6494664.629 ops/s
[info] # Warmup Iteration   5: 6575119.318 ops/s
[info] Iteration   1: 6480269.051 ops/s
[info]                  ·gc.alloc.rate:                   1265.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              307.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     325.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 6659899.954 ops/s
[info]                  ·gc.alloc.rate:                   1285.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              303.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     316.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 6459530.493 ops/s
[info]                  ·gc.alloc.rate:               1265.904 MB/sec
[info]                  ·gc.alloc.rate.norm:          308.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 326.720 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 6680168.951 ops/s
[info]                  ·gc.alloc.rate:                   1310.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              308.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     316.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.956 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 6643337.129 ops/s
[info]                  ·gc.alloc.rate:                   1290.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     316.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   6584641.116 ±(99.9%) 407426.869 ops/s [Average]
[info]   (min, avg, max) = (6459530.493, 6584641.116, 6680168.951), stdev = 105807.464
[info]   CI (99.9%): [6177214.247, 6992067.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1283.327 ±(99.9%) 72.461 MB/sec [Average]
[info]   (min, avg, max) = (1265.032, 1283.327, 1310.277), stdev = 18.818
[info]   CI (99.9%): [1210.865, 1355.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   306.714 ±(99.9%) 8.135 B/op [Average]
[info]   (min, avg, max) = (303.699, 306.714, 308.713), stdev = 2.113
[info]   CI (99.9%): [298.579, 314.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1339.565 ±(99.9%) 8.364 MB/sec [Average]
[info]   (min, avg, max) = (1336.114, 1339.565, 1341.563), stdev = 2.172
[info]   CI (99.9%): [1331.201, 1347.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   320.211 ±(99.9%) 20.323 B/op [Average]
[info]   (min, avg, max) = (316.084, 320.211, 326.720), stdev = 5.278
[info]   CI (99.9%): [299.888, 340.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.837 ±(99.9%) 6.937 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.837, 4.059), stdev = 1.802
[info]   CI (99.9%): [≈ 0, 7.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.197 ±(99.9%) 1.634 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.197, 0.956), stdev = 0.424
[info]   CI (99.9%): [≈ 0, 1.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92.15% complete, ETA 00:09:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1468093.528 ops/s
[info] # Warmup Iteration   2: 5313237.220 ops/s
[info] # Warmup Iteration   3: 5194541.509 ops/s
[info] # Warmup Iteration   4: 5222279.510 ops/s
[info] # Warmup Iteration   5: 5251613.375 ops/s
[info] Iteration   1: 5305603.421 ops/s
[info]                  ·gc.alloc.rate:               1014.090 MB/sec
[info]                  ·gc.alloc.rate.norm:          300.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 197.997 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 5388461.033 ops/s
[info]                  ·gc.alloc.rate:               1055.105 MB/sec
[info]                  ·gc.alloc.rate.norm:          308.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 390.120 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   3: 5388221.656 ops/s
[info]                  ·gc.alloc.rate:               1029.648 MB/sec
[info]                  ·gc.alloc.rate.norm:          300.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 195.170 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 5233012.076 ops/s
[info]                  ·gc.alloc.rate:                   1022.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              307.372 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     402.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 5504104.795 ops/s
[info]                  ·gc.alloc.rate:                   1053.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              301.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     191.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.489 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.998 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   5363880.596 ±(99.9%) 391661.362 ops/s [Average]
[info]   (min, avg, max) = (5233012.076, 5363880.596, 5504104.795), stdev = 101713.212
[info]   CI (99.9%): [4972219.235, 5755541.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1034.947 ±(99.9%) 71.707 MB/sec [Average]
[info]   (min, avg, max) = (1014.090, 1034.947, 1055.105), stdev = 18.622
[info]   CI (99.9%): [963.239, 1106.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   303.677 ±(99.9%) 14.454 B/op [Average]
[info]   (min, avg, max) = (300.703, 303.677, 308.167), stdev = 3.754
[info]   CI (99.9%): [289.223, 318.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   935.477 ±(99.9%) 1409.401 MB/sec [Average]
[info]   (min, avg, max) = (667.451, 935.477, 1337.160), stdev = 366.017
[info]   CI (99.9%): [≈ 0, 2344.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   275.326 ±(99.9%) 424.994 B/op [Average]
[info]   (min, avg, max) = (191.238, 275.326, 402.104), stdev = 110.370
[info]   CI (99.9%): [≈ 0, 700.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.702 ±(99.9%) 6.000 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.702, 3.489), stdev = 1.558
[info]   CI (99.9%): [≈ 0, 6.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.201 ±(99.9%) 1.716 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.201, 0.998), stdev = 0.446
[info]   CI (99.9%): [≈ 0, 1.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92.38% complete, ETA 00:08:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 944680.433 ops/s
[info] # Warmup Iteration   2: 3031548.146 ops/s
[info] # Warmup Iteration   3: 3649878.315 ops/s
[info] # Warmup Iteration   4: 3656888.380 ops/s
[info] # Warmup Iteration   5: 3648351.841 ops/s
[info] Iteration   1: 3676702.179 ops/s
[info]                  ·gc.alloc.rate:                   2015.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              862.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     572.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.333 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 3648172.366 ops/s
[info]                  ·gc.alloc.rate:                   2021.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              872.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     865.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.404 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3695280.928 ops/s
[info]                  ·gc.alloc.rate:                   2038.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              868.335 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     852.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3691659.166 ops/s
[info]                  ·gc.alloc.rate:               2023.365 MB/sec
[info]                  ·gc.alloc.rate.norm:          862.634 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 853.124 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 3692167.597 ops/s
[info]                  ·gc.alloc.rate:               2050.489 MB/sec
[info]                  ·gc.alloc.rate.norm:          874.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 854.263 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   3680796.447 ±(99.9%) 75510.813 ops/s [Average]
[info]   (min, avg, max) = (3648172.366, 3680796.447, 3695280.928), stdev = 19609.918
[info]   CI (99.9%): [3605285.634, 3756307.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2029.963 ±(99.9%) 55.344 MB/sec [Average]
[info]   (min, avg, max) = (2015.524, 2029.963, 2050.489), stdev = 14.373
[info]   CI (99.9%): [1974.618, 2085.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   867.983 ±(99.9%) 20.206 B/op [Average]
[info]   (min, avg, max) = (862.634, 867.983, 874.077), stdev = 5.247
[info]   CI (99.9%): [847.777, 888.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1869.940 ±(99.9%) 1144.553 MB/sec [Average]
[info]   (min, avg, max) = (1338.240, 1869.940, 2005.773), stdev = 297.237
[info]   CI (99.9%): [725.387, 3014.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   799.515 ±(99.9%) 488.357 B/op [Average]
[info]   (min, avg, max) = (572.845, 799.515, 865.332), stdev = 126.825
[info]   CI (99.9%): [311.157, 1287.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.831 ±(99.9%) 5.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.831, 3.115), stdev = 1.336
[info]   CI (99.9%): [≈ 0, 5.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.356 ±(99.9%) 2.202 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.356, 1.333), stdev = 0.572
[info]   CI (99.9%): [≈ 0, 2.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 1.924
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92.61% complete, ETA 00:08:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.637 ops/s
[info] # Warmup Iteration   2: 6456182.880 ops/s
[info] # Warmup Iteration   3: 6803294.087 ops/s
[info] # Warmup Iteration   4: 6976227.537 ops/s
[info] # Warmup Iteration   5: 6985105.480 ops/s
[info] Iteration   1: 6978846.729 ops/s
[info]                  ·gc.alloc.rate:               694.829 MB/sec
[info]                  ·gc.alloc.rate.norm:          156.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 149.400 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 6982838.561 ops/s
[info]                  ·gc.alloc.rate:               688.047 MB/sec
[info]                  ·gc.alloc.rate.norm:          155.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 149.467 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 6980276.625 ops/s
[info]                  ·gc.alloc.rate:                   694.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              156.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 6792880.149 ops/s
[info]                  ·gc.alloc.rate:               677.772 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 153.797 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 6935856.212 ops/s
[info]                  ·gc.alloc.rate:                   709.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              160.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     300.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   6934139.655 ±(99.9%) 313160.116 ops/s [Average]
[info]   (min, avg, max) = (6792880.149, 6934139.655, 6982838.561), stdev = 81326.688
[info]   CI (99.9%): [6620979.539, 7247299.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   693.053 ±(99.9%) 44.759 MB/sec [Average]
[info]   (min, avg, max) = (677.772, 693.053, 709.637), stdev = 11.624
[info]   CI (99.9%): [648.294, 737.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   157.258 ±(99.9%) 8.180 B/op [Average]
[info]   (min, avg, max) = (155.061, 157.258, 160.800), stdev = 2.124
[info]   CI (99.9%): [149.078, 165.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   795.393 ±(99.9%) 1138.592 MB/sec [Average]
[info]   (min, avg, max) = (662.453, 795.393, 1324.336), stdev = 295.689
[info]   CI (99.9%): [≈ 0, 1933.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   180.454 ±(99.9%) 257.623 B/op [Average]
[info]   (min, avg, max) = (149.400, 180.454, 300.088), stdev = 66.904
[info]   CI (99.9%): [≈ 0, 438.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.031), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.84% complete, ETA 00:08:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1351883.828 ops/s
[info] # Warmup Iteration   2: 6080148.469 ops/s
[info] # Warmup Iteration   3: 6359528.308 ops/s
[info] # Warmup Iteration   4: 6366052.697 ops/s
[info] # Warmup Iteration   5: 6438242.446 ops/s
[info] Iteration   1: 6406053.976 ops/s
[info]                  ·gc.alloc.rate:               637.374 MB/sec
[info]                  ·gc.alloc.rate.norm:          156.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 162.180 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 6427615.109 ops/s
[info]                  ·gc.alloc.rate:                   633.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              155.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 6426693.328 ops/s
[info]                  ·gc.alloc.rate:               635.038 MB/sec
[info]                  ·gc.alloc.rate.norm:          155.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 162.075 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 6396166.469 ops/s
[info]                  ·gc.alloc.rate:               632.985 MB/sec
[info]                  ·gc.alloc.rate.norm:          155.761 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 162.843 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 6407953.609 ops/s
[info]                  ·gc.alloc.rate:                   643.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              157.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   6412896.498 ±(99.9%) 53012.340 ops/s [Average]
[info]   (min, avg, max) = (6396166.469, 6412896.498, 6427615.109), stdev = 13767.136
[info]   CI (99.9%): [6359884.158, 6465908.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   636.430 ±(99.9%) 15.603 MB/sec [Average]
[info]   (min, avg, max) = (632.985, 636.430, 643.034), stdev = 4.052
[info]   CI (99.9%): [620.826, 652.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   156.195 ±(99.9%) 4.253 B/op [Average]
[info]   (min, avg, max) = (155.174, 156.195, 157.935), stdev = 1.104
[info]   CI (99.9%): [151.942, 160.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   661.337 ±(99.9%) 4.551 MB/sec [Average]
[info]   (min, avg, max) = (660.114, 661.337, 662.834), stdev = 1.182
[info]   CI (99.9%): [656.785, 665.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   162.308 ±(99.9%) 1.961 B/op [Average]
[info]   (min, avg, max) = (161.645, 162.308, 162.843), stdev = 0.509
[info]   CI (99.9%): [160.347, 164.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.037 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.021), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 93.07% complete, ETA 00:08:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3530137.551 ops/s
[info] # Warmup Iteration   2: 6712442.817 ops/s
[info] # Warmup Iteration   3: 6824333.286 ops/s
[info] # Warmup Iteration   4: 6900015.438 ops/s
[info] # Warmup Iteration   5: 7021551.329 ops/s
[info] Iteration   1: 7093622.096 ops/s
[info]                  ·gc.alloc.rate:               702.085 MB/sec
[info]                  ·gc.alloc.rate.norm:          155.772 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 148.312 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 7156185.972 ops/s
[info]                  ·gc.alloc.rate:               711.110 MB/sec
[info]                  ·gc.alloc.rate.norm:          156.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 147.159 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 7134879.871 ops/s
[info]                  ·gc.alloc.rate:                   714.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              157.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 6911592.697 ops/s
[info]                  ·gc.alloc.rate:               694.680 MB/sec
[info]                  ·gc.alloc.rate.norm:          158.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 152.455 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 7078333.208 ops/s
[info]                  ·gc.alloc.rate:               707.601 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.323 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 148.857 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   7074922.769 ±(99.9%) 371525.138 ops/s [Average]
[info]   (min, avg, max) = (6911592.697, 7074922.769, 7156185.972), stdev = 96483.899
[info]   CI (99.9%): [6703397.630, 7446447.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   706.047 ±(99.9%) 30.372 MB/sec [Average]
[info]   (min, avg, max) = (694.680, 706.047, 714.760), stdev = 7.888
[info]   CI (99.9%): [675.675, 736.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   157.048 ±(99.9%) 3.718 B/op [Average]
[info]   (min, avg, max) = (155.772, 157.048, 158.155), stdev = 0.966
[info]   CI (99.9%): [153.330, 160.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   669.237 ±(99.9%) 1.780 MB/sec [Average]
[info]   (min, avg, max) = (668.462, 669.237, 669.644), stdev = 0.462
[info]   CI (99.9%): [667.457, 671.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   148.877 ±(99.9%) 8.100 B/op [Average]
[info]   (min, avg, max) = (147.159, 148.877, 152.455), stdev = 2.104
[info]   CI (99.9%): [140.777, 156.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.058 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 8.000), stdev = 2.074
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93.30% complete, ETA 00:07:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3642562.464 ops/s
[info] # Warmup Iteration   2: 6620221.493 ops/s
[info] # Warmup Iteration   3: 7383707.970 ops/s
[info] # Warmup Iteration   4: 7376559.668 ops/s
[info] # Warmup Iteration   5: 7377616.537 ops/s
[info] Iteration   1: 7380286.731 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7356738.983 ops/s
[info]                  ·gc.alloc.rate:      0.848 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.181 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7386430.293 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7393294.585 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7384454.212 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   7380240.961 ±(99.9%) 53729.988 ops/s [Average]
[info]   (min, avg, max) = (7356738.983, 7380240.961, 7393294.585), stdev = 13953.507
[info]   CI (99.9%): [7326510.972, 7433970.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.170 ±(99.9%) 1.459 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.170, 0.848), stdev = 0.379
[info]   CI (99.9%): [≈ 0, 1.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.036 ±(99.9%) 0.312 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.036, 0.181), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93.53% complete, ETA 00:07:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1104288.398 ops/s
[info] # Warmup Iteration   2: 4398942.731 ops/s
[info] # Warmup Iteration   3: 6094435.148 ops/s
[info] # Warmup Iteration   4: 6161326.805 ops/s
[info] # Warmup Iteration   5: 6175591.287 ops/s
[info] Iteration   1: 6181900.482 ops/s
[info]                  ·gc.alloc.rate:                   610.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              155.379 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 6257244.858 ops/s
[info]                  ·gc.alloc.rate:               686.320 MB/sec
[info]                  ·gc.alloc.rate.norm:          172.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 167.468 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 6339739.592 ops/s
[info]                  ·gc.alloc.rate:               631.904 MB/sec
[info]                  ·gc.alloc.rate.norm:          156.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 165.455 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 6339621.391 ops/s
[info]                  ·gc.alloc.rate:               627.291 MB/sec
[info]                  ·gc.alloc.rate.norm:          155.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 165.458 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 6344016.067 ops/s
[info]                  ·gc.alloc.rate:                   636.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              157.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   6292504.478 ±(99.9%) 276208.811 ops/s [Average]
[info]   (min, avg, max) = (6181900.482, 6292504.478, 6344016.067), stdev = 71730.551
[info]   CI (99.9%): [6016295.667, 6568713.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   638.504 ±(99.9%) 109.826 MB/sec [Average]
[info]   (min, avg, max) = (610.308, 638.504, 686.320), stdev = 28.522
[info]   CI (99.9%): [528.677, 748.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   159.715 ±(99.9%) 28.065 B/op [Average]
[info]   (min, avg, max) = (155.379, 159.715, 172.626), stdev = 7.288
[info]   CI (99.9%): [131.649, 187.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   666.341 ±(99.9%) 2.176 MB/sec [Average]
[info]   (min, avg, max) = (665.805, 666.341, 667.169), stdev = 0.565
[info]   CI (99.9%): [664.165, 668.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   166.681 ±(99.9%) 6.933 B/op [Average]
[info]   (min, avg, max) = (165.455, 166.681, 169.508), stdev = 1.800
[info]   CI (99.9%): [159.749, 173.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.016 ±(99.9%) 0.100 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.060), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.015), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93.76% complete, ETA 00:07:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 339934.502 ops/s
[info] # Warmup Iteration   2: 1437666.103 ops/s
[info] # Warmup Iteration   3: 1770869.473 ops/s
[info] # Warmup Iteration   4: 1775090.012 ops/s
[info] # Warmup Iteration   5: 1757515.501 ops/s
[info] Iteration   1: 1754157.473 ops/s
[info]                  ·gc.alloc.rate:                   2297.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              2061.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2400.752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.046 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 1753487.957 ops/s
[info]                  ·gc.alloc.rate:               2244.169 MB/sec
[info]                  ·gc.alloc.rate.norm:          2014.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1794.879 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 1793400.597 ops/s
[info]                  ·gc.alloc.rate:                   2305.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              2023.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1754.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1790993.965 ops/s
[info]                  ·gc.alloc.rate:               2315.170 MB/sec
[info]                  ·gc.alloc.rate.norm:          2034.556 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2670.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2346.779 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 1767711.269 ops/s
[info]                  ·gc.alloc.rate:                   2298.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              2046.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1788.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1771950.252 ±(99.9%) 74522.361 ops/s [Average]
[info]   (min, avg, max) = (1753487.957, 1771950.252, 1793400.597), stdev = 19353.220
[info]   CI (99.9%): [1697427.891, 1846472.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2292.226 ±(99.9%) 106.907 MB/sec [Average]
[info]   (min, avg, max) = (2244.169, 2292.226, 2315.170), stdev = 27.763
[info]   CI (99.9%): [2185.319, 2399.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2035.994 ±(99.9%) 72.074 B/op [Average]
[info]   (min, avg, max) = (2014.284, 2035.994, 2061.446), stdev = 18.717
[info]   CI (99.9%): [1963.920, 2108.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2270.782 ±(99.9%) 1414.416 MB/sec [Average]
[info]   (min, avg, max) = (1999.271, 2270.782, 2675.812), stdev = 367.319
[info]   CI (99.9%): [856.367, 3685.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2017.034 ±(99.9%) 1257.516 B/op [Average]
[info]   (min, avg, max) = (1754.317, 2017.034, 2400.752), stdev = 326.573
[info]   CI (99.9%): [759.518, 3274.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.910 ±(99.9%) 7.748 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.910, 4.509), stdev = 2.012
[info]   CI (99.9%): [≈ 0, 8.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.817 ±(99.9%) 6.951 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.817, 4.046), stdev = 1.805
[info]   CI (99.9%): [≈ 0, 7.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 2.121
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 94.00% complete, ETA 00:06:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.531 ops/s
[info] # Warmup Iteration   2: 2619945.783 ops/s
[info] # Warmup Iteration   3: 2785372.457 ops/s
[info] # Warmup Iteration   4: 2911388.703 ops/s
[info] # Warmup Iteration   5: 3015983.249 ops/s
[info] Iteration   1: 3028899.299 ops/s
[info]                  ·gc.alloc.rate:      569.789 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3015736.975 ops/s
[info]                  ·gc.alloc.rate:                   582.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     346.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3016070.009 ops/s
[info]                  ·gc.alloc.rate:                   582.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              303.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     346.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2922967.661 ops/s
[info]                  ·gc.alloc.rate:                   564.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              303.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     357.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2930141.834 ops/s
[info]                  ·gc.alloc.rate:               566.202 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 357.085 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2982763.156 ±(99.9%) 198874.366 ops/s [Average]
[info]   (min, avg, max) = (2922967.661, 2982763.156, 3028899.299), stdev = 51647.041
[info]   CI (99.9%): [2783888.789, 3181637.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   573.115 ±(99.9%) 34.060 MB/sec [Average]
[info]   (min, avg, max) = (564.442, 573.115, 582.617), stdev = 8.845
[info]   CI (99.9%): [539.055, 607.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   302.391 ±(99.9%) 13.761 B/op [Average]
[info]   (min, avg, max) = (296.000, 302.391, 304.128), stdev = 3.574
[info]   CI (99.9%): [288.629, 316.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   531.376 ±(99.9%) 1143.829 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.376, 664.793), stdev = 297.049
[info]   CI (99.9%): [≈ 0, 1675.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   281.507 ±(99.9%) 606.329 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 281.507, 357.599), stdev = 157.462
[info]   CI (99.9%): [≈ 0, 887.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.029), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.23% complete, ETA 00:06:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138842.659 ops/s
[info] # Warmup Iteration   2: 1358340.146 ops/s
[info] # Warmup Iteration   3: 1877622.409 ops/s
[info] # Warmup Iteration   4: 1811076.079 ops/s
[info] # Warmup Iteration   5: 1878032.101 ops/s
[info] Iteration   1: 1871213.298 ops/s
[info]                  ·gc.alloc.rate:               384.887 MB/sec
[info]                  ·gc.alloc.rate.norm:          323.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 430.299 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1885312.162 ops/s
[info]                  ·gc.alloc.rate:      373.787 MB/sec
[info]                  ·gc.alloc.rate.norm: 312.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1880606.494 ops/s
[info]                  ·gc.alloc.rate:                   384.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              321.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     554.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1879006.911 ops/s
[info]                  ·gc.alloc.rate:                   394.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              330.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     554.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1878463.149 ops/s
[info]                  ·gc.alloc.rate:      372.375 MB/sec
[info]                  ·gc.alloc.rate.norm: 312.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1878920.403 ±(99.9%) 19569.600 ops/s [Average]
[info]   (min, avg, max) = (1871213.298, 1878920.403, 1885312.162), stdev = 5082.163
[info]   CI (99.9%): [1859350.803, 1898490.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   382.062 ±(99.9%) 35.086 MB/sec [Average]
[info]   (min, avg, max) = (372.375, 382.062, 394.491), stdev = 9.112
[info]   CI (99.9%): [346.975, 417.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   320.002 ±(99.9%) 30.664 B/op [Average]
[info]   (min, avg, max) = (312.000, 320.002, 330.431), stdev = 7.963
[info]   CI (99.9%): [289.338, 350.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   367.357 ±(99.9%) 1312.857 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 367.357, 662.544), stdev = 340.945
[info]   CI (99.9%): [≈ 0, 1680.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   307.919 ±(99.9%) 1099.891 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 307.919, 554.865), stdev = 285.638
[info]   CI (99.9%): [≈ 0, 1407.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.011), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.009), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.46% complete, ETA 00:06:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 934492.733 ops/s
[info] # Warmup Iteration   2: 2111904.115 ops/s
[info] # Warmup Iteration   3: 2287130.562 ops/s
[info] # Warmup Iteration   4: 2313089.629 ops/s
[info] # Warmup Iteration   5: 2240688.929 ops/s
[info] Iteration   1: 2304674.599 ops/s
[info]                  ·gc.alloc.rate:               451.016 MB/sec
[info]                  ·gc.alloc.rate.norm:          307.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 349.365 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 2327014.159 ops/s
[info]                  ·gc.alloc.rate:      437.691 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2314322.263 ops/s
[info]                  ·gc.alloc.rate:               452.791 MB/sec
[info]                  ·gc.alloc.rate.norm:          307.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 455.279 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2312743.793 ops/s
[info]                  ·gc.alloc.rate:                   451.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              307.257 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     455.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2329083.307 ops/s
[info]                  ·gc.alloc.rate:      438.184 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2317567.624 ±(99.9%) 39545.560 ops/s [Average]
[info]   (min, avg, max) = (2304674.599, 2317567.624, 2329083.307), stdev = 10269.856
[info]   CI (99.9%): [2278022.064, 2357113.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   446.232 ±(99.9%) 29.272 MB/sec [Average]
[info]   (min, avg, max) = (437.691, 446.232, 452.791), stdev = 7.602
[info]   CI (99.9%): [416.960, 475.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   303.034 ±(99.9%) 24.751 B/op [Average]
[info]   (min, avg, max) = (296.000, 303.034, 307.996), stdev = 6.428
[info]   CI (99.9%): [278.284, 327.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.104 ±(99.9%) 1324.427 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.104, 669.484), stdev = 343.950
[info]   CI (99.9%): [≈ 0, 1694.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   252.047 ±(99.9%) 901.537 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 252.047, 455.593), stdev = 234.126
[info]   CI (99.9%): [≈ 0, 1153.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94.69% complete, ETA 00:06:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 283955.966 ops/s
[info] # Warmup Iteration   2: 1557902.097 ops/s
[info] # Warmup Iteration   3: 1923358.562 ops/s
[info] # Warmup Iteration   4: 1879934.071 ops/s
[info] # Warmup Iteration   5: 1874667.490 ops/s
[info] Iteration   1: 1872350.587 ops/s
[info]                  ·gc.alloc.rate:               364.833 MB/sec
[info]                  ·gc.alloc.rate.norm:          306.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 430.033 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 1883020.354 ops/s
[info]                  ·gc.alloc.rate:      354.157 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1891740.813 ops/s
[info]                  ·gc.alloc.rate:               375.545 MB/sec
[info]                  ·gc.alloc.rate.norm:          312.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 553.947 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1923736.876 ops/s
[info]                  ·gc.alloc.rate:      361.901 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.054 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1914395.477 ops/s
[info]                  ·gc.alloc.rate:                   381.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              313.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     547.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1897048.821 ±(99.9%) 82769.463 ops/s [Average]
[info]   (min, avg, max) = (1872350.587, 1897048.821, 1923736.876), stdev = 21494.967
[info]   CI (99.9%): [1814279.358, 1979818.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   367.522 ±(99.9%) 41.657 MB/sec [Average]
[info]   (min, avg, max) = (354.157, 367.522, 381.172), stdev = 10.818
[info]   CI (99.9%): [325.864, 409.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   304.893 ±(99.9%) 32.731 B/op [Average]
[info]   (min, avg, max) = (296.000, 304.893, 313.378), stdev = 8.500
[info]   CI (99.9%): [272.162, 337.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   368.666 ±(99.9%) 1318.359 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368.666, 665.837), stdev = 342.374
[info]   CI (99.9%): [≈ 0, 1687.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   306.269 ±(99.9%) 1093.188 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 306.269, 553.947), stdev = 283.897
[info]   CI (99.9%): [≈ 0, 1399.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 94.92% complete, ETA 00:05:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 242412.058 ops/s
[info] # Warmup Iteration   2: 2239730.231 ops/s
[info] # Warmup Iteration   3: 2484479.625 ops/s
[info] # Warmup Iteration   4: 2530063.996 ops/s
[info] # Warmup Iteration   5: 2533269.484 ops/s
[info] Iteration   1: 2534624.984 ops/s
[info]                  ·gc.alloc.rate:               1814.780 MB/sec
[info]                  ·gc.alloc.rate.norm:          1126.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 824.842 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2528530.594 ops/s
[info]                  ·gc.alloc.rate:                   1796.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              1118.321 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1242.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2510934.344 ops/s
[info]                  ·gc.alloc.rate:               1829.672 MB/sec
[info]                  ·gc.alloc.rate.norm:          1146.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1254.992 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2534654.389 ops/s
[info]                  ·gc.alloc.rate:                   1806.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              1121.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     830.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2535690.039 ops/s
[info]                  ·gc.alloc.rate:                   1806.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              1121.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1249.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   2528886.870 ±(99.9%) 40150.855 ops/s [Average]
[info]   (min, avg, max) = (2510934.344, 2528886.870, 2535690.039), stdev = 10427.050
[info]   CI (99.9%): [2488736.015, 2569037.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1810.824 ±(99.9%) 47.483 MB/sec [Average]
[info]   (min, avg, max) = (1796.708, 1810.824, 1829.672), stdev = 12.331
[info]   CI (99.9%): [1763.341, 1858.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1126.778 ±(99.9%) 44.019 B/op [Average]
[info]   (min, avg, max) = (1118.321, 1126.778, 1146.472), stdev = 11.432
[info]   CI (99.9%): [1082.759, 1170.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1736.061 ±(99.9%) 1415.001 MB/sec [Average]
[info]   (min, avg, max) = (1328.457, 1736.061, 2013.369), stdev = 367.471
[info]   CI (99.9%): [321.060, 3151.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1080.615 ±(99.9%) 888.461 B/op [Average]
[info]   (min, avg, max) = (824.842, 1080.615, 1254.992), stdev = 230.730
[info]   CI (99.9%): [192.155, 1969.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.013), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95.15% complete, ETA 00:05:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.502 ops/s
[info] # Warmup Iteration   2: 3346027.605 ops/s
[info] # Warmup Iteration   3: 3460396.054 ops/s
[info] # Warmup Iteration   4: 3683437.296 ops/s
[info] # Warmup Iteration   5: 3666342.489 ops/s
[info] Iteration   1: 3671513.438 ops/s
[info]                  ·gc.alloc.rate:               966.203 MB/sec
[info]                  ·gc.alloc.rate.norm:          414.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 284.701 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 3656386.623 ops/s
[info]                  ·gc.alloc.rate:               996.450 MB/sec
[info]                  ·gc.alloc.rate.norm:          428.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 572.315 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 3675607.381 ops/s
[info]                  ·gc.alloc.rate:                   968.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              414.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     284.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3656828.295 ops/s
[info]                  ·gc.alloc.rate:                   979.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              421.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     572.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 3670878.357 ops/s
[info]                  ·gc.alloc.rate:                   967.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              414.467 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     285.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   3666242.819 ±(99.9%) 34588.372 ops/s [Average]
[info]   (min, avg, max) = (3656386.623, 3666242.819, 3675607.381), stdev = 8982.490
[info]   CI (99.9%): [3631654.447, 3700831.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   975.512 ±(99.9%) 49.412 MB/sec [Average]
[info]   (min, avg, max) = (966.203, 975.512, 996.450), stdev = 12.832
[info]   CI (99.9%): [926.100, 1024.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   418.745 ±(99.9%) 24.739 B/op [Average]
[info]   (min, avg, max) = (414.200, 418.745, 428.863), stdev = 6.425
[info]   CI (99.9%): [394.006, 443.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   931.353 ±(99.9%) 1403.151 MB/sec [Average]
[info]   (min, avg, max) = (664.122, 931.353, 1331.295), stdev = 364.394
[info]   CI (99.9%): [≈ 0, 2334.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   400.086 ±(99.9%) 606.599 B/op [Average]
[info]   (min, avg, max) = (284.701, 400.086, 572.992), stdev = 157.532
[info]   CI (99.9%): [≈ 0, 1006.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.020 ±(99.9%) 0.111 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.068), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.048 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.029), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.38% complete, ETA 00:05:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 227393.809 ops/s
[info] # Warmup Iteration   2: 2858583.509 ops/s
[info] # Warmup Iteration   3: 3044406.067 ops/s
[info] # Warmup Iteration   4: 3355426.886 ops/s
[info] # Warmup Iteration   5: 3219187.525 ops/s
[info] Iteration   1: 3380187.076 ops/s
[info]                  ·gc.alloc.rate:                   889.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              414.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     308.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3373614.179 ops/s
[info]                  ·gc.alloc.rate:               899.408 MB/sec
[info]                  ·gc.alloc.rate.norm:          419.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 310.000 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 3360664.458 ops/s
[info]                  ·gc.alloc.rate:                   912.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              427.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     622.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3365209.550 ops/s
[info]                  ·gc.alloc.rate:               890.232 MB/sec
[info]                  ·gc.alloc.rate.norm:          416.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 311.084 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 3374906.677 ops/s
[info]                  ·gc.alloc.rate:                   890.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              415.397 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     310.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   3370916.388 ±(99.9%) 30247.550 ops/s [Average]
[info]   (min, avg, max) = (3360664.458, 3370916.388, 3380187.076), stdev = 7855.193
[info]   CI (99.9%): [3340668.838, 3401163.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   896.452 ±(99.9%) 37.450 MB/sec [Average]
[info]   (min, avg, max) = (889.484, 896.452, 912.292), stdev = 9.726
[info]   CI (99.9%): [859.002, 933.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   418.545 ±(99.9%) 20.246 B/op [Average]
[info]   (min, avg, max) = (414.149, 418.545, 427.233), stdev = 5.258
[info]   CI (99.9%): [398.299, 438.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   797.806 ±(99.9%) 1144.937 MB/sec [Average]
[info]   (min, avg, max) = (663.144, 797.806, 1329.693), stdev = 297.337
[info]   CI (99.9%): [≈ 0, 1942.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   372.673 ±(99.9%) 538.224 B/op [Average]
[info]   (min, avg, max) = (308.764, 372.673, 622.705), stdev = 139.775
[info]   CI (99.9%): [≈ 0, 910.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.019), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.61% complete, ETA 00:05:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1122747.593 ops/s
[info] # Warmup Iteration   2: 3304304.682 ops/s
[info] # Warmup Iteration   3: 3651461.592 ops/s
[info] # Warmup Iteration   4: 3620765.297 ops/s
[info] # Warmup Iteration   5: 3653149.472 ops/s
[info] Iteration   1: 3637106.820 ops/s
[info]                  ·gc.alloc.rate:                   987.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              427.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     578.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3648902.308 ops/s
[info]                  ·gc.alloc.rate:               965.273 MB/sec
[info]                  ·gc.alloc.rate.norm:          416.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 288.620 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 3577954.225 ops/s
[info]                  ·gc.alloc.rate:                   961.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              423.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     588.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 3652184.386 ops/s
[info]                  ·gc.alloc.rate:               962.348 MB/sec
[info]                  ·gc.alloc.rate.norm:          414.601 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 288.504 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 3644983.466 ops/s
[info]                  ·gc.alloc.rate:                   959.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              414.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     289.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   3632226.241 ±(99.9%) 118816.505 ops/s [Average]
[info]   (min, avg, max) = (3577954.225, 3632226.241, 3652184.386), stdev = 30856.269
[info]   CI (99.9%): [3513409.736, 3751042.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   967.319 ±(99.9%) 44.056 MB/sec [Average]
[info]   (min, avg, max) = (959.667, 967.319, 987.471), stdev = 11.441
[info]   CI (99.9%): [923.262, 1011.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   419.104 ±(99.9%) 22.345 B/op [Average]
[info]   (min, avg, max) = (414.200, 419.104, 427.289), stdev = 5.803
[info]   CI (99.9%): [396.758, 441.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.102 ±(99.9%) 1409.714 MB/sec [Average]
[info]   (min, avg, max) = (669.142, 937.102, 1338.621), stdev = 366.098
[info]   CI (99.9%): [≈ 0, 2346.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   406.824 ±(99.9%) 622.305 B/op [Average]
[info]   (min, avg, max) = (288.504, 406.824, 588.812), stdev = 161.611
[info]   CI (99.9%): [≈ 0, 1029.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.020 ±(99.9%) 0.083 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.052), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.023), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95.84% complete, ETA 00:04:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1539283.955 ops/s
[info] # Warmup Iteration   2: 3214713.443 ops/s
[info] # Warmup Iteration   3: 3877529.809 ops/s
[info] # Warmup Iteration   4: 3873271.756 ops/s
[info] # Warmup Iteration   5: 3877242.120 ops/s
[info] Iteration   1: 3876572.750 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3873637.276 ops/s
[info]                  ·gc.alloc.rate:      0.080 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.033 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3878020.167 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3876951.025 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3874036.227 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3875843.489 ±(99.9%) 7364.189 ops/s [Average]
[info]   (min, avg, max) = (3873637.276, 3875843.489, 3878020.167), stdev = 1912.456
[info]   CI (99.9%): [3868479.301, 3883207.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.016 ±(99.9%) 0.138 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.016, 0.080), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.007 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.007, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96.07% complete, ETA 00:04:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 603764.498 ops/s
[info] # Warmup Iteration   2: 2654604.621 ops/s
[info] # Warmup Iteration   3: 3380037.226 ops/s
[info] # Warmup Iteration   4: 3360564.795 ops/s
[info] # Warmup Iteration   5: 3345281.643 ops/s
[info] Iteration   1: 3401233.765 ops/s
[info]                  ·gc.alloc.rate:               897.249 MB/sec
[info]                  ·gc.alloc.rate.norm:          415.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 309.177 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 3253152.251 ops/s
[info]                  ·gc.alloc.rate:               872.417 MB/sec
[info]                  ·gc.alloc.rate.norm:          421.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 323.406 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 3371248.812 ops/s
[info]                  ·gc.alloc.rate:                   916.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              427.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     624.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 3388472.239 ops/s
[info]                  ·gc.alloc.rate:               906.884 MB/sec
[info]                  ·gc.alloc.rate.norm:          421.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 310.646 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 3394614.281 ops/s
[info]                  ·gc.alloc.rate:               907.654 MB/sec
[info]                  ·gc.alloc.rate.norm:          420.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 310.399 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   3361744.270 ±(99.9%) 237656.842 ops/s [Average]
[info]   (min, avg, max) = (3253152.251, 3361744.270, 3401233.765), stdev = 61718.727
[info]   CI (99.9%): [3124087.428, 3599401.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   900.133 ±(99.9%) 65.154 MB/sec [Average]
[info]   (min, avg, max) = (872.417, 900.133, 916.459), stdev = 16.920
[info]   CI (99.9%): [834.979, 965.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   421.399 ±(99.9%) 17.312 B/op [Average]
[info]   (min, avg, max) = (415.182, 421.399, 427.848), stdev = 4.496
[info]   CI (99.9%): [404.087, 438.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   802.495 ±(99.9%) 1151.192 MB/sec [Average]
[info]   (min, avg, max) = (668.161, 802.495, 1337.292), stdev = 298.961
[info]   CI (99.9%): [≈ 0, 1953.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   375.588 ±(99.9%) 535.865 B/op [Average]
[info]   (min, avg, max) = (309.177, 375.588, 624.313), stdev = 139.162
[info]   CI (99.9%): [≈ 0, 911.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.30% complete, ETA 00:04:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1665.581 ops/s
[info] # Warmup Iteration   2: 4951.218 ops/s
[info] # Warmup Iteration   3: 11156.162 ops/s
[info] # Warmup Iteration   4: 12462.330 ops/s
[info] # Warmup Iteration   5: 12537.142 ops/s
[info] Iteration   1: 12656.128 ops/s
[info]                  ·gc.alloc.rate:                   1601.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              199111.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165250.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.174 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 11540.084 ops/s
[info]                  ·gc.alloc.rate:                   1786.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              243660.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     272091.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.557 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 621.466 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 12664.819 ops/s
[info]                  ·gc.alloc.rate:                   1589.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              197454.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165050.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 308.074 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 12634.295 ops/s
[info]                  ·gc.alloc.rate:                   1582.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              197075.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165123.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.124 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 11893.767 ops/s
[info]                  ·gc.alloc.rate:                   1623.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              214834.337 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     262849.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.773 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   12277.818 ±(99.9%) 2030.015 ops/s [Average]
[info]   (min, avg, max) = (11540.084, 12277.818, 12664.819), stdev = 527.189
[info]   CI (99.9%): [10247.803, 14307.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1636.498 ±(99.9%) 328.872 MB/sec [Average]
[info]   (min, avg, max) = (1582.105, 1636.498, 1786.666), stdev = 85.407
[info]   CI (99.9%): [1307.625, 1965.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   210427.458 ±(99.9%) 76976.511 B/op [Average]
[info]   (min, avg, max) = (197075.674, 210427.458, 243660.873), stdev = 19990.555
[info]   CI (99.9%): [133450.947, 287403.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1592.846 ±(99.9%) 1398.732 MB/sec [Average]
[info]   (min, avg, max) = (1325.596, 1592.846, 1995.140), stdev = 363.246
[info]   CI (99.9%): [194.114, 2991.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   206073.189 ±(99.9%) 216187.059 B/op [Average]
[info]   (min, avg, max) = (165050.564, 206073.189, 272091.936), stdev = 56143.093
[info]   CI (99.9%): [≈ 0, 422260.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.494 ±(99.9%) 7.664 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.494, 4.557), stdev = 1.990
[info]   CI (99.9%): [≈ 0, 9.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   196.922 ±(99.9%) 1034.597 B/op [Average]
[info]   (min, avg, max) = (5.174, 196.922, 621.466), stdev = 268.682
[info]   CI (99.9%): [≈ 0, 1231.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 17.000), stdev = 5.916
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.54% complete, ETA 00:04:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1739.253 ops/s
[info] # Warmup Iteration   2: 14883.969 ops/s
[info] # Warmup Iteration   3: 23096.578 ops/s
[info] # Warmup Iteration   4: 22976.013 ops/s
[info] # Warmup Iteration   5: 22982.607 ops/s
[info] Iteration   1: 22448.944 ops/s
[info]                  ·gc.alloc.rate:      390.942 MB/sec
[info]                  ·gc.alloc.rate.norm: 27406.156 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 22163.329 ops/s
[info]                  ·gc.alloc.rate:               433.055 MB/sec
[info]                  ·gc.alloc.rate.norm:          30750.743 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46830.434 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 23263.338 ops/s
[info]                  ·gc.alloc.rate:      331.455 MB/sec
[info]                  ·gc.alloc.rate.norm: 22424.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 23040.286 ops/s
[info]                  ·gc.alloc.rate:                   339.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              23182.562 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45048.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.220 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 23065.938 ops/s
[info]                  ·gc.alloc.rate:      328.616 MB/sec
[info]                  ·gc.alloc.rate.norm: 22424.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   22796.367 ±(99.9%) 1797.540 ops/s [Average]
[info]   (min, avg, max) = (22163.329, 22796.367, 23263.338), stdev = 466.816
[info]   CI (99.9%): [20998.827, 24593.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   364.697 ±(99.9%) 176.539 MB/sec [Average]
[info]   (min, avg, max) = (328.616, 364.697, 433.055), stdev = 45.847
[info]   CI (99.9%): [188.157, 541.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   25237.500 ±(99.9%) 14298.422 B/op [Average]
[info]   (min, avg, max) = (22424.019, 25237.500, 30750.743), stdev = 3713.255
[info]   CI (99.9%): [10939.078, 39535.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   263.810 ±(99.9%) 1390.995 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 263.810, 659.549), stdev = 361.237
[info]   CI (99.9%): [≈ 0, 1654.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18375.723 ±(99.9%) 96920.258 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18375.723, 46830.434), stdev = 25169.883
[info]   CI (99.9%): [≈ 0, 115295.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.359 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.208), stdev = 0.093
[info]   CI (99.9%): [≈ 0, 0.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.844 ±(99.9%) 24.487 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.844, 14.220), stdev = 6.359
[info]   CI (99.9%): [≈ 0, 27.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.77% complete, ETA 00:03:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11271.248 ops/s
[info] # Warmup Iteration   2: 16267.079 ops/s
[info] # Warmup Iteration   3: 20167.463 ops/s
[info] # Warmup Iteration   4: 20517.799 ops/s
[info] # Warmup Iteration   5: 20610.724 ops/s
[info] Iteration   1: 20163.372 ops/s
[info]                  ·gc.alloc.rate:      256.803 MB/sec
[info]                  ·gc.alloc.rate.norm: 20043.969 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 19780.864 ops/s
[info]                  ·gc.alloc.rate:               340.437 MB/sec
[info]                  ·gc.alloc.rate.norm:          27085.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40702.874 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 20789.083 ops/s
[info]                  ·gc.alloc.rate:                   242.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              18379.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38731.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.075 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.714 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 21096.444 ops/s
[info]                  ·gc.alloc.rate:      226.696 MB/sec
[info]                  ·gc.alloc.rate.norm: 16912.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 21070.895 ops/s
[info]                  ·gc.alloc.rate:      226.406 MB/sec
[info]                  ·gc.alloc.rate.norm: 16912.026 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   20580.132 ±(99.9%) 2248.266 ops/s [Average]
[info]   (min, avg, max) = (19780.864, 20580.132, 21096.444), stdev = 583.868
[info]   CI (99.9%): [18331.865, 22828.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   258.625 ±(99.9%) 182.702 MB/sec [Average]
[info]   (min, avg, max) = (226.406, 258.625, 340.437), stdev = 47.447
[info]   CI (99.9%): [75.924, 441.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   19866.516 ±(99.9%) 16315.560 B/op [Average]
[info]   (min, avg, max) = (16912.020, 19866.516, 27085.284), stdev = 4237.099
[info]   CI (99.9%): [3550.957, 36182.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.647 ±(99.9%) 1079.042 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.647, 511.636), stdev = 280.224
[info]   CI (99.9%): [≈ 0, 1283.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15886.885 ±(99.9%) 83809.938 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15886.885, 40702.874), stdev = 21765.175
[info]   CI (99.9%): [≈ 0, 99696.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.015 ±(99.9%) 0.130 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.075), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.143 ±(99.9%) 9.839 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.143, 5.714), stdev = 2.555
[info]   CI (99.9%): [≈ 0, 10.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 97.00% complete, ETA 00:03:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109.764 ops/s
[info] # Warmup Iteration   2: 1116.717 ops/s
[info] # Warmup Iteration   3: 5772.780 ops/s
[info] # Warmup Iteration   4: 8597.325 ops/s
[info] # Warmup Iteration   5: 9039.101 ops/s
[info] Iteration   1: 9018.785 ops/s
[info]                  ·gc.alloc.rate:                   1970.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              343939.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     348304.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.450 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 8813.341 ops/s
[info]                  ·gc.alloc.rate:                   1929.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              344525.810 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     356860.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 509.274 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 8848.980 ops/s
[info]                  ·gc.alloc.rate:                   1923.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              341985.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     355172.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.746 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 8185.159 ops/s
[info]                  ·gc.alloc.rate:                   1767.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              339656.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     255900.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68.042 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 8492.537 ops/s
[info]                  ·gc.alloc.rate:               1858.882 MB/sec
[info]                  ·gc.alloc.rate.norm:          344337.509 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 370241.755 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   8671.760 ±(99.9%) 1278.246 ops/s [Average]
[info]   (min, avg, max) = (8185.159, 8671.760, 9018.785), stdev = 331.956
[info]   CI (99.9%): [7393.514, 9950.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1889.884 ±(99.9%) 305.835 MB/sec [Average]
[info]   (min, avg, max) = (1767.220, 1889.884, 1970.934), stdev = 79.424
[info]   CI (99.9%): [1584.049, 2195.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   342888.920 ±(99.9%) 7972.666 B/op [Average]
[info]   (min, avg, max) = (339656.229, 342888.920, 344525.810), stdev = 2070.476
[info]   CI (99.9%): [334916.254, 350861.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1864.345 ±(99.9%) 1147.126 MB/sec [Average]
[info]   (min, avg, max) = (1331.440, 1864.345, 1998.724), stdev = 297.905
[info]   CI (99.9%): [717.219, 3011.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   337295.997 ±(99.9%) 177863.099 B/op [Average]
[info]   (min, avg, max) = (255900.189, 337295.997, 370241.755), stdev = 46190.482
[info]   CI (99.9%): [159432.898, 515159.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.735 ±(99.9%) 4.617 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.735, 2.852), stdev = 1.199
[info]   CI (99.9%): [≈ 0, 5.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   132.102 ±(99.9%) 823.193 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 132.102, 509.274), stdev = 213.781
[info]   CI (99.9%): [≈ 0, 955.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 13.000), stdev = 4.494
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97.23% complete, ETA 00:03:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4676.158 ops/s
[info] # Warmup Iteration   2: 43630.614 ops/s
[info] # Warmup Iteration   3: 62518.018 ops/s
[info] # Warmup Iteration   4: 60795.380 ops/s
[info] # Warmup Iteration   5: 61207.501 ops/s
[info] Iteration   1: 60209.892 ops/s
[info]                  ·gc.alloc.rate:               917.939 MB/sec
[info]                  ·gc.alloc.rate.norm:          23986.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17308.234 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 63454.722 ops/s
[info]                  ·gc.alloc.rate:                   843.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              20900.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32865.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.484 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.767 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 63346.085 ops/s
[info]                  ·gc.alloc.rate:                   820.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              20365.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16508.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.517 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 63865.767 ops/s
[info]                  ·gc.alloc.rate:               827.910 MB/sec
[info]                  ·gc.alloc.rate.norm:          20393.606 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16375.022 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 63986.896 ops/s
[info]                  ·gc.alloc.rate:               827.612 MB/sec
[info]                  ·gc.alloc.rate.norm:          20347.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16376.064 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   62972.673 ±(99.9%) 6036.745 ops/s [Average]
[info]   (min, avg, max) = (60209.892, 62972.673, 63986.896), stdev = 1567.724
[info]   CI (99.9%): [56935.927, 69009.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   847.399 ±(99.9%) 155.361 MB/sec [Average]
[info]   (min, avg, max) = (820.031, 847.399, 917.939), stdev = 40.347
[info]   CI (99.9%): [692.038, 1002.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21198.733 ±(99.9%) 6066.018 B/op [Average]
[info]   (min, avg, max) = (20347.239, 21198.733, 23986.319), stdev = 1575.325
[info]   CI (99.9%): [15132.715, 27264.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   796.871 ±(99.9%) 1139.840 MB/sec [Average]
[info]   (min, avg, max) = (662.374, 796.871, 1326.389), stdev = 296.013
[info]   CI (99.9%): [≈ 0, 1936.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19886.837 ±(99.9%) 27978.559 B/op [Average]
[info]   (min, avg, max) = (16375.022, 19886.837, 32865.963), stdev = 7265.943
[info]   CI (99.9%): [≈ 0, 47865.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.301 ±(99.9%) 2.547 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.301, 1.484), stdev = 0.661
[info]   CI (99.9%): [≈ 0, 2.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.457 ±(99.9%) 63.098 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.457, 36.767), stdev = 16.386
[info]   CI (99.9%): [≈ 0, 70.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.46% complete, ETA 00:02:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17973.842 ops/s
[info] # Warmup Iteration   2: 95966.764 ops/s
[info] # Warmup Iteration   3: 100191.205 ops/s
[info] # Warmup Iteration   4: 103796.673 ops/s
[info] # Warmup Iteration   5: 103884.872 ops/s
[info] Iteration   1: 104351.782 ops/s
[info]                  ·gc.alloc.rate:               699.613 MB/sec
[info]                  ·gc.alloc.rate.norm:          10547.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10077.245 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 104289.701 ops/s
[info]                  ·gc.alloc.rate:               689.052 MB/sec
[info]                  ·gc.alloc.rate.norm:          10395.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10093.094 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 103228.998 ops/s
[info]                  ·gc.alloc.rate:               677.595 MB/sec
[info]                  ·gc.alloc.rate.norm:          10326.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10196.816 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 103871.042 ops/s
[info]                  ·gc.alloc.rate:                   684.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              10370.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10138.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.509 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 105500.843 ops/s
[info]                  ·gc.alloc.rate:                   702.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              10475.274 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9981.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   104248.473 ±(99.9%) 3200.083 ops/s [Average]
[info]   (min, avg, max) = (103228.998, 104248.473, 105500.843), stdev = 831.051
[info]   CI (99.9%): [101048.390, 107448.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   690.685 ±(99.9%) 39.703 MB/sec [Average]
[info]   (min, avg, max) = (677.595, 690.685, 702.378), stdev = 10.311
[info]   CI (99.9%): [650.981, 730.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10423.085 ±(99.9%) 338.364 B/op [Average]
[info]   (min, avg, max) = (10326.586, 10423.085, 10547.056), stdev = 87.872
[info]   CI (99.9%): [10084.721, 10761.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   669.059 ±(99.9%) 1.492 MB/sec [Average]
[info]   (min, avg, max) = (668.449, 669.059, 669.467), stdev = 0.388
[info]   CI (99.9%): [667.566, 670.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10097.589 ±(99.9%) 306.584 B/op [Average]
[info]   (min, avg, max) = (9981.943, 10097.589, 10196.816), stdev = 79.619
[info]   CI (99.9%): [9791.006, 10404.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.058 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.103 ±(99.9%) 0.875 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.103, 0.509), stdev = 0.227
[info]   CI (99.9%): [≈ 0, 0.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.69% complete, ETA 00:02:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33514.086 ops/s
[info] # Warmup Iteration   2: 99757.073 ops/s
[info] # Warmup Iteration   3: 109923.627 ops/s
[info] # Warmup Iteration   4: 111914.601 ops/s
[info] # Warmup Iteration   5: 112288.282 ops/s
[info] Iteration   1: 112520.790 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 112565.618 ops/s
[info]                  ·gc.alloc.rate:      0.081 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.127 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 112028.994 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 112392.501 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 112733.870 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   112448.355 ±(99.9%) 1017.874 ops/s [Average]
[info]   (min, avg, max) = (112028.994, 112448.355, 112733.870), stdev = 264.339
[info]   CI (99.9%): [111430.481, 113466.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.016 ±(99.9%) 0.138 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.016, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.229 ±(99.9%) 1.933 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.229, 1.127), stdev = 0.502
[info]   CI (99.9%): [≈ 0, 2.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97.92% complete, ETA 00:02:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46584.484 ops/s
[info] # Warmup Iteration   2: 302870.441 ops/s
[info] # Warmup Iteration   3: 354702.232 ops/s
[info] # Warmup Iteration   4: 389262.317 ops/s
[info] # Warmup Iteration   5: 387632.538 ops/s
[info] Iteration   1: 392663.840 ops/s
[info]                  ·gc.alloc.rate:                   2252.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              9023.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8020.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.257 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 387822.322 ops/s
[info]                  ·gc.alloc.rate:                   2233.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              9058.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8120.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.536 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.286 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 394554.802 ops/s
[info]                  ·gc.alloc.rate:                   2282.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              9102.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2662.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10618.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.932 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.717 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 406619.601 ops/s
[info]                  ·gc.alloc.rate:                   2323.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              8988.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7721.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.081 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 393921.229 ops/s
[info]                  ·gc.alloc.rate:                   2279.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              9102.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7978.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.083 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   395116.359 ±(99.9%) 26767.245 ops/s [Average]
[info]   (min, avg, max) = (387822.322, 395116.359, 406619.601), stdev = 6951.368
[info]   CI (99.9%): [368349.114, 421883.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2274.053 ±(99.9%) 131.729 MB/sec [Average]
[info]   (min, avg, max) = (2233.107, 2274.053, 2323.285), stdev = 34.210
[info]   CI (99.9%): [2142.324, 2405.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9054.880 ±(99.9%) 191.597 B/op [Average]
[info]   (min, avg, max) = (8988.216, 9054.880, 9102.245), stdev = 49.757
[info]   CI (99.9%): [8863.283, 9246.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2132.035 ±(99.9%) 1142.488 MB/sec [Average]
[info]   (min, avg, max) = (1995.792, 2132.035, 2662.767), stdev = 296.700
[info]   CI (99.9%): [989.547, 3274.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8491.897 ±(99.9%) 4612.709 B/op [Average]
[info]   (min, avg, max) = (7721.228, 8491.897, 10618.491), stdev = 1197.906
[info]   CI (99.9%): [3879.188, 13104.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.964 ±(99.9%) 4.026 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.964, 2.536), stdev = 1.045
[info]   CI (99.9%): [≈ 0, 4.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.885 ±(99.9%) 16.316 B/op [Average]
[info]   (min, avg, max) = (0.081, 3.885, 10.286), stdev = 4.237
[info]   CI (99.9%): [≈ 0, 20.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 10.000), stdev = 3.033
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.15% complete, ETA 00:02:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65555.735 ops/s
[info] # Warmup Iteration   2: 512781.659 ops/s
[info] # Warmup Iteration   3: 912698.496 ops/s
[info] # Warmup Iteration   4: 890528.695 ops/s
[info] # Warmup Iteration   5: 888856.790 ops/s
[info] Iteration   1: 887021.433 ops/s
[info]                  ·gc.alloc.rate:               623.262 MB/sec
[info]                  ·gc.alloc.rate.norm:          1105.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1171.385 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 883496.935 ops/s
[info]                  ·gc.alloc.rate:               636.427 MB/sec
[info]                  ·gc.alloc.rate.norm:          1133.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1176.049 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 890061.560 ops/s
[info]                  ·gc.alloc.rate:               633.680 MB/sec
[info]                  ·gc.alloc.rate.norm:          1120.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1167.968 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 881854.914 ops/s
[info]                  ·gc.alloc.rate:                   630.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              1123.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1178.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 891563.700 ops/s
[info]                  ·gc.alloc.rate:                   634.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              1119.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1168.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   886799.708 ±(99.9%) 15963.203 ops/s [Average]
[info]   (min, avg, max) = (881854.914, 886799.708, 891563.700), stdev = 4145.593
[info]   CI (99.9%): [870836.506, 902762.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   631.592 ±(99.9%) 19.975 MB/sec [Average]
[info]   (min, avg, max) = (623.262, 631.592, 636.427), stdev = 5.187
[info]   CI (99.9%): [611.617, 651.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1120.435 ±(99.9%) 38.725 B/op [Average]
[info]   (min, avg, max) = (1105.319, 1120.435, 1133.183), stdev = 10.057
[info]   CI (99.9%): [1081.709, 1159.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   660.948 ±(99.9%) 2.668 MB/sec [Average]
[info]   (min, avg, max) = (660.501, 660.948, 662.161), stdev = 0.693
[info]   CI (99.9%): [658.280, 663.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1172.513 ±(99.9%) 18.390 B/op [Average]
[info]   (min, avg, max) = (1167.968, 1172.513, 1178.803), stdev = 4.776
[info]   CI (99.9%): [1154.123, 1190.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.037), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.38% complete, ETA 00:01:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 619901.835 ops/s
[info] # Warmup Iteration   2: 1585873.084 ops/s
[info] # Warmup Iteration   3: 1866045.260 ops/s
[info] # Warmup Iteration   4: 1869952.079 ops/s
[info] # Warmup Iteration   5: 1878886.808 ops/s
[info] Iteration   1: 1860473.354 ops/s
[info]                  ·gc.alloc.rate:                   947.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              801.274 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1131.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1881451.649 ops/s
[info]                  ·gc.alloc.rate:               952.513 MB/sec
[info]                  ·gc.alloc.rate.norm:          796.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 559.741 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1920772.609 ops/s
[info]                  ·gc.alloc.rate:                   987.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1096.852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1875688.225 ops/s
[info]                  ·gc.alloc.rate:               952.541 MB/sec
[info]                  ·gc.alloc.rate.norm:          799.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 561.735 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1877239.432 ops/s
[info]                  ·gc.alloc.rate:               949.577 MB/sec
[info]                  ·gc.alloc.rate.norm:          795.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 561.840 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1883125.054 ±(99.9%) 86600.656 ops/s [Average]
[info]   (min, avg, max) = (1860473.354, 1883125.054, 1920772.609), stdev = 22489.915
[info]   CI (99.9%): [1796524.398, 1969725.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   957.873 ±(99.9%) 63.439 MB/sec [Average]
[info]   (min, avg, max) = (947.625, 957.873, 987.108), stdev = 16.475
[info]   CI (99.9%): [894.434, 1021.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   800.256 ±(99.9%) 19.860 B/op [Average]
[info]   (min, avg, max) = (795.853, 800.256, 808.643), stdev = 5.158
[info]   CI (99.9%): [780.396, 820.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.321 ±(99.9%) 1410.529 MB/sec [Average]
[info]   (min, avg, max) = (669.376, 937.321, 1338.923), stdev = 366.310
[info]   CI (99.9%): [≈ 0, 2347.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   782.350 ±(99.9%) 1167.521 B/op [Average]
[info]   (min, avg, max) = (559.741, 782.350, 1131.582), stdev = 303.201
[info]   CI (99.9%): [≈ 0, 1949.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98.61% complete, ETA 00:01:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10922.113 ops/s
[info] # Warmup Iteration   2: 129890.836 ops/s
[info] # Warmup Iteration   3: 163099.577 ops/s
[info] # Warmup Iteration   4: 184676.696 ops/s
[info] # Warmup Iteration   5: 184379.617 ops/s
[info] Iteration   1: 185970.866 ops/s
[info]                  ·gc.alloc.rate:                   4560.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              38577.479 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4688.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39658.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.352 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 185834.656 ops/s
[info]                  ·gc.alloc.rate:                   4572.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              38703.341 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4039.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34193.738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.353 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 186192.823 ops/s
[info]                  ·gc.alloc.rate:                   4607.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              38930.178 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4733.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39993.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.352 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 186714.493 ops/s
[info]                  ·gc.alloc.rate:                   4593.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              38710.242 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4068.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34292.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.175 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 180634.849 ops/s
[info]                  ·gc.alloc.rate:                   4547.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              39611.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4753.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41401.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.230 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.713 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   185069.538 ±(99.9%) 9632.751 ops/s [Average]
[info]   (min, avg, max) = (180634.849, 185069.538, 186714.493), stdev = 2501.595
[info]   CI (99.9%): [175436.786, 194702.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4576.287 ±(99.9%) 93.491 MB/sec [Average]
[info]   (min, avg, max) = (4547.872, 4576.287, 4607.824), stdev = 24.279
[info]   CI (99.9%): [4482.796, 4669.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   38906.459 ±(99.9%) 1593.493 B/op [Average]
[info]   (min, avg, max) = (38577.479, 38906.459, 39611.056), stdev = 413.825
[info]   CI (99.9%): [37312.966, 40499.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4456.737 ±(99.9%) 1418.562 MB/sec [Average]
[info]   (min, avg, max) = (4039.359, 4456.737, 4753.426), stdev = 368.396
[info]   CI (99.9%): [3038.176, 5875.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   37907.869 ±(99.9%) 13127.179 B/op [Average]
[info]   (min, avg, max) = (34193.738, 37907.869, 41401.392), stdev = 3409.087
[info]   CI (99.9%): [24780.690, 51035.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.275 ±(99.9%) 2.056 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.275, 1.230), stdev = 0.534
[info]   CI (99.9%): [≈ 0, 2.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.389 ±(99.9%) 17.920 B/op [Average]
[info]   (min, avg, max) = (0.175, 2.389, 10.713), stdev = 4.654
[info]   CI (99.9%): [≈ 0, 20.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.200, 10.000), stdev = 0.837
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98.85% complete, ETA 00:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79232.512 ops/s
[info] # Warmup Iteration   2: 390588.563 ops/s
[info] # Warmup Iteration   3: 422889.805 ops/s
[info] # Warmup Iteration   4: 460604.449 ops/s
[info] # Warmup Iteration   5: 463899.491 ops/s
[info] Iteration   1: 462920.109 ops/s
[info]                  ·gc.alloc.rate:                   1511.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              5139.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4543.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.142 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 454379.791 ops/s
[info]                  ·gc.alloc.rate:                   1482.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              5134.572 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4628.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 462189.268 ops/s
[info]                  ·gc.alloc.rate:                   1502.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              5115.611 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4554.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.151 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 449373.074 ops/s
[info]                  ·gc.alloc.rate:                   1487.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              5207.132 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7004.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.583 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 436254.963 ops/s
[info]                  ·gc.alloc.rate:                   1429.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              5155.845 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4804.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.150 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   453023.441 ±(99.9%) 42107.066 ops/s [Average]
[info]   (min, avg, max) = (436254.963, 453023.441, 462920.109), stdev = 10935.071
[info]   CI (99.9%): [410916.375, 495130.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1482.721 ±(99.9%) 123.098 MB/sec [Average]
[info]   (min, avg, max) = (1429.472, 1482.721, 1511.857), stdev = 31.968
[info]   CI (99.9%): [1359.624, 1605.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5150.616 ±(99.9%) 133.648 B/op [Average]
[info]   (min, avg, max) = (5115.611, 5150.616, 5207.132), stdev = 34.708
[info]   CI (99.9%): [5016.968, 5284.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1468.619 ±(99.9%) 1145.439 MB/sec [Average]
[info]   (min, avg, max) = (1332.013, 1468.619, 2000.730), stdev = 297.467
[info]   CI (99.9%): [323.180, 2614.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5106.964 ±(99.9%) 4103.322 B/op [Average]
[info]   (min, avg, max) = (4543.035, 5106.964, 7004.039), stdev = 1065.620
[info]   CI (99.9%): [1003.643, 9210.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.885 ±(99.9%) 7.043 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.885, 4.156), stdev = 1.829
[info]   CI (99.9%): [≈ 0, 7.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.020 ±(99.9%) 23.973 B/op [Average]
[info]   (min, avg, max) = (0.072, 3.020, 14.151), stdev = 6.226
[info]   CI (99.9%): [≈ 0, 26.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.08% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 113820.767 ops/s
[info] # Warmup Iteration   2: 792830.524 ops/s
[info] # Warmup Iteration   3: 892271.782 ops/s
[info] # Warmup Iteration   4: 907055.868 ops/s
[info] # Warmup Iteration   5: 909716.126 ops/s
[info] Iteration   1: 906692.213 ops/s
[info]                  ·gc.alloc.rate:               432.586 MB/sec
[info]                  ·gc.alloc.rate.norm:          750.883 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 888.039 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 907192.737 ops/s
[info]                  ·gc.alloc.rate:                   438.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1145.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 909023.834 ops/s
[info]                  ·gc.alloc.rate:      420.572 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 901725.515 ops/s
[info]                  ·gc.alloc.rate:                   438.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              765.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1152.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 904848.707 ops/s
[info]                  ·gc.alloc.rate:               440.791 MB/sec
[info]                  ·gc.alloc.rate.norm:          766.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1151.711 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   905896.601 ±(99.9%) 10648.370 ops/s [Average]
[info]   (min, avg, max) = (901725.515, 905896.601, 909023.834), stdev = 2765.348
[info]   CI (99.9%): [895248.231, 916544.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   434.195 ±(99.9%) 31.577 MB/sec [Average]
[info]   (min, avg, max) = (420.572, 434.195, 440.791), stdev = 8.200
[info]   CI (99.9%): [402.618, 465.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   754.259 ±(99.9%) 61.270 B/op [Average]
[info]   (min, avg, max) = (728.000, 754.259, 766.669), stdev = 15.912
[info]   CI (99.9%): [692.989, 815.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   498.881 ±(99.9%) 1102.372 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 498.881, 662.169), stdev = 286.283
[info]   CI (99.9%): [≈ 0, 1601.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   867.446 ±(99.9%) 1917.576 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 867.446, 1152.207), stdev = 497.989
[info]   CI (99.9%): [≈ 0, 2785.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.076 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.036), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.31% complete, ETA 00:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 691895.835 ops/s
[info] # Warmup Iteration   2: 1697170.022 ops/s
[info] # Warmup Iteration   3: 1561017.556 ops/s
[info] # Warmup Iteration   4: 1600234.014 ops/s
[info] # Warmup Iteration   5: 1614371.218 ops/s
[info] Iteration   1: 1604339.884 ops/s
[info]                  ·gc.alloc.rate:                   783.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              768.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1311.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1568137.976 ops/s
[info]                  ·gc.alloc.rate:               751.188 MB/sec
[info]                  ·gc.alloc.rate.norm:          753.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 671.255 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1567292.468 ops/s
[info]                  ·gc.alloc.rate:                   748.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              750.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     671.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1624416.462 ops/s
[info]                  ·gc.alloc.rate:               768.427 MB/sec
[info]                  ·gc.alloc.rate.norm:          744.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 648.313 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1594360.557 ops/s
[info]                  ·gc.alloc.rate:               779.260 MB/sec
[info]                  ·gc.alloc.rate.norm:          769.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 660.867 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1591709.469 ±(99.9%) 94087.162 ops/s [Average]
[info]   (min, avg, max) = (1567292.468, 1591709.469, 1624416.462), stdev = 24434.137
[info]   CI (99.9%): [1497622.307, 1685796.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   766.122 ±(99.9%) 62.046 MB/sec [Average]
[info]   (min, avg, max) = (748.015, 766.122, 783.722), stdev = 16.113
[info]   CI (99.9%): [704.076, 828.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   757.482 ±(99.9%) 42.871 B/op [Average]
[info]   (min, avg, max) = (744.374, 757.482, 769.256), stdev = 11.133
[info]   CI (99.9%): [714.612, 800.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   802.736 ±(99.9%) 1149.724 MB/sec [Average]
[info]   (min, avg, max) = (668.825, 802.736, 1336.852), stdev = 298.580
[info]   CI (99.9%): [≈ 0, 1952.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   792.784 ±(99.9%) 1117.315 B/op [Average]
[info]   (min, avg, max) = (648.313, 792.784, 1311.560), stdev = 290.163
[info]   CI (99.9%): [≈ 0, 1910.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.037 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.021), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.020), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 8.000), stdev = 2.074
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99.54% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 778611.657 ops/s
[info] # Warmup Iteration   2: 1748504.722 ops/s
[info] # Warmup Iteration   3: 1702352.283 ops/s
[info] # Warmup Iteration   4: 1695417.314 ops/s
[info] # Warmup Iteration   5: 1697771.701 ops/s
[info] Iteration   1: 1698212.513 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1698074.651 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1698267.133 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1683031.317 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1684201.176 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1692357.358 ±(99.9%) 30768.673 ops/s [Average]
[info]   (min, avg, max) = (1683031.317, 1692357.358, 1698267.133), stdev = 7990.527
[info]   CI (99.9%): [1661588.685, 1723126.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99.77% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50583.314 ops/s
[info] # Warmup Iteration   2: 442718.808 ops/s
[info] # Warmup Iteration   3: 552552.491 ops/s
[info] # Warmup Iteration   4: 578572.887 ops/s
[info] # Warmup Iteration   5: 613278.323 ops/s
[info] Iteration   1: 641452.379 ops/s
[info]                  ·gc.alloc.rate:                   893.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              2192.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3268.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 629859.057 ops/s
[info]                  ·gc.alloc.rate:               870.581 MB/sec
[info]                  ·gc.alloc.rate.norm:          2175.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1662.863 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 645265.299 ops/s
[info]                  ·gc.alloc.rate:               896.915 MB/sec
[info]                  ·gc.alloc.rate.norm:          2187.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1623.163 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 621034.900 ops/s
[info]                  ·gc.alloc.rate:               860.325 MB/sec
[info]                  ·gc.alloc.rate.norm:          2179.787 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1687.323 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 643348.459 ops/s
[info]                  ·gc.alloc.rate:                   905.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              2216.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3258.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.428 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   636192.019 ±(99.9%) 39973.277 ops/s [Average]
[info]   (min, avg, max) = (621034.900, 636192.019, 645265.299), stdev = 10380.933
[info]   CI (99.9%): [596218.741, 676165.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   885.439 ±(99.9%) 73.739 MB/sec [Average]
[info]   (min, avg, max) = (860.325, 885.439, 905.919), stdev = 19.150
[info]   CI (99.9%): [811.700, 959.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2190.084 ±(99.9%) 61.939 B/op [Average]
[info]   (min, avg, max) = (2175.031, 2190.084, 2216.319), stdev = 16.085
[info]   CI (99.9%): [2128.145, 2252.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   932.274 ±(99.9%) 1405.375 MB/sec [Average]
[info]   (min, avg, max) = (665.580, 932.274, 1332.241), stdev = 364.971
[info]   CI (99.9%): [≈ 0, 2337.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2300.154 ±(99.9%) 3388.214 B/op [Average]
[info]   (min, avg, max) = (1623.163, 2300.154, 3268.898), stdev = 879.908
[info]   CI (99.9%): [≈ 0, 5688.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 6.619 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.779, 3.854), stdev = 1.719
[info]   CI (99.9%): [≈ 0, 7.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.906 ±(99.9%) 16.192 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.906, 9.428), stdev = 4.205
[info]   CI (99.9%): [≈ 0, 18.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.200, 10.000), stdev = 2.588
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # Run complete. Total time: 01:56:26
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                (size)   Mode  Cnt         Score          Error   Units
[info] AdtBenchmark.readCirce                                                                      N/A  thrpt    5   1080906.640 ±    58402.606   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                       N/A  thrpt    5      2439.833 ±      168.987  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                  N/A  thrpt    5      3552.426 ±      109.455    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2397.086 ±     1400.312  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5      3492.745 ±     2105.295    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.945 ±        7.142  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         1.382 ±       10.419    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                            N/A  thrpt    5        18.000                 counts
[info] AdtBenchmark.readCirce:·gc.time                                                             N/A  thrpt    5        34.000                     ms
[info] AdtBenchmark.readJacksonScala                                                               N/A  thrpt    5   1939130.565 ±   177555.788   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5      1256.305 ±      135.179  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5      1019.514 ±       38.271    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1200.153 ±     1144.944  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5       971.742 ±      897.945    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.204 ±        1.623  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.161 ±        1.279    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                     N/A  thrpt    5         9.000                 counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                      N/A  thrpt    5        17.000                     ms
[info] AdtBenchmark.readJsoniterScala                                                              N/A  thrpt    5   5524228.880 ±   233397.491   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5       377.211 ±       35.687  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5       107.475 ±       10.881    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       369.984 ±     1323.920  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5       105.562 ±      378.081    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                    N/A  thrpt    5         3.000                 counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                     N/A  thrpt    5        11.000                     ms
[info] AdtBenchmark.readPlayJson                                                                   N/A  thrpt    5    486798.233 ±    25840.307   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                    N/A  thrpt    5      2490.247 ±      144.232  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                               N/A  thrpt    5      8051.071 ±      287.413    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2408.342 ±     1412.319  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5      7796.184 ±     4842.473    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.614 ±        4.641  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         1.979 ±       14.901    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                         N/A  thrpt    5        18.000                 counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                          N/A  thrpt    5        31.000                     ms
[info] AdtBenchmark.writeCirce                                                                     N/A  thrpt    5   1037983.074 ±    50812.779   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                      N/A  thrpt    5      2816.457 ±      215.754  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5      4269.460 ±      129.139    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      2657.883 ±       95.973  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5      4029.518 ±       79.465    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.021 ±        0.001  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0.032 ±        0.002    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                           N/A  thrpt    5        20.000                 counts
[info] AdtBenchmark.writeCirce:·gc.time                                                            N/A  thrpt    5        28.000                     ms
[info] AdtBenchmark.writeJacksonScala                                                              N/A  thrpt    5   3116575.593 ±   165616.000   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5      1240.485 ±       59.140  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5       626.433 ±       18.323    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5      1201.066 ±     1152.046  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5       606.731 ±      584.720    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.137 ±        1.009  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.069 ±        0.505    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                    N/A  thrpt    5         9.000                 counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                     N/A  thrpt    5        15.000                     ms
[info] AdtBenchmark.writeJsoniterScala                                                             N/A  thrpt    5  19411756.262 ±   363257.189   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5      1018.775 ±       61.586  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5        82.593 ±        3.937    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      1070.673 ±     1411.246  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5        86.769 ±      113.982    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.016 ±        0.055  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0.001 ±        0.004    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                   N/A  thrpt    5         8.000                 counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                    N/A  thrpt    5        31.000                     ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                     N/A  thrpt    5  19303295.002 ±   203311.588   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      N/A  thrpt    5         0.611 ±        5.255  MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 N/A  thrpt    5         0.050 ±        0.431    B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           N/A  thrpt    5           ≈ 0                 counts
[info] AdtBenchmark.writePlayJson                                                                  N/A  thrpt    5   1090006.983 ±    41259.834   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      2616.004 ±      133.304  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5      3776.722 ±       70.248    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      2543.925 ±     1130.316  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      3674.966 ±     1703.998    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.477 ±        3.752  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.694 ±        5.457    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                        N/A  thrpt    5        19.000                 counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                         N/A  thrpt    5        33.000                     ms
[info] AnyRefsBenchmark.readCirce                                                                  N/A  thrpt    5   3821337.143 ±   140692.044   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      3498.339 ±      144.773  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5      1440.821 ±       36.081    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      3364.871 ±       76.808  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      1385.951 ±       63.334    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.050 ±        0.298  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.020 ±        0.121    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        25.000                 counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        34.000                     ms
[info] AnyRefsBenchmark.readDslJsonJava                                                            N/A  thrpt    5  11443675.724 ±  1007830.780   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5      1436.264 ±      149.010  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5       197.512 ±        4.695    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      1465.436 ±     1151.896  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5       201.324 ±      150.228    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.978 ±        8.326  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.132 ±        1.127    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5        11.000                 counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5        31.000                     ms
[info] AnyRefsBenchmark.readJacksonScala                                                           N/A  thrpt    5   3869131.712 ±   105624.025   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5      2351.691 ±      107.576  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5       956.538 ±       34.323    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      2283.720 ±     1431.265  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5       929.236 ±      592.224    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.275 ±        2.067  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.112 ±        0.847    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5        17.000                 counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5        27.000                     ms
[info] AnyRefsBenchmark.readJsoniterScala                                                          N/A  thrpt    5  15294417.611 ±   608982.435   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5      2007.150 ±       81.088  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5       206.541 ±        4.234    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5      2009.439 ±       11.554  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5       206.794 ±        9.057    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.769 ±        4.382  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.080 ±        0.457    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5        15.000                 counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5        28.000                     ms
[info] AnyRefsBenchmark.readPlayJson                                                               N/A  thrpt    5   1806456.162 ±    24424.780   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      3119.058 ±       77.109  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5      2717.288 ±       57.824    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      3089.157 ±     1390.327  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5      2691.460 ±     1219.301    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.100 ±        0.684  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.087 ±        0.597    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        23.000                 counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5        38.000                     ms
[info] AnyRefsBenchmark.writeCirce                                                                 N/A  thrpt    5   5297695.040 ±   214305.584   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                  N/A  thrpt    5      2663.953 ±      161.436  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                             N/A  thrpt    5       791.310 ±       21.227    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2631.611 ±       42.126  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5       781.789 ±       28.871    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.926 ±        6.575  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.278 ±        1.976    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                       N/A  thrpt    5        20.000                 counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                        N/A  thrpt    5        35.000                     ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                           N/A  thrpt    5  23800040.656 ±  1526390.183   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                            N/A  thrpt    5       747.644 ±       10.107  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       N/A  thrpt    5        49.440 ±        2.780    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       665.417 ±        1.558  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5        44.004 ±        2.835    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.003 ±        0.027  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5        ≈ 10⁻⁴                   B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                 N/A  thrpt    5         5.000                 counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                  N/A  thrpt    5        18.000                     ms
[info] AnyRefsBenchmark.writeJacksonScala                                                          N/A  thrpt    5  10536891.106 ±   172750.071   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                           N/A  thrpt    5       331.780 ±       55.639  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      N/A  thrpt    5        49.550 ±        8.943    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       264.376 ±     1393.978  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5        39.599 ±      208.795    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                N/A  thrpt    5         2.000                 counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                 N/A  thrpt    5         4.000                     ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                         N/A  thrpt    5  32770491.891 ±  5368326.276   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          N/A  thrpt    5      1033.690 ±      137.580  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     N/A  thrpt    5        49.657 ±        2.850    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       936.701 ±     1411.530  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5        45.636 ±       76.183    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.004 ±        0.031  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5        ≈ 10⁻⁴                   B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                               N/A  thrpt    5         7.000                 counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                N/A  thrpt    5        26.000                     ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                 N/A  thrpt    5  38424060.182 ±  1142618.828   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             N/A  thrpt    5        ≈ 10⁻⁵                   B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       N/A  thrpt    5           ≈ 0                 counts
[info] AnyRefsBenchmark.writePlayJson                                                              N/A  thrpt    5   2401992.392 ±    12225.599   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                               N/A  thrpt    5      3539.550 ±       89.496  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          N/A  thrpt    5      2318.984 ±       48.602    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5      3502.254 ±     1108.448  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5      2294.757 ±      738.852    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.062 ±        0.316  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.041 ±        0.207    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                    N/A  thrpt    5        26.000                 counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                     N/A  thrpt    5        40.000                     ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                    128  thrpt    5    408603.876 ±   116823.014   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                     128  thrpt    5      2451.256 ±      758.713  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                128  thrpt    5      9440.320 ±     1080.564    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                            128  thrpt    5      2394.840 ±     1410.584  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      9250.481 ±     5694.120    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.637 ±        3.177  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         2.336 ±       11.502    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                          128  thrpt    5        18.000                 counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                           128  thrpt    5        27.000                     ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                             128  thrpt    5    859475.093 ±    10704.008   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                              128  thrpt    5       718.479 ±       16.469  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5      1315.418 ±       27.761    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5       660.411 ±        5.039  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5      1209.117 ±       23.452    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.004 ±        0.036  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0.008 ±        0.066    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                   128  thrpt    5         5.000                 counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                    128  thrpt    5         9.000                     ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                            128  thrpt    5   1712548.503 ±    46194.917   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                             128  thrpt    5      1178.567 ±       27.392  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5      1083.143 ±       46.261    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      1205.776 ±     1153.617  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5      1108.995 ±     1071.712    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.814 ±        5.296  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.753 ±        4.916    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                  128  thrpt    5         9.000                 counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                   128  thrpt    5        28.000                     ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                 128  thrpt    5    222226.335 ±    13563.453   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                  128  thrpt    5      4105.675 ±      319.686  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                             128  thrpt    5     29074.477 ±      817.932    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5      4033.702 ±      123.932  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     28569.208 ±     1059.930    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.042 ±        0.001  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.295 ±        0.018    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                       128  thrpt    5        30.000                 counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                        128  thrpt    5        43.000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                   128  thrpt    5    440632.781 ±    13485.055   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                    128  thrpt    5      1440.810 ±       15.439  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                               128  thrpt    5      5145.802 ±      132.749    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1335.420 ±        8.319  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      4769.439 ±      140.760    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.869 ±        7.077  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         3.085 ±       25.120    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                         128  thrpt    5        10.000                 counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                          128  thrpt    5        29.000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                            128  thrpt    5   1036639.123 ±     9148.985   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                             128  thrpt    5       493.531 ±       27.620  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5       749.280 ±       47.101    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       528.534 ±     1137.711  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5       803.063 ±     1728.656    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.017 ±        0.088  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.025 ±        0.133    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                  128  thrpt    5         4.000                 counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                   128  thrpt    5         7.000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                           128  thrpt    5   2749640.802 ±   191910.665   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                            128  thrpt    5      1307.686 ±       90.903  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5       748.463 ±       19.478    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1205.337 ±     1153.463  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5       688.968 ±      648.154    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.831 ±        7.085  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         0.472 ±        4.024    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                 128  thrpt    5         9.000                 counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                  128  thrpt    5        26.000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                   128  thrpt    5   2809503.667 ±     9727.642   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    128  thrpt    5         0.824 ±        5.518  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               128  thrpt    5         0.462 ±        3.095    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                         128  thrpt    5           ≈ 0                 counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                128  thrpt    5    699861.519 ±    12328.716   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                 128  thrpt    5       976.083 ±       25.653  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                            128  thrpt    5      2194.910 ±       60.159    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5       926.444 ±     1392.004  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      2085.282 ±     3158.225    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.756 ±        6.466  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         1.693 ±       14.473    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                      128  thrpt    5         7.000                 counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                       128  thrpt    5        44.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                       128  thrpt    5     21832.943 ±     2170.381   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      1855.342 ±      395.379  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5    133872.613 ±    35772.122    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1855.517 ±     1128.414  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    134001.762 ±    86533.441    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.801 ±        5.562  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        57.336 ±      394.800    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                             128  thrpt    5        14.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                              128  thrpt    5        29.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                128  thrpt    5     43113.060 ±      465.611   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1180.016 ±       41.056  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5     43073.810 ±     1509.467    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1054.432 ±     1388.912  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     38496.278 ±    50780.477    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         1.815 ±       15.542  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5        66.095 ±      565.842    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5         8.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        15.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                               128  thrpt    5     51049.053 ±     3509.127   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5       745.987 ±      266.896  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5     23021.248 ±     9442.759    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       784.449 ±     1122.638  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     24291.467 ±    36624.123    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.053 ±        0.425  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         1.660 ±       13.448    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         6.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        33.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                    128  thrpt    5     39240.049 ±     2372.789   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1656.532 ±      119.497  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     66435.984 ±     2025.303    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1602.016 ±     1414.930  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     64157.828 ±    54428.150    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.457 ±        3.834  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        18.151 ±      152.225    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        12.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        22.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                      128  thrpt    5     36610.916 ±      197.616   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                       128  thrpt    5      2397.706 ±       47.605  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                  128  thrpt    5    103060.482 ±     1900.428    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      2266.630 ±     1405.100  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     97428.242 ±    60447.998    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.959 ±        4.738  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        41.236 ±      203.792    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                            128  thrpt    5        17.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                             128  thrpt    5        35.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                               128  thrpt    5     35052.838 ±     5850.547   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      1964.516 ±      132.029  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5     88381.739 ±    20210.559    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1976.621 ±       27.322  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     88886.030 ±    15311.066    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         2.486 ±       10.236  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5       115.430 ±      492.881    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5        15.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        54.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                              128  thrpt    5     41126.680 ±      955.656   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      2119.561 ±       67.998  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5     81105.151 ±     1403.424    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      2106.458 ±     1138.457  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5     80573.733 ±    42254.321    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         1.673 ±        6.915  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5        63.755 ±      263.011    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5        16.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        76.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5     40596.855 ±     1818.949   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5      2018.891 ±      110.327  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5     78252.767 ±     1129.596    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              128  thrpt    5      1973.758 ±       13.299  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         128  thrpt    5     76512.528 ±     3150.588    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          128  thrpt    5         1.526 ±        6.910  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5        58.707 ±      265.354    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5        15.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                             128  thrpt    5        45.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                   128  thrpt    5      9481.056 ±      132.613   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      1284.496 ±       40.930  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5    213202.395 ±     7325.706    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      1202.727 ±     1150.481  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    199624.484 ±   190914.599    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.931 ±        6.858  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5       154.364 ±     1137.896    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                         128  thrpt    5         9.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        36.000                     ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                           128  thrpt    5     21872.782 ±     2824.827   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1924.295 ±      182.720  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5    138586.131 ±    23634.249    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1901.827 ±       22.487  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    136961.760 ±    18344.575    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         3.565 ±       22.006  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       264.670 ±     1647.913    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                 128  thrpt    5        15.000                 counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                  128  thrpt    5       104.000                     ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                    128  thrpt    5     47037.187 ±     1817.539   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1341.102 ±       89.006  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     44877.906 ±     4171.988    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1272.163 ±       27.130  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     42569.282 ±     2376.248    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.773 ±        6.293  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        26.222 ±      213.617    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5        10.000                 counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        86.000                     ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                   128  thrpt    5     68259.105 ±      481.958   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       781.158 ±       15.206  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5     18009.866 ±      331.019    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       659.464 ±        4.412  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     15204.196 ±      122.245    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.022 ±        0.129  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.517 ±        2.981    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5         5.000                 counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        32.000                     ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                        128  thrpt    5     43881.955 ±     1544.301   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      2582.615 ±      405.528  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     92621.950 ±    14858.870    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      2541.701 ±     1155.113  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     91191.640 ±    42786.628    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.873 ±        5.813  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        31.416 ±      209.414    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        19.000                 counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        33.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                   128  thrpt    5     43221.843 ±     1918.824   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1875.118 ±       87.091  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5     68270.441 ±     2198.827    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1865.031 ±     1142.656  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     67930.705 ±    42233.034    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.449 ±        3.359  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        16.301 ±      121.916    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5        14.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        24.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                  128  thrpt    5     56264.857 ±     3000.517   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5      1759.078 ±       69.333  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     49207.196 ±     1027.150    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1601.371 ±     1405.288  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     44860.874 ±    40758.932    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.872 ±        4.499  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5        24.421 ±      126.245    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5        12.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        25.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5     56993.766 ±     3930.451   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5      1680.731 ±       98.028  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5     46414.343 ±     1273.657    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                  128  thrpt    5      1596.911 ±     1404.421  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm             128  thrpt    5     44077.505 ±    38165.319    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space              128  thrpt    5         0.824 ±        6.874  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm         128  thrpt    5        22.596 ±      188.446    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5        12.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                 128  thrpt    5        27.000                     ms
[info] ArrayOfBooleansBenchmark.readCirce                                                          128  thrpt    5    418302.363 ±     3046.457   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      2268.277 ±       46.498  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5      8533.177 ±      172.813    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2132.070 ±     1137.200  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      8022.215 ±     4337.095    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.250 ±        1.574  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.940 ±        5.915    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                128  thrpt    5        16.000                 counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                 128  thrpt    5        25.000                     ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                    128  thrpt    5   1907891.689 ±    44485.918   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                     128  thrpt    5       616.228 ±       32.087  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                128  thrpt    5       508.334 ±       27.834    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                            128  thrpt    5       531.479 ±     1144.049  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       438.873 ±      944.777    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.010 ±        0.070  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.008 ±        0.057    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                          128  thrpt    5         4.000                 counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                           128  thrpt    5        15.000                     ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                   128  thrpt    5    837068.355 ±    17987.149   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5       345.792 ±       47.687  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5       650.217 ±      100.519    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       265.142 ±     1398.017  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       501.316 ±     2643.302    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         2.000                 counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5        11.000                     ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                  128  thrpt    5   2141718.897 ±   127610.574   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       428.970 ±       63.789  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5       315.231 ±       46.085    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       369.623 ±     1322.401  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       271.328 ±      972.051    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         3.000                 counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5        12.000                     ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                       128  thrpt    5    156979.731 ±    26994.142   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      4143.371 ±      494.717  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     41557.914 ±     2360.310    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      4049.896 ±       76.125  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     40660.092 ±     6460.617    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.300 ±        2.313  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         3.094 ±       24.027    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        30.000                 counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                              128  thrpt    5        43.000                     ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                         128  thrpt    5    486586.571 ±    22607.653   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      1595.421 ±       97.708  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5      5159.936 ±      135.955    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1601.241 ±     1405.690  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      5178.494 ±     4528.876    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.924 ±        5.852  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         2.996 ±       18.896    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                               128  thrpt    5        12.000                 counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                128  thrpt    5        32.000                     ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                   128  thrpt    5   2701972.918 ±    92072.971   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                    128  thrpt    5      1288.832 ±       56.515  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                               128  thrpt    5       750.731 ±       34.805    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                           128  thrpt    5      1197.868 ±     1144.557  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       698.459 ±      676.039    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                       128  thrpt    5         1.034 ±        8.449  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.597 ±        4.876    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                         128  thrpt    5         9.000                 counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                          128  thrpt    5        31.000                     ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                  128  thrpt    5   1181674.317 ±    10642.154   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5       560.461 ±       26.100  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5       746.403 ±       40.388    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       531.967 ±     1145.102  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       709.062 ±     1526.317    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.012 ±        0.072  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.017 ±        0.096    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         4.000                 counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5        17.000                     ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                 128  thrpt    5   3014466.989 ±   167744.457   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1438.636 ±      105.673  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       751.078 ±       27.719    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1472.691 ±     1145.995  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       768.571 ±      586.494    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.801 ±        5.355  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.415 ±        2.777    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5        11.000                 counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5        30.000                     ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5   3232540.351 ±    14276.931   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5         0.186 ±        1.431  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5         0.090 ±        0.696    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                 counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                      128  thrpt    5   1030045.167 ±    15924.585   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      1103.546 ±       32.697  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5      1686.059 ±       45.180    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1059.339 ±     1395.227  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1618.993 ±     2137.571    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.939 ±        6.834  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1.437 ±       10.461    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         8.000                 counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                             128  thrpt    5        35.000                     ms
[info] ArrayOfBytesBenchmark.readCirce                                                             128  thrpt    5    217449.137 ±     5835.800   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      2692.762 ±       82.256  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     19488.554 ±      362.289    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      2549.284 ±     1182.078  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     18462.530 ±     8949.485    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.071 ±        0.407  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.508 ±        2.912    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                   128  thrpt    5        19.000                 counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                    128  thrpt    5        26.000                     ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                      128  thrpt    5    424717.480 ±    21906.444   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       295.071 ±       34.765  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      1093.448 ±      115.046    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       263.919 ±     1391.567  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       976.383 ±     5148.613    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.002 ±        0.018  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.008 ±        0.067    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         2.000                 counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         9.000                     ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                     128  thrpt    5   1292141.169 ±    81371.433   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       253.912 ±       22.572  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5       309.276 ±       27.921    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       204.641 ±     1079.013  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       250.959 ±     1323.272    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         2.000                 counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         9.000                     ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                          128  thrpt    5    122334.497 ±     2517.345   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      4006.741 ±      151.944  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     51540.747 ±     1217.978    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      3781.842 ±     1446.858  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     48639.723 ±    18181.027    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.029 ±        0.091  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.376 ±        1.182    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        28.000                 counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        38.000                     ms
[info] ArrayOfBytesBenchmark.writeCirce                                                            128  thrpt    5    356929.909 ±    20208.179   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1942.354 ±       85.399  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5      8563.080 ±      145.036    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1863.753 ±     1149.800  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      8224.605 ±     5254.139    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.889 ±        7.302  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         4.015 ±       33.011    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        14.000                 counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        26.000                     ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                     128  thrpt    5   2305030.244 ±   107054.291   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       641.646 ±       22.261  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       438.115 ±       12.991    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       662.842 ±        3.850  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       452.622 ±       23.044    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.012 ±        0.052  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.008 ±        0.035    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         5.000                 counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         9.000                     ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                    128  thrpt    5   3504191.368 ±   157627.753   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       971.394 ±       30.291  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       436.293 ±       15.502    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       937.306 ±     1410.288  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       421.974 ±      647.432    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.018 ±        0.098  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.008 ±        0.044    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         7.000                 counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        26.000                     ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   3653891.755 ±    22973.377   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5         3.984 ±       34.300  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         1.714 ±       14.754    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                 counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                         128  thrpt    5     60139.013 ±     3291.199   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      2128.149 ±       99.818  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     55693.885 ±     1094.936    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1990.905 ±       11.738  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     52109.155 ±     2933.647    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.987 ±        6.324  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        25.988 ±      165.983    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        15.000                 counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        30.000                     ms
[info] ArrayOfCharsBenchmark.readCirce                                                             128  thrpt    5    313054.145 ±     8450.476   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      3377.864 ±       98.609  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     16980.335 ±      470.864    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      3353.781 ±       81.534  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     16859.709 ±      647.396    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.042 ±        0.179  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.209 ±        0.896    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        25.000                 counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        32.000                     ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                      128  thrpt    5    689326.084 ±     6200.251   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1898.748 ±       41.095  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      4334.553 ±      130.030    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1872.583 ±     1150.849  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      4275.495 ±     2644.469    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.339 ±        2.877  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.775 ±        6.569    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5        14.000                 counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        21.000                     ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                     128  thrpt    5   2893404.605 ±   254660.840   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1033.943 ±       76.789  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5       562.407 ±       34.886    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1071.810 ±     1412.850  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       585.294 ±      796.707    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.638 ±        5.422  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.354 ±        3.010    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         8.000                 counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5        30.000                     ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                          128  thrpt    5    130945.593 ±     7373.616   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      4245.997 ±      279.701  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     51021.235 ±     1214.357    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      4160.902 ±     1097.255  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     50032.537 ±    15241.591    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.588 ±        4.754  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         7.156 ±       57.868    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        31.000                 counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        49.000                     ms
[info] ArrayOfCharsBenchmark.writeCirce                                                            128  thrpt    5    327959.752 ±     5422.617   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      2595.968 ±       99.844  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     12455.669 ±      429.594    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2537.330 ±     1154.971  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     12177.048 ±     5630.951    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.414 ±        3.004  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1.997 ±       14.498    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        19.000                 counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        31.000                     ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                     128  thrpt    5   2042405.266 ±   107134.970   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       723.784 ±       55.894  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       557.720 ±       43.051    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       665.486 ±        2.738  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       512.842 ±       28.944    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.012 ±        0.072  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.010 ±        0.055    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         5.000                 counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        19.000                     ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                    128  thrpt    5   2799952.288 ±   221287.634   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       981.045 ±       68.076  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       551.362 ±       23.971    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       936.836 ±     1409.735  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       526.680 ±      793.799    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.008 ±        0.041  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.004 ±        0.023    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         7.000                 counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        25.000                     ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   2949048.276 ±    20670.112   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5         0.219 ±        1.885  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         0.117 ±        1.008    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                 counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                         128  thrpt    5    775242.504 ±     8266.025   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      4735.123 ±       40.913  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5      9611.099 ±      110.009    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      4469.709 ±     1408.852  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      9073.197 ±     2907.092    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.050 ±        0.044  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.101 ±        0.090    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        33.000                 counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        49.000                     ms
[info] ArrayOfDoublesBenchmark.readCirce                                                           128  thrpt    5     28630.803 ±     1645.837   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1733.638 ±      239.111  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5     95275.135 ±     8131.976    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1590.406 ±     1398.585  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     87548.328 ±    79501.523    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         1.125 ±        7.494  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        62.100 ±      416.219    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                 128  thrpt    5        12.000                 counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                  128  thrpt    5        30.000                     ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                     128  thrpt    5    100423.436 ±     8277.730   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                      128  thrpt    5       937.523 ±      288.858  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                 128  thrpt    5     14712.568 ±     5567.541    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                             128  thrpt    5       917.014 ±     1382.460  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     14334.153 ±    21100.634    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                         128  thrpt    5         1.447 ±       12.380  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        22.124 ±      189.214    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                           128  thrpt    5         7.000                 counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                            128  thrpt    5        32.000                     ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                    128  thrpt    5     78398.250 ±    11640.455   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1336.309 ±      500.051  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     26821.221 ±     9146.473    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1327.766 ±       11.744  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     26683.089 ±     3896.936    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         2.006 ±        7.212  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        40.557 ±      148.744    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5        10.000                 counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        41.000                     ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                   128  thrpt    5    143851.079 ±     9347.862   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       873.127 ±       64.944  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      9552.103 ±      224.655    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       883.775 ±     1337.222  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      9652.625 ±    14377.605    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.787 ±        4.685  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         8.475 ±       50.300    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5         7.000                 counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        54.000                     ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                        128  thrpt    5     49857.422 ±     1148.590   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      2101.880 ±       74.167  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     66340.751 ±     1199.814    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      2128.870 ±     1133.812  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     67190.226 ±    35606.851    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.351 ±        2.707  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        11.014 ±       84.966    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        16.000                 counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        27.000                     ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                          128  thrpt    5     43281.149 ±     4210.437   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5       807.629 ±      381.454  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5     29372.464 ±    14070.069    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5       797.026 ±     1145.329  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     29122.812 ±    44225.448    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.378 ±        1.910  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        13.748 ±       69.361    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                128  thrpt    5         6.000                 counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        34.000                     ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                   128  thrpt    5     44034.731 ±     2575.004   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5       550.185 ±      185.890  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5     19661.290 ±     6497.298    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       532.318 ±     1145.856  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     18948.402 ±    40802.277    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.358 ±        2.539  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        12.715 ±       90.040    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5         4.000                 counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        20.000                     ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                  128  thrpt    5     46452.484 ±     2403.542   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       504.537 ±      198.831  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     17113.244 ±     7743.620    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       532.203 ±     1145.608  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     18078.127 ±    38930.113    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.010 ±        0.053  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.339 ±        1.832    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         4.000                 counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        18.000                     ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5     49140.410 ±     5400.534   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5       549.976 ±      171.530  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5     17642.813 ±     6976.642    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                  128  thrpt    5       533.682 ±     1148.792  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm             128  thrpt    5     17271.165 ±    37207.047    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space              128  thrpt    5         0.431 ±        3.710  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm         128  thrpt    5        13.796 ±      118.786    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5         4.000                 counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                 128  thrpt    5        22.000                     ms
[info] ArrayOfDurationsBenchmark.readCirce                                                         128  thrpt    5     17344.265 ±     2073.659   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      1434.957 ±      606.029  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5    130588.642 ±    68220.646    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1322.215 ±     1806.094  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    120920.341 ±   176616.097    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.785 ±        6.000  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        72.323 ±      553.252    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                               128  thrpt    5        10.000                 counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                128  thrpt    5        63.000                     ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                  128  thrpt    5     15787.634 ±     2372.124   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1315.618 ±      729.896  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5    131659.590 ±    86453.822    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1369.438 ±     2064.656  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5    138045.923 ±   223745.685    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         6.200 ±       52.342  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5       609.653 ±     5138.653    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5        11.000                 counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5       159.000                     ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                 128  thrpt    5    153917.754 ±     2145.562   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       414.208 ±       18.522  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      4234.564 ±      187.935    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       499.662 ±     1104.430  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      5108.816 ±    11277.927    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5         4.000                 counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        16.000                     ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                      128  thrpt    5     15741.595 ±     2298.849   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      1533.863 ±      405.790  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5    153551.529 ±    48905.695    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1449.948 ±     1118.983  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5    144975.843 ±   109783.394    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         1.821 ±        9.005  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       181.419 ±      891.104    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        11.000                 counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        24.000                     ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                        128  thrpt    5     71306.246 ±     1660.880   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5      1653.478 ±       18.882  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5     36495.736 ±     1022.280    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1597.615 ±     1405.841  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     35273.140 ±    31278.316    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.908 ±        7.059  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        20.125 ±      156.649    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                              128  thrpt    5        12.000                 counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                               128  thrpt    5        30.000                     ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                 128  thrpt    5    107751.716 ±     6295.477   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1438.939 ±       86.256  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     21011.036 ±      493.495    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1465.307 ±     1147.751  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     21365.861 ±    15765.726    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.936 ±        6.208  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        13.552 ±       90.028    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5        11.000                 counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5        36.000                     ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                128  thrpt    5    272176.795 ±     8641.532   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       442.883 ±       29.374  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      2560.712 ±      229.281    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       369.655 ±     1322.447  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      2146.198 ±     7671.180    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.008 ±        0.066  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.045 ±        0.385    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         3.000                 counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        12.000                     ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    286026.326 ±     1567.833   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5         0.002 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                 counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                     128  thrpt    5     99190.226 ±     3909.153   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1687.363 ±       63.257  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     26768.694 ±      746.353    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1709.939 ±     1041.587  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     27162.426 ±    17347.670    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         3.597 ±       14.943  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        56.966 ±      237.285    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        14.000                 counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                            128  thrpt    5       142.000                     ms
[info] ArrayOfEnumsBenchmark.readCirce                                                             128  thrpt    5    133469.144 ±     6525.412   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1672.798 ±       84.104  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     19722.324 ±      529.371    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1589.484 ±     1397.176  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     18729.299 ±    16197.745    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.046 ±        0.036  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.540 ±        0.419    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        12.000                 counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        20.000                     ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                      128  thrpt    5    141006.139 ±    11459.502   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       845.709 ±       79.917  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      9438.134 ±      333.872    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       929.352 ±     1401.169  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     10373.971 ±    15646.237    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.017 ±        0.067  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.187 ±        0.764    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         7.000                 counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        14.000                     ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                     128  thrpt    5    219604.056 ±    18946.218   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       149.741 ±       35.332  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1073.537 ±      272.914    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       204.638 ±     1078.999  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1479.265 ±     7799.754    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.004 ±        0.036  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.030 ±        0.260    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         2.000                 counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         8.000                     ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                          128  thrpt    5     84958.867 ±     1056.798   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      2669.965 ±      104.691  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     49449.294 ±     1393.214    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2546.924 ±     1166.895  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     47165.029 ±    21390.309    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.141 ±        0.676  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         2.624 ±       12.536    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        19.000                 counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        29.000                     ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                            128  thrpt    5    232995.085 ±     5792.213   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1512.919 ±       47.424  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     10219.229 ±      398.486    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1598.202 ±     1403.231  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     10801.009 ±     9611.644    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         1.208 ±        5.219  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         8.171 ±       35.439    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        12.000                 counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        38.000                     ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                     128  thrpt    5    774544.884 ±     2211.765   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       609.683 ±       14.335  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      1238.754 ±       28.591    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       529.372 ±     1139.518  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1075.854 ±     2315.866    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.004 ±        0.036  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.008 ±        0.073    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         4.000                 counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         7.000                     ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                    128  thrpt    5    691395.399 ±    31846.622   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       546.730 ±       45.453  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1244.384 ±       78.776    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       534.961 ±     1151.545  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1216.136 ±     2618.699    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.004 ±        0.023  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.009 ±        0.052    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         4.000                 counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        14.000                     ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5    683478.066 ±      677.351   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5         0.026 ±        0.218  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         0.059 ±        0.502    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                 counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                         128  thrpt    5    614737.339 ±    28659.065   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1523.844 ±       90.081  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5      3901.364 ±      102.987    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1469.778 ±     1147.373  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      3761.556 ±     2884.465    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.419 ±        3.381  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1.086 ±        8.785    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        11.000                 counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        22.000                     ms
[info] ArrayOfFloatsBenchmark.readCirce                                                            128  thrpt    5     44232.702 ±     9797.038   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      2096.459 ±      238.340  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5     74761.497 ±    16419.229    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2114.454 ±     1140.698  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     75270.932 ±    37003.269    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         1.511 ±        6.872  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        54.940 ±      248.077    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                  128  thrpt    5        16.000                 counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                   128  thrpt    5        50.000                     ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                      128  thrpt    5    304499.103 ±     3381.465   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       323.725 ±       26.599  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5      1673.243 ±      152.796    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       367.453 ±     1313.308  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1902.422 ±     6798.680    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.001 ±        0.005  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.003 ±        0.025    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                            128  thrpt    5         3.000                 counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                             128  thrpt    5        12.000                     ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                     128  thrpt    5    127525.321 ±      888.706   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1189.832 ±       30.631  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     14679.483 ±      468.465    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1067.349 ±     1406.345  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     13174.329 ±    17425.472    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.312 ±        2.599  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         3.847 ±       32.023    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         8.000                 counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        15.000                     ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                    128  thrpt    5    550885.086 ±    11768.586   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       373.310 ±       26.543  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1066.463 ±       94.020    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       369.651 ±     1322.470  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1056.354 ±     3779.322    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         3.000                 counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        13.000                     ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                         128  thrpt    5     52245.108 ±     1680.719   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      2308.683 ±       49.019  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     69536.549 ±     1376.694    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2245.183 ±     1387.293  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     67660.475 ±    42944.995    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.012 ±        0.072  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.377 ±        2.156    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        17.000                 counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        24.000                     ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                           128  thrpt    5     95875.285 ±     2883.321   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5       768.236 ±       10.374  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5     12604.552 ±      257.195    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5       800.819 ±     1144.011  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     13165.887 ±    19286.443    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±        0.044  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.137 ±        0.722    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         6.000                 counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        28.000                     ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                     128  thrpt    5    123820.952 ±     5126.058   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                      128  thrpt    5       471.497 ±       27.969  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                 128  thrpt    5      5992.887 ±      381.021    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                             128  thrpt    5       529.906 ±     1140.665  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      6749.635 ±    14532.902    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.010 ±        0.057  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.135 ±        0.736    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                           128  thrpt    5         4.000                 counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                            128  thrpt    5        15.000                     ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                    128  thrpt    5    107701.170 ±     1398.506   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       411.113 ±       28.147  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5      6007.263 ±      458.911    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       367.219 ±     1312.379  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      5378.578 ±    19220.732    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.004 ±        0.036  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.061 ±        0.525    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         3.000                 counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        15.000                     ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                   128  thrpt    5    124027.643 ±     7333.044   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       475.195 ±       47.760  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      6031.802 ±      799.086    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       401.159 ±     1410.130  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      5131.666 ±    18042.253    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.650 ±        5.593  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         8.323 ±       71.660    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         3.000                 counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5         8.000                     ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    121634.320 ±     1509.029   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5       362.637 ±       31.736  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5      4691.475 ±      389.043    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                   128  thrpt    5       368.571 ±     1317.942  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm              128  thrpt    5      4766.085 ±    17043.032    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.008 ±        0.052  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         0.108 ±        0.676    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5         3.000                 counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                  128  thrpt    5        14.000                     ms
[info] ArrayOfInstantsBenchmark.readCirce                                                          128  thrpt    5     13978.575 ±     1486.403   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      2313.389 ±      611.824  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5    260826.699 ±    90393.066    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2171.642 ±     1358.505  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    244892.032 ±   164095.660    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         3.409 ±       20.798  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       380.402 ±     2313.730    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                128  thrpt    5        17.000                 counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                 128  thrpt    5       113.000                     ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                   128  thrpt    5     12052.424 ±      977.268   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1776.642 ±      455.942  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5    231908.662 ±    52946.166    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space                  128  thrpt    5         0.004 ±        0.031  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm             128  thrpt    5         0.477 ±        4.108    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.Metaspace                               128  thrpt    5         0.010 ±        0.087  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.Metaspace.norm                          128  thrpt    5         1.365 ±       11.755    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1720.240 ±     1398.667  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    224643.974 ±   183427.397    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         1.205 ±        9.121  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5       161.732 ±     1227.302    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5        15.000                 counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5        68.000                     ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                  128  thrpt    5    228831.509 ±     4687.647   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       623.199 ±       78.346  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      4286.441 ±      588.853    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       662.836 ±        2.348  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      4558.765 ±      100.279    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.002 ±        0.013  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.011 ±        0.093    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         5.000                 counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5        19.000                     ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                       128  thrpt    5      6691.655 ±      266.575   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      1715.070 ±      122.782  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5    403307.885 ±    16436.966    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1732.864 ±     1404.595  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    408002.186 ±   340111.266    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.542 ±        4.010  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5       128.389 ±      951.523    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        13.000                 counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                              128  thrpt    5        26.000                     ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                         128  thrpt    5     33422.896 ±     7165.946   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      2118.812 ±      677.791  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5    100319.789 ±    53719.711    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2054.388 ±     1317.011  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     97490.211 ±    80484.385    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         2.255 ±       15.472  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       101.692 ±      690.232    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                               128  thrpt    5        17.000                 counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                128  thrpt    5       240.000                     ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                  128  thrpt    5     41121.616 ±    11348.336   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5      2042.159 ±      541.487  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5     78455.714 ±    30178.076    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      2013.079 ±     1081.696  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     76989.659 ±    30865.656    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         5.940 ±       19.822  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5       235.437 ±      827.222    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5        16.000                 counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5        95.000                     ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                 128  thrpt    5    319557.534 ±     1997.909   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       725.464 ±       12.172  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      3572.716 ±       69.758    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       669.073 ±        1.857  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      3294.998 ±       23.164    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.012 ±        0.072  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.061 ±        0.352    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5         5.000                 counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5        18.000                     ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5    357170.310 ±      498.127   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                 counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                      128  thrpt    5     39078.421 ±     9981.122   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      2714.720 ±     1092.799  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5    109855.379 ±    60816.858    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      2776.225 ±     1807.341  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5    112581.186 ±    93786.495    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5        24.674 ±       81.049  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      1027.861 ±     3491.641    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                            128  thrpt    5        24.000                 counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                             128  thrpt    5       293.000                     ms
[info] ArrayOfIntsBenchmark.readCirce                                                              128  thrpt    5    181697.085 ±     1630.557   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      2553.675 ±       46.624  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     22117.041 ±      322.996    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2402.595 ±     1400.198  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     20812.925 ±    12255.786    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.354 ±        2.434  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         3.074 ±       21.167    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                    128  thrpt    5        18.000                 counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                     128  thrpt    5        30.000                     ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                        128  thrpt    5    568368.374 ±     3341.748   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                         128  thrpt    5       608.587 ±        7.007  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                    128  thrpt    5      1684.948 ±       23.535    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                128  thrpt    5       662.384 ±        2.168  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1833.892 ±       15.195    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.006 ±        0.048  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.016 ±        0.133    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                              128  thrpt    5         5.000                 counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                               128  thrpt    5        19.000                     ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                       128  thrpt    5    518863.367 ±     9316.377   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5       525.613 ±       29.344  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1594.009 ±      103.347    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       530.476 ±     1141.891  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1611.121 ±     3468.141    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.004 ±        0.036  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.013 ±        0.108    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5         4.000                 counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5        20.000                     ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                      128  thrpt    5    661948.233 ±     9452.590   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       439.939 ±       28.258  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      1045.921 ±       77.511    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       400.653 ±     1408.352  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       954.622 ±     3355.679    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.760 ±        6.475  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1.813 ±       15.441    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5         3.000                 counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         9.000                     ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                           128  thrpt    5    111613.389 ±     3470.970   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      3821.644 ±      189.785  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     53877.449 ±     1497.165    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      3769.157 ±     1420.555  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     53126.399 ±    19375.245    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.046 ±        0.067  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.645 ±        0.932    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        28.000                 counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        39.000                     ms
[info] ArrayOfIntsBenchmark.writeCirce                                                             128  thrpt    5    246802.047 ±     7402.647   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1759.469 ±       68.268  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     11219.537 ±      206.734    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1735.171 ±     1406.604  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     11057.242 ±     8804.967    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.873 ±        7.201  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         5.548 ±       45.775    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        13.000                 counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                    128  thrpt    5        27.000                     ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                       128  thrpt    5   1222392.238 ±   172691.219   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                        128  thrpt    5       685.662 ±       94.680  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                   128  thrpt    5       882.688 ±       19.176    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                               128  thrpt    5       664.403 ±        2.098  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       856.256 ±      126.488    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.002 ±        0.013  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.003 ±        0.018    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                             128  thrpt    5         5.000                 counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                              128  thrpt    5        17.000                     ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                      128  thrpt    5   1214956.052 ±    68229.818   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5       688.169 ±       42.837  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5       891.523 ±       83.782    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       662.565 ±        5.007  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       858.307 ±       45.935    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.008 ±        0.044  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.011 ±        0.057    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         5.000                 counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         8.000                     ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                     128  thrpt    5   1146507.245 ±     9321.028   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       645.425 ±        7.602  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5       885.889 ±       15.566    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       668.501 ±        0.926  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       917.561 ±        8.542    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.012 ±        0.072  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.017 ±        0.099    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         5.000                 counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5        18.000                     ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1160156.389 ±    25766.415   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5         0.787 ±        6.770  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5         1.078 ±        9.276    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                 counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                          128  thrpt    5     40170.107 ±     1357.920   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1926.880 ±       87.974  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     75484.206 ±     1149.418    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1982.791 ±        7.405  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     77680.363 ±     2414.688    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         1.577 ±        3.820  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        61.553 ±      149.019    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        15.000                 counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5        50.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                         128  thrpt    5    145066.037 ±    18615.264   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      1817.134 ±      245.021  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5     19712.763 ±      454.272    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1725.011 ±     1394.484  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     18656.179 ±    13631.577    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.008 ±        6.218  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        11.371 ±       71.665    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                               128  thrpt    5        13.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                128  thrpt    5        29.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                  128  thrpt    5    200437.133 ±    13233.023   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1201.900 ±       81.074  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5      9436.460 ±      309.587    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1188.989 ±     1139.959  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      9331.010 ±     8895.840    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.255 ±        1.983  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         2.009 ±       15.645    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5         9.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5        19.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                 128  thrpt    5    246474.475 ±    15318.689   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1327.755 ±       75.268  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      8477.077 ±      296.354    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1328.032 ±        6.134  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      8480.171 ±      522.630    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.756 ±        4.850  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         4.842 ±       31.244    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5        10.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        29.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                      128  thrpt    5    103599.535 ±     5651.434   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      3436.548 ±      113.170  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     52202.571 ±     1222.060    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      3225.163 ±     1116.781  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     48979.052 ±    16387.554    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.054 ±        0.244  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.815 ±        3.646    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        24.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        36.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                        128  thrpt    5    238779.106 ±     5377.043   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5      1549.921 ±       82.592  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5     10214.090 ±      373.160    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1597.549 ±     1399.778  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     10522.064 ±     9078.333    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.869 ±        5.531  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         5.737 ±       36.452    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                              128  thrpt    5        12.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                               128  thrpt    5        32.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                 128  thrpt    5    852683.656 ±    19671.312   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       674.747 ±       30.378  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5      1245.252 ±       29.779    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       662.152 ±        4.018  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      1222.077 ±       32.452    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.008 ±        0.044  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.015 ±        0.081    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         5.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5         9.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                128  thrpt    5    685332.093 ±    19452.460   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       543.264 ±       33.893  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      1247.526 ±       89.065    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       534.805 ±     1151.208  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      1230.219 ±     2648.393    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.004 ±        0.036  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.010 ±        0.082    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         4.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        15.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    679113.951 ±    83246.648   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5         2.232 ±       19.214  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5         5.118 ±       44.063    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                 counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                     128  thrpt    5    614624.649 ±    84245.693   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1517.677 ±      199.109  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5      3885.723 ±       61.568    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1471.465 ±     1142.596  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      3771.375 ±     2974.204    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.460 ±        3.540  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         1.153 ±        8.861    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        11.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        22.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                    128  thrpt    5     11260.094 ±      941.916   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                     128  thrpt    5      1489.895 ±      390.319  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                128  thrpt    5    208460.787 ±    68589.333    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            128  thrpt    5      1460.519 ±     1133.401  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5    204073.804 ±   155965.526    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        128  thrpt    5         1.340 ±       10.263  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5       191.120 ±     1471.233    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                          128  thrpt    5        11.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                           128  thrpt    5        39.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                             128  thrpt    5     12253.625 ±     1866.987   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                              128  thrpt    5      1511.352 ±      479.659  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5    194575.901 ±    83435.528    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space            128  thrpt    5         0.005 ±        0.043  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm       128  thrpt    5         0.671 ±        5.781    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.Metaspace                         128  thrpt    5         0.014 ±        0.119  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.Metaspace.norm                    128  thrpt    5         1.847 ±       15.907    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5      1466.462 ±     1132.353  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5    188030.731 ±   132091.755    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         1.098 ±        9.278  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5       146.326 ±     1237.627    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                   128  thrpt    5        13.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                    128  thrpt    5        77.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                            128  thrpt    5    341545.467 ±    21047.423   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                             128  thrpt    5      2288.900 ±      117.730  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5     10546.489 ±      249.439    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      2262.994 ±     1394.285  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     10428.939 ±     6461.451    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.850 ±        7.092  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         3.858 ±       32.205    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                  128  thrpt    5        17.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                   128  thrpt    5        26.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                 128  thrpt    5     10333.639 ±     1540.454   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                  128  thrpt    5      1828.765 ±      205.453  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                             128  thrpt    5    278596.802 ±    15788.678    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5      1863.703 ±     1145.427  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5    282838.550 ±   144205.431    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.200 ±        0.979  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        31.198 ±      155.993    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                       128  thrpt    5        14.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                        128  thrpt    5        23.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                   128  thrpt    5     26684.362 ±     3444.870   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                    128  thrpt    5      1457.969 ±      606.722  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                               128  thrpt    5     86300.742 ±    47415.189    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1396.058 ±     1211.473  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     82545.809 ±    75991.230    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         1.250 ±        6.288  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        74.833 ±      379.464    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                         128  thrpt    5        11.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                          128  thrpt    5        97.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                            128  thrpt    5     31379.521 ±     6244.599   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                             128  thrpt    5      1254.173 ±      293.246  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5     63172.618 ±    27386.433    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      1191.901 ±     1141.568  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     60194.261 ±    62275.690    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         1.370 ±        5.516  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5        68.714 ±      279.112    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                  128  thrpt    5         9.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                   128  thrpt    5        35.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                           128  thrpt    5    767468.208 ±   193315.042   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                            128  thrpt    5      1428.856 ±      379.477  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5      2929.147 ±       59.710    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1339.555 ±        8.961  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5      2757.111 ±      772.068    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.813 ±        6.863  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         1.882 ±       15.934    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                 128  thrpt    5        10.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                  128  thrpt    5        25.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                   128  thrpt    5    939195.025 ±     9131.213   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    128  thrpt    5         0.162 ±        1.394  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               128  thrpt    5         0.272 ±        2.339    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                         128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                128  thrpt    5     31515.705 ±     4384.505   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                 128  thrpt    5      1398.702 ±      523.419  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                            128  thrpt    5     70123.163 ±    37658.356    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5      1431.933 ±     1094.085  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     72008.439 ±    67873.705    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         1.950 ±       10.384  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5       100.430 ±      540.702    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                      128  thrpt    5        11.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                       128  thrpt    5        23.000                     ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                        128  thrpt    5     44234.242 ±     5855.448   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                         128  thrpt    5      2000.018 ±     1256.508  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                    128  thrpt    5     70960.807 ±    36445.042    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      2020.500 ±     1121.022  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     71749.066 ±    32843.753    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         4.178 ±       28.420  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       149.182 ±     1022.347    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                              128  thrpt    5        16.000                 counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                               128  thrpt    5        78.000                     ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                 128  thrpt    5     42499.893 ±     3922.154   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1477.064 ±      158.578  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     54688.129 ±     2076.089    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space                128  thrpt    5         0.004 ±        0.038  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm           128  thrpt    5         0.170 ±        1.460    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.Metaspace                             128  thrpt    5         0.012 ±        0.106  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.Metaspace.norm                        128  thrpt    5         0.473 ±        4.076    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1447.936 ±     1121.374  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     53570.459 ±    39717.275    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         1.674 ±       14.276  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        64.284 ±      548.607    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                       128  thrpt    5        13.000                 counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                        128  thrpt    5        67.000                     ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                128  thrpt    5    554358.955 ±    35619.019   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                 128  thrpt    5      1483.546 ±       80.128  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      4211.383 ±       54.704    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1471.965 ±     1156.109  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      4180.533 ±     3329.038    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.777 ±        6.556  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         2.213 ±       18.675    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                      128  thrpt    5        11.000                 counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                       128  thrpt    5        28.000                     ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                     128  thrpt    5     22057.298 ±     3925.538   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                      128  thrpt    5      2067.544 ±      223.713  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                 128  thrpt    5    147874.543 ±    41377.371    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1992.756 ±       18.373  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5    142415.589 ±    26669.159    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.907 ±        5.917  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        64.535 ±      411.427    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                           128  thrpt    5        15.000                 counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                            128  thrpt    5        30.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                       128  thrpt    5     73558.820 ±     3526.862   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                        128  thrpt    5      1940.559 ±      115.483  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                   128  thrpt    5     41513.906 ±      637.752    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1994.870 ±        9.671  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     42682.348 ±     2102.829    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.711 ±        3.093  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        15.335 ±       67.186    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                             128  thrpt    5        15.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                              128  thrpt    5        33.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                128  thrpt    5    206524.343 ±     9481.465   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1612.503 ±       93.511  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5     12287.146 ±      221.306    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1595.922 ±     1397.885  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     12149.027 ±    10350.575    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.214 ±        1.710  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         1.663 ±       13.311    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                      128  thrpt    5        12.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                       128  thrpt    5        20.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                               128  thrpt    5    857803.562 ±    42456.968   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                128  thrpt    5       950.725 ±       71.645  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      1744.163 ±      104.119    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       938.422 ±     1415.299  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      1721.920 ±     2599.099    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.004 ±        0.036  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.008 ±        0.066    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                     128  thrpt    5         7.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                      128  thrpt    5        29.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                       128  thrpt    5    913512.192 ±     4303.879   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                             128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                    128  thrpt    5     94393.564 ±     6477.380   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                     128  thrpt    5      1966.129 ±       85.536  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                128  thrpt    5     32783.615 ±      896.174    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1863.088 ±     1138.344  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     31084.106 ±    19439.775    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.971 ±        5.647  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        16.061 ±       93.526    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                          128  thrpt    5        14.000                 counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                           128  thrpt    5        29.000                     ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                        128  thrpt    5     18731.605 ±     3466.793   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                         128  thrpt    5      1751.421 ±      237.318  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                    128  thrpt    5    147537.449 ±    43046.820    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1727.195 ±     1403.024  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    145539.094 ±   125305.271    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         1.405 ±        5.755  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       119.154 ±      484.012    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                              128  thrpt    5        13.000                 counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                               128  thrpt    5        38.000                     ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                 128  thrpt    5     18621.295 ±     1820.167   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1585.551 ±      401.232  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5    134192.375 ±    44271.323    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space                128  thrpt    5         0.003 ±        0.030  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm           128  thrpt    5         0.295 ±        2.543    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Metaspace                             128  thrpt    5         0.010 ±        0.084  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Metaspace.norm                        128  thrpt    5         0.832 ±        7.167    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1467.526 ±     1194.274  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5    124197.241 ±   104697.765    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         1.880 ±       10.705  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5       159.273 ±      911.325    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                       128  thrpt    5        13.000                 counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                        128  thrpt    5       102.000                     ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                128  thrpt    5    790573.746 ±    45069.110   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                 128  thrpt    5      2121.326 ±       80.532  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      4222.678 ±       92.143    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      2007.490 ±       10.030  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      3996.563 ±      239.144    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.802 ±        6.771  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         1.583 ±       13.358    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                      128  thrpt    5        15.000                 counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                       128  thrpt    5        24.000                     ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                     128  thrpt    5     14351.156 ±     1743.236   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                      128  thrpt    5      2017.601 ±      134.648  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                 128  thrpt    5    221499.471 ±    41529.614    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1998.829 ±       26.654  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5    219364.383 ±    29520.881    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         1.777 ±       12.485  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       199.369 ±     1413.634    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                           128  thrpt    5        15.000                 counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                            128  thrpt    5        29.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                       128  thrpt    5     47481.104 ±     3518.309   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                        128  thrpt    5      1728.938 ±      301.237  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                   128  thrpt    5     57337.646 ±    12355.216    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1680.342 ±     1387.564  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     55839.711 ±    48761.050    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         1.566 ±        7.236  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        52.245 ±      242.061    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                             128  thrpt    5        13.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                              128  thrpt    5        99.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                128  thrpt    5     53692.162 ±     2711.333   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1453.048 ±       63.715  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5     42589.641 ±     1554.512    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1432.775 ±     1113.512  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     42026.021 ±    33513.081    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         2.814 ±       10.898  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5        82.333 ±      316.236    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                      128  thrpt    5        11.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                       128  thrpt    5        48.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                               128  thrpt    5   1028462.283 ±    56456.863   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                128  thrpt    5       962.763 ±       71.843  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      1473.188 ±       65.415    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       938.363 ±     1413.876  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      1432.965 ±     2120.181    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.008 ±        0.044  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.013 ±        0.067    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                     128  thrpt    5         7.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                      128  thrpt    5        28.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                       128  thrpt    5   1114379.869 ±     7643.062   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        128  thrpt    5         0.712 ±        6.125  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   128  thrpt    5         1.008 ±        8.677    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                             128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                    128  thrpt    5      4083.845 ±      166.624   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                     128  thrpt    5       560.685 ±       63.603  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                128  thrpt    5    216011.843 ±    16165.357    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5       637.422 ±        2.662  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5    245635.123 ±    10446.433    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.083 ±        0.548  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        31.998 ±      213.025    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                          128  thrpt    5         5.000                 counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                           128  thrpt    5        57.000                     ms
[info] ArrayOfLongsBenchmark.readCirce                                                             128  thrpt    5    143951.105 ±     8467.575   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      2236.417 ±      133.501  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     24450.497 ±      487.581    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      2141.525 ±     1167.700  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     23401.625 ±    12203.995    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.067 ±        0.351  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.735 ±        3.909    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        16.000                 counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        23.000                     ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                       128  thrpt    5    401097.436 ±     8262.306   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                        128  thrpt    5       824.171 ±       42.464  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                   128  thrpt    5      3233.932 ±      182.362    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                               128  thrpt    5       797.683 ±     1144.062  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      3132.270 ±     4533.614    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.005 ±        0.031  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.020 ±        0.120    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                             128  thrpt    5         6.000                 counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                              128  thrpt    5        22.000                     ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                      128  thrpt    5    282585.192 ±     4353.179   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       585.696 ±       29.588  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      3261.829 ±      205.159    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       530.258 ±     1141.421  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      2957.871 ±     6367.094    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.017 ±        0.088  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.093 ±        0.490    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         4.000                 counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        20.000                     ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                     128  thrpt    5    476662.301 ±    84950.363   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       620.073 ±      106.575  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      2047.641 ±      142.690    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       535.573 ±     1152.862  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1788.854 ±     3866.994    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.033 ±        0.244  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.108 ±        0.781    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         4.000                 counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5        15.000                     ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                          128  thrpt    5    101475.716 ±     3827.840   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      3540.871 ±      112.159  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     54918.422 ±     1610.890    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      3502.295 ±     1132.767  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     54308.712 ±    16776.915    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.042 ±        0.098  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.643 ±        1.493    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        26.000                 counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        36.000                     ms
[info] ArrayOfLongsBenchmark.writeCirce                                                            128  thrpt    5    218578.624 ±     4063.293   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1878.373 ±       46.741  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     13524.885 ±      119.600    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1866.401 ±     1152.516  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     13442.451 ±     8384.124    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.891 ±        5.281  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         6.453 ±       38.315    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        14.000                 counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        29.000                     ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                      128  thrpt    5    914214.418 ±   171428.380   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       736.594 ±      117.963  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5      1268.336 ±       44.337    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       665.095 ±        2.213  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1147.177 ±      227.653    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.006 ±        0.036  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.011 ±        0.060    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                            128  thrpt    5         5.000                 counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                             128  thrpt    5        19.000                     ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                     128  thrpt    5    605994.958 ±    57575.731   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       486.883 ±       54.131  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      1264.416 ±      115.371    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       399.273 ±     1403.501  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1045.743 ±     3679.026    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.004 ±        0.036  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.011 ±        0.097    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         3.000                 counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        13.000                     ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                    128  thrpt    5    763609.757 ±   144631.195   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       618.313 ±      158.573  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1273.453 ±       94.638    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       535.127 ±     1151.902  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1079.960 ±     2325.362    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.008 ±        0.072  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.017 ±        0.146    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         4.000                 counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        15.000                     ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5    835452.627 ±      510.665   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                         128  thrpt    5     36109.150 ±     1865.261   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1629.591 ±       43.916  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     71030.873 ±     2116.544    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1591.000 ±     1398.415  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     69521.871 ±    64807.074    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.207 ±        6.456  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        52.480 ±      279.342    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        12.000                 counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        48.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                   128  thrpt    5      8750.011 ±      938.261   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                    128  thrpt    5      1266.950 ±      169.874  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                               128  thrpt    5    228028.673 ±    42315.234    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1199.019 ±     1148.637  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    215343.616 ±   202517.164    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.998 ±        6.089  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5       178.546 ±     1073.088    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                         128  thrpt    5         9.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                          128  thrpt    5        39.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                            128  thrpt    5      9327.495 ±      112.753   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                             128  thrpt    5      1233.681 ±       13.363  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5    208028.829 ±     3716.162    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      1195.336 ±     1142.676  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5    201501.826 ±   191899.429    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.008 ±        0.044  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         1.398 ±        7.372    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                  128  thrpt    5         9.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                   128  thrpt    5        28.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                           128  thrpt    5    196933.754 ±     3884.796   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                            128  thrpt    5      1959.092 ±       25.669  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5     15657.114 ±      218.071    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1853.268 ±     1144.636  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5     14817.158 ±     9285.610    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         1.437 ±        5.960  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5        11.532 ±       47.877    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                 128  thrpt    5        14.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                  128  thrpt    5        36.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                128  thrpt    5      8805.779 ±      530.867   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                 128  thrpt    5      1402.427 ±      142.987  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                            128  thrpt    5    250616.445 ±    19439.042    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5      1452.335 ±     1151.669  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5    259391.239 ±   200357.832    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.008 ±        0.044  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         1.482 ±        7.819    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                      128  thrpt    5        11.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                       128  thrpt    5        16.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                  128  thrpt    5     22840.412 ±     3018.622   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                   128  thrpt    5      1404.339 ±      617.065  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                              128  thrpt    5     96996.770 ±    51969.757    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                          128  thrpt    5      1433.869 ±     1090.758  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     99373.076 ±    91445.304    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                      128  thrpt    5         2.094 ±       11.923  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5       148.867 ±      863.471    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                        128  thrpt    5        11.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                         128  thrpt    5        42.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                           128  thrpt    5     23893.542 ±     3641.660   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                            128  thrpt    5      1119.420 ±      667.021  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                       128  thrpt    5     74048.312 ±    51988.776    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1168.374 ±     1117.824  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5     77300.847 ±    77894.067    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         1.479 ±        4.769  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5        95.447 ±      305.376    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                 128  thrpt    5         9.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                  128  thrpt    5        65.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                          128  thrpt    5    538883.319 ±    17513.992   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                           128  thrpt    5      1257.533 ±       29.247  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                      128  thrpt    5      3672.184 ±       90.406    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                  128  thrpt    5      1206.900 ±     1156.876  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm             128  thrpt    5      3528.132 ±     3427.529    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space              128  thrpt    5         0.832 ±        7.004  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm         128  thrpt    5         2.423 ±       20.405    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                128  thrpt    5         9.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                 128  thrpt    5        30.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                  128  thrpt    5    609438.428 ±     8219.167   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                   128  thrpt    5         1.870 ±       16.099  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm              128  thrpt    5         4.819 ±       41.483    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                        128  thrpt    5           ≈ 0                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                               128  thrpt    5     25116.537 ±      907.366   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                128  thrpt    5      1303.850 ±      712.271  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                           128  thrpt    5     81712.734 ±    45520.031    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                       128  thrpt    5      1263.884 ±       85.135  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     79181.929 ±     6443.219    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                   128  thrpt    5         2.688 ±       12.906  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5       167.226 ±      801.901    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                     128  thrpt    5        10.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                      128  thrpt    5       114.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                       128  thrpt    5     13555.598 ±     2254.602   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      1427.253 ±      535.395  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5    165703.864 ±    56223.181    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1324.012 ±     1803.137  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    154606.101 ±   228576.469    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         1.099 ±        6.829  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5       126.863 ±      780.619    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                             128  thrpt    5        10.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                              128  thrpt    5        36.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                128  thrpt    5     11508.650 ±     1037.335   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1090.497 ±      274.883  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5    149259.583 ±    45036.437    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1057.381 ±     1395.844  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5    145121.766 ±   197229.488    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.188 ±        1.578  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5        25.457 ±      213.132    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5         8.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        12.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                               128  thrpt    5    363173.596 ±    10589.127   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1702.166 ±       47.055  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      7376.850 ±      182.671    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1708.099 ±     1382.029  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      7406.694 ±     6076.862    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         1.327 ±        6.854  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         5.749 ±       29.699    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5        13.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        44.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                    128  thrpt    5     13241.440 ±     1074.878   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1580.310 ±      288.119  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5    187885.354 ±    40529.556    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1470.799 ±     1152.951  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5    175094.339 ±   145196.623    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.775 ±        3.074  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        91.890 ±      359.799    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        11.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        28.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                      128  thrpt    5     35537.724 ±     3911.040   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                       128  thrpt    5      1509.138 ±      555.428  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                  128  thrpt    5     67003.045 ±    32137.516    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      1420.117 ±     1127.738  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     63190.573 ±    57878.549    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         2.000 ±        7.652  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        87.959 ±      335.867    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                            128  thrpt    5        11.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                             128  thrpt    5        75.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                               128  thrpt    5    132188.378 ±    10764.042   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      2492.800 ±      231.608  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5     29675.394 ±      723.953    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      2415.079 ±     1407.154  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     28777.522 ±    17397.101    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.352 ±        2.809  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         4.307 ±       34.432    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5        18.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        26.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                              128  thrpt    5    874549.424 ±    44961.280   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1237.749 ±       51.670  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      2227.230 ±       60.403    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1202.550 ±     1153.210  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      2163.102 ±     2065.928    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.004 ±        0.036  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0.007 ±        0.064    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5         9.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        13.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5    961423.320 ±     9695.187   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5         1.315 ±        6.995  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5         2.152 ±       11.446    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5           ≈ 0                 counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                   128  thrpt    5    125268.587 ±     3323.251   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      2824.218 ±      110.338  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5     35477.172 ±     1178.985    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      2679.137 ±       42.050  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     33655.667 ±     1007.504    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.071 ±        0.430  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.889 ±        5.407    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                         128  thrpt    5        20.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        31.000                     ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                           128  thrpt    5     18064.389 ±     2492.986   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1066.549 ±      450.982  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5     93255.562 ±    50297.783    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1040.270 ±     1374.205  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     91539.629 ±   130083.579    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         1.556 ±       11.363  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       140.411 ±     1036.414    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                 128  thrpt    5         8.000                 counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                  128  thrpt    5        68.000                     ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                    128  thrpt    5     17923.844 ±     4039.993   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5       913.115 ±      805.122  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     80323.332 ±    71886.334    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space                   128  thrpt    5         0.003 ±        0.030  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm              128  thrpt    5         0.335 ±        2.888    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.Metaspace                                128  thrpt    5         0.010 ±        0.085  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.Metaspace.norm                           128  thrpt    5         0.959 ±        8.254    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       926.145 ±     1414.319  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     81611.970 ±   126082.480    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         2.168 ±       15.596  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5       206.999 ±     1509.642    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5         9.000                 counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5       149.000                     ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                   128  thrpt    5    162223.054 ±     2020.026   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       416.468 ±       30.057  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      4040.313 ±      336.779    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       396.615 ±     1394.159  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      3855.440 ±    13552.486    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.006 ±        0.036  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.061 ±        0.349    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5         3.000                 counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        13.000                     ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                        128  thrpt    5     17165.417 ±     2333.146   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      1251.672 ±      375.545  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5    115113.071 ±    51051.218    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1326.456 ±        6.203  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    121743.021 ±    17354.086    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         1.331 ±       10.317  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       122.213 ±      948.322    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        10.000                 counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        46.000                     ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                          128  thrpt    5     66166.249 ±     1787.057   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5      1903.775 ±       59.993  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5     45284.501 ±     1231.734    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1864.108 ±     1150.571  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     44357.515 ±    27756.403    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.929 ±        5.243  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        22.162 ±      125.285    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                128  thrpt    5        14.000                 counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        28.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                   128  thrpt    5    101038.179 ±     2489.167   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1924.257 ±       69.311  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5     29971.870 ±      761.201    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1862.299 ±     1148.642  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     29017.466 ±    18134.827    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.938 ±        5.808  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        14.727 ±       91.482    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5        14.000                 counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        31.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                  128  thrpt    5    352744.969 ±     6438.622   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       694.169 ±       24.096  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      3096.787 ±       73.927    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       669.419 ±        1.076  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      2986.444 ±       49.798    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.014 ±        0.076  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.063 ±        0.339    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         5.000                 counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        19.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5    381201.613 ±     9291.033   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5         2.037 ±       17.539  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5         8.457 ±       72.811    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5           ≈ 0                 counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                       128  thrpt    5     95868.083 ±     2180.248   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                        128  thrpt    5      1984.527 ±       55.184  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     32577.156 ±      565.054    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1860.866 ±     1142.041  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     30541.115 ±    18598.686    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.977 ±        7.305  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        16.090 ±      120.403    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                             128  thrpt    5        14.000                 counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                              128  thrpt    5        34.000                     ms
[info] ArrayOfShortsBenchmark.readCirce                                                            128  thrpt    5    209079.381 ±     7019.879   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      2687.099 ±      122.872  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5     20226.731 ±      541.391    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2665.431 ±        8.351  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     20064.904 ±      629.149    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.790 ±        5.542  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         5.925 ±       41.454    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                  128  thrpt    5        20.000                 counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                   128  thrpt    5        43.000                     ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                      128  thrpt    5    835170.225 ±    11294.357   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       475.810 ±       26.253  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5       896.634 ±       55.147    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       530.167 ±     1141.225  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1000.069 ±     2152.753    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.010 ±        0.056  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.020 ±        0.106    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                            128  thrpt    5         4.000                 counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                             128  thrpt    5        16.000                     ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                     128  thrpt    5    414970.634 ±     3902.844   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5       355.371 ±       30.831  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      1347.865 ±      122.675    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       264.981 ±     1397.171  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1006.162 ±     5305.209    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.004 ±        0.036  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.016 ±        0.136    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         2.000                 counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        10.000                     ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                    128  thrpt    5   1091900.345 ±    18780.565   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       388.296 ±       36.391  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       559.696 ±       57.871    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       369.727 ±     1322.845  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       533.993 ±     1909.134    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.003 ±        0.022  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.004 ±        0.032    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         3.000                 counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        12.000                     ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                         128  thrpt    5    122515.039 ±     5000.424   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      3955.547 ±      193.964  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     50815.127 ±     2698.073    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3910.686 ±     1187.496  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     50255.373 ±    16193.925    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.244 ±        1.831  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         3.181 ±       23.962    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        29.000                 counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        42.000                     ms
[info] ArrayOfShortsBenchmark.writeCirce                                                           128  thrpt    5    313305.884 ±    17590.693   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1842.995 ±       87.250  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5      9257.665 ±      299.361    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1733.610 ±     1404.964  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      8721.476 ±     7333.083    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.885 ±        5.426  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         4.522 ±       27.960    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                 128  thrpt    5        13.000                 counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        29.000                     ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                     128  thrpt    5   2008950.338 ±   119932.132   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                      128  thrpt    5       707.305 ±       72.274  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                 128  thrpt    5       554.074 ±       34.315    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                             128  thrpt    5       797.170 ±     1146.070  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       624.255 ±      891.058    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.015 ±        0.082  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.011 ±        0.064    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                           128  thrpt    5         6.000                 counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                            128  thrpt    5        24.000                     ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                    128  thrpt    5   1912197.425 ±   145026.402   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       671.906 ±       52.739  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5       552.957 ±        9.854    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       662.896 ±        3.546  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       545.714 ±       41.941    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.004 ±        0.036  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.003 ±        0.029    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         5.000                 counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5         8.000                     ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                   128  thrpt    5   2272945.132 ±    52111.316   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       793.745 ±       14.332  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       549.626 ±       11.857    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       668.737 ±        1.069  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       463.069 ±       10.157    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.004 ±        0.036  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.003 ±        0.025    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         5.000                 counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        20.000                     ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   2427375.548 ±     7727.427   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                 counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                        128  thrpt    5     47375.475 ±     1861.130   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1866.010 ±       69.864  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     61989.628 ±     2378.856    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1852.255 ±     1140.845  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     61550.639 ±    38347.760    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         1.371 ±        5.392  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        45.478 ±      179.424    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        14.000                 counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        52.000                     ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                             128  thrpt    5     17701.673 ±     3399.474   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      2366.060 ±      853.704  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5    210927.643 ±    93615.230    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      2369.457 ±     1042.860  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    211264.457 ±   107066.710    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         7.476 ±       24.072  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5       669.313 ±     2149.955    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        19.000                 counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                    128  thrpt    5       188.000                     ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                      128  thrpt    5    108282.210 ±     9318.672   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1199.175 ±      129.634  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     17427.512 ±      534.153    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1198.062 ±     1149.340  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     17349.301 ±    15821.104    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.438 ±        3.683  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         6.419 ±       53.992    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         9.000                 counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        20.000                     ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                     128  thrpt    5    270206.773 ±     5818.224   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       909.758 ±       29.857  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      5299.013 ±      238.295    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       801.641 ±     1150.139  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      4676.055 ±     6831.734    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.004 ±        0.036  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.024 ±        0.211    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         6.000                 counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5        24.000                     ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                          128  thrpt    5     15168.564 ±     1794.639   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      2018.265 ±      372.102  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5    209605.120 ±    52251.265    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1925.438 ±       67.614  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    199871.243 ±    21042.356    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.421 ±        2.564  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        42.459 ±      254.468    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        15.000                 counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        23.000                     ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                            128  thrpt    5     43628.146 ±     1188.980   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      3420.037 ±      192.704  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5    123364.170 ±     3700.467    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      3324.120 ±       25.939  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    119914.656 ±     3744.878    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         1.258 ±        8.841  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        45.562 ±      320.344    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        25.000                 counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        51.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                     128  thrpt    5    145586.914 ±     7127.285   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      2001.284 ±      117.350  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     21632.259 ±      310.735    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1865.552 ±     1162.245  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     20146.677 ±    12087.732    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.017 ±        0.036  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.180 ±        0.388    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5        14.000                 counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        20.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                    128  thrpt    5    251744.365 ±     7005.712   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       830.455 ±       27.891  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      5191.455 ±      236.439    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       803.723 ±     1152.107  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      5023.578 ±     7188.653    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.008 ±        0.052  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.052 ±        0.326    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         6.000                 counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        21.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5    278677.190 ±     1404.835   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         0.002 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                 counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                         128  thrpt    5     61323.296 ±     1950.750   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      4007.330 ±      168.615  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    102841.130 ±     3364.282    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3897.729 ±     1123.798  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    100044.824 ±    29691.648    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.037 ±        0.105  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.959 ±        2.651    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        29.000                 counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        41.000                     ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                        128  thrpt    5     38627.938 ±     6852.200   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                         128  thrpt    5      1759.282 ±      608.276  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                    128  thrpt    5     72055.529 ±    39989.956    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1712.562 ±     1391.062  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     70155.846 ±    63721.806    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         1.425 ±        8.208  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        61.362 ±      363.328    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                              128  thrpt    5        13.000                 counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                               128  thrpt    5        35.000                     ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                 128  thrpt    5     40570.168 ±     1128.939   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1276.424 ±       40.986  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     49512.113 ±      841.741    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1317.763 ±        5.981  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     51117.598 ±     1370.535    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         1.452 ±        6.205  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        56.320 ±      240.520    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                       128  thrpt    5        10.000                 counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                        128  thrpt    5        37.000                     ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                128  thrpt    5    665437.990 ±    19762.502   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                 128  thrpt    5      1782.596 ±       58.285  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      4216.052 ±      149.502    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1735.945 ±     1404.383  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      4108.272 ±     3376.524    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.856 ±        6.857  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         2.021 ±       16.189    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                      128  thrpt    5        13.000                 counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                       128  thrpt    5        29.000                     ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                     128  thrpt    5     34412.073 ±     1994.152   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                      128  thrpt    5      2099.683 ±      485.237  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     96037.586 ±    22399.596    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      2129.024 ±     1117.805  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     97355.817 ±    50185.502    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         1.185 ±        6.934  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        54.817 ±      323.163    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                           128  thrpt    5        16.000                 counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                            128  thrpt    5        30.000                     ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                       128  thrpt    5     98444.241 ±     3930.142   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                        128  thrpt    5      2192.934 ±      131.807  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                   128  thrpt    5     35053.413 ±     1178.393    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      2144.777 ±     1182.356  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     34275.843 ±    18484.788    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.054 ±        0.217  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.871 ±        3.519    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                             128  thrpt    5        16.000                 counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                              128  thrpt    5        23.000                     ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                128  thrpt    5    243344.305 ±     5704.929   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1677.094 ±       51.097  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5     10846.416 ±      310.093    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1731.310 ±     1404.045  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     11198.135 ±     9104.135    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.928 ±        6.469  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         5.985 ±       41.623    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                      128  thrpt    5        13.000                 counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                       128  thrpt    5        35.000                     ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                               128  thrpt    5   1100141.072 ±    74005.804   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                128  thrpt    5       939.103 ±       51.954  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      1343.253 ±       51.521    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       937.225 ±     1408.288  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      1346.168 ±     2092.501    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.022 ±        0.095  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.032 ±        0.141    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                     128  thrpt    5         7.000                 counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                      128  thrpt    5        24.000                     ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                       128  thrpt    5   1133455.893 ±    15374.457   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        128  thrpt    5         0.969 ±        8.343  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   128  thrpt    5         1.352 ±       11.640    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             128  thrpt    5           ≈ 0                 counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                    128  thrpt    5    234597.922 ±     5490.040   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                     128  thrpt    5      2482.972 ±       76.330  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                128  thrpt    5     16656.515 ±      710.997    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      2411.930 ±     1426.314  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     16190.270 ±     9879.755    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.112 ±        0.840  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.751 ±        5.609    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                          128  thrpt    5        18.000                 counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                           128  thrpt    5        27.000                     ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                      128  thrpt    5     52719.470 ±     3645.030   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1437.295 ±      106.164  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     42902.461 ±      900.382    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1327.115 ±        7.921  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     39624.957 ±     2958.578    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.998 ±        6.344  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        30.427 ±      195.178    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5        10.000                 counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        30.000                     ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                     128  thrpt    5    803575.135 ±    27712.163   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1609.386 ±       71.769  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      3151.789 ±       54.117    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1473.419 ±     1156.295  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      2885.329 ±     2253.847    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.765 ±        4.916  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         1.496 ±        9.617    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5        11.000                 counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5        25.000                     ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                          128  thrpt    5     47379.700 ±     5427.974   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      2616.119 ±      181.621  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     86948.423 ±    10604.046    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2543.760 ±     1148.761  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     84513.489 ±    38238.354    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.790 ±        6.222  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        27.463 ±      217.444    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        19.000                 counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        33.000                     ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                     128  thrpt    5    414598.496 ±     7574.770   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1084.467 ±       49.309  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      4116.795 ±      176.028    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1067.207 ±     1404.549  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      4049.552 ±     5310.220    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.785 ±        6.510  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         2.968 ±       24.601    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         8.000                 counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        35.000                     ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                    128  thrpt    5   1625122.775 ±   107183.448   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       982.357 ±       74.320  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       951.331 ±       42.633    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       937.464 ±     1413.978  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       905.139 ±     1329.118    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.018 ±        0.070  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.018 ±        0.068    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         7.000                 counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        25.000                     ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   1746719.807 ±    56115.568   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5         0.169 ±        1.455  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         0.155 ±        1.331    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                 counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                         128  thrpt    5    376422.443 ±     7844.350   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      2381.366 ±      106.404  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5      9954.580 ±      319.261    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2281.278 ±     1421.684  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      9536.266 ±     5936.861    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.465 ±        3.739  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1.959 ±       15.754    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        17.000                 counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        27.000                     ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                           128  thrpt    5     85747.146 ±     1473.175   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1741.059 ±       79.616  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5     31951.834 ±     1130.510    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1721.433 ±     1395.952  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     31580.227 ±    25363.363    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         1.052 ±        3.020  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        19.279 ±       55.126    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                 128  thrpt    5        13.000                 counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                  128  thrpt    5        43.000                     ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                    128  thrpt    5     94008.418 ±     5023.862   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1217.378 ±       55.985  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     20381.234 ±      646.007    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1188.725 ±     1140.828  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     19923.051 ±    19379.430    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.258 ±        1.699  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         4.309 ±       28.240    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5         9.000                 counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        16.000                     ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                   128  thrpt    5    105458.382 ±     3333.316   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1305.837 ±       34.614  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5     19488.873 ±      272.998    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1327.472 ±        6.038  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     19812.614 ±      657.237    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.885 ±        5.817  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        13.230 ±       86.763    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5        10.000                 counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        33.000                     ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                        128  thrpt    5     62264.853 ±     2020.860   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      2442.681 ±       93.970  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     61740.403 ±     1198.017    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      2406.705 ±     1412.738  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     60827.781 ±    35550.478    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.396 ±        2.800  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        10.079 ±       71.253    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        18.000                 counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        29.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                          128  thrpt    5    167264.248 ±     4426.750   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5      1573.831 ±      100.523  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5     14805.609 ±      675.161    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1466.446 ±     1140.653  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     13787.946 ±    10478.634    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.948 ±        5.881  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         8.935 ±       55.600    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                128  thrpt    5        11.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        31.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                   128  thrpt    5    377662.590 ±     9438.251   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5       491.840 ±       77.460  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5      2049.564 ±      362.171    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       528.525 ±     1137.692  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      2205.921 ±     4748.724    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.017 ±        0.105  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.069 ±        0.434    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5         4.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5         6.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                  128  thrpt    5   1003398.189 ±    28859.638   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5      1283.472 ±       30.701  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      2012.881 ±       44.046    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1338.784 ±        6.160  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      2099.686 ±       64.839    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.856 ±        7.282  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         1.335 ±       11.356    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5        10.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        32.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5    973552.443 ±    17841.430   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5         0.995 ±        8.564  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5         1.616 ±       13.906    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5           ≈ 0                 counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                       128  thrpt    5    314582.810 ±    18953.848   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                        128  thrpt    5       966.231 ±       33.753  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   128  thrpt    5      4833.920 ±      283.260    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5       926.121 ±     1397.118  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      4636.914 ±     7044.781    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.845 ±        7.190  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         4.182 ±       35.551    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                             128  thrpt    5         7.000                 counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                              128  thrpt    5        30.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                       128  thrpt    5    142298.205 ±    11178.167   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      1812.445 ±      184.643  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5     20058.845 ±     3622.945    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1734.824 ±     1408.001  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     19239.990 ±    16639.016    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.349 ±        2.166  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         3.958 ±       24.805    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                             128  thrpt    5        13.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                              128  thrpt    5        21.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                128  thrpt    5    212622.948 ±    14976.972   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1214.501 ±       66.578  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5      8990.283 ±      409.747    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1190.855 ±     1138.645  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      8814.502 ±     8430.430    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.951 ±        7.816  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         7.003 ±       57.624    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5         9.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        33.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                               128  thrpt    5    462907.489 ±    16461.117   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5       928.761 ±       56.747  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      3157.381 ±      140.758    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       925.324 ±     1395.034  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      3144.553 ±     4724.022    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.012 ±        0.053  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.041 ±        0.179    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         7.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        29.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                    128  thrpt    5     99132.270 ±     2366.408   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      3148.503 ±      119.489  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     49982.194 ±     1582.416    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      3092.977 ±     1419.687  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     49092.797 ±    22201.584    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.075 ±        0.423  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         1.188 ±        6.690    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        23.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        36.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                      128  thrpt    5    237571.577 ±    24524.221   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                       128  thrpt    5      1505.417 ±      127.525  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                  128  thrpt    5      9972.821 ±      263.234    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      1468.730 ±     1143.306  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      9775.817 ±     8834.167    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.881 ±        7.231  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         5.840 ±       47.864    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                            128  thrpt    5        11.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                             128  thrpt    5        32.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                               128  thrpt    5    781080.319 ±    35823.655   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5       599.444 ±       34.226  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5      1207.855 ±       24.610    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       664.086 ±        3.336  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      1338.278 ±       59.060    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.012 ±        0.049  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.025 ±        0.098    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5         5.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        22.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                              128  thrpt    5   1375652.071 ±    61807.583   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1052.697 ±       48.566  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      1204.377 ±       74.720    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1071.789 ±     1412.756  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      1229.291 ±     1654.305    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.665 ±        5.588  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0.765 ±        6.435    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5         8.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        30.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5   1521535.242 ±    12226.220   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5         0.984 ±        6.385  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5         1.021 ±        6.623    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5           ≈ 0                 counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                   128  thrpt    5    627001.273 ±    24392.312   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      1532.809 ±       71.972  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5      3846.705 ±       85.359    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      1471.302 ±     1149.349  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      3692.111 ±     2870.682    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.391 ±        3.148  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.983 ±        7.911    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                         128  thrpt    5        11.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        21.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                    128  thrpt    5       916.065 ±      235.013   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                     128  thrpt    5      2056.195 ±      425.908  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                128  thrpt    5   3544445.236 ±  1240451.966    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.Compressed_Class_Space                   128  thrpt    5         0.004 ±        0.031  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.Compressed_Class_Space.norm              128  thrpt    5         6.531 ±       56.231    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.Metaspace                                128  thrpt    5         0.010 ±        0.087  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.Metaspace.norm                           128  thrpt    5        18.561 ±      159.820    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            128  thrpt    5      1987.299 ±     1781.855  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5   3429146.586 ±  3498822.224    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Old_Gen                               128  thrpt    5         0.535 ±        4.605  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Old_Gen.norm                          128  thrpt    5       982.921 ±     8463.245    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        128  thrpt    5         2.898 ±       12.017  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5      5098.128 ±    21230.493    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                          128  thrpt    5        17.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                           128  thrpt    5       116.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                             128  thrpt    5       922.878 ±       66.087   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                              128  thrpt    5      1984.897 ±       83.256  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5   3384643.111 ±   196884.895    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5      1999.675 ±       27.618  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5   3410165.005 ±   248816.546    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.545 ±        2.812  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5       928.172 ±     4746.888    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                   128  thrpt    5        15.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                    128  thrpt    5        26.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                            128  thrpt    5     45128.228 ±      524.861   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                             128  thrpt    5       808.527 ±       24.530  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5     28195.151 ±      953.548    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       777.452 ±     1119.880  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     27123.480 ±    39286.290    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.024 ±        0.089  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.834 ±        3.099    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                  128  thrpt    5         6.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                   128  thrpt    5        29.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                 128  thrpt    5       898.934 ±       61.310   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                  128  thrpt    5      1986.657 ±       44.122  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                             128  thrpt    5   3477997.821 ±   253482.935    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5      1866.853 ±     1134.176  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5   3269363.710 ±  2026573.807    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.724 ±        2.337  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5      1258.421 ±     4032.781    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                       128  thrpt    5        14.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                        128  thrpt    5        28.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                   128  thrpt    5     16169.764 ±     1689.181   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                    128  thrpt    5      1395.051 ±      689.124  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                               128  thrpt    5    136153.174 ±    80320.726    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1423.798 ±     1167.876  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    138865.576 ±   121210.320    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         1.420 ±        6.594  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5       140.344 ±      655.445    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                         128  thrpt    5        11.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                          128  thrpt    5        85.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                            128  thrpt    5     18912.718 ±     3313.992   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                             128  thrpt    5      1210.842 ±      515.700  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5    101318.389 ±    60911.850    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      1174.327 ±     1124.068  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     98358.076 ±   101168.493    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         2.058 ±       11.967  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5       177.385 ±     1055.317    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                  128  thrpt    5         9.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                   128  thrpt    5        43.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                           128  thrpt    5    334344.794 ±    43123.995   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                            128  thrpt    5      1215.451 ±      199.417  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5      5719.156 ±      273.951    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1202.770 ±     1156.239  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5      5628.418 ±     4969.968    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         1.173 ±       10.007  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         5.387 ±       45.938    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                 128  thrpt    5         9.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                  128  thrpt    5        34.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                   128  thrpt    5    394333.169 ±    13234.523   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                         128  thrpt    5           ≈ 0                 counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                128  thrpt    5     17206.050 ±     4807.671   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                 128  thrpt    5      1583.615 ±     1036.102  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                            128  thrpt    5    146979.351 ±   144990.873    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5      1619.813 ±     1323.975  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5    149852.146 ±   149882.009    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         4.492 ±        6.777  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5       414.871 ±      640.424    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                      128  thrpt    5        13.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                       128  thrpt    5       156.000                     ms
[info] BitSetBenchmark.readJsoniterScala                                                           128  thrpt    5   1402781.782 ±    15571.403   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5        59.422 ±       18.865  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5        66.679 ±       21.899    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       102.315 ±      880.965  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       115.316 ±      992.903    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.308 ±        2.649  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.347 ±        2.985    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         1.000                 counts
[info] BitSetBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         4.000                     ms
[info] BitSetBenchmark.readPlayJson                                                                128  thrpt    5    122046.697 ±     2308.081   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      4345.141 ±      130.078  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     56028.290 ±     1800.150    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      4184.593 ±     1175.825  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     53969.280 ±    15965.410    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.021 ±        0.080  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.269 ±        1.039    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        31.000                 counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        46.000                     ms
[info] BitSetBenchmark.writeJacksonScala                                                           128  thrpt    5   2221859.782 ±    20079.202   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       617.505 ±       15.536  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5       437.365 ±        9.078    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       662.427 ±        2.908  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       469.186 ±        4.795    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.004 ±        0.036  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.003 ±        0.025    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         5.000                 counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         8.000                     ms
[info] BitSetBenchmark.writeJsoniterScala                                                          128  thrpt    5   1952362.397 ±    13056.061   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       545.027 ±       24.508  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       439.360 ±       21.397    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       533.472 ±     1148.340  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       430.344 ±      926.351    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.004 ±        0.036  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.003 ±        0.029    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4.000                 counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        16.000                     ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   1932145.158 ±   111143.287   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         0.184 ±        1.433  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.148 ±        1.154    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                 counts
[info] BitSetBenchmark.writePlayJson                                                               128  thrpt    5     57435.382 ±     2388.426   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1996.549 ±      115.019  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     54703.455 ±     1286.148    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1868.088 ±     1138.154  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     51138.214 ±    29982.711    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.387 ±        2.215  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        10.620 ±       60.700    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        14.000                 counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        25.000                     ms
[info] ExtractFieldsBenchmark.readCirce                                                            N/A  thrpt    5   1227923.745 ±    18694.768   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                             N/A  thrpt    5      3550.011 ±       77.200  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                        N/A  thrpt    5      4550.044 ±      123.432    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      3346.033 ±       93.830  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5      4288.665 ±      170.004    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.046 ±        0.222  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.059 ±        0.284    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                  N/A  thrpt    5        25.000                 counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                   N/A  thrpt    5        32.000                     ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                      N/A  thrpt    5   5352394.738 ±   203813.908   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                       N/A  thrpt    5       335.286 ±       38.286  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  N/A  thrpt    5        98.574 ±        9.770    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       367.592 ±     1313.895  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       107.849 ±      385.609    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.004 ±        0.036  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.001 ±        0.010    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                            N/A  thrpt    5         3.000                 counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                             N/A  thrpt    5        11.000                     ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                     N/A  thrpt    5   1096823.163 ±    75970.294   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                      N/A  thrpt    5      1231.306 ±       89.660  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 N/A  thrpt    5      1766.634 ±       51.165    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             N/A  thrpt    5      1200.414 ±     1153.097  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        N/A  thrpt    5      1721.455 ±     1643.036    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         N/A  thrpt    5         0.192 ±        1.561  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    N/A  thrpt    5         0.272 ±        2.216    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                           N/A  thrpt    5         9.000                 counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                            N/A  thrpt    5        16.000                     ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                    N/A  thrpt    5  10483945.834 ±   163189.043   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                     N/A  thrpt    5       502.174 ±       69.225  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                N/A  thrpt    5        75.392 ±       11.553    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       503.915 ±     1116.120  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5        75.722 ±      167.799    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0.008 ±        0.044  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0.001 ±        0.007    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                          N/A  thrpt    5         4.000                 counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                           N/A  thrpt    5        14.000                     ms
[info] ExtractFieldsBenchmark.readPlayJson                                                         N/A  thrpt    5    800678.370 ±    26068.637   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                          N/A  thrpt    5      2967.374 ±       60.318  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     N/A  thrpt    5      5832.850 ±      183.231    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5      2812.042 ±     1146.868  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5      5527.668 ±     2263.739    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.121 ±        0.906  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         0.236 ±        1.770    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                               N/A  thrpt    5        21.000                 counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                N/A  thrpt    5        31.000                     ms
[info] GeoJSONBenchmark.readCirce                                                                  N/A  thrpt    5      5522.911 ±      189.057   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      2455.927 ±       93.151  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5    699783.535 ±    19247.292    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      2414.128 ±     1395.615  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    687770.135 ±   394461.992    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.372 ±        1.023  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5       105.484 ±      285.721    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        18.000                 counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        28.000                     ms
[info] GeoJSONBenchmark.readJacksonScala                                                           N/A  thrpt    5      7889.633 ±      276.701   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5      3240.333 ±      139.705  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5    646294.544 ±    17682.303    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      3225.833 ±     1160.544  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5    643484.938 ±   234500.491    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.112 ±        0.745  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5        22.307 ±      147.348    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5        24.000                 counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5        38.000                     ms
[info] GeoJSONBenchmark.readJsoniterScala                                                          N/A  thrpt    5     56865.131 ±     3291.706   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       946.774 ±       71.461  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5     26200.964 ±     1493.506    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       936.669 ±     1411.562  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5     25947.678 ±    39419.269    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.012 ±        0.072  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.345 ±        1.968    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         7.000                 counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5        24.000                     ms
[info] GeoJSONBenchmark.writeCirce                                                                 N/A  thrpt    5      5433.811 ±      123.915   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                  N/A  thrpt    5       976.679 ±       27.143  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                             N/A  thrpt    5    282878.866 ±     9226.843    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      1055.903 ±     1393.494  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    306160.057 ±   407757.570    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.012 ±        0.072  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         3.615 ±       20.747    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                       N/A  thrpt    5         8.000                 counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                        N/A  thrpt    5        12.000                     ms
[info] GeoJSONBenchmark.writeJacksonScala                                                          N/A  thrpt    5      5368.134 ±      142.619   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                           N/A  thrpt    5       582.011 ±       24.814  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      N/A  thrpt    5    170630.731 ±     9753.094    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       530.007 ±     1140.885  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5    155732.767 ±   335236.641    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.004 ±        0.036  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         1.222 ±       10.526    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                N/A  thrpt    5         4.000                 counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                 N/A  thrpt    5        11.000                     ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                         N/A  thrpt    5      6799.479 ±      655.558   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                          N/A  thrpt    5       255.907 ±      256.216  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     N/A  thrpt    5     59443.849 ±    64442.199    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       204.633 ±     1078.972  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5     46589.959 ±   245655.681    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.011 ±        0.070  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         2.559 ±       15.873    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                               N/A  thrpt    5         2.000                 counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                N/A  thrpt    5         9.000                     ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                 N/A  thrpt    5      6823.059 ±      530.366   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  N/A  thrpt    5       190.474 ±      123.376  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             N/A  thrpt    5     43996.592 ±    30341.611    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                         N/A  thrpt    5       204.667 ±     1079.148  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                    N/A  thrpt    5     47625.156 ±   251200.095    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                     N/A  thrpt    5         0.002 ±        0.013  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                N/A  thrpt    5         0.356 ±        3.061    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       N/A  thrpt    5         2.000                 counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                        N/A  thrpt    5         9.000                     ms
[info] GoogleMapsAPIBenchmark.readCirce                                                            N/A  thrpt    5      9257.772 ±      741.901   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                             N/A  thrpt    5      1964.208 ±      123.740  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                        N/A  thrpt    5    333990.362 ±    29869.212    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      1993.789 ±       11.045  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5    339044.846 ±    27479.718    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         1.271 ±        7.680  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5       217.033 ±     1305.275    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                  N/A  thrpt    5        15.000                 counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                   N/A  thrpt    5        39.000                     ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                      N/A  thrpt    5     17846.721 ±     2193.292   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                       N/A  thrpt    5       490.018 ±      204.295  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  N/A  thrpt    5     43204.396 ±    17001.520    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       529.641 ±     1140.092  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5     46664.286 ±   100713.439    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.004 ±        0.036  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.366 ±        3.149    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                            N/A  thrpt    5         4.000                 counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                             N/A  thrpt    5        15.000                     ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                     N/A  thrpt    5     14575.105 ±      759.308   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                      N/A  thrpt    5       419.093 ±      152.131  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 N/A  thrpt    5     45303.796 ±    19106.833    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             N/A  thrpt    5       397.644 ±     1397.774  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        N/A  thrpt    5     42705.746 ±   150116.800    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         N/A  thrpt    5         0.012 ±        0.108  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    N/A  thrpt    5         1.341 ±       11.549    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                           N/A  thrpt    5         3.000                 counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                            N/A  thrpt    5         9.000                     ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                    N/A  thrpt    5     22865.374 ±     3451.989   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                     N/A  thrpt    5       460.876 ±      230.931  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                N/A  thrpt    5     31844.420 ±    20267.001    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       401.405 ±     1410.994  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5     28164.741 ±    99147.646    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0.690 ±        3.700  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5        48.514 ±      262.876    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                          N/A  thrpt    5         3.000                 counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                           N/A  thrpt    5         9.000                     ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                         N/A  thrpt    5      6398.931 ±      183.696   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                          N/A  thrpt    5      2520.778 ±       83.376  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                     N/A  thrpt    5    619935.837 ±     6741.198    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5      2407.709 ±     1405.844  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5    592345.910 ±   351858.976    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.631 ±        4.287  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5       155.980 ±     1062.765    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                               N/A  thrpt    5        18.000                 counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                N/A  thrpt    5        34.000                     ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                           N/A  thrpt    5     12051.009 ±      902.092   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                            N/A  thrpt    5      2280.226 ±      473.339  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                       N/A  thrpt    5    298052.575 ±    82157.340    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      2116.965 ±     1147.212  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5    276476.279 ±   148909.284    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.279 ±        1.429  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5        35.997 ±      182.810    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                 N/A  thrpt    5        16.000                 counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                  N/A  thrpt    5        26.000                     ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                     N/A  thrpt    5     70059.325 ±     3785.288   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                      N/A  thrpt    5       674.733 ±       38.180  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                 N/A  thrpt    5     15156.646 ±      517.587    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                             N/A  thrpt    5       662.809 ±        1.925  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                        N/A  thrpt    5     14890.848 ±      836.203    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                         N/A  thrpt    5         0.005 ±        0.040  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    N/A  thrpt    5         0.115 ±        0.889    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                           N/A  thrpt    5         5.000                 counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                            N/A  thrpt    5        21.000                     ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                    N/A  thrpt    5     45613.634 ±      915.623   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                     N/A  thrpt    5       673.644 ±       29.099  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                N/A  thrpt    5     23243.047 ±      817.350    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       663.554 ±        4.216  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5     22895.669 ±      571.544    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0.008 ±        0.044  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0.287 ±        1.516    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                          N/A  thrpt    5         5.000                 counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                           N/A  thrpt    5        12.000                     ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                   N/A  thrpt    5    121904.357 ±     4792.874   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                    N/A  thrpt    5       946.728 ±       61.524  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               N/A  thrpt    5     12222.477 ±      544.615    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           N/A  thrpt    5       936.632 ±     1410.927  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      N/A  thrpt    5     12073.309 ±    17937.568    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       N/A  thrpt    5         0.011 ±        0.059  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  N/A  thrpt    5         0.144 ±        0.767    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                         N/A  thrpt    5         7.000                 counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                          N/A  thrpt    5        28.000                     ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                           N/A  thrpt    5    129571.301 ±    37306.339   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            N/A  thrpt    5         1.266 ±        8.815  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       N/A  thrpt    5        14.469 ±      100.801    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 N/A  thrpt    5           ≈ 0                 counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                        N/A  thrpt    5      9167.487 ±      656.597   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                         N/A  thrpt    5      2392.570 ±      128.475  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                    N/A  thrpt    5    410805.320 ±    10921.042    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                N/A  thrpt    5      2411.246 ±     1414.577  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           N/A  thrpt    5    414363.078 ±   252873.638    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            N/A  thrpt    5         0.577 ±        3.646  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       N/A  thrpt    5       101.461 ±      646.557    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                              N/A  thrpt    5        18.000                 counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                               N/A  thrpt    5        31.000                     ms
[info] IntBenchmark.readCirce                                                                      N/A  thrpt    5  13782427.433 ±   556888.426   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                       N/A  thrpt    5      6115.133 ±      291.282  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                  N/A  thrpt    5       698.210 ±        8.292    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      5836.700 ±     1469.384  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       666.340 ±      159.056    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.050 ±        0.044  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.006 ±        0.005    B/op
[info] IntBenchmark.readCirce:·gc.count                                                            N/A  thrpt    5        43.000                 counts
[info] IntBenchmark.readCirce:·gc.time                                                             N/A  thrpt    5        56.000                     ms
[info] IntBenchmark.readDslJsonJava                                                                N/A  thrpt    5  37071320.520 ±   455261.074   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                 N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                            N/A  thrpt    5        ≈ 10⁻⁵                   B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                      N/A  thrpt    5           ≈ 0                 counts
[info] IntBenchmark.readJacksonScala                                                               N/A  thrpt    5  23289291.679 ± 10172804.949   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5         0.048 ±        0.268  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5         0.003 ±        0.017    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                     N/A  thrpt    5           ≈ 0                 counts
[info] IntBenchmark.readJsoniterScala                                                              N/A  thrpt    5  38726740.694 ± 20983337.076   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5         0.025 ±        0.217  MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5         0.001 ±        0.007    B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                    N/A  thrpt    5           ≈ 0                 counts
[info] IntBenchmark.readNaiveScala                                                                 N/A  thrpt    5  30772052.453 ±  4124698.560   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                  N/A  thrpt    5       805.718 ±       97.578  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                             N/A  thrpt    5        41.211 ±        0.984    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       670.182 ±        1.406  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        34.309 ±        4.686    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.004 ±        0.036  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5        ≈ 10⁻⁴                   B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                       N/A  thrpt    5         5.000                 counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                        N/A  thrpt    5        16.000                     ms
[info] IntBenchmark.readPlayJson                                                                   N/A  thrpt    5  26493905.300 ±   303470.216   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                    N/A  thrpt    5         0.133 ±        1.146  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                               N/A  thrpt    5         0.008 ±        0.068    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                         N/A  thrpt    5           ≈ 0                 counts
[info] IntBenchmark.writeCirce                                                                     N/A  thrpt    5  22245207.269 ±   920787.342   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                      N/A  thrpt    5      1745.776 ±       79.885  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5       123.504 ±        1.603    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1737.448 ±     1406.961  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5       122.789 ±       96.705    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.841 ±        6.889  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0.059 ±        0.487    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                           N/A  thrpt    5        13.000                 counts
[info] IntBenchmark.writeCirce:·gc.time                                                            N/A  thrpt    5        30.000                     ms
[info] IntBenchmark.writeDslJsonJava                                                               N/A  thrpt    5  61690118.738 ±  1510434.909   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                N/A  thrpt    5      1294.733 ±       50.477  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                           N/A  thrpt    5        33.031 ±        1.824    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1198.366 ±     1144.910  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5        30.592 ±       29.478    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         1.074 ±        8.737  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.027 ±        0.222    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                     N/A  thrpt    5         9.000                 counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                      N/A  thrpt    5        32.000                     ms
[info] IntBenchmark.writeJacksonScala                                                              N/A  thrpt    5  25459426.276 ±  6307726.325   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5       537.215 ±      170.967  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5        33.176 ±        3.381    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       532.221 ±     1145.648  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5        32.105 ±       69.250    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.004 ±        0.036  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5        ≈ 10⁻⁴                   B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                    N/A  thrpt    5         4.000                 counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                     N/A  thrpt    5         6.000                     ms
[info] IntBenchmark.writeJsoniterScala                                                             N/A  thrpt    5  51324309.374 ±  2257477.259   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5      1075.819 ±       90.700  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5        32.981 ±        1.455    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      1071.594 ±     1412.964  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5        32.774 ±       42.301    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.785 ±        6.740  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0.024 ±        0.206    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                   N/A  thrpt    5         8.000                 counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                    N/A  thrpt    5        29.000                     ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                     N/A  thrpt    5  65138435.110 ±  3825502.173   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 N/A  thrpt    5        ≈ 10⁻⁵                   B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           N/A  thrpt    5           ≈ 0                 counts
[info] IntBenchmark.writeNaiveScala                                                                N/A  thrpt    5  26825581.491 ±   412343.921   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                 N/A  thrpt    5      2107.345 ±       62.650  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       123.629 ±        2.591    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      2016.404 ±        6.514  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5       118.296 ±        2.183    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.598 ±        4.493  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0.035 ±        0.266    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                      N/A  thrpt    5        15.000                 counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                       N/A  thrpt    5        22.000                     ms
[info] IntBenchmark.writePlayJson                                                                  N/A  thrpt    5   3681766.499 ±   183642.024   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      1521.911 ±       69.351  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5       650.444 ±       26.055    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1462.512 ±     1147.245  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       626.216 ±      523.905    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.162 ±        0.725  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.069 ±        0.308    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                        N/A  thrpt    5        11.000                 counts
[info] IntBenchmark.writePlayJson:·gc.time                                                         N/A  thrpt    5        18.000                     ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                 128  thrpt    5    196804.730 ±      346.705   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      3744.650 ±       73.339  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5     29945.471 ±      593.597    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      3634.327 ±     1373.938  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     29064.180 ±    11035.718    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.029 ±        0.072  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.233 ±        0.573    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5        27.000                 counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        36.000                     ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                      128  thrpt    5     46126.326 ±     2524.951   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      2860.185 ±      159.861  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     97584.007 ±     1999.540    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      2817.597 ±     1133.730  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     96101.896 ±    36707.663    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.137 ±        0.795  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         4.753 ±       27.634    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        21.000                 counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        33.000                     ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                 128  thrpt    5    230549.958 ±    12270.048   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       842.828 ±       79.803  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5      5752.104 ±      322.174    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       796.843 ±     1140.174  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      5428.290 ±     7567.310    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.004 ±        0.036  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.028 ±        0.242    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         6.000                 counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5        11.000                     ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                128  thrpt    5    522490.953 ±    41288.656   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       961.378 ±      117.074  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      2895.429 ±      178.406    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       937.084 ±     1410.456  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      2812.621 ±     4097.909    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.649 ±        5.548  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         1.938 ±       16.551    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         7.000                 counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        27.000                     ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    562500.915 ±    43914.136   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5       397.347 ±       55.207  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5      1111.584 ±      101.213    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                128  thrpt    5       267.262 ±     1409.193  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm           128  thrpt    5       745.074 ±     3928.612    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space            128  thrpt    5         0.004 ±        0.036  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm       128  thrpt    5         0.012 ±        0.100    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5         2.000                 counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                               128  thrpt    5         7.000                     ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                     128  thrpt    5     88261.906 ±     3044.760   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1455.409 ±       55.157  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     25951.467 ±     1137.089    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1470.453 ±     1152.949  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     26212.981 ±    20358.149    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.421 ±        2.805  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         7.475 ±       49.872    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        11.000                 counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        23.000                     ms
[info] ListOfBooleansBenchmark.readCirce                                                           128  thrpt    5    415577.437 ±    43332.322   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      3038.639 ±      168.344  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5     11511.875 ±      925.834    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2934.428 ±     1401.106  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     11105.898 ±     4868.963    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.332 ±        2.212  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1.301 ±        8.778    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                 128  thrpt    5        22.000                 counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                  128  thrpt    5        33.000                     ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                    128  thrpt    5    857069.947 ±    34552.374   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1878.588 ±       92.428  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5      3449.337 ±       86.143    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1739.752 ±     1412.935  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      3197.002 ±     2646.010    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.133 ±        0.970  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.249 ±        1.816    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5        13.000                 counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        20.000                     ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                   128  thrpt    5   1668143.893 ±    41239.844   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      3382.058 ±       69.307  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      3190.933 ±       68.564    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      3365.867 ±       64.490  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      3175.699 ±       94.965    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.029 ±        0.091  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.028 ±        0.086    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5        25.000                 counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        34.000                     ms
[info] ListOfBooleansBenchmark.readPlayJson                                                        128  thrpt    5    189538.888 ±    10904.768   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      4933.122 ±      229.910  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     40962.066 ±      502.934    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      4872.192 ±     1088.923  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     40453.473 ±     8566.653    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.320 ±        2.259  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         2.699 ±       19.189    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        36.000                 counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        50.000                     ms
[info] ListOfBooleansBenchmark.writeCirce                                                          128  thrpt    5    451281.992 ±     8349.687   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5      1475.489 ±       42.309  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5      5145.643 ±      142.053    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1335.942 ±        8.728  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      4659.037 ±       92.400    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.858 ±        7.007  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         2.982 ±       24.368    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                128  thrpt    5        10.000                 counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        28.000                     ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                   128  thrpt    5   1008240.192 ±     3110.595   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5       477.698 ±       23.199  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5       745.683 ±       38.405    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       528.524 ±     1137.690  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       825.296 ±     1776.513    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.017 ±        0.088  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.026 ±        0.137    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5         4.000                 counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5         7.000                     ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                  128  thrpt    5   2760956.156 ±   134992.763   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5      1311.886 ±       52.993  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5       747.794 ±       26.715    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1205.592 ±     1155.168  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       688.092 ±      670.121    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.835 ±        5.456  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.475 ±        3.100    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         9.000                 counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        25.000                     ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5   2956285.125 ±    13059.857   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5         0.046 ±        0.390  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5         0.024 ±        0.208    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5           ≈ 0                 counts
[info] ListOfBooleansBenchmark.writePlayJson                                                       128  thrpt    5    675745.844 ±    41839.397   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                        128  thrpt    5       947.828 ±       49.811  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                   128  thrpt    5      2207.273 ±      133.692    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5       927.039 ±     1394.813  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      2163.783 ±     3317.149    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.887 ±        7.462  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         2.099 ±       17.665    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                             128  thrpt    5         7.000                 counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                              128  thrpt    5        33.000                     ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                      128  thrpt    5     79407.076 ±     4114.629   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                       128  thrpt    5      2313.537 ±      153.774  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                  128  thrpt    5     45851.462 ±     1507.728    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      2256.684 ±     1399.301  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     44774.586 ±    29170.642    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         1.297 ±        6.924  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        25.635 ±      136.947    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                            128  thrpt    5        17.000                 counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                             128  thrpt    5        39.000                     ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                               128  thrpt    5    103839.119 ±     6445.303   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                128  thrpt    5      1888.460 ±      133.512  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5     28617.006 ±      453.751    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1874.144 ±     1148.025  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     28383.972 ±    16958.854    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.275 ±        1.767  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         4.119 ±       26.353    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                     128  thrpt    5        14.000                 counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                      128  thrpt    5        23.000                     ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                              128  thrpt    5    164552.786 ±     5047.855   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                               128  thrpt    5      2592.735 ±       77.622  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5     24796.481 ±      860.028    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      2534.482 ±     1141.578  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5     24244.394 ±    11105.597    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.872 ±        4.053  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         8.307 ±       38.582    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                    128  thrpt    5        19.000                 counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                     128  thrpt    5        37.000                     ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                   128  thrpt    5     45348.866 ±     1693.439   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                    128  thrpt    5      2550.699 ±       75.955  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                               128  thrpt    5     88520.147 ±     2424.889    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      2547.130 ±     1159.115  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     88433.440 ±    41483.847    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.468 ±        3.455  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        16.496 ±      122.021    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                         128  thrpt    5        19.000                 counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                          128  thrpt    5        30.000                     ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                              128  thrpt    5    234638.792 ±    11886.890   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                               128  thrpt    5      1071.952 ±       45.530  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          128  thrpt    5      7190.477 ±      345.732    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1064.258 ±     1402.689  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      7150.497 ±     9556.387    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.154 ±        1.239  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         1.049 ±        8.448    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                    128  thrpt    5         8.000                 counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                     128  thrpt    5        15.000                     ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                             128  thrpt    5    577916.764 ±    30045.914   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                              128  thrpt    5       659.661 ±       41.388  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         128  thrpt    5      1796.335 ±       58.679    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     128  thrpt    5       666.196 ±        0.253  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5      1814.403 ±       94.904    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.021 ±        0.080  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0.057 ±        0.217    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                   128  thrpt    5         5.000                 counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                    128  thrpt    5        20.000                     ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                     128  thrpt    5    630483.773 ±    14356.520   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      128  thrpt    5         6.780 ±        3.134  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 128  thrpt    5        16.927 ±        7.975    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                           128  thrpt    5           ≈ 0                 counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                  128  thrpt    5     91165.908 ±     4174.703   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                   128  thrpt    5      1443.336 ±       72.631  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                              128  thrpt    5     24916.175 ±      662.693    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          128  thrpt    5      1467.446 ±     1150.167  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     25364.781 ±    20769.466    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.475 ±        3.106  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         8.286 ±       54.345    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                        128  thrpt    5        11.000                 counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                         128  thrpt    5        25.000                     ms
[info] MathBenchmark.sumDoubles                                                                    128  thrpt    5  10211388.278 ±   175535.655   ops/s
[info] MathBenchmark.sumDoubles:·gc.alloc.rate                                                     128  thrpt    5         1.522 ±       13.104  MB/sec
[info] MathBenchmark.sumDoubles:·gc.alloc.rate.norm                                                128  thrpt    5         0.236 ±        2.035    B/op
[info] MathBenchmark.sumDoubles:·gc.count                                                          128  thrpt    5           ≈ 0                 counts
[info] MathBenchmark.sumDoublesUnrolled16                                                          128  thrpt    5  16764301.056 ±  4184916.068   ops/s
[info] MathBenchmark.sumDoublesUnrolled16:·gc.alloc.rate                                           128  thrpt    5         0.658 ±        5.661  MB/sec
[info] MathBenchmark.sumDoublesUnrolled16:·gc.alloc.rate.norm                                      128  thrpt    5         0.060 ±        0.518    B/op
[info] MathBenchmark.sumDoublesUnrolled16:·gc.count                                                128  thrpt    5           ≈ 0                 counts
[info] MathBenchmark.sumDoublesUnrolled4                                                           128  thrpt    5  30783223.132 ±  1718515.785   ops/s
[info] MathBenchmark.sumDoublesUnrolled4:·gc.alloc.rate                                            128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] MathBenchmark.sumDoublesUnrolled4:·gc.alloc.rate.norm                                       128  thrpt    5        ≈ 10⁻⁵                   B/op
[info] MathBenchmark.sumDoublesUnrolled4:·gc.count                                                 128  thrpt    5           ≈ 0                 counts
[info] MathBenchmark.sumDoublesUnrolled8                                                           128  thrpt    5  32387398.753 ±    28592.809   ops/s
[info] MathBenchmark.sumDoublesUnrolled8:·gc.alloc.rate                                            128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] MathBenchmark.sumDoublesUnrolled8:·gc.alloc.rate.norm                                       128  thrpt    5        ≈ 10⁻⁵                   B/op
[info] MathBenchmark.sumDoublesUnrolled8:·gc.count                                                 128  thrpt    5           ≈ 0                 counts
[info] MathBenchmark.sumLongs                                                                      128  thrpt    5  10150626.736 ±   683055.979   ops/s
[info] MathBenchmark.sumLongs:·gc.alloc.rate                                                       128  thrpt    5         4.029 ±       34.537  MB/sec
[info] MathBenchmark.sumLongs:·gc.alloc.rate.norm                                                  128  thrpt    5         0.645 ±        5.527    B/op
[info] MathBenchmark.sumLongs:·gc.count                                                            128  thrpt    5           ≈ 0                 counts
[info] MathBenchmark.sumLongsUnrolled16                                                            128  thrpt    5  17205654.153 ±   183889.941   ops/s
[info] MathBenchmark.sumLongsUnrolled16:·gc.alloc.rate                                             128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] MathBenchmark.sumLongsUnrolled16:·gc.alloc.rate.norm                                        128  thrpt    5        ≈ 10⁻⁵                   B/op
[info] MathBenchmark.sumLongsUnrolled16:·gc.count                                                  128  thrpt    5           ≈ 0                 counts
[info] MathBenchmark.sumLongsUnrolled4                                                             128  thrpt    5  30796362.498 ±  2257115.654   ops/s
[info] MathBenchmark.sumLongsUnrolled4:·gc.alloc.rate                                              128  thrpt    5         3.434 ±       27.774  MB/sec
[info] MathBenchmark.sumLongsUnrolled4:·gc.alloc.rate.norm                                         128  thrpt    5         0.181 ±        1.470    B/op
[info] MathBenchmark.sumLongsUnrolled4:·gc.count                                                   128  thrpt    5           ≈ 0                 counts
[info] MathBenchmark.sumLongsUnrolled8                                                             128  thrpt    5  32574389.689 ±   234274.662   ops/s
[info] MathBenchmark.sumLongsUnrolled8:·gc.alloc.rate                                              128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] MathBenchmark.sumLongsUnrolled8:·gc.alloc.rate.norm                                         128  thrpt    5        ≈ 10⁻⁵                   B/op
[info] MathBenchmark.sumLongsUnrolled8:·gc.count                                                   128  thrpt    5           ≈ 0                 counts
[info] MissingReqFieldBenchmark.readCirce                                                          N/A  thrpt    5   8502355.438 ±   225136.081   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                           N/A  thrpt    5      7507.601 ±      195.851  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                      N/A  thrpt    5      1389.600 ±        9.361    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5      7195.307 ±     1507.042  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5      1331.711 ±      269.402    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.062 ±        0.160  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.012 ±        0.030    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                N/A  thrpt    5        53.000                 counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                 N/A  thrpt    5        67.000                     ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                    N/A  thrpt    5    977224.247 ±    52106.584   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                     N/A  thrpt    5       623.734 ±       40.320  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                N/A  thrpt    5      1004.543 ±       30.593    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       664.607 ±        2.097  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5      1070.555 ±       58.972    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0.015 ±        0.056  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0.024 ±        0.091    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                          N/A  thrpt    5         5.000                 counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                           N/A  thrpt    5        18.000                     ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                   N/A  thrpt    5    442865.246 ±    18165.752   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                    N/A  thrpt    5      1010.253 ±       44.591  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                               N/A  thrpt    5      3590.626 ±      268.216    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           N/A  thrpt    5      1063.467 ±     1401.993  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      N/A  thrpt    5      3786.925 ±     5074.440    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       N/A  thrpt    5         0.008 ±        0.044  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  N/A  thrpt    5         0.030 ±        0.157    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                         N/A  thrpt    5         8.000                 counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                          N/A  thrpt    5        20.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                  N/A  thrpt    5    765084.233 ±   130724.730   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                   N/A  thrpt    5       694.890 ±      105.503  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              N/A  thrpt    5      1429.502 ±       46.470    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          N/A  thrpt    5       670.480 ±        1.850  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     N/A  thrpt    5      1381.172 ±      233.850    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      N/A  thrpt    5         0.008 ±        0.072  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 N/A  thrpt    5         0.016 ±        0.141    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                        N/A  thrpt    5         5.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                         N/A  thrpt    5        17.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                              N/A  thrpt    5   5989658.058 ±  7974795.189   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                               N/A  thrpt    5      3546.694 ±     4432.752  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                          N/A  thrpt    5       937.227 ±       75.147    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                      N/A  thrpt    5      3496.485 ±     4303.609  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm                 N/A  thrpt    5       925.177 ±       90.854    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space                  N/A  thrpt    5         0.037 ±        0.088  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm             N/A  thrpt    5         0.010 ±        0.027    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                    N/A  thrpt    5        26.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                     N/A  thrpt    5        35.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                        N/A  thrpt    5  30285492.615 ±  1404997.229   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                         N/A  thrpt    5      2709.919 ±      160.686  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                    N/A  thrpt    5       140.821 ±        2.613    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space                N/A  thrpt    5      2683.315 ±       20.072  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm           N/A  thrpt    5       139.456 ±        5.597    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space            N/A  thrpt    5         0.731 ±        6.161  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm       N/A  thrpt    5         0.038 ±        0.318    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                              N/A  thrpt    5        20.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                               N/A  thrpt    5        29.000                     ms
[info] MissingReqFieldBenchmark.readPlayJson                                                       N/A  thrpt    5    402686.934 ±    12190.829   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                        N/A  thrpt    5      2865.767 ±       74.058  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                   N/A  thrpt    5     11200.332 ±      311.347    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               N/A  thrpt    5      2676.578 ±       30.472  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5     10461.302 ±      417.197    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.662 ±        5.039  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5         2.580 ±       19.644    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                             N/A  thrpt    5        20.000                 counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                              N/A  thrpt    5        34.000                     ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                    128  thrpt    5   1470404.971 ±    15807.946   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5        45.021 ±        1.124  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5        48.183 ±        1.569    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5           ≈ 0                 counts
[info] MutableBitSetBenchmark.readPlayJson                                                         128  thrpt    5    111529.370 ±     4731.543   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      3963.697 ±       72.396  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     55929.126 ±     1569.978    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3909.518 ±     1158.355  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     55187.728 ±    17668.568    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.046 ±        0.105  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.647 ±        1.467    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        29.000                 counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        44.000                     ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                    128  thrpt    5   2132201.235 ±    77921.813   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       590.437 ±       31.440  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5       435.829 ±       27.495    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       529.091 ±     1138.912  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       391.152 ±      842.161    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.011 ±        0.070  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.009 ±        0.052    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         4.000                 counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5         7.000                     ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                   128  thrpt    5   1982493.250 ±    28790.193   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       552.046 ±       33.282  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       438.247 ±       31.802    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       535.060 ±     1151.757  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       425.420 ±      915.752    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.008 ±        0.072  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.007 ±        0.057    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         4.000                 counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        15.000                     ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   2026792.063 ±    25994.670   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                 counts
[info] MutableBitSetBenchmark.writePlayJson                                                        128  thrpt    5     57409.551 ±     1741.753   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1995.172 ±       53.097  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     54694.192 ±      911.148    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1996.863 ±       26.546  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     54742.868 ±     1976.022    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.416 ±        2.051  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        11.360 ±       55.633    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        15.000                 counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        27.000                     ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                         128  thrpt    5    271445.252 ±     9905.156   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                          128  thrpt    5      1099.271 ±       20.434  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     128  thrpt    5      6373.867 ±      285.245    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 128  thrpt    5      1072.665 ±     1415.372  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            128  thrpt    5      6217.783 ±     8186.735    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             128  thrpt    5         0.789 ±        6.797  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        128  thrpt    5         4.550 ±       39.173    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                               128  thrpt    5         8.000                 counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                128  thrpt    5        29.000                     ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                              128  thrpt    5     53394.242 ±     2719.536   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                               128  thrpt    5      2136.518 ±      113.290  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                          128  thrpt    5     62967.612 ±     1166.440    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      128  thrpt    5      2003.463 ±       10.327  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5     59053.556 ±     2768.982    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.600 ±        4.075  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5        17.892 ±      122.007    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                    128  thrpt    5        15.000                 counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                     128  thrpt    5        28.000                     ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                         128  thrpt    5    157255.623 ±     1908.247   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                          128  thrpt    5      1582.834 ±       57.292  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                     128  thrpt    5     15840.173 ±      638.205    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                 128  thrpt    5      1602.506 ±     1401.848  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm            128  thrpt    5     16042.382 ±    14153.775    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space             128  thrpt    5         0.192 ±        1.127  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm        128  thrpt    5         1.914 ±       11.255    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                               128  thrpt    5        12.000                 counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                128  thrpt    5        20.000                     ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                        128  thrpt    5    526678.833 ±    28523.200   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                         128  thrpt    5       724.241 ±       48.464  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    128  thrpt    5      2164.091 ±       61.193    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                128  thrpt    5       669.393 ±        1.146  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           128  thrpt    5      2000.565 ±      110.553    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            128  thrpt    5         0.004 ±        0.036  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       128  thrpt    5         0.013 ±        0.110    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                              128  thrpt    5         5.000                 counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                               128  thrpt    5        18.000                     ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                128  thrpt    5    587456.422 ±    13413.151   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 128  thrpt    5         0.023 ±        0.193  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            128  thrpt    5         0.062 ±        0.523    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                      128  thrpt    5           ≈ 0                 counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                             128  thrpt    5     87743.725 ±      780.334   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                              128  thrpt    5      1619.627 ±       57.504  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                         128  thrpt    5     29047.424 ±     1184.432    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     128  thrpt    5      1470.881 ±     1154.701  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                128  thrpt    5     26386.103 ±    20909.008    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.429 ±        1.679  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         7.695 ±       30.126    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                   128  thrpt    5        11.000                 counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                    128  thrpt    5        23.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                               128  thrpt    5    104323.399 ±     2516.977   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                128  thrpt    5      1639.348 ±       24.425  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                           128  thrpt    5     24729.808 ±      620.906    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                       128  thrpt    5      1603.110 ±     1410.286  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     24188.814 ±    21409.333    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.921 ±        6.308  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5        13.936 ±       95.633    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                     128  thrpt    5        12.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                      128  thrpt    5        34.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                        128  thrpt    5    153057.559 ±     1168.791   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                         128  thrpt    5       738.058 ±       30.550  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                    128  thrpt    5      7588.265 ±      313.206    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                128  thrpt    5       660.977 ±        3.881  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm           128  thrpt    5      6795.794 ±       87.701    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space            128  thrpt    5         0.008 ±        0.072  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm       128  thrpt    5         0.086 ±        0.738    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                              128  thrpt    5         5.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                               128  thrpt    5        10.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                       128  thrpt    5    349330.904 ±    12788.040   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                        128  thrpt    5      1480.676 ±       42.278  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                   128  thrpt    5      6669.571 ±      127.711    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space               128  thrpt    5      1471.564 ±     1159.283  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm          128  thrpt    5      6628.785 ±     5225.155    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space           128  thrpt    5         0.821 ±        6.709  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm      128  thrpt    5         3.700 ±       30.218    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                             128  thrpt    5        11.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                              128  thrpt    5        32.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                            128  thrpt    5     52303.781 ±     2575.066   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                             128  thrpt    5      2236.770 ±      162.616  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                        128  thrpt    5     67301.992 ±     1875.260    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                    128  thrpt    5      2138.424 ±     1145.602  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     64292.681 ±    31995.747    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.604 ±        3.719  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5        17.960 ±      110.511    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                  128  thrpt    5        16.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                   128  thrpt    5        37.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                       128  thrpt    5    257902.501 ±     1930.923   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                        128  thrpt    5       917.469 ±       43.533  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                   128  thrpt    5      5597.892 ±      238.493    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space               128  thrpt    5       929.610 ±     1401.578  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm          128  thrpt    5      5669.415 ±     8514.830    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space           128  thrpt    5         0.017 ±        0.088  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm      128  thrpt    5         0.101 ±        0.535    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                             128  thrpt    5         7.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                              128  thrpt    5        14.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                      128  thrpt    5    659567.708 ±    77155.476   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                       128  thrpt    5       753.222 ±      128.883  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                  128  thrpt    5      1796.987 ±      193.338    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space              128  thrpt    5       802.752 ±     1152.674  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm         128  thrpt    5      1911.438 ±     2654.092    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space          128  thrpt    5         0.019 ±        0.126  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5         0.044 ±        0.295    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                            128  thrpt    5         6.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                             128  thrpt    5        24.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                              128  thrpt    5    769859.875 ±     3190.449   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate               128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm          128  thrpt    5         0.001 ±        0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                    128  thrpt    5           ≈ 0                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                           128  thrpt    5     88757.944 ±    14765.953   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                            128  thrpt    5      1627.314 ±      576.381  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                       128  thrpt    5     28987.262 ±    14784.555    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                   128  thrpt    5      1605.974 ±     1410.019  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm              128  thrpt    5     28660.870 ±    28450.133    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space               128  thrpt    5         1.280 ±        2.844  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5        22.944 ±       50.942    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                 128  thrpt    5        12.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                  128  thrpt    5        31.000                     ms
[info] MutableSetOfIntsBenchmark.readCirce                                                         128  thrpt    5    118000.716 ±     9869.276   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      1997.164 ±      501.329  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5     26672.759 ±     8872.680    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1994.107 ±       12.417  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     26606.283 ±     2342.771    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.007 ±        6.414  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        13.471 ±       85.740    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                               128  thrpt    5        15.000                 counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                128  thrpt    5        33.000                     ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                  128  thrpt    5    210134.848 ±    13453.012   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5       884.175 ±       76.370  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5      6621.822 ±      320.622    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       792.488 ±     1136.359  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      5926.290 ±     8317.151    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.004 ±        0.036  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.031 ±        0.265    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5         6.000                 counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5         9.000                     ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                 128  thrpt    5    289166.289 ±    10925.049   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1062.936 ±       46.860  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      5785.158 ±      245.044    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1069.986 ±     1409.883  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      5835.972 ±     7826.023    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.745 ±        6.193  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         4.115 ±       34.218    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5         8.000                 counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        34.000                     ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                      128  thrpt    5    101692.190 ±     6029.830   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      3296.144 ±      177.530  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     51007.683 ±     1610.300    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      3087.842 ±     1413.184  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     47794.447 ±    22188.282    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.104 ±        0.675  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1.603 ±       10.345    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        23.000                 counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        34.000                     ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                        128  thrpt    5    251743.911 ±     6019.983   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5      1718.436 ±       52.030  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5     10742.297 ±      365.885    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1734.722 ±     1404.664  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     10848.462 ±     8875.634    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.869 ±        7.082  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         5.427 ±       44.236    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                              128  thrpt    5        13.000                 counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                               128  thrpt    5        31.000                     ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                 128  thrpt    5    830656.994 ±    69496.985   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       461.110 ±       41.744  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5       873.868 ±       92.210    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       528.008 ±     1136.580  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       997.250 ±     2149.044    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.004 ±        0.036  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.008 ±        0.067    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         4.000                 counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5         7.000                     ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                128  thrpt    5    885879.868 ±    56190.919   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       486.702 ±       73.118  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5       864.601 ±      118.943    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       503.342 ±     1114.580  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       896.953 ±     1977.347    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.004 ±        0.036  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.007 ±        0.063    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         4.000                 counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        15.000                     ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    907970.623 ±    12479.746   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5         0.043 ±        0.232  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5         0.074 ±        0.403    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                 counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                     128  thrpt    5     38993.500 ±     3501.983   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1854.537 ±       68.498  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     74896.891 ±     9488.806    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1729.864 ±     1402.973  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     70000.432 ±    60146.659    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.852 ±        5.962  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        35.592 ±      251.499    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        13.000                 counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        49.000                     ms
[info] PrimitivesBenchmark.readCirce                                                               N/A  thrpt    5   1110861.387 ±    35828.816   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                N/A  thrpt    5      2551.254 ±      148.564  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                           N/A  thrpt    5      3614.443 ±      116.733    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      2530.074 ±     1158.410  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5      3583.948 ±     1617.287    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.975 ±        7.862  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         1.384 ±       11.159    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                     N/A  thrpt    5        19.000                 counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                      N/A  thrpt    5        31.000                     ms
[info] PrimitivesBenchmark.readJacksonScala                                                        N/A  thrpt    5   1778968.358 ±    98194.618   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                         N/A  thrpt    5      1108.690 ±       43.294  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    N/A  thrpt    5       980.913 ±       57.475    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                N/A  thrpt    5      1066.483 ±     1403.743  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           N/A  thrpt    5       945.992 ±     1271.877    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            N/A  thrpt    5         0.012 ±        0.072  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       N/A  thrpt    5         0.011 ±        0.064    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                              N/A  thrpt    5         8.000                 counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                               N/A  thrpt    5        17.000                     ms
[info] PrimitivesBenchmark.readJsoniterScala                                                       N/A  thrpt    5   9816805.323 ±   398277.472   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                        N/A  thrpt    5       310.050 ±       32.524  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   N/A  thrpt    5        49.717 ±        6.618    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               N/A  thrpt    5       338.467 ±     1215.270  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5        54.485 ±      195.727    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.006 ±        0.049  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5         0.001 ±        0.008    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                             N/A  thrpt    5         3.000                 counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                              N/A  thrpt    5        11.000                     ms
[info] PrimitivesBenchmark.readPlayJson                                                            N/A  thrpt    5    474447.845 ±    24227.778   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                             N/A  thrpt    5      2335.758 ±      132.483  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                        N/A  thrpt    5      7748.238 ±      170.855    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      2271.868 ±     1402.298  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5      7544.695 ±     4896.437    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.645 ±        4.588  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         2.179 ±       15.529    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                  N/A  thrpt    5        17.000                 counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                   N/A  thrpt    5        33.000                     ms
[info] PrimitivesBenchmark.writeCirce                                                              N/A  thrpt    5   2023059.793 ±    12320.184   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                               N/A  thrpt    5      2067.126 ±        9.535  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                          N/A  thrpt    5      1608.071 ±       13.485    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5      1995.242 ±       38.606  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5      1552.147 ±       28.921    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.092 ±        0.387  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.071 ±        0.301    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                    N/A  thrpt    5        15.000                 counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                     N/A  thrpt    5        23.000                     ms
[info] PrimitivesBenchmark.writeJacksonScala                                                       N/A  thrpt    5   2960041.844 ±   101686.951   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                        N/A  thrpt    5      1157.221 ±       47.642  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   N/A  thrpt    5       615.230 ±       24.497    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               N/A  thrpt    5      1064.549 ±     1406.260  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5       566.613 ±      755.666    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.012 ±        0.072  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5         0.007 ±        0.038    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                             N/A  thrpt    5         8.000                 counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                              N/A  thrpt    5        13.000                     ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                      N/A  thrpt    5   9132580.601 ±    65804.785   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                       N/A  thrpt    5       766.951 ±       32.497  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  N/A  thrpt    5       132.166 ±        6.361    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       802.264 ±     1154.265  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       138.319 ±      200.249    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.007 ±        0.038  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.001 ±        0.007    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                            N/A  thrpt    5         6.000                 counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                             N/A  thrpt    5        22.000                     ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                              N/A  thrpt    5   9022818.560 ±   330194.995   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               N/A  thrpt    5       285.264 ±       57.093  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          N/A  thrpt    5        49.779 ±       11.911    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                      N/A  thrpt    5       204.648 ±     1079.052  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                 N/A  thrpt    5        36.000 ±      189.826    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                  N/A  thrpt    5         0.004 ±        0.036  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm             N/A  thrpt    5         0.001 ±        0.006    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    N/A  thrpt    5         2.000                 counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                     N/A  thrpt    5         9.000                     ms
[info] PrimitivesBenchmark.writePlayJson                                                           N/A  thrpt    5    564653.273 ±    20064.129   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                            N/A  thrpt    5      2728.637 ±       72.846  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                       N/A  thrpt    5      7605.205 ±      253.860    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      2679.466 ±       31.032  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5      7468.472 ±      343.770    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.637 ±        5.309  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         1.776 ±       14.795    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                 N/A  thrpt    5        20.000                 counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                  N/A  thrpt    5        33.000                     ms
[info] SetOfIntsBenchmark.readCirce                                                                128  thrpt    5     98057.671 ±     4599.126   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      2715.010 ±      157.503  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5     43572.746 ±      821.555    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2562.138 ±       55.296  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     41123.250 ±     1305.394    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         2.291 ±       11.636  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        37.113 ±      188.319    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                      128  thrpt    5        20.000                 counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                       128  thrpt    5        64.000                     ms
[info] SetOfIntsBenchmark.readJacksonScala                                                         128  thrpt    5    142310.924 ±     9697.086   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      2239.005 ±      198.772  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     24759.765 ±      933.249    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2280.326 ±     1414.750  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     25187.454 ±    14529.292    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.225 ±        1.482  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         2.462 ±       16.223    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        17.000                 counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        27.000                     ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                        128  thrpt    5    174419.422 ±    18279.985   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      2655.438 ±      190.407  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5     23968.600 ±     2100.128    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      2648.550 ±       19.965  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     23911.901 ±     2503.440    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         1.812 ±        9.795  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        16.677 ±       89.716    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        20.000                 counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        48.000                     ms
[info] SetOfIntsBenchmark.readPlayJson                                                             128  thrpt    5     87246.918 ±     1077.389   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      3848.324 ±      109.089  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     69415.709 ±     2597.953    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      3751.259 ±     1416.945  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     67670.529 ±    25871.003    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.058 ±        0.280  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         1.051 ±        5.046    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        28.000                 counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        40.000                     ms
[info] SetOfIntsBenchmark.writeCirce                                                               128  thrpt    5    248489.072 ±    10674.436   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1708.863 ±       80.998  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     10823.234 ±      160.602    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1731.137 ±     1401.951  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     10952.247 ±     8607.215    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.908 ±        7.193  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         5.845 ±       46.387    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        13.000                 counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        37.000                     ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                        128  thrpt    5    806500.319 ±     2102.096   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5       478.334 ±       38.585  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5       933.388 ±       76.025    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       396.708 ±     1394.489  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       774.196 ±     2721.420    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.004 ±        0.036  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.008 ±        0.070    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5         3.000                 counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5         5.000                     ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                       128  thrpt    5    816745.199 ±    34372.690   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       449.398 ±       21.271  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       866.002 ±       64.575    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       400.842 ±     1409.015  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       776.329 ±     2729.223    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.010 ±        0.085  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.019 ±        0.164    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         3.000                 counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        11.000                     ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5    830571.681 ±    26297.907   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        12.012 ±       23.518  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        22.777 ±       44.693    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                       128  thrpt    5       102.339 ±      881.169  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5       193.978 ±     1670.207    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.773 ±        6.656  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         1.465 ±       12.616    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5         1.000                 counts
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                      128  thrpt    5         5.000                     ms
[info] SetOfIntsBenchmark.writePlayJson                                                            128  thrpt    5     39000.379 ±     2316.017   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1829.849 ±      378.316  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     73894.953 ±    19708.189    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1723.953 ±     1396.972  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     69628.953 ±    57691.852    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         1.006 ±        5.115  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        41.168 ±      211.832    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        13.000                 counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        29.000                     ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                       128  thrpt    5   4267433.651 ±   107078.983   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      3325.158 ±       61.281  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5      1226.392 ±       38.762    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      3218.796 ±     1182.218  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1187.653 ±      458.184    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.025 ±        0.036  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.009 ±        0.013    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                             128  thrpt    5        24.000                 counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                              128  thrpt    5        31.000                     ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                 128  thrpt    5   6438325.043 ±   325309.231   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                  128  thrpt    5      1252.153 ±       78.530  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                             128  thrpt    5       306.076 ±       14.838    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                         128  thrpt    5      1328.245 ±        6.855  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       324.713 ±       16.496    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                     128  thrpt    5         1.069 ±        8.597  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.259 ±        2.081    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                       128  thrpt    5        10.000                 counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                        128  thrpt    5        34.000                     ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                128  thrpt    5   5090730.799 ±   292775.688   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1050.102 ±      142.026  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5       324.555 ±       30.589    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1066.422 ±     1407.744  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       328.923 ±      425.953    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.860 ±        7.341  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.261 ±        2.225    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5         8.000                 counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        36.000                     ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                               128  thrpt    5   6584641.116 ±   407426.869   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1283.327 ±       72.461  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5       306.714 ±        8.135    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1339.565 ±        8.364  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5       320.211 ±       20.323    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.837 ±        6.937  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.197 ±        1.634    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5        10.000                 counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        29.000                     ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                    128  thrpt    5   5363880.596 ±   391661.362   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1034.947 ±       71.707  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5       303.677 ±       14.454    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5       935.477 ±     1409.401  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       275.326 ±      424.994    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.702 ±        6.000  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.201 ±        1.716    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                          128  thrpt    5         7.000                 counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        30.000                     ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                      128  thrpt    5   3680796.447 ±    75510.813   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                       128  thrpt    5      2029.963 ±       55.344  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                  128  thrpt    5       867.983 ±       20.206    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      1869.940 ±     1144.553  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       799.515 ±      488.357    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.831 ±        5.143  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.356 ±        2.202    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                            128  thrpt    5        14.000                 counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                             128  thrpt    5        24.000                     ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                128  thrpt    5   6934139.655 ±   313160.116   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                 128  thrpt    5       693.053 ±       44.759  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                            128  thrpt    5       157.258 ±        8.180    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                        128  thrpt    5       795.393 ±     1138.592  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       180.454 ±      257.623    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.008 ±        0.052  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.002 ±        0.012    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                      128  thrpt    5         6.000                 counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                       128  thrpt    5        23.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                               128  thrpt    5   6412896.498 ±    53012.340   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5       636.430 ±       15.603  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5       156.195 ±        4.253    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       661.337 ±        4.551  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5       162.308 ±        1.961    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.007 ±        0.037  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.002 ±        0.009    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5         5.000                 counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        19.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                              128  thrpt    5   7074922.769 ±   371525.138   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5       706.047 ±       30.372  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5       157.048 ±        3.718    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5       669.237 ±        1.780  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5       148.877 ±        8.100    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.007 ±        0.058  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0.001 ±        0.013    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5         5.000                 counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        22.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5   7380240.961 ±    53729.988   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5         0.170 ±        1.459  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5         0.036 ±        0.312    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5           ≈ 0                 counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                   128  thrpt    5   6292504.478 ±   276208.811   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5       638.504 ±      109.826  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5       159.715 ±       28.065    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5       666.341 ±        2.176  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       166.681 ±        6.933    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.016 ±        0.100  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.004 ±        0.025    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                         128  thrpt    5         5.000                 counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        20.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                    128  thrpt    5   1771950.252 ±    74522.361   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                     128  thrpt    5      2292.226 ±      106.907  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                128  thrpt    5      2035.994 ±       72.074    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            128  thrpt    5      2270.782 ±     1414.416  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      2017.034 ±     1257.516    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.910 ±        7.748  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.817 ±        6.951    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                          128  thrpt    5        17.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                           128  thrpt    5        30.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                              128  thrpt    5   2982763.156 ±   198874.366   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                               128  thrpt    5       573.115 ±       34.060  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                          128  thrpt    5       302.391 ±       13.761    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                      128  thrpt    5       531.376 ±     1143.829  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5       281.507 ±      606.329    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.012 ±        0.052  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0.006 ±        0.027    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                    128  thrpt    5         4.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                     128  thrpt    5        15.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                             128  thrpt    5   1878920.403 ±    19569.600   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                              128  thrpt    5       382.062 ±       35.086  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5       320.002 ±       30.664    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5       367.357 ±     1312.857  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5       307.919 ±     1099.891    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.004 ±        0.022  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0.003 ±        0.018    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                   128  thrpt    5         3.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                    128  thrpt    5         7.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                            128  thrpt    5   2317567.624 ±    39545.560   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                             128  thrpt    5       446.232 ±       29.272  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5       303.034 ±       24.751    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       370.104 ±     1324.427  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5       252.047 ±      901.537    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.003 ±        0.022  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.002 ±        0.015    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                  128  thrpt    5         3.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                   128  thrpt    5        10.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                 128  thrpt    5   1897048.821 ±    82769.463   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                  128  thrpt    5       367.522 ±       41.657  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                             128  thrpt    5       304.893 ±       32.731    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5       368.666 ±     1318.359  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       306.269 ±     1093.188    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.002 ±        0.013  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.001 ±        0.011    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                       128  thrpt    5         3.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                        128  thrpt    5        13.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                   128  thrpt    5   2528886.870 ±    40150.855   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                    128  thrpt    5      1810.824 ±       47.483  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                               128  thrpt    5      1126.778 ±       44.019    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1736.061 ±     1415.001  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      1080.615 ±      888.461    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.012 ±        0.044  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.008 ±        0.027    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                         128  thrpt    5        13.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                          128  thrpt    5        18.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                             128  thrpt    5   3666242.819 ±    34588.372   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                              128  thrpt    5       975.512 ±       49.412  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                         128  thrpt    5       418.745 ±       24.739    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                     128  thrpt    5       931.353 ±     1403.151  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                128  thrpt    5       400.086 ±      606.599    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.020 ±        0.111  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0.008 ±        0.048    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                   128  thrpt    5         7.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                    128  thrpt    5        25.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                            128  thrpt    5   3370916.388 ±    30247.550   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                             128  thrpt    5       896.452 ±       37.450  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5       418.545 ±       20.246    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       797.806 ±     1144.937  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5       372.673 ±      538.224    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.021 ±        0.080  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.010 ±        0.037    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                  128  thrpt    5         6.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                   128  thrpt    5        12.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                           128  thrpt    5   3632226.241 ±   118816.505   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                            128  thrpt    5       967.319 ±       44.056  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5       419.104 ±       22.345    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5       937.102 ±     1409.714  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5       406.824 ±      622.305    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.020 ±        0.083  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         0.009 ±        0.036    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                 128  thrpt    5         7.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                  128  thrpt    5        25.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                   128  thrpt    5   3875843.489 ±     7364.189   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    128  thrpt    5         0.016 ±        0.138  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               128  thrpt    5         0.007 ±        0.056    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         128  thrpt    5           ≈ 0                 counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                128  thrpt    5   3361744.270 ±   237656.842   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                 128  thrpt    5       900.133 ±       65.154  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                            128  thrpt    5       421.399 ±       17.312    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5       802.495 ±     1151.192  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       375.588 ±      535.865    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.006 ±        0.054  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.003 ±        0.025    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                      128  thrpt    5         6.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                       128  thrpt    5        24.000                     ms
[info] TwitterAPIBenchmark.readCirce                                                               N/A  thrpt    5     12277.818 ±     2030.015   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                N/A  thrpt    5      1636.498 ±      328.872  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                           N/A  thrpt    5    210427.458 ±    76976.511    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1592.846 ±     1398.732  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5    206073.189 ±   216187.059    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         1.494 ±        7.664  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5       196.922 ±     1034.597    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                     N/A  thrpt    5        12.000                 counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                      N/A  thrpt    5        40.000                     ms
[info] TwitterAPIBenchmark.readJacksonScala                                                        N/A  thrpt    5     22796.367 ±     1797.540   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                         N/A  thrpt    5       364.697 ±      176.539  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    N/A  thrpt    5     25237.500 ±    14298.422    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                N/A  thrpt    5       263.810 ±     1390.995  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           N/A  thrpt    5     18375.723 ±    96920.258    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            N/A  thrpt    5         0.042 ±        0.359  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       N/A  thrpt    5         2.844 ±       24.487    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                              N/A  thrpt    5         2.000                 counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                               N/A  thrpt    5         6.000                     ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                       N/A  thrpt    5     20580.132 ±     2248.266   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                        N/A  thrpt    5       258.625 ±      182.702  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   N/A  thrpt    5     19866.516 ±    16315.560    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               N/A  thrpt    5       204.647 ±     1079.042  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5     15886.885 ±    83809.938    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.015 ±        0.130  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5         1.143 ±        9.839    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                             N/A  thrpt    5         2.000                 counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                              N/A  thrpt    5        10.000                     ms
[info] TwitterAPIBenchmark.readPlayJson                                                            N/A  thrpt    5      8671.760 ±     1278.246   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                             N/A  thrpt    5      1889.884 ±      305.835  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                        N/A  thrpt    5    342888.920 ±     7972.666    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      1864.345 ±     1147.126  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5    337295.997 ±   177863.099    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.735 ±        4.617  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5       132.102 ±      823.193    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                  N/A  thrpt    5        14.000                 counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                   N/A  thrpt    5        36.000                     ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                       N/A  thrpt    5     62972.673 ±     6036.745   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                        N/A  thrpt    5       847.399 ±      155.361  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   N/A  thrpt    5     21198.733 ±     6066.018    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               N/A  thrpt    5       796.871 ±     1139.840  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5     19886.837 ±    27978.559    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.301 ±        2.547  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5         7.457 ±       63.098    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                             N/A  thrpt    5         6.000                 counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                              N/A  thrpt    5        16.000                     ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                      N/A  thrpt    5    104248.473 ±     3200.083   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                       N/A  thrpt    5       690.685 ±       39.703  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  N/A  thrpt    5     10423.085 ±      338.364    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       669.059 ±        1.492  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5     10097.589 ±      306.584    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.007 ±        0.058  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.103 ±        0.875    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                            N/A  thrpt    5         5.000                 counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                             N/A  thrpt    5        20.000                     ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                              N/A  thrpt    5    112448.355 ±     1017.874   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               N/A  thrpt    5         0.016 ±        0.138  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          N/A  thrpt    5         0.229 ±        1.933    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    N/A  thrpt    5           ≈ 0                 counts
[info] VectorOfBooleansBenchmark.readCirce                                                         128  thrpt    5    395116.359 ±    26767.245   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      2274.053 ±      131.729  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5      9054.880 ±      191.597    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2132.035 ±     1142.488  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      8491.897 ±     4612.709    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.964 ±        4.026  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         3.885 ±       16.316    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                               128  thrpt    5        16.000                 counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                128  thrpt    5        31.000                     ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                  128  thrpt    5    886799.708 ±    15963.203   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5       631.592 ±       19.975  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5      1120.435 ±       38.725    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       660.948 ±        2.668  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      1172.513 ±       18.390    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.006 ±        0.036  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.012 ±        0.065    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5         5.000                 counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5         9.000                     ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                 128  thrpt    5   1883125.054 ±    86600.656   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       957.873 ±       63.439  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       800.256 ±       19.860    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       937.321 ±     1410.529  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       782.350 ±     1167.521    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.012 ±        0.072  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.010 ±        0.059    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5         7.000                 counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        24.000                     ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                      128  thrpt    5    185069.538 ±     9632.751   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      4576.287 ±       93.491  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     38906.459 ±     1593.493    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      4456.737 ±     1418.562  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     37907.869 ±    13127.179    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.275 ±        2.056  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         2.389 ±       17.920    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        33.000                 counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        46.000                     ms
[info] VectorOfBooleansBenchmark.writeCirce                                                        128  thrpt    5    453023.441 ±    42107.066   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5      1482.721 ±      123.098  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5      5150.616 ±      133.648    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1468.619 ±     1145.439  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      5106.964 ±     4103.322    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.885 ±        7.043  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         3.020 ±       23.973    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                              128  thrpt    5        11.000                 counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                               128  thrpt    5        29.000                     ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                 128  thrpt    5    905896.601 ±    10648.370   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       434.195 ±       31.577  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5       754.259 ±       61.270    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       498.881 ±     1102.372  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       867.446 ±     1917.576    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.008 ±        0.044  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.014 ±        0.076    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         4.000                 counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5         8.000                     ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                128  thrpt    5   1591709.469 ±    94087.162   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       766.122 ±       62.046  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5       757.482 ±       42.871    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       802.736 ±     1149.724  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       792.784 ±     1117.315    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.007 ±        0.037  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.007 ±        0.037    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         6.000                 counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        22.000                     ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5   1692357.358 ±    30768.673   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                 counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                     128  thrpt    5    636192.019 ±    39973.277   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5       885.439 ±       73.739  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5      2190.084 ±       61.939    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5       932.274 ±     1405.375  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      2300.154 ±     3388.214    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.779 ±        6.619  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         1.906 ±       16.192    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                           128  thrpt    5         7.000                 counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        36.000                     ms
[info] Benchmark result is saved to graalvmee1.json
[success] Total time: 7257 s, completed May 12, 2018 12:09:51 AM
