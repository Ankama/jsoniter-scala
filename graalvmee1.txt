[info] Loading settings from idea.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed May 8, 2018 9:56:25 PM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:987:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1073:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:445:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:453:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:964:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 5 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.25.4-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.25.4-SNAPSHOT.jar ...
[info] Done packaging.
[info] Compiling 57 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:65: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("a");
[info]       private[this] val f1: Array[String] = Array("b");
[info]       private[this] val f2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = JsoniterCodecs.this.adtCodec.decodeValue(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = JsoniterCodecs.this.adtCodec.decodeValue(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "bd", "os");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Char] = new Array[Char](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("properties", "geometry");
[info]       private[this] val f1: Array[String] = Array("coordinates");
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d5(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d7(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d9(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d11(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d11(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d13(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d14(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d11(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d6(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d8(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d10(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d12(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d14(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d15(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.geoJSONCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e7(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e7(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e9(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e9(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e11(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e13(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e11(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e13(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e14(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e11(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e9(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e6(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e8(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e10(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e12(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e14(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e15(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.geoJSONCodec.encodeValue(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("destination_addresses", "origin_addresses", "rows", "status");
[info]       private[this] val f1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val f2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "in_reply_to_status_id", "in_reply_to_status_id_str", "in_reply_to_user_id", "in_reply_to_user_id_str", "in_reply_to_screen_name", "user", "geo", "coordinates", "place", "contributors", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val f1: Array[String] = Array("screen_name", "name", "id", "id_str", "indices");
[info]       private[this] val f2: Array[String] = Array("url", "expanded_url", "display_url", "indices");
[info]       private[this] val f3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val f4: Array[String] = Array("url", "description");
[info]       private[this] val f5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "in_reply_to_status_id", "in_reply_to_status_id_str", "in_reply_to_user_id", "in_reply_to_user_id_str", "in_reply_to_screen_name", "user", "geo", "coordinates", "place", "contributors", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(f5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:35:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:42:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:64:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:65:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:66:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:70:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:71:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:72:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:73:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:74:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:75:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:76:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 14 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.4-SNAPSHOT.jar ...
[info] Compiling 49 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 421 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 617 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.4-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.4-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java -prof gc -rf json -rff graalvmee1.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 01:10:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44343.279 ops/s
[info] # Warmup Iteration   2: 415792.857 ops/s
[info] # Warmup Iteration   3: 939000.206 ops/s
[info] # Warmup Iteration   4: 1039195.636 ops/s
[info] # Warmup Iteration   5: 1013766.441 ops/s
[info] Iteration   1: 1027997.674 ops/s
[info]                  ·gc.alloc.rate:                   2282.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              3493.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3062.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.378 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 1046707.104 ops/s
[info]                  ·gc.alloc.rate:                   2342.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              3523.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2659.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3998.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.158 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1058213.437 ops/s
[info]                  ·gc.alloc.rate:                   2363.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              3514.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2963.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1055620.293 ops/s
[info]                  ·gc.alloc.rate:               2358.666 MB/sec
[info]                  ·gc.alloc.rate.norm:          3515.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2662.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3967.349 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 1057244.161 ops/s
[info]                  ·gc.alloc.rate:                   2374.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              3534.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2980.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   1049156.534 ±(99.9%) 48817.997 ops/s [Average]
[info]   (min, avg, max) = (1027997.674, 1049156.534, 1058213.437), stdev = 12677.879
[info]   CI (99.9%): [1000338.537, 1097974.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2344.295 ±(99.9%) 140.595 MB/sec [Average]
[info]   (min, avg, max) = (2282.181, 2344.295, 2374.412), stdev = 36.512
[info]   CI (99.9%): [2203.700, 2484.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3516.235 ±(99.9%) 57.090 B/op [Average]
[info]   (min, avg, max) = (3493.934, 3516.235, 3534.464), stdev = 14.826
[info]   CI (99.9%): [3459.145, 3573.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2263.246 ±(99.9%) 1397.049 MB/sec [Average]
[info]   (min, avg, max) = (1992.488, 2263.246, 2662.173), stdev = 362.809
[info]   CI (99.9%): [866.197, 3660.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3394.352 ±(99.9%) 2074.210 B/op [Average]
[info]   (min, avg, max) = (2963.319, 3394.352, 3998.433), stdev = 538.666
[info]   CI (99.9%): [1320.142, 5468.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.996 ±(99.9%) 6.940 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.996, 4.166), stdev = 1.802
[info]   CI (99.9%): [≈ 0, 7.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.520 ±(99.9%) 10.629 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.520, 6.378), stdev = 2.760
[info]   CI (99.9%): [≈ 0, 12.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 11.000), stdev = 2.793
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.24% complete, ETA 01:53:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43032.135 ops/s
[info] # Warmup Iteration   2: 1161550.250 ops/s
[info] # Warmup Iteration   3: 1708149.026 ops/s
[info] # Warmup Iteration   4: 1859988.417 ops/s
[info] # Warmup Iteration   5: 1851683.450 ops/s
[info] Iteration   1: 1867758.690 ops/s
[info]                  ·gc.alloc.rate:                   1193.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              1006.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     559.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1869244.614 ops/s
[info]                  ·gc.alloc.rate:               1218.236 MB/sec
[info]                  ·gc.alloc.rate.norm:          1025.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1120.087 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1838829.602 ops/s
[info]                  ·gc.alloc.rate:                   1196.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1140.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1860213.124 ops/s
[info]                  ·gc.alloc.rate:                   1204.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              1019.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1130.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1885502.600 ops/s
[info]                  ·gc.alloc.rate:                   1203.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              1003.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     557.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.608 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1864309.726 ±(99.9%) 65330.723 ops/s [Average]
[info]   (min, avg, max) = (1838829.602, 1864309.726, 1885502.600), stdev = 16966.181
[info]   CI (99.9%): [1798979.003, 1929640.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1203.414 ±(99.9%) 36.221 MB/sec [Average]
[info]   (min, avg, max) = (1193.926, 1203.414, 1218.236), stdev = 9.406
[info]   CI (99.9%): [1167.193, 1239.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1015.790 ±(99.9%) 39.156 B/op [Average]
[info]   (min, avg, max) = (1003.964, 1015.790, 1025.754), stdev = 10.169
[info]   CI (99.9%): [976.634, 1054.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1066.560 ±(99.9%) 1405.966 MB/sec [Average]
[info]   (min, avg, max) = (664.484, 1066.560, 1335.843), stdev = 365.125
[info]   CI (99.9%): [≈ 0, 2472.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   901.775 ±(99.9%) 1205.419 B/op [Average]
[info]   (min, avg, max) = (557.985, 901.775, 1140.875), stdev = 313.043
[info]   CI (99.9%): [≈ 0, 2107.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.162 ±(99.9%) 1.221 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.162, 0.729), stdev = 0.317
[info]   CI (99.9%): [≈ 0, 1.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.136 ±(99.9%) 1.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.136, 0.608), stdev = 0.264
[info]   CI (99.9%): [≈ 0, 1.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.47% complete, ETA 01:52:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 950996.383 ops/s
[info] # Warmup Iteration   2: 4307598.688 ops/s
[info] # Warmup Iteration   3: 5361030.458 ops/s
[info] # Warmup Iteration   4: 5165495.923 ops/s
[info] # Warmup Iteration   5: 5316304.793 ops/s
[info] Iteration   1: 5278626.853 ops/s
[info]                  ·gc.alloc.rate:                   360.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              107.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 5197223.118 ops/s
[info]                  ·gc.alloc.rate:               365.266 MB/sec
[info]                  ·gc.alloc.rate.norm:          110.606 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 154.924 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 5375638.131 ops/s
[info]                  ·gc.alloc.rate:      355.218 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 5384766.265 ops/s
[info]                  ·gc.alloc.rate:               371.171 MB/sec
[info]                  ·gc.alloc.rate.norm:          108.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 195.480 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 5403454.689 ops/s
[info]                  ·gc.alloc.rate:      357.053 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   5327941.811 ±(99.9%) 337483.700 ops/s [Average]
[info]   (min, avg, max) = (5197223.118, 5327941.811, 5403454.689), stdev = 87643.445
[info]   CI (99.9%): [4990458.111, 5665425.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   361.840 ±(99.9%) 24.910 MB/sec [Average]
[info]   (min, avg, max) = (355.218, 361.840, 371.171), stdev = 6.469
[info]   CI (99.9%): [336.930, 386.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   106.913 ±(99.9%) 11.124 B/op [Average]
[info]   (min, avg, max) = (104.000, 106.913, 110.606), stdev = 2.889
[info]   CI (99.9%): [95.790, 118.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.418 ±(99.9%) 1215.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.418, 668.873), stdev = 315.533
[info]   CI (99.9%): [≈ 0, 1553.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   100.588 ±(99.9%) 359.635 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 100.588, 195.480), stdev = 93.396
[info]   CI (99.9%): [≈ 0, 460.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.71% complete, ETA 01:52:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 668.734 ops/s
[info] # Warmup Iteration   2: 171981.989 ops/s
[info] # Warmup Iteration   3: 574051.532 ops/s
[info] # Warmup Iteration   4: 613275.717 ops/s
[info] # Warmup Iteration   5: 613476.445 ops/s
[info] Iteration   1: 615452.860 ops/s
[info]                  ·gc.alloc.rate:                   2860.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              7314.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3344.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8551.752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.654 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 610146.407 ops/s
[info]                  ·gc.alloc.rate:                   2833.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              7307.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6902.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 594025.304 ops/s
[info]                  ·gc.alloc.rate:                   2761.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              7314.819 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7104.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 608714.803 ops/s
[info]                  ·gc.alloc.rate:               2855.241 MB/sec
[info]                  ·gc.alloc.rate.norm:          7380.471 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6952.937 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 618904.089 ops/s
[info]                  ·gc.alloc.rate:               2902.329 MB/sec
[info]                  ·gc.alloc.rate.norm:          7377.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2697.721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6857.224 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   609448.693 ±(99.9%) 36751.005 ops/s [Average]
[info]   (min, avg, max) = (594025.304, 609448.693, 618904.089), stdev = 9544.119
[info]   CI (99.9%): [572697.688, 646199.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2842.609 ±(99.9%) 200.006 MB/sec [Average]
[info]   (min, avg, max) = (2761.041, 2842.609, 2902.329), stdev = 51.941
[info]   CI (99.9%): [2642.603, 3042.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7338.884 ±(99.9%) 141.175 B/op [Average]
[info]   (min, avg, max) = (7307.278, 7338.884, 7380.471), stdev = 36.663
[info]   CI (99.9%): [7197.709, 7480.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2818.095 ±(99.9%) 1133.976 MB/sec [Average]
[info]   (min, avg, max) = (2676.654, 2818.095, 3344.699), stdev = 294.490
[info]   CI (99.9%): [1684.119, 3952.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7273.731 ±(99.9%) 2774.246 B/op [Average]
[info]   (min, avg, max) = (6857.224, 7273.731, 8551.752), stdev = 720.463
[info]   CI (99.9%): [4499.485, 10047.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.529 ±(99.9%) 4.464 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.529, 2.603), stdev = 1.159
[info]   CI (99.9%): [≈ 0, 4.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.353 ±(99.9%) 11.413 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.353, 6.654), stdev = 2.964
[info]   CI (99.9%): [≈ 0, 12.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 9.000), stdev = 1.304
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0.94% complete, ETA 01:51:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33559.153 ops/s
[info] # Warmup Iteration   2: 517449.999 ops/s
[info] # Warmup Iteration   3: 1006254.737 ops/s
[info] # Warmup Iteration   4: 1033226.372 ops/s
[info] # Warmup Iteration   5: 1022455.882 ops/s
[info] Iteration   1: 1060589.758 ops/s
[info]                  ·gc.alloc.rate:                   2989.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              4436.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2641.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3919.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.317 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 1033907.970 ops/s
[info]                  ·gc.alloc.rate:                   2913.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              4435.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2642.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4023.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.978 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1066967.693 ops/s
[info]                  ·gc.alloc.rate:                   3044.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              4490.432 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3303.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4871.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1069566.308 ops/s
[info]                  ·gc.alloc.rate:                   3052.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              4491.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2653.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3903.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1064645.222 ops/s
[info]                  ·gc.alloc.rate:               3065.894 MB/sec
[info]                  ·gc.alloc.rate.norm:          4532.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3333.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4928.336 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   1059135.390 ±(99.9%) 55769.409 ops/s [Average]
[info]   (min, avg, max) = (1033907.970, 1059135.390, 1069566.308), stdev = 14483.138
[info]   CI (99.9%): [1003365.982, 1114904.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   3013.382 ±(99.9%) 241.675 MB/sec [Average]
[info]   (min, avg, max) = (2913.767, 3013.382, 3065.894), stdev = 62.762
[info]   CI (99.9%): [2771.706, 3255.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4477.327 ±(99.9%) 158.760 B/op [Average]
[info]   (min, avg, max) = (4435.506, 4477.327, 4532.544), stdev = 41.229
[info]   CI (99.9%): [4318.567, 4636.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2914.810 ±(99.9%) 1419.668 MB/sec [Average]
[info]   (min, avg, max) = (2641.182, 2914.810, 3333.615), stdev = 368.683
[info]   CI (99.9%): [1495.143, 4334.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4329.222 ±(99.9%) 2016.160 B/op [Average]
[info]   (min, avg, max) = (3903.237, 4329.222, 4928.336), stdev = 523.590
[info]   CI (99.9%): [2313.062, 6345.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.975 ±(99.9%) 5.575 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.975, 3.270), stdev = 1.448
[info]   CI (99.9%): [≈ 0, 6.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.471 ±(99.9%) 8.465 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.471, 4.978), stdev = 2.198
[info]   CI (99.9%): [≈ 0, 9.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.400, 14.000), stdev = 3.362
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.18% complete, ETA 01:51:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 139716.490 ops/s
[info] # Warmup Iteration   2: 2356365.257 ops/s
[info] # Warmup Iteration   3: 2690076.270 ops/s
[info] # Warmup Iteration   4: 3098326.692 ops/s
[info] # Warmup Iteration   5: 3115293.007 ops/s
[info] Iteration   1: 3118081.630 ops/s
[info]                  ·gc.alloc.rate:                   1254.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     670.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3116561.696 ops/s
[info]                  ·gc.alloc.rate:               1219.585 MB/sec
[info]                  ·gc.alloc.rate.norm:          615.888 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 336.245 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 3036251.662 ops/s
[info]                  ·gc.alloc.rate:                   1220.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     690.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3032674.718 ops/s
[info]                  ·gc.alloc.rate:                   1203.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     693.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3122864.181 ops/s
[info]                  ·gc.alloc.rate:                   1236.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              622.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     674.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.744 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   3085286.777 ±(99.9%) 178942.653 ops/s [Average]
[info]   (min, avg, max) = (3032674.718, 3085286.777, 3122864.181), stdev = 46470.839
[info]   CI (99.9%): [2906344.124, 3264229.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1226.835 ±(99.9%) 73.925 MB/sec [Average]
[info]   (min, avg, max) = (1203.302, 1226.835, 1254.162), stdev = 19.198
[info]   CI (99.9%): [1152.910, 1300.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   625.806 ±(99.9%) 27.900 B/op [Average]
[info]   (min, avg, max) = (615.888, 625.806, 632.950), stdev = 7.246
[info]   CI (99.9%): [597.905, 653.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1200.382 ±(99.9%) 1150.729 MB/sec [Average]
[info]   (min, avg, max) = (665.834, 1200.382, 1338.257), stdev = 298.841
[info]   CI (99.9%): [49.653, 2351.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   613.087 ±(99.9%) 597.135 B/op [Average]
[info]   (min, avg, max) = (336.245, 613.087, 693.144), stdev = 155.074
[info]   CI (99.9%): [15.953, 1210.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.312 ±(99.9%) 2.509 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.312, 1.477), stdev = 0.651
[info]   CI (99.9%): [≈ 0, 2.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.157 ±(99.9%) 1.264 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.157, 0.744), stdev = 0.328
[info]   CI (99.9%): [≈ 0, 1.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 5.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.41% complete, ETA 01:51:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1571433.402 ops/s
[info] # Warmup Iteration   2: 16612733.670 ops/s
[info] # Warmup Iteration   3: 18619791.974 ops/s
[info] # Warmup Iteration   4: 18420627.072 ops/s
[info] # Warmup Iteration   5: 18661957.450 ops/s
[info] Iteration   1: 18624104.331 ops/s
[info]                  ·gc.alloc.rate:                   984.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              83.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 18321074.084 ops/s
[info]                  ·gc.alloc.rate:               959.514 MB/sec
[info]                  ·gc.alloc.rate.norm:          82.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57.457 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 18670061.623 ops/s
[info]                  ·gc.alloc.rate:               966.004 MB/sec
[info]                  ·gc.alloc.rate.norm:          81.433 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56.382 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 18571866.763 ops/s
[info]                  ·gc.alloc.rate:                   986.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              83.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 18426264.474 ops/s
[info]                  ·gc.alloc.rate:               964.215 MB/sec
[info]                  ·gc.alloc.rate.norm:          82.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57.212 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   18522674.255 ±(99.9%) 559233.865 ops/s [Average]
[info]   (min, avg, max) = (18321074.084, 18522674.255, 18670061.623), stdev = 145231.259
[info]   CI (99.9%): [17963440.390, 19081908.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   972.192 ±(99.9%) 48.100 MB/sec [Average]
[info]   (min, avg, max) = (959.514, 972.192, 986.400), stdev = 12.492
[info]   CI (99.9%): [924.091, 1020.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   82.599 ±(99.9%) 3.242 B/op [Average]
[info]   (min, avg, max) = (81.433, 82.599, 83.592), stdev = 0.842
[info]   CI (99.9%): [79.357, 85.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   936.739 ±(99.9%) 1410.322 MB/sec [Average]
[info]   (min, avg, max) = (668.828, 936.739, 1338.961), stdev = 366.256
[info]   CI (99.9%): [≈ 0, 2347.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   79.500 ±(99.9%) 118.557 B/op [Average]
[info]   (min, avg, max) = (56.382, 79.500, 113.470), stdev = 30.789
[info]   CI (99.9%): [≈ 0, 198.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.65% complete, ETA 01:50:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2650091.596 ops/s
[info] # Warmup Iteration   2: 18029545.101 ops/s
[info] # Warmup Iteration   3: 20226486.775 ops/s
[info] # Warmup Iteration   4: 20236650.880 ops/s
[info] # Warmup Iteration   5: 20203003.838 ops/s
[info] Iteration   1: 19160219.484 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 20191575.965 ops/s
[info]                  ·gc.alloc.rate:      0.878 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.068 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 20291708.378 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 20221012.579 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 20234419.787 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   20019787.239 ±(99.9%) 1855582.884 ops/s [Average]
[info]   (min, avg, max) = (19160219.484, 20019787.239, 20291708.378), stdev = 481888.982
[info]   CI (99.9%): [18164204.355, 21875370.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.176 ±(99.9%) 1.511 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.176, 0.878), stdev = 0.392
[info]   CI (99.9%): [≈ 0, 1.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.014 ±(99.9%) 0.118 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.014, 0.068), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.88% complete, ETA 01:50:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7743.878 ops/s
[info] # Warmup Iteration   2: 384007.833 ops/s
[info] # Warmup Iteration   3: 1000635.433 ops/s
[info] # Warmup Iteration   4: 1085488.663 ops/s
[info] # Warmup Iteration   5: 1113585.201 ops/s
[info] Iteration   1: 1096723.294 ops/s
[info]                  ·gc.alloc.rate:                   2518.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              3614.427 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3834.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.406 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 1127031.639 ops/s
[info]                  ·gc.alloc.rate:                   2593.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              3621.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3732.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.262 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1128738.248 ops/s
[info]                  ·gc.alloc.rate:                   2596.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              3620.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3731.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1097852.408 ops/s
[info]                  ·gc.alloc.rate:               2527.466 MB/sec
[info]                  ·gc.alloc.rate.norm:          3623.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2884.610 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 1112970.203 ops/s
[info]                  ·gc.alloc.rate:                   2602.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              3679.438 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3803.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   1112663.158 ±(99.9%) 58978.794 ops/s [Average]
[info]   (min, avg, max) = (1096723.294, 1112663.158, 1128738.248), stdev = 15316.605
[info]   CI (99.9%): [1053684.364, 1171641.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2567.742 ±(99.9%) 157.919 MB/sec [Average]
[info]   (min, avg, max) = (2518.715, 2567.742, 2602.623), stdev = 41.011
[info]   CI (99.9%): [2409.823, 2725.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   3631.803 ±(99.9%) 103.340 B/op [Average]
[info]   (min, avg, max) = (3614.427, 3631.803, 3679.438), stdev = 26.837
[info]   CI (99.9%): [3528.463, 3735.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2544.629 ±(99.9%) 1146.425 MB/sec [Average]
[info]   (min, avg, max) = (2012.211, 2544.629, 2690.297), stdev = 297.723
[info]   CI (99.9%): [1398.203, 3691.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3597.154 ±(99.9%) 1543.536 B/op [Average]
[info]   (min, avg, max) = (2884.610, 3597.154, 3834.358), stdev = 400.851
[info]   CI (99.9%): [2053.619, 5140.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.520 ±(99.9%) 3.999 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.520, 2.373), stdev = 1.038
[info]   CI (99.9%): [≈ 0, 4.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.745 ±(99.9%) 5.741 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 3.406), stdev = 1.491
[info]   CI (99.9%): [≈ 0, 6.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 9.000), stdev = 1.517
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.12% complete, ETA 01:50:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 129020.326 ops/s
[info] # Warmup Iteration   2: 1906785.800 ops/s
[info] # Warmup Iteration   3: 3819485.902 ops/s
[info] # Warmup Iteration   4: 3853137.022 ops/s
[info] # Warmup Iteration   5: 3928856.176 ops/s
[info] Iteration   1: 3941038.482 ops/s
[info]                  ·gc.alloc.rate:                   3578.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              1428.513 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3326.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1328.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3922973.779 ops/s
[info]                  ·gc.alloc.rate:                   3590.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              1439.989 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3338.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1338.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3921619.038 ops/s
[info]                  ·gc.alloc.rate:                   3602.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              1445.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3352.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1345.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3908107.113 ops/s
[info]                  ·gc.alloc.rate:                   3619.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4042.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1627.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 3929637.048 ops/s
[info]                  ·gc.alloc.rate:                   3618.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              1449.314 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3380.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1353.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   3924675.092 ±(99.9%) 46332.440 ops/s [Average]
[info]   (min, avg, max) = (3908107.113, 3924675.092, 3941038.482), stdev = 12032.388
[info]   CI (99.9%): [3878342.652, 3971007.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   3601.844 ±(99.9%) 68.381 MB/sec [Average]
[info]   (min, avg, max) = (3578.385, 3601.844, 3619.070), stdev = 17.758
[info]   CI (99.9%): [3533.463, 3670.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1444.041 ±(99.9%) 41.027 B/op [Average]
[info]   (min, avg, max) = (1428.513, 1444.041, 1456.956), stdev = 10.655
[info]   CI (99.9%): [1403.014, 1485.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3488.215 ±(99.9%) 1196.502 MB/sec [Average]
[info]   (min, avg, max) = (3326.964, 3488.215, 4042.909), stdev = 310.728
[info]   CI (99.9%): [2291.714, 4684.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1398.710 ±(99.9%) 493.992 B/op [Average]
[info]   (min, avg, max) = (1328.144, 1398.710, 1627.584), stdev = 128.288
[info]   CI (99.9%): [904.718, 1892.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.033, 0.042), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (0.008, 0.013, 0.017), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.400, 11.000), stdev = 2.074
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.35% complete, ETA 01:50:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.556 ops/s
[info] # Warmup Iteration   2: 9864427.121 ops/s
[info] # Warmup Iteration   3: 11325065.623 ops/s
[info] # Warmup Iteration   4: 12068149.321 ops/s
[info] # Warmup Iteration   5: 11621051.698 ops/s
[info] Iteration   1: 11886472.980 ops/s
[info]                  ·gc.alloc.rate:                   1486.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              196.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     176.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 11675173.442 ops/s
[info]                  ·gc.alloc.rate:                   1458.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              196.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     179.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 11402784.951 ops/s
[info]                  ·gc.alloc.rate:                   1430.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              197.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     183.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.155 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.711 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 12176179.384 ops/s
[info]                  ·gc.alloc.rate:                   1513.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              195.572 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 12212399.257 ops/s
[info]                  ·gc.alloc.rate:                   1542.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              198.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     256.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   11870602.003 ±(99.9%) 1316418.958 ops/s [Average]
[info]   (min, avg, max) = (11402784.951, 11870602.003, 12212399.257), stdev = 341869.823
[info]   CI (99.9%): [10554183.045, 13187020.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1486.236 ±(99.9%) 170.390 MB/sec [Average]
[info]   (min, avg, max) = (1430.422, 1486.236, 1542.906), stdev = 44.250
[info]   CI (99.9%): [1315.846, 1656.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   197.033 ±(99.9%) 4.563 B/op [Average]
[info]   (min, avg, max) = (195.572, 197.033, 198.783), stdev = 1.185
[info]   CI (99.9%): [192.471, 201.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1463.310 ±(99.9%) 1134.631 MB/sec [Average]
[info]   (min, avg, max) = (1330.957, 1463.310, 1990.414), stdev = 294.660
[info]   CI (99.9%): [328.679, 2597.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   193.623 ±(99.9%) 136.249 B/op [Average]
[info]   (min, avg, max) = (172.040, 193.623, 256.438), stdev = 35.383
[info]   CI (99.9%): [57.374, 329.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   1.108 ±(99.9%) 8.722 MB/sec [Average]
[info]   (min, avg, max) = (0.010, 1.108, 5.155), stdev = 2.265
[info]   CI (99.9%): [≈ 0, 9.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.152 ±(99.9%) 1.205 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.152, 0.711), stdev = 0.313
[info]   CI (99.9%): [≈ 0, 1.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 8.000), stdev = 1.673
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.59% complete, ETA 01:50:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94884.626 ops/s
[info] # Warmup Iteration   2: 3117898.867 ops/s
[info] # Warmup Iteration   3: 3588705.140 ops/s
[info] # Warmup Iteration   4: 3874983.371 ops/s
[info] # Warmup Iteration   5: 3871658.986 ops/s
[info] Iteration   1: 3782818.539 ops/s
[info]                  ·gc.alloc.rate:                   2273.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              945.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     834.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.346 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3738230.222 ops/s
[info]                  ·gc.alloc.rate:                   2271.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              956.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1129.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3763880.424 ops/s
[info]                  ·gc.alloc.rate:               2273.393 MB/sec
[info]                  ·gc.alloc.rate.norm:          950.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 843.187 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 3758689.463 ops/s
[info]                  ·gc.alloc.rate:                   2282.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              955.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     845.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3769752.631 ops/s
[info]                  ·gc.alloc.rate:               2303.756 MB/sec
[info]                  ·gc.alloc.rate.norm:          961.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 844.892 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   3762674.256 ±(99.9%) 63000.693 ops/s [Average]
[info]   (min, avg, max) = (3738230.222, 3762674.256, 3782818.539), stdev = 16361.080
[info]   CI (99.9%): [3699673.563, 3825674.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2280.892 ±(99.9%) 51.943 MB/sec [Average]
[info]   (min, avg, max) = (2271.657, 2280.892, 2303.756), stdev = 13.489
[info]   CI (99.9%): [2228.949, 2332.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   954.009 ±(99.9%) 23.246 B/op [Average]
[info]   (min, avg, max) = (945.769, 954.009, 961.635), stdev = 6.037
[info]   CI (99.9%): [930.763, 977.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2150.063 ±(99.9%) 1146.607 MB/sec [Average]
[info]   (min, avg, max) = (2006.714, 2150.063, 2682.605), stdev = 297.770
[info]   CI (99.9%): [1003.456, 3296.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   899.656 ±(99.9%) 494.549 B/op [Average]
[info]   (min, avg, max) = (834.936, 899.656, 1129.272), stdev = 128.433
[info]   CI (99.9%): [405.107, 1394.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.204 ±(99.9%) 1.380 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.204, 0.833), stdev = 0.358
[info]   CI (99.9%): [≈ 0, 1.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.085 ±(99.9%) 0.574 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.085, 0.346), stdev = 0.149
[info]   CI (99.9%): [≈ 0, 0.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.82% complete, ETA 01:49:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3201735.016 ops/s
[info] # Warmup Iteration   2: 13199790.092 ops/s
[info] # Warmup Iteration   3: 15392685.203 ops/s
[info] # Warmup Iteration   4: 15391026.128 ops/s
[info] # Warmup Iteration   5: 15240045.814 ops/s
[info] Iteration   1: 15353998.351 ops/s
[info]                  ·gc.alloc.rate:                   1998.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              204.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     206.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.265 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 15451901.433 ops/s
[info]                  ·gc.alloc.rate:                   2005.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              204.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     204.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.117 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 15496175.152 ops/s
[info]                  ·gc.alloc.rate:                   2047.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              207.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 15511190.727 ops/s
[info]                  ·gc.alloc.rate:               2024.524 MB/sec
[info]                  ·gc.alloc.rate.norm:          205.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 203.662 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 15387952.683 ops/s
[info]                  ·gc.alloc.rate:               2022.600 MB/sec
[info]                  ·gc.alloc.rate.norm:          206.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 205.593 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   15440243.669 ±(99.9%) 261661.961 ops/s [Average]
[info]   (min, avg, max) = (15353998.351, 15440243.669, 15511190.727), stdev = 67952.780
[info]   CI (99.9%): [15178581.708, 15701905.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2019.925 ±(99.9%) 72.901 MB/sec [Average]
[info]   (min, avg, max) = (1998.977, 2019.925, 2047.656), stdev = 18.932
[info]   CI (99.9%): [1947.024, 2092.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   205.883 ±(99.9%) 5.763 B/op [Average]
[info]   (min, avg, max) = (204.298, 205.883, 207.954), stdev = 1.497
[info]   CI (99.9%): [200.120, 211.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2009.869 ±(99.9%) 10.733 MB/sec [Average]
[info]   (min, avg, max) = (2006.688, 2009.869, 2013.083), stdev = 2.787
[info]   CI (99.9%): [1999.135, 2020.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   204.863 ±(99.9%) 4.444 B/op [Average]
[info]   (min, avg, max) = (203.662, 204.863, 206.348), stdev = 1.154
[info]   CI (99.9%): [200.419, 209.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.749 ±(99.9%) 4.376 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.749, 2.581), stdev = 1.136
[info]   CI (99.9%): [≈ 0, 5.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.077 ±(99.9%) 0.448 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.077, 0.265), stdev = 0.116
[info]   CI (99.9%): [≈ 0, 0.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 11.000), stdev = 3.209
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.06% complete, ETA 01:49:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2191.279 ops/s
[info] # Warmup Iteration   2: 644356.688 ops/s
[info] # Warmup Iteration   3: 1680553.483 ops/s
[info] # Warmup Iteration   4: 1776948.995 ops/s
[info] # Warmup Iteration   5: 1835569.178 ops/s
[info] Iteration   1: 1841103.704 ops/s
[info]                  ·gc.alloc.rate:                   3037.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              2596.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3340.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2855.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.303 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1842457.445 ops/s
[info]                  ·gc.alloc.rate:                   3010.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              2571.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2284.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1847262.093 ops/s
[info]                  ·gc.alloc.rate:               3031.712 MB/sec
[info]                  ·gc.alloc.rate.norm:          2583.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2680.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2283.891 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 1847113.735 ops/s
[info]                  ·gc.alloc.rate:               3073.138 MB/sec
[info]                  ·gc.alloc.rate.norm:          2618.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3362.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2864.397 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 1849716.763 ops/s
[info]                  ·gc.alloc.rate:               3051.231 MB/sec
[info]                  ·gc.alloc.rate.norm:          2595.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2699.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2296.113 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   1845530.748 ±(99.9%) 13893.041 ops/s [Average]
[info]   (min, avg, max) = (1841103.704, 1845530.748, 1849716.763), stdev = 3607.979
[info]   CI (99.9%): [1831637.707, 1859423.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3040.827 ±(99.9%) 89.120 MB/sec [Average]
[info]   (min, avg, max) = (3010.936, 3040.827, 3073.138), stdev = 23.144
[info]   CI (99.9%): [2951.707, 3129.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   2592.879 ±(99.9%) 66.566 B/op [Average]
[info]   (min, avg, max) = (2571.733, 2592.879, 2618.095), stdev = 17.287
[info]   CI (99.9%): [2526.313, 2659.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2951.517 ±(99.9%) 1406.645 MB/sec [Average]
[info]   (min, avg, max) = (2674.509, 2951.517, 3362.250), stdev = 365.301
[info]   CI (99.9%): [1544.872, 4358.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2516.914 ±(99.9%) 1206.524 B/op [Average]
[info]   (min, avg, max) = (2283.891, 2516.914, 2864.397), stdev = 313.331
[info]   CI (99.9%): [1310.389, 3723.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.601 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.354), stdev = 0.156
[info]   CI (99.9%): [≈ 0, 0.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.064 ±(99.9%) 0.514 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.064, 0.303), stdev = 0.134
[info]   CI (99.9%): [≈ 0, 0.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.29% complete, ETA 01:49:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75251.004 ops/s
[info] # Warmup Iteration   2: 2647511.621 ops/s
[info] # Warmup Iteration   3: 5087908.045 ops/s
[info] # Warmup Iteration   4: 5114518.683 ops/s
[info] # Warmup Iteration   5: 5107822.893 ops/s
[info] Iteration   1: 5016702.084 ops/s
[info]                  ·gc.alloc.rate:                   2530.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              793.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2661.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     834.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.176 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 5172097.781 ops/s
[info]                  ·gc.alloc.rate:                   2589.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              787.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2657.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     808.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 5167806.944 ops/s
[info]                  ·gc.alloc.rate:                   2600.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              791.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2661.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     810.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 5145030.082 ops/s
[info]                  ·gc.alloc.rate:               2590.072 MB/sec
[info]                  ·gc.alloc.rate.norm:          792.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 612.439 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 5140286.921 ops/s
[info]                  ·gc.alloc.rate:                   2616.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              800.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     820.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   5128384.762 ±(99.9%) 246235.697 ops/s [Average]
[info]   (min, avg, max) = (5016702.084, 5128384.762, 5172097.781), stdev = 63946.628
[info]   CI (99.9%): [4882149.066, 5374620.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2585.267 ±(99.9%) 125.940 MB/sec [Average]
[info]   (min, avg, max) = (2530.057, 2585.267, 2616.155), stdev = 32.706
[info]   CI (99.9%): [2459.327, 2711.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   793.231 ±(99.9%) 17.996 B/op [Average]
[info]   (min, avg, max) = (787.768, 793.231, 800.642), stdev = 4.673
[info]   CI (99.9%): [775.236, 811.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2532.634 ±(99.9%) 1142.511 MB/sec [Average]
[info]   (min, avg, max) = (2002.109, 2532.634, 2680.468), stdev = 296.706
[info]   CI (99.9%): [1390.123, 3675.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   777.296 ±(99.9%) 357.096 B/op [Average]
[info]   (min, avg, max) = (612.439, 777.296, 834.675), stdev = 92.737
[info]   CI (99.9%): [420.200, 1134.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.137 ±(99.9%) 0.919 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.137, 0.562), stdev = 0.239
[info]   CI (99.9%): [≈ 0, 1.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.043 ±(99.9%) 0.289 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.176), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.53% complete, ETA 01:49:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.566 ops/s
[info] # Warmup Iteration   2: 21793871.519 ops/s
[info] # Warmup Iteration   3: 22727167.809 ops/s
[info] # Warmup Iteration   4: 24500325.149 ops/s
[info] # Warmup Iteration   5: 24501277.689 ops/s
[info] Iteration   1: 24480489.941 ops/s
[info]                  ·gc.alloc.rate:               760.598 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42.678 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 24361624.916 ops/s
[info]                  ·gc.alloc.rate:                   764.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 24412440.544 ops/s
[info]                  ·gc.alloc.rate:                   766.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.433 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 24018705.594 ops/s
[info]                  ·gc.alloc.rate:               758.686 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43.543 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 24177416.685 ops/s
[info]                  ·gc.alloc.rate:               774.590 MB/sec
[info]                  ·gc.alloc.rate.norm:          50.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43.278 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   24290135.536 ±(99.9%) 727261.668 ops/s [Average]
[info]   (min, avg, max) = (24018705.594, 24290135.536, 24480489.941), stdev = 188867.546
[info]   CI (99.9%): [23562873.868, 25017397.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   765.052 ±(99.9%) 23.934 MB/sec [Average]
[info]   (min, avg, max) = (758.686, 765.052, 774.590), stdev = 6.216
[info]   CI (99.9%): [741.117, 788.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   49.569 ±(99.9%) 2.144 B/op [Average]
[info]   (min, avg, max) = (48.901, 49.569, 50.420), stdev = 0.557
[info]   CI (99.9%): [47.425, 51.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   664.350 ±(99.9%) 1.759 MB/sec [Average]
[info]   (min, avg, max) = (663.809, 664.350, 664.860), stdev = 0.457
[info]   CI (99.9%): [662.591, 666.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   43.045 ±(99.9%) 1.368 B/op [Average]
[info]   (min, avg, max) = (42.678, 43.045, 43.543), stdev = 0.355
[info]   CI (99.9%): [41.677, 44.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.005 ±(99.9%) 0.042 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.76% complete, ETA 01:49:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 406775.495 ops/s
[info] # Warmup Iteration   2: 9309226.376 ops/s
[info] # Warmup Iteration   3: 10706588.547 ops/s
[info] # Warmup Iteration   4: 10689842.648 ops/s
[info] # Warmup Iteration   5: 10722358.802 ops/s
[info] Iteration   1: 10589241.763 ops/s
[info]                  ·gc.alloc.rate:      328.540 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.829 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 10628812.352 ops/s
[info]                  ·gc.alloc.rate:               371.701 MB/sec
[info]                  ·gc.alloc.rate.norm:          55.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 97.703 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 10651245.624 ops/s
[info]                  ·gc.alloc.rate:      324.844 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 10653977.319 ops/s
[info]                  ·gc.alloc.rate:               344.406 MB/sec
[info]                  ·gc.alloc.rate.norm:          50.858 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 97.471 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 10611703.474 ops/s
[info]                  ·gc.alloc.rate:      323.639 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   10626996.106 ±(99.9%) 105077.059 ops/s [Average]
[info]   (min, avg, max) = (10589241.763, 10626996.106, 10653977.319), stdev = 27288.178
[info]   CI (99.9%): [10521919.048, 10732073.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   338.626 ±(99.9%) 78.056 MB/sec [Average]
[info]   (min, avg, max) = (323.639, 338.626, 371.701), stdev = 20.271
[info]   CI (99.9%): [260.570, 416.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   50.143 ±(99.9%) 11.438 B/op [Average]
[info]   (min, avg, max) = (48.000, 50.143, 55.029), stdev = 2.970
[info]   CI (99.9%): [38.705, 61.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   264.003 ±(99.9%) 1392.012 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 264.003, 660.067), stdev = 361.501
[info]   CI (99.9%): [≈ 0, 1656.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   39.035 ±(99.9%) 205.819 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39.035, 97.703), stdev = 53.451
[info]   CI (99.9%): [≈ 0, 244.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.00% complete, ETA 01:48:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5029401.623 ops/s
[info] # Warmup Iteration   2: 29306654.992 ops/s
[info] # Warmup Iteration   3: 33083428.678 ops/s
[info] # Warmup Iteration   4: 33218178.169 ops/s
[info] # Warmup Iteration   5: 33406550.398 ops/s
[info] Iteration   1: 35066518.747 ops/s
[info]                  ·gc.alloc.rate:                   1093.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 32638009.499 ops/s
[info]                  ·gc.alloc.rate:                   1035.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.925 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 34734888.757 ops/s
[info]                  ·gc.alloc.rate:               1111.604 MB/sec
[info]                  ·gc.alloc.rate.norm:          50.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30.335 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 34921592.364 ops/s
[info]                  ·gc.alloc.rate:                   1102.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 35102501.414 ops/s
[info]                  ·gc.alloc.rate:               1086.945 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.735 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30.030 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   34492702.156 ±(99.9%) 4031058.982 ops/s [Average]
[info]   (min, avg, max) = (32638009.499, 34492702.156, 35102501.414), stdev = 1046853.216
[info]   CI (99.9%): [30461643.174, 38523761.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1086.048 ±(99.9%) 114.569 MB/sec [Average]
[info]   (min, avg, max) = (1035.491, 1086.048, 1111.604), stdev = 29.753
[info]   CI (99.9%): [971.479, 1200.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   49.558 ±(99.9%) 2.512 B/op [Average]
[info]   (min, avg, max) = (48.735, 49.558, 50.364), stdev = 0.652
[info]   CI (99.9%): [47.046, 52.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.031 ±(99.9%) 1411.878 MB/sec [Average]
[info]   (min, avg, max) = (668.473, 937.031, 1339.487), stdev = 366.660
[info]   CI (99.9%): [≈ 0, 2348.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   43.046 ±(99.9%) 68.378 B/op [Average]
[info]   (min, avg, max) = (30.003, 43.046, 64.504), stdev = 17.758
[info]   CI (99.9%): [≈ 0, 111.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.034 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 2.191
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.24% complete, ETA 01:48:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4857442.438 ops/s
[info] # Warmup Iteration   2: 33284723.584 ops/s
[info] # Warmup Iteration   3: 38638648.319 ops/s
[info] # Warmup Iteration   4: 38485981.270 ops/s
[info] # Warmup Iteration   5: 38628579.284 ops/s
[info] Iteration   1: 38657603.119 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 38363019.103 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 38601095.042 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 38637163.353 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 38566505.180 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   38565077.159 ±(99.9%) 455143.253 ops/s [Average]
[info]   (min, avg, max) = (38363019.103, 38565077.159, 38657603.119), stdev = 118199.257
[info]   CI (99.9%): [38109933.906, 39020220.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.47% complete, ETA 01:48:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29704.785 ops/s
[info] # Warmup Iteration   2: 1020726.239 ops/s
[info] # Warmup Iteration   3: 2106213.726 ops/s
[info] # Warmup Iteration   4: 2555312.534 ops/s
[info] # Warmup Iteration   5: 2572531.907 ops/s
[info] Iteration   1: 2586686.025 ops/s
[info]                  ·gc.alloc.rate:                   3460.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              2105.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3341.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2033.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.114 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2509344.379 ops/s
[info]                  ·gc.alloc.rate:                   3370.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              2114.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3349.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2100.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2581867.285 ops/s
[info]                  ·gc.alloc.rate:               3506.274 MB/sec
[info]                  ·gc.alloc.rate.norm:          2137.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3361.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2049.290 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 2566278.965 ops/s
[info]                  ·gc.alloc.rate:                   3490.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              2140.215 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3374.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2069.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 2552476.620 ops/s
[info]                  ·gc.alloc.rate:                   3466.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              2137.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3384.367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2086.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   2559330.655 ±(99.9%) 119464.645 ops/s [Average]
[info]   (min, avg, max) = (2509344.379, 2559330.655, 2586686.025), stdev = 31024.589
[info]   CI (99.9%): [2439866.009, 2678795.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   3458.764 ±(99.9%) 202.200 MB/sec [Average]
[info]   (min, avg, max) = (3370.923, 3458.764, 3506.274), stdev = 52.511
[info]   CI (99.9%): [3256.564, 3660.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2126.834 ±(99.9%) 61.634 B/op [Average]
[info]   (min, avg, max) = (2105.251, 2126.834, 2140.215), stdev = 16.006
[info]   CI (99.9%): [2065.200, 2188.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   3362.471 ±(99.9%) 67.609 MB/sec [Average]
[info]   (min, avg, max) = (3341.411, 3362.471, 3384.367), stdev = 17.558
[info]   CI (99.9%): [3294.862, 3430.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2067.891 ±(99.9%) 105.770 B/op [Average]
[info]   (min, avg, max) = (2033.009, 2067.891, 2100.994), stdev = 27.468
[info]   CI (99.9%): [1962.121, 2173.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.286 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.187), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.036 ±(99.9%) 0.174 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.114), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4.71% complete, ETA 01:47:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52854.067 ops/s
[info] # Warmup Iteration   2: 330916.935 ops/s
[info] # Warmup Iteration   3: 349929.047 ops/s
[info] # Warmup Iteration   4: 375297.039 ops/s
[info] # Warmup Iteration   5: 377637.026 ops/s
[info] Iteration   1: 378451.191 ops/s
[info]                  ·gc.alloc.rate:                   2226.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              9257.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8319.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.290 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 371606.821 ops/s
[info]                  ·gc.alloc.rate:                   2220.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              9404.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11316.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.970 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 379690.970 ops/s
[info]                  ·gc.alloc.rate:                   2238.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              9274.217 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8324.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 375738.906 ops/s
[info]                  ·gc.alloc.rate:                   2242.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              9391.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8429.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 378844.387 ops/s
[info]                  ·gc.alloc.rate:               2260.766 MB/sec
[info]                  ·gc.alloc.rate.norm:          9390.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8383.704 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   376866.455 ±(99.9%) 12674.499 ops/s [Average]
[info]   (min, avg, max) = (371606.821, 376866.455, 379690.970), stdev = 3291.527
[info]   CI (99.9%): [364191.956, 389540.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2237.686 ±(99.9%) 59.965 MB/sec [Average]
[info]   (min, avg, max) = (2220.973, 2237.686, 2260.766), stdev = 15.573
[info]   CI (99.9%): [2177.721, 2297.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9343.542 ±(99.9%) 275.583 B/op [Average]
[info]   (min, avg, max) = (9257.115, 9343.542, 9404.610), stdev = 71.568
[info]   CI (99.9%): [9067.958, 9619.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2142.639 ±(99.9%) 1140.603 MB/sec [Average]
[info]   (min, avg, max) = (2000.487, 2142.639, 2672.390), stdev = 296.211
[info]   CI (99.9%): [1002.036, 3283.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8954.706 ±(99.9%) 5086.104 B/op [Average]
[info]   (min, avg, max) = (8319.239, 8954.706, 11316.116), stdev = 1320.845
[info]   CI (99.9%): [3868.602, 14040.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.212 ±(99.9%) 1.297 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.212, 0.791), stdev = 0.337
[info]   CI (99.9%): [≈ 0, 1.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.887 ±(99.9%) 5.394 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.887, 3.290), stdev = 1.401
[info]   CI (99.9%): [≈ 0, 6.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.94% complete, ETA 01:47:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30326.264 ops/s
[info] # Warmup Iteration   2: 487519.566 ops/s
[info] # Warmup Iteration   3: 728122.708 ops/s
[info] # Warmup Iteration   4: 912206.405 ops/s
[info] # Warmup Iteration   5: 919564.729 ops/s
[info] Iteration   1: 917856.683 ops/s
[info]                  ·gc.alloc.rate:               781.605 MB/sec
[info]                  ·gc.alloc.rate.norm:          1340.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1136.568 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 920729.827 ops/s
[info]                  ·gc.alloc.rate:               775.491 MB/sec
[info]                  ·gc.alloc.rate.norm:          1325.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1133.053 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 920237.754 ops/s
[info]                  ·gc.alloc.rate:               784.365 MB/sec
[info]                  ·gc.alloc.rate.norm:          1341.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1135.361 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 889817.462 ops/s
[info]                  ·gc.alloc.rate:               791.750 MB/sec
[info]                  ·gc.alloc.rate.norm:          1400.275 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2349.479 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 894670.632 ops/s
[info]                  ·gc.alloc.rate:               755.933 MB/sec
[info]                  ·gc.alloc.rate.norm:          1329.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1168.919 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   908662.472 ±(99.9%) 58240.519 ops/s [Average]
[info]   (min, avg, max) = (889817.462, 908662.472, 920729.827), stdev = 15124.878
[info]   CI (99.9%): [850421.953, 966902.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   777.829 ±(99.9%) 52.220 MB/sec [Average]
[info]   (min, avg, max) = (755.933, 777.829, 791.750), stdev = 13.561
[info]   CI (99.9%): [725.609, 830.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1347.364 ±(99.9%) 116.902 B/op [Average]
[info]   (min, avg, max) = (1325.362, 1347.364, 1400.275), stdev = 30.359
[info]   CI (99.9%): [1230.463, 1464.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   796.548 ±(99.9%) 1144.968 MB/sec [Average]
[info]   (min, avg, max) = (662.873, 796.548, 1328.453), stdev = 297.345
[info]   CI (99.9%): [≈ 0, 1941.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1384.676 ±(99.9%) 2077.588 B/op [Average]
[info]   (min, avg, max) = (1133.053, 1384.676, 2349.479), stdev = 539.543
[info]   CI (99.9%): [≈ 0, 3462.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.18% complete, ETA 01:47:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 703175.304 ops/s
[info] # Warmup Iteration   2: 1601320.425 ops/s
[info] # Warmup Iteration   3: 1703398.921 ops/s
[info] # Warmup Iteration   4: 1718669.807 ops/s
[info] # Warmup Iteration   5: 1714196.126 ops/s
[info] Iteration   1: 1663547.327 ops/s
[info]                  ·gc.alloc.rate:               1147.366 MB/sec
[info]                  ·gc.alloc.rate.norm:          1085.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1266.798 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 1664084.514 ops/s
[info]                  ·gc.alloc.rate:                   1125.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     633.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1702392.482 ops/s
[info]                  ·gc.alloc.rate:               1176.631 MB/sec
[info]                  ·gc.alloc.rate.norm:          1087.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1238.820 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 1707497.343 ops/s
[info]                  ·gc.alloc.rate:                   1174.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              1082.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1235.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.763 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1730943.880 ops/s
[info]                  ·gc.alloc.rate:                   1166.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              1060.994 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     609.916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.795 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1693693.109 ±(99.9%) 112911.442 ops/s [Average]
[info]   (min, avg, max) = (1663547.327, 1693693.109, 1730943.880), stdev = 29322.743
[info]   CI (99.9%): [1580781.667, 1806604.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1158.340 ±(99.9%) 82.788 MB/sec [Average]
[info]   (min, avg, max) = (1125.959, 1158.340, 1176.631), stdev = 21.500
[info]   CI (99.9%): [1075.552, 1241.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1076.333 ±(99.9%) 48.118 B/op [Average]
[info]   (min, avg, max) = (1060.994, 1076.333, 1087.788), stdev = 12.496
[info]   CI (99.9%): [1028.215, 1124.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1072.189 ±(99.9%) 1412.425 MB/sec [Average]
[info]   (min, avg, max) = (669.951, 1072.189, 1340.924), stdev = 366.802
[info]   CI (99.9%): [≈ 0, 2484.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   997.005 ±(99.9%) 1320.413 B/op [Average]
[info]   (min, avg, max) = (609.916, 997.005, 1266.798), stdev = 342.907
[info]   CI (99.9%): [≈ 0, 2317.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.783 ±(99.9%) 4.979 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 2.998), stdev = 1.293
[info]   CI (99.9%): [≈ 0, 5.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.719 ±(99.9%) 4.588 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.719, 2.763), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 8.000), stdev = 3.033
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5.41% complete, ETA 01:47:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10287.741 ops/s
[info] # Warmup Iteration   2: 150121.800 ops/s
[info] # Warmup Iteration   3: 181213.871 ops/s
[info] # Warmup Iteration   4: 216754.654 ops/s
[info] # Warmup Iteration   5: 214229.106 ops/s
[info] Iteration   1: 219704.203 ops/s
[info]                  ·gc.alloc.rate:                   4032.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              28879.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3978.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28498.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.532 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.974 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 219834.191 ops/s
[info]                  ·gc.alloc.rate:                   4074.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              29166.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3987.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28542.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.298 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 216093.014 ops/s
[info]                  ·gc.alloc.rate:                   3982.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              29003.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3341.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24334.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.152 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 217472.182 ops/s
[info]                  ·gc.alloc.rate:                   4035.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              29192.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4032.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29169.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.301 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 220077.148 ops/s
[info]                  ·gc.alloc.rate:                   4081.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              29188.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4049.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28961.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.149 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   218636.148 ±(99.9%) 6800.197 ops/s [Average]
[info]   (min, avg, max) = (216093.014, 218636.148, 220077.148), stdev = 1765.990
[info]   CI (99.9%): [211835.951, 225436.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4041.375 ±(99.9%) 152.402 MB/sec [Average]
[info]   (min, avg, max) = (3982.852, 4041.375, 4081.456), stdev = 39.578
[info]   CI (99.9%): [3888.973, 4193.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   29086.290 ±(99.9%) 536.909 B/op [Average]
[info]   (min, avg, max) = (28879.712, 29086.290, 29192.864), stdev = 139.434
[info]   CI (99.9%): [28549.381, 29623.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3878.053 ±(99.9%) 1160.268 MB/sec [Average]
[info]   (min, avg, max) = (3341.662, 3878.053, 4049.787), stdev = 301.318
[info]   CI (99.9%): [2717.785, 5038.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   27901.267 ±(99.9%) 7754.640 B/op [Average]
[info]   (min, avg, max) = (24334.431, 27901.267, 29169.161), stdev = 2013.855
[info]   CI (99.9%): [20146.627, 35655.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.331 ±(99.9%) 2.585 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.331, 1.532), stdev = 0.671
[info]   CI (99.9%): [≈ 0, 2.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.375 ±(99.9%) 18.513 B/op [Average]
[info]   (min, avg, max) = (0.149, 2.375, 10.974), stdev = 4.808
[info]   CI (99.9%): [≈ 0, 20.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.200, 9.000), stdev = 1.304
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5.65% complete, ETA 01:47:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97197.471 ops/s
[info] # Warmup Iteration   2: 387495.387 ops/s
[info] # Warmup Iteration   3: 429104.493 ops/s
[info] # Warmup Iteration   4: 465216.534 ops/s
[info] # Warmup Iteration   5: 469661.065 ops/s
[info] Iteration   1: 464983.541 ops/s
[info]                  ·gc.alloc.rate:                   1520.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4523.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.176 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 462578.411 ops/s
[info]                  ·gc.alloc.rate:                   1508.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              5131.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4548.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.177 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 451306.047 ops/s
[info]                  ·gc.alloc.rate:                   1494.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              5212.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6990.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.291 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 464003.493 ops/s
[info]                  ·gc.alloc.rate:                   1519.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              5153.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4521.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 465633.686 ops/s
[info]                  ·gc.alloc.rate:                   1523.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              5147.735 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4500.916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   461701.035 ±(99.9%) 22810.594 ops/s [Average]
[info]   (min, avg, max) = (451306.047, 461701.035, 465633.686), stdev = 5923.839
[info]   CI (99.9%): [438890.441, 484511.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1513.177 ±(99.9%) 45.178 MB/sec [Average]
[info]   (min, avg, max) = (1494.602, 1513.177, 1523.062), stdev = 11.733
[info]   CI (99.9%): [1467.999, 1558.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5157.830 ±(99.9%) 120.886 B/op [Average]
[info]   (min, avg, max) = (5131.266, 5157.830, 5212.041), stdev = 31.394
[info]   CI (99.9%): [5036.944, 5278.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1468.631 ±(99.9%) 1153.546 MB/sec [Average]
[info]   (min, avg, max) = (1331.687, 1468.631, 2004.504), stdev = 299.572
[info]   CI (99.9%): [315.085, 2622.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5016.883 ±(99.9%) 4248.213 B/op [Average]
[info]   (min, avg, max) = (4500.916, 5016.883, 6990.197), stdev = 1103.247
[info]   CI (99.9%): [768.670, 9265.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.914 ±(99.9%) 7.470 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.914, 4.385), stdev = 1.940
[info]   CI (99.9%): [≈ 0, 8.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.185 ±(99.9%) 26.058 B/op [Average]
[info]   (min, avg, max) = (0.141, 3.185, 15.291), stdev = 6.767
[info]   CI (99.9%): [≈ 0, 29.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 8.000), stdev = 3.033
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.88% complete, ETA 01:46:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 250247.280 ops/s
[info] # Warmup Iteration   2: 965266.186 ops/s
[info] # Warmup Iteration   3: 1018031.782 ops/s
[info] # Warmup Iteration   4: 1023163.983 ops/s
[info] # Warmup Iteration   5: 1019402.704 ops/s
[info] Iteration   1: 1019990.448 ops/s
[info]                  ·gc.alloc.rate:                   489.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              754.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1019.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1016172.245 ops/s
[info]                  ·gc.alloc.rate:      470.041 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1022653.791 ops/s
[info]                  ·gc.alloc.rate:               486.753 MB/sec
[info]                  ·gc.alloc.rate.norm:          749.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1016.422 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 1010746.005 ops/s
[info]                  ·gc.alloc.rate:               487.189 MB/sec
[info]                  ·gc.alloc.rate.norm:          758.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1031.573 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1023937.012 ops/s
[info]                  ·gc.alloc.rate:      473.626 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   1018699.900 ±(99.9%) 20591.010 ops/s [Average]
[info]   (min, avg, max) = (1010746.005, 1018699.900, 1023937.012), stdev = 5347.420
[info]   CI (99.9%): [998108.890, 1039290.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   481.341 ±(99.9%) 33.944 MB/sec [Average]
[info]   (min, avg, max) = (470.041, 481.341, 489.095), stdev = 8.815
[info]   CI (99.9%): [447.397, 515.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   743.668 ±(99.9%) 56.621 B/op [Average]
[info]   (min, avg, max) = (728.000, 743.668, 758.626), stdev = 14.704
[info]   CI (99.9%): [687.046, 800.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   396.697 ±(99.9%) 1394.451 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 396.697, 662.475), stdev = 362.134
[info]   CI (99.9%): [≈ 0, 1791.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   613.430 ±(99.9%) 2156.405 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 613.430, 1031.573), stdev = 560.012
[info]   CI (99.9%): [≈ 0, 2769.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.111 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.064), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.12% complete, ETA 01:46:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 799303.211 ops/s
[info] # Warmup Iteration   2: 2347535.950 ops/s
[info] # Warmup Iteration   3: 2713555.258 ops/s
[info] # Warmup Iteration   4: 2777090.861 ops/s
[info] # Warmup Iteration   5: 2779920.491 ops/s
[info] Iteration   1: 2792233.379 ops/s
[info]                  ·gc.alloc.rate:                   1331.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              750.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     753.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2673315.906 ops/s
[info]                  ·gc.alloc.rate:                   1269.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              747.292 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     787.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2729438.002 ops/s
[info]                  ·gc.alloc.rate:                   1302.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              751.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     771.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 2768908.741 ops/s
[info]                  ·gc.alloc.rate:                   1320.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              750.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     761.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.176 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.374 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2781048.520 ops/s
[info]                  ·gc.alloc.rate:               1326.240 MB/sec
[info]                  ·gc.alloc.rate.norm:          750.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 756.245 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2748988.910 ±(99.9%) 186700.088 ops/s [Average]
[info]   (min, avg, max) = (2673315.906, 2748988.910, 2792233.379), stdev = 48485.420
[info]   CI (99.9%): [2562288.821, 2935688.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1309.921 ±(99.9%) 96.859 MB/sec [Average]
[info]   (min, avg, max) = (1269.324, 1309.921, 1331.253), stdev = 25.154
[info]   CI (99.9%): [1213.061, 1406.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   749.891 ±(99.9%) 5.748 B/op [Average]
[info]   (min, avg, max) = (747.292, 749.891, 751.061), stdev = 1.493
[info]   CI (99.9%): [744.143, 755.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1337.590 ±(99.9%) 4.207 MB/sec [Average]
[info]   (min, avg, max) = (1336.297, 1337.590, 1338.942), stdev = 1.092
[info]   CI (99.9%): [1333.383, 1341.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   765.944 ±(99.9%) 53.706 B/op [Average]
[info]   (min, avg, max) = (753.205, 765.944, 787.500), stdev = 13.947
[info]   CI (99.9%): [712.238, 819.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.841 ±(99.9%) 7.180 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.841, 4.176), stdev = 1.865
[info]   CI (99.9%): [≈ 0, 8.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.478 ±(99.9%) 4.081 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.478, 2.374), stdev = 1.060
[info]   CI (99.9%): [≈ 0, 4.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 8.000), stdev = 2.302
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 6.35% complete, ETA 01:46:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1372725.550 ops/s
[info] # Warmup Iteration   2: 2596043.351 ops/s
[info] # Warmup Iteration   3: 2785075.793 ops/s
[info] # Warmup Iteration   4: 2790986.069 ops/s
[info] # Warmup Iteration   5: 2735911.227 ops/s
[info] Iteration   1: 2799624.802 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2802804.610 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2803191.107 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2805479.432 ops/s
[info]                  ·gc.alloc.rate:      0.073 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.041 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2806498.059 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2803519.602 ±(99.9%) 10278.538 ops/s [Average]
[info]   (min, avg, max) = (2799624.802, 2803519.602, 2806498.059), stdev = 2669.304
[info]   CI (99.9%): [2793241.064, 2813798.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.015 ±(99.9%) 0.125 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.015, 0.073), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.008 ±(99.9%) 0.070 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.008, 0.041), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6.59% complete, ETA 01:46:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77699.441 ops/s
[info] # Warmup Iteration   2: 472862.221 ops/s
[info] # Warmup Iteration   3: 613742.481 ops/s
[info] # Warmup Iteration   4: 623830.734 ops/s
[info] # Warmup Iteration   5: 699417.510 ops/s
[info] Iteration   1: 698423.183 ops/s
[info]                  ·gc.alloc.rate:               978.508 MB/sec
[info]                  ·gc.alloc.rate.norm:          2205.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2996.352 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 704965.231 ops/s
[info]                  ·gc.alloc.rate:               980.261 MB/sec
[info]                  ·gc.alloc.rate.norm:          2188.412 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1484.222 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 697239.720 ops/s
[info]                  ·gc.alloc.rate:               977.980 MB/sec
[info]                  ·gc.alloc.rate.norm:          2206.665 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1500.694 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 697074.192 ops/s
[info]                  ·gc.alloc.rate:               981.752 MB/sec
[info]                  ·gc.alloc.rate.norm:          2216.697 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3002.003 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   5: 704039.202 ops/s
[info]                  ·gc.alloc.rate:                   979.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              2190.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1487.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.885 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.685 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   700348.306 ±(99.9%) 14792.180 ops/s [Average]
[info]   (min, avg, max) = (697074.192, 700348.306, 704965.231), stdev = 3841.482
[info]   CI (99.9%): [685556.125, 715140.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   979.693 ±(99.9%) 5.768 MB/sec [Average]
[info]   (min, avg, max) = (977.980, 979.693, 981.752), stdev = 1.498
[info]   CI (99.9%): [973.925, 985.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2201.499 ±(99.9%) 45.499 B/op [Average]
[info]   (min, avg, max) = (2188.412, 2201.499, 2216.697), stdev = 11.816
[info]   CI (99.9%): [2156.000, 2246.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   930.923 ±(99.9%) 1401.437 MB/sec [Average]
[info]   (min, avg, max) = (664.831, 930.923, 1329.661), stdev = 363.949
[info]   CI (99.9%): [≈ 0, 2332.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2094.180 ±(99.9%) 3181.291 B/op [Average]
[info]   (min, avg, max) = (1484.222, 2094.180, 3002.003), stdev = 826.171
[info]   CI (99.9%): [≈ 0, 5275.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.777 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.777, 3.885), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.737 ±(99.9%) 14.955 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.737, 8.685), stdev = 3.884
[info]   CI (99.9%): [≈ 0, 16.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 10.000), stdev = 2.702
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6.82% complete, ETA 01:45:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3595.209 ops/s
[info] # Warmup Iteration   2: 15540.875 ops/s
[info] # Warmup Iteration   3: 15696.131 ops/s
[info] # Warmup Iteration   4: 21779.485 ops/s
[info] # Warmup Iteration   5: 21481.980 ops/s
[info] Iteration   1: 22023.126 ops/s
[info]                  ·gc.alloc.rate:                   1735.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              124039.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1947.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139129.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.975 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   2: 20032.661 ops/s
[info]                  ·gc.alloc.rate:                   1987.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              156120.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1949.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153097.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.981 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.076 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         27.000 ms
[info] Iteration   3: 20625.452 ops/s
[info]                  ·gc.alloc.rate:                   1975.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              150741.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1944.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148355.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.585 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 502.536 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         26.000 ms
[info] Iteration   4: 22267.606 ops/s
[info]                  ·gc.alloc.rate:                   1747.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              123496.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1293.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91406.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.986 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 493.613 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 22088.810 ops/s
[info]                  ·gc.alloc.rate:                   1748.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              124611.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1931.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137598.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.450 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   21407.531 ±(99.9%) 3891.219 ops/s [Average]
[info]   (min, avg, max) = (20032.661, 21407.531, 22267.606), stdev = 1010.537
[info]   CI (99.9%): [17516.312, 25298.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1839.092 ±(99.9%) 501.045 MB/sec [Average]
[info]   (min, avg, max) = (1735.969, 1839.092, 1987.497), stdev = 130.120
[info]   CI (99.9%): [1338.047, 2340.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   135801.692 ±(99.9%) 62418.573 B/op [Average]
[info]   (min, avg, max) = (123496.117, 135801.692, 156120.060), stdev = 16209.905
[info]   CI (99.9%): [73383.119, 198220.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1813.007 ±(99.9%) 1118.423 MB/sec [Average]
[info]   (min, avg, max) = (1293.582, 1813.007, 1949.015), stdev = 290.451
[info]   CI (99.9%): [694.583, 2931.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   133917.342 ±(99.9%) 94795.180 B/op [Average]
[info]   (min, avg, max) = (91406.713, 133917.342, 153097.225), stdev = 24618.007
[info]   CI (99.9%): [39122.162, 228712.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2.931 ±(99.9%) 13.638 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 2.931, 6.986), stdev = 3.542
[info]   CI (99.9%): [≈ 0, 16.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   216.130 ±(99.9%) 997.838 B/op [Average]
[info]   (min, avg, max) = (2.975, 216.130, 502.536), stdev = 259.135
[info]   CI (99.9%): [≈ 0, 1213.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   88.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 17.600, 27.000), stdev = 11.104
[info]   CI (99.9%): [88.000, 88.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.06% complete, ETA 01:45:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10653.752 ops/s
[info] # Warmup Iteration   2: 37597.653 ops/s
[info] # Warmup Iteration   3: 44438.252 ops/s
[info] # Warmup Iteration   4: 44296.462 ops/s
[info] # Warmup Iteration   5: 39643.556 ops/s
[info] Iteration   1: 42253.201 ops/s
[info]                  ·gc.alloc.rate:                   1153.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              42962.419 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49452.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110.080 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 42526.878 ops/s
[info]                  ·gc.alloc.rate:                   1157.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              42820.633 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24554.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.770 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 42244.391 ops/s
[info]                  ·gc.alloc.rate:                   1154.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              42996.743 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49438.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.873 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 40759.966 ops/s
[info]                  ·gc.alloc.rate:                        1126.156 MB/sec
[info]                  ·gc.alloc.rate.norm:                   43484.558 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.020 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0.758 B/op
[info]                  ·gc.churn.Metaspace:                   0.056 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              2.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:               1339.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          51717.455 B/op
[info]                  ·gc.churn.PS_Old_Gen:                  2.411 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:             93.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           5.072 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      195.828 B/op
[info]                  ·gc.count:                             4.000 counts
[info]                  ·gc.time:                              46.000 ms
[info] Iteration   5: 42543.540 ops/s
[info]                  ·gc.alloc.rate:               1153.407 MB/sec
[info]                  ·gc.alloc.rate.norm:          42665.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24496.100 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   42065.595 ±(99.9%) 2864.167 ops/s [Average]
[info]   (min, avg, max) = (40759.966, 42065.595, 42543.540), stdev = 743.815
[info]   CI (99.9%): [39201.428, 44929.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1148.870 ±(99.9%) 49.264 MB/sec [Average]
[info]   (min, avg, max) = (1126.156, 1148.870, 1157.217), stdev = 12.794
[info]   CI (99.9%): [1099.606, 1198.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   42985.874 ±(99.9%) 1186.236 B/op [Average]
[info]   (min, avg, max) = (42665.017, 42985.874, 43484.558), stdev = 308.062
[info]   CI (99.9%): [41799.638, 44172.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space":
[info]   0.004 ±(99.9%) 0.034 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm":
[info]   0.152 ±(99.9%) 1.305 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.152, 0.758), stdev = 0.339
[info]   CI (99.9%): [≈ 0, 1.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.Metaspace":
[info]   0.011 ±(99.9%) 0.097 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.056), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.Metaspace.norm":
[info]   0.434 ±(99.9%) 3.736 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.434, 2.170), stdev = 0.970
[info]   CI (99.9%): [≈ 0, 4.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1063.977 ±(99.9%) 1409.976 MB/sec [Average]
[info]   (min, avg, max) = (662.228, 1063.977, 1339.370), stdev = 366.166
[info]   CI (99.9%): [≈ 0, 2473.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   39931.651 ±(99.9%) 54274.019 B/op [Average]
[info]   (min, avg, max) = (24496.100, 39931.651, 51717.455), stdev = 14094.790
[info]   CI (99.9%): [≈ 0, 94205.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Old_Gen":
[info]   0.482 ±(99.9%) 4.152 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.482, 2.411), stdev = 1.078
[info]   CI (99.9%): [≈ 0, 4.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Old_Gen.norm":
[info]   18.621 ±(99.9%) 160.336 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.621, 93.107), stdev = 41.639
[info]   CI (99.9%): [≈ 0, 178.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.614 ±(99.9%) 8.912 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.614, 5.072), stdev = 2.314
[info]   CI (99.9%): [≈ 0, 10.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   61.510 ±(99.9%) 341.981 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 61.510, 195.828), stdev = 88.811
[info]   CI (99.9%): [≈ 0, 403.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   71.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 14.200, 46.000), stdev = 18.199
[info]   CI (99.9%): [71.000, 71.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.29% complete, ETA 01:45:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17042.504 ops/s
[info] # Warmup Iteration   2: 44353.424 ops/s
[info] # Warmup Iteration   3: 50384.503 ops/s
[info] # Warmup Iteration   4: 48989.118 ops/s
[info] # Warmup Iteration   5: 52134.025 ops/s
[info] Iteration   1: 50080.946 ops/s
[info]                  ·gc.alloc.rate:                   852.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              26796.465 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1289.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40518.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.196 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 51901.090 ops/s
[info]                  ·gc.alloc.rate:               708.313 MB/sec
[info]                  ·gc.alloc.rate.norm:          21478.777 B/op
[info]                  ·gc.churn.PS_Eden_Space:      645.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19563.965 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 50657.015 ops/s
[info]                  ·gc.alloc.rate:                   692.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              21504.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:          646.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20086.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.647 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 51796.905 ops/s
[info]                  ·gc.alloc.rate:               707.678 MB/sec
[info]                  ·gc.alloc.rate.norm:          21502.772 B/op
[info]                  ·gc.churn.PS_Eden_Space:      646.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19643.722 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 50672.326 ops/s
[info]                  ·gc.alloc.rate:               703.096 MB/sec
[info]                  ·gc.alloc.rate.norm:          21827.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:      648.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20141.448 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   51021.656 ±(99.9%) 3052.923 ops/s [Average]
[info]   (min, avg, max) = (50080.946, 51021.656, 51901.090), stdev = 792.834
[info]   CI (99.9%): [47968.733, 54074.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   732.800 ±(99.9%) 259.235 MB/sec [Average]
[info]   (min, avg, max) = (692.236, 732.800, 852.678), stdev = 67.322
[info]   CI (99.9%): [473.566, 992.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   22621.995 ±(99.9%) 9003.045 B/op [Average]
[info]   (min, avg, max) = (21478.777, 22621.995, 26796.465), stdev = 2338.062
[info]   CI (99.9%): [13618.950, 31625.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   775.270 ±(99.9%) 1106.525 MB/sec [Average]
[info]   (min, avg, max) = (645.167, 775.270, 1289.312), stdev = 287.361
[info]   CI (99.9%): [≈ 0, 1881.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   23990.780 ±(99.9%) 35590.433 B/op [Average]
[info]   (min, avg, max) = (19563.965, 23990.780, 40518.254), stdev = 9242.722
[info]   CI (99.9%): [≈ 0, 59581.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.387 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.229), stdev = 0.100
[info]   CI (99.9%): [≈ 0, 0.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.569 ±(99.9%) 12.162 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.569, 7.196), stdev = 3.158
[info]   CI (99.9%): [≈ 0, 13.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 10.000), stdev = 2.236
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7.53% complete, ETA 01:45:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2738.870 ops/s
[info] # Warmup Iteration   2: 18466.447 ops/s
[info] # Warmup Iteration   3: 40127.064 ops/s
[info] # Warmup Iteration   4: 40377.588 ops/s
[info] # Warmup Iteration   5: 37787.287 ops/s
[info] Iteration   1: 39063.984 ops/s
[info]                  ·gc.alloc.rate:                   1707.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              68785.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80423.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.677 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 39148.972 ops/s
[info]                  ·gc.alloc.rate:               1701.890 MB/sec
[info]                  ·gc.alloc.rate.norm:          68416.847 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53639.231 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 38977.072 ops/s
[info]                  ·gc.alloc.rate:                   1706.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              68886.274 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81017.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.231 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 38531.590 ops/s
[info]                  ·gc.alloc.rate:               1662.308 MB/sec
[info]                  ·gc.alloc.rate.norm:          67896.387 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54718.487 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 39142.701 ops/s
[info]                  ·gc.alloc.rate:                   1699.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              68350.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80882.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.837 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   38972.864 ±(99.9%) 987.189 ops/s [Average]
[info]   (min, avg, max) = (38531.590, 38972.864, 39148.972), stdev = 256.370
[info]   CI (99.9%): [37985.675, 39960.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1695.529 ±(99.9%) 72.460 MB/sec [Average]
[info]   (min, avg, max) = (1662.308, 1695.529, 1707.472), stdev = 18.818
[info]   CI (99.9%): [1623.069, 1767.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68467.040 ±(99.9%) 1514.323 B/op [Average]
[info]   (min, avg, max) = (67896.387, 68467.040, 68886.274), stdev = 393.265
[info]   CI (99.9%): [66952.717, 69981.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1737.686 ±(99.9%) 1408.706 MB/sec [Average]
[info]   (min, avg, max) = (1334.292, 1737.686, 2011.627), stdev = 365.836
[info]   CI (99.9%): [328.980, 3146.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   70136.171 ±(99.9%) 56117.852 B/op [Average]
[info]   (min, avg, max) = (53639.231, 70136.171, 81017.646), stdev = 14573.628
[info]   CI (99.9%): [14018.320, 126254.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.241 ±(99.9%) 1.946 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.241, 1.145), stdev = 0.505
[info]   CI (99.9%): [≈ 0, 2.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9.749 ±(99.9%) 78.576 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.749, 46.231), stdev = 20.406
[info]   CI (99.9%): [≈ 0, 88.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7.76% complete, ETA 01:44:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3882.525 ops/s
[info] # Warmup Iteration   2: 25276.280 ops/s
[info] # Warmup Iteration   3: 34937.371 ops/s
[info] # Warmup Iteration   4: 35335.991 ops/s
[info] # Warmup Iteration   5: 31069.023 ops/s
[info] Iteration   1: 36394.391 ops/s
[info]                  ·gc.alloc.rate:                   2378.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              102875.867 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1981.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85700.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.825 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.667 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 35454.249 ops/s
[info]                  ·gc.alloc.rate:                   2355.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              104525.292 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2645.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117428.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.545 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 36063.048 ops/s
[info]                  ·gc.alloc.rate:                   2361.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              103063.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86795.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.817 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 35956.717 ops/s
[info]                  ·gc.alloc.rate:                   2382.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              104266.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2658.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116354.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 137.034 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 36265.275 ops/s
[info]                  ·gc.alloc.rate:                   2372.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              102940.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86581.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.648 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   36026.736 ±(99.9%) 1396.400 ops/s [Average]
[info]   (min, avg, max) = (35454.249, 36026.736, 36394.391), stdev = 362.641
[info]   CI (99.9%): [34630.337, 37423.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2369.961 ±(99.9%) 43.953 MB/sec [Average]
[info]   (min, avg, max) = (2355.162, 2369.961, 2382.132), stdev = 11.414
[info]   CI (99.9%): [2326.008, 2413.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   103534.371 ±(99.9%) 3060.253 B/op [Average]
[info]   (min, avg, max) = (102875.867, 103534.371, 104525.292), stdev = 794.738
[info]   CI (99.9%): [100474.118, 106594.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2253.964 ±(99.9%) 1399.709 MB/sec [Average]
[info]   (min, avg, max) = (1981.730, 2253.964, 2658.296), stdev = 363.500
[info]   CI (99.9%): [854.255, 3653.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   98572.099 ±(99.9%) 64431.228 B/op [Average]
[info]   (min, avg, max) = (85700.923, 98572.099, 117428.447), stdev = 16732.585
[info]   CI (99.9%): [34140.871, 163003.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.883 ±(99.9%) 4.979 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.883, 3.131), stdev = 1.293
[info]   CI (99.9%): [≈ 0, 5.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   38.542 ±(99.9%) 217.970 B/op [Average]
[info]   (min, avg, max) = (1.817, 38.542, 137.034), stdev = 56.606
[info]   CI (99.9%): [≈ 0, 256.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 10.000, 13.000), stdev = 3.536
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.00% complete, ETA 01:44:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4791.002 ops/s
[info] # Warmup Iteration   2: 21208.982 ops/s
[info] # Warmup Iteration   3: 33598.786 ops/s
[info] # Warmup Iteration   4: 33851.975 ops/s
[info] # Warmup Iteration   5: 30379.987 ops/s
[info] Iteration   1: 32061.574 ops/s
[info]                  ·gc.alloc.rate:                   1978.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              97136.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97807.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.241 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 35117.935 ops/s
[info]                  ·gc.alloc.rate:                   1925.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              86266.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89294.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 295.342 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 35397.074 ops/s
[info]                  ·gc.alloc.rate:                   1943.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              86382.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88620.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.107 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 35365.218 ops/s
[info]                  ·gc.alloc.rate:                   1933.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              86049.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88814.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.853 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 35446.212 ops/s
[info]                  ·gc.alloc.rate:                   1927.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              85566.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88833.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.546 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   34677.602 ±(99.9%) 5652.292 ops/s [Average]
[info]   (min, avg, max) = (32061.574, 34677.602, 35446.212), stdev = 1467.882
[info]   CI (99.9%): [29025.311, 40329.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1941.600 ±(99.9%) 84.388 MB/sec [Average]
[info]   (min, avg, max) = (1925.328, 1941.600, 1978.789), stdev = 21.915
[info]   CI (99.9%): [1857.212, 2025.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   88280.371 ±(99.9%) 19102.088 B/op [Average]
[info]   (min, avg, max) = (85566.802, 88280.371, 97136.852), stdev = 4960.752
[info]   CI (99.9%): [69178.283, 107382.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1995.055 ±(99.9%) 13.207 MB/sec [Average]
[info]   (min, avg, max) = (1992.448, 1995.055, 2000.748), stdev = 3.430
[info]   CI (99.9%): [1981.848, 2008.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   90673.890 ±(99.9%) 15384.914 B/op [Average]
[info]   (min, avg, max) = (88620.400, 90673.890, 97807.360), stdev = 3995.413
[info]   CI (99.9%): [75288.976, 106058.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2.001 ±(99.9%) 10.975 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 2.001, 6.592), stdev = 2.850
[info]   CI (99.9%): [≈ 0, 12.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   92.218 ±(99.9%) 496.657 B/op [Average]
[info]   (min, avg, max) = (1.853, 92.218, 295.342), stdev = 128.980
[info]   CI (99.9%): [≈ 0, 588.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 10.000), stdev = 2.168
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.24% complete, ETA 01:44:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12123.651 ops/s
[info] # Warmup Iteration   2: 25765.597 ops/s
[info] # Warmup Iteration   3: 38815.849 ops/s
[info] # Warmup Iteration   4: 37443.144 ops/s
[info] # Warmup Iteration   5: 38341.375 ops/s
[info] Iteration   1: 37878.397 ops/s
[info]                  ·gc.alloc.rate:                   2120.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              88104.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1980.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82258.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172.122 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 40487.612 ops/s
[info]                  ·gc.alloc.rate:                   2089.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              81224.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1979.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76932.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.787 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.221 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 40754.449 ops/s
[info]                  ·gc.alloc.rate:                   2112.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              81563.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1971.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76147.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.804 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 40685.793 ops/s
[info]                  ·gc.alloc.rate:                   2091.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              80893.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1971.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76271.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.637 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 40745.802 ops/s
[info]                  ·gc.alloc.rate:                   2090.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              80721.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1976.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76351.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.804 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   40110.411 ±(99.9%) 4822.437 ops/s [Average]
[info]   (min, avg, max) = (37878.397, 40110.411, 40754.449), stdev = 1252.372
[info]   CI (99.9%): [35287.973, 44932.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   2100.744 ±(99.9%) 56.579 MB/sec [Average]
[info]   (min, avg, max) = (2089.487, 2100.744, 2120.830), stdev = 14.693
[info]   CI (99.9%): [2044.165, 2157.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   82501.189 ±(99.9%) 12124.288 B/op [Average]
[info]   (min, avg, max) = (80721.669, 82501.189, 88104.035), stdev = 3148.639
[info]   CI (99.9%): [70376.901, 94625.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1975.954 ±(99.9%) 15.226 MB/sec [Average]
[info]   (min, avg, max) = (1971.747, 1975.954, 1980.120), stdev = 3.954
[info]   CI (99.9%): [1960.728, 1991.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   77592.522 ±(99.9%) 10111.020 B/op [Average]
[info]   (min, avg, max) = (76147.816, 77592.522, 82258.621), stdev = 2625.800
[info]   CI (99.9%): [67481.502, 87703.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1.624 ±(99.9%) 8.248 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.624, 4.143), stdev = 2.142
[info]   CI (99.9%): [≈ 0, 9.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   65.317 ±(99.9%) 333.482 B/op [Average]
[info]   (min, avg, max) = (0.804, 65.317, 172.122), stdev = 86.604
[info]   CI (99.9%): [≈ 0, 398.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 15.000), stdev = 4.722
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 8.47% complete, ETA 01:44:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10996.999 ops/s
[info] # Warmup Iteration   2: 27253.898 ops/s
[info] # Warmup Iteration   3: 39678.886 ops/s
[info] # Warmup Iteration   4: 39356.857 ops/s
[info] # Warmup Iteration   5: 38398.653 ops/s
[info] Iteration   1: 39817.742 ops/s
[info]                  ·gc.alloc.rate:                   2144.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              84753.303 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1977.702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78172.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.111 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 162.503 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 40498.806 ops/s
[info]                  ·gc.alloc.rate:                   2006.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              77970.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1975.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76782.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 136.251 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 40418.184 ops/s
[info]                  ·gc.alloc.rate:                   2015.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              78475.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1969.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76706.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.621 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 41021.640 ops/s
[info]                  ·gc.alloc.rate:                   2028.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              77816.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1969.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75546.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.597 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 41779.192 ops/s
[info]                  ·gc.alloc.rate:                   2060.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              77619.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1974.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74392.810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.353 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   40707.113 ±(99.9%) 2833.648 ops/s [Average]
[info]   (min, avg, max) = (39817.742, 40707.113, 41779.192), stdev = 735.889
[info]   CI (99.9%): [37873.465, 43540.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   2050.901 ±(99.9%) 215.752 MB/sec [Average]
[info]   (min, avg, max) = (2006.363, 2050.901, 2144.189), stdev = 56.030
[info]   CI (99.9%): [1835.149, 2266.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   79326.954 ±(99.9%) 11744.204 B/op [Average]
[info]   (min, avg, max) = (77619.327, 79326.954, 84753.303), stdev = 3049.933
[info]   CI (99.9%): [67582.750, 91071.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1973.443 ±(99.9%) 14.518 MB/sec [Average]
[info]   (min, avg, max) = (1969.126, 1973.443, 1977.702), stdev = 3.770
[info]   CI (99.9%): [1958.925, 1987.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   76320.192 ±(99.9%) 5482.295 B/op [Average]
[info]   (min, avg, max) = (74392.810, 76320.192, 78172.559), stdev = 1423.735
[info]   CI (99.9%): [70837.897, 81802.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1.553 ±(99.9%) 7.973 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.553, 4.111), stdev = 2.071
[info]   CI (99.9%): [≈ 0, 9.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   60.865 ±(99.9%) 313.181 B/op [Average]
[info]   (min, avg, max) = (1.597, 60.865, 162.503), stdev = 81.332
[info]   CI (99.9%): [≈ 0, 374.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.000, 17.000), stdev = 5.385
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8.71% complete, ETA 01:43:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1036.544 ops/s
[info] # Warmup Iteration   2: 5368.796 ops/s
[info] # Warmup Iteration   3: 9126.508 ops/s
[info] # Warmup Iteration   4: 9630.246 ops/s
[info] # Warmup Iteration   5: 9655.702 ops/s
[info] Iteration   1: 9656.491 ops/s
[info]                  ·gc.alloc.rate:                   1322.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              215643.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217227.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.090 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 9553.416 ops/s
[info]                  ·gc.alloc.rate:                   1305.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              215001.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219701.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.427 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 9611.213 ops/s
[info]                  ·gc.alloc.rate:                   1308.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              213841.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217332.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 646.359 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 9624.338 ops/s
[info]                  ·gc.alloc.rate:                   1286.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              210429.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109138.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.268 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 9652.559 ops/s
[info]                  ·gc.alloc.rate:                   1304.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              212627.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216991.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81.453 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   9619.603 ±(99.9%) 160.164 ops/s [Average]
[info]   (min, avg, max) = (9553.416, 9619.603, 9656.491), stdev = 41.594
[info]   CI (99.9%): [9459.439, 9779.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1305.566 ±(99.9%) 49.649 MB/sec [Average]
[info]   (min, avg, max) = (1286.822, 1305.566, 1322.983), stdev = 12.894
[info]   CI (99.9%): [1255.917, 1355.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   213508.645 ±(99.9%) 7974.004 B/op [Average]
[info]   (min, avg, max) = (210429.571, 213508.645, 215643.270), stdev = 2070.824
[info]   CI (99.9%): [205534.641, 221482.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1198.959 ±(99.9%) 1144.229 MB/sec [Average]
[info]   (min, avg, max) = (667.403, 1198.959, 1333.875), stdev = 297.153
[info]   CI (99.9%): [54.730, 2343.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   196078.231 ±(99.9%) 187192.723 B/op [Average]
[info]   (min, avg, max) = (109138.169, 196078.231, 219701.638), stdev = 48613.356
[info]   CI (99.9%): [8885.507, 383270.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.980 ±(99.9%) 6.453 MB/sec [Average]
[info]   (min, avg, max) = (0.031, 0.980, 3.955), stdev = 1.676
[info]   CI (99.9%): [≈ 0, 7.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   160.119 ±(99.9%) 1054.621 B/op [Average]
[info]   (min, avg, max) = (5.090, 160.119, 646.359), stdev = 273.882
[info]   CI (99.9%): [≈ 0, 1214.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 10.000), stdev = 4.123
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8.94% complete, ETA 01:43:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2247.977 ops/s
[info] # Warmup Iteration   2: 13924.185 ops/s
[info] # Warmup Iteration   3: 17917.535 ops/s
[info] # Warmup Iteration   4: 22809.442 ops/s
[info] # Warmup Iteration   5: 22638.322 ops/s
[info] Iteration   1: 22943.482 ops/s
[info]                  ·gc.alloc.rate:                   1919.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              131662.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1927.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132237.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         28.000 ms
[info] Iteration   2: 21921.582 ops/s
[info]                  ·gc.alloc.rate:                   1957.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              140556.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1925.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138263.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.806 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         33.000 ms
[info] Iteration   3: 21385.371 ops/s
[info]                  ·gc.alloc.rate:                   2004.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              147491.380 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1925.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141679.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      8.107 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 596.602 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         29.000 ms
[info] Iteration   4: 22434.429 ops/s
[info]                  ·gc.alloc.rate:                   1951.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              136876.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1921.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134822.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.557 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 459.971 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 22503.112 ops/s
[info]                  ·gc.alloc.rate:               1956.813 MB/sec
[info]                  ·gc.alloc.rate.norm:          136831.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1912.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 133750.742 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   22237.595 ±(99.9%) 2305.302 ops/s [Average]
[info]   (min, avg, max) = (21385.371, 22237.595, 22943.482), stdev = 598.680
[info]   CI (99.9%): [19932.293, 24542.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1957.827 ±(99.9%) 116.716 MB/sec [Average]
[info]   (min, avg, max) = (1919.264, 1957.827, 2004.112), stdev = 30.311
[info]   CI (99.9%): [1841.110, 2074.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   138683.617 ±(99.9%) 22541.263 B/op [Average]
[info]   (min, avg, max) = (131662.655, 138683.617, 147491.380), stdev = 5853.895
[info]   CI (99.9%): [116142.353, 161224.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1922.654 ±(99.9%) 22.780 MB/sec [Average]
[info]   (min, avg, max) = (1912.750, 1922.654, 1927.639), stdev = 5.916
[info]   CI (99.9%): [1899.874, 1945.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   136150.708 ±(99.9%) 14646.855 B/op [Average]
[info]   (min, avg, max) = (132237.186, 136150.708, 141679.585), stdev = 3803.742
[info]   CI (99.9%): [121503.854, 150797.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3.008 ±(99.9%) 15.357 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 3.008, 8.107), stdev = 3.988
[info]   CI (99.9%): [≈ 0, 18.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   216.688 ±(99.9%) 1111.789 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 216.688, 596.602), stdev = 288.728
[info]   CI (99.9%): [≈ 0, 1328.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   105.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 21.000, 33.000), stdev = 12.590
[info]   CI (99.9%): [105.000, 105.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.18% complete, ETA 01:43:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16637.324 ops/s
[info] # Warmup Iteration   2: 43390.146 ops/s
[info] # Warmup Iteration   3: 54464.560 ops/s
[info] # Warmup Iteration   4: 48198.028 ops/s
[info] # Warmup Iteration   5: 52125.472 ops/s
[info] Iteration   1: 49195.116 ops/s
[info]                  ·gc.alloc.rate:                   1436.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              45972.831 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42111.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      8.190 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 262.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 50623.306 ops/s
[info]                  ·gc.alloc.rate:                   1431.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              44501.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40674.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.365 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 49560.377 ops/s
[info]                  ·gc.alloc.rate:                   1397.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              44380.809 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1310.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41631.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 50875.401 ops/s
[info]                  ·gc.alloc.rate:                   1432.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              44327.568 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40678.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.679 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 50697.720 ops/s
[info]                  ·gc.alloc.rate:                   1443.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              44805.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1980.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61472.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.646 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   50190.384 ±(99.9%) 2920.865 ops/s [Average]
[info]   (min, avg, max) = (49195.116, 50190.384, 50875.401), stdev = 758.539
[info]   CI (99.9%): [47269.520, 53111.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1428.469 ±(99.9%) 68.928 MB/sec [Average]
[info]   (min, avg, max) = (1397.564, 1428.469, 1443.502), stdev = 17.900
[info]   CI (99.9%): [1359.541, 1497.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44797.549 ±(99.9%) 2628.475 B/op [Average]
[info]   (min, avg, max) = (44327.568, 44797.549, 45972.831), stdev = 682.607
[info]   CI (99.9%): [42169.074, 47426.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1446.203 ±(99.9%) 1150.089 MB/sec [Average]
[info]   (min, avg, max) = (1308.329, 1446.203, 1980.459), stdev = 298.674
[info]   CI (99.9%): [296.114, 2596.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   45313.825 ±(99.9%) 34864.515 B/op [Average]
[info]   (min, avg, max) = (40674.750, 45313.825, 61472.313), stdev = 9054.204
[info]   CI (99.9%): [10449.310, 80178.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.655 ±(99.9%) 14.065 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 1.655, 8.190), stdev = 3.653
[info]   CI (99.9%): [≈ 0, 15.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   52.947 ±(99.9%) 450.023 B/op [Average]
[info]   (min, avg, max) = (0.036, 52.947, 262.008), stdev = 116.869
[info]   CI (99.9%): [≈ 0, 502.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 12.000), stdev = 2.775
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.41% complete, ETA 01:43:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33770.533 ops/s
[info] # Warmup Iteration   2: 53973.277 ops/s
[info] # Warmup Iteration   3: 60229.632 ops/s
[info] # Warmup Iteration   4: 65058.081 ops/s
[info] # Warmup Iteration   5: 65335.917 ops/s
[info] Iteration   1: 65289.771 ops/s
[info]                  ·gc.alloc.rate:                   738.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              17807.218 B/op
[info]                  ·gc.churn.PS_Eden_Space:          632.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15246.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.502 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 64319.540 ops/s
[info]                  ·gc.alloc.rate:               764.549 MB/sec
[info]                  ·gc.alloc.rate.norm:          18701.637 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1270.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31068.194 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 65214.392 ops/s
[info]                  ·gc.alloc.rate:               738.152 MB/sec
[info]                  ·gc.alloc.rate.norm:          17813.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:      637.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15393.519 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 65242.285 ops/s
[info]                  ·gc.alloc.rate:               748.634 MB/sec
[info]                  ·gc.alloc.rate.norm:          18058.502 B/op
[info]                  ·gc.churn.PS_Eden_Space:      637.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15387.150 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 64884.945 ops/s
[info]                  ·gc.alloc.rate:               744.857 MB/sec
[info]                  ·gc.alloc.rate.norm:          18065.845 B/op
[info]                  ·gc.churn.PS_Eden_Space:      641.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15559.953 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   64990.187 ±(99.9%) 1569.362 ops/s [Average]
[info]   (min, avg, max) = (64319.540, 64990.187, 65289.771), stdev = 407.558
[info]   CI (99.9%): [63420.824, 66559.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   746.979 ±(99.9%) 41.399 MB/sec [Average]
[info]   (min, avg, max) = (738.152, 746.979, 764.549), stdev = 10.751
[info]   CI (99.9%): [705.581, 788.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   18089.384 ±(99.9%) 1404.260 B/op [Average]
[info]   (min, avg, max) = (17807.218, 18089.384, 18701.637), stdev = 364.682
[info]   CI (99.9%): [16685.124, 19493.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   763.980 ±(99.9%) 1089.557 MB/sec [Average]
[info]   (min, avg, max) = (632.493, 763.980, 1270.112), stdev = 282.954
[info]   CI (99.9%): [≈ 0, 1853.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   18531.144 ±(99.9%) 26990.323 B/op [Average]
[info]   (min, avg, max) = (15246.905, 18531.144, 31068.194), stdev = 7009.301
[info]   CI (99.9%): [≈ 0, 45521.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.100 ±(99.9%) 0.864 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.100, 0.502), stdev = 0.224
[info]   CI (99.9%): [≈ 0, 0.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 9.65% complete, ETA 01:42:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2665.903 ops/s
[info] # Warmup Iteration   2: 26306.662 ops/s
[info] # Warmup Iteration   3: 42759.096 ops/s
[info] # Warmup Iteration   4: 42173.171 ops/s
[info] # Warmup Iteration   5: 44621.191 ops/s
[info] Iteration   1: 42052.978 ops/s
[info]                  ·gc.alloc.rate:                   2422.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              90654.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99966.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.057 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 42485.916 ops/s
[info]                  ·gc.alloc.rate:                   2419.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              89617.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74203.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.771 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 42363.700 ops/s
[info]                  ·gc.alloc.rate:                   2434.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              90429.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99400.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.547 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 41892.036 ops/s
[info]                  ·gc.alloc.rate:                   2390.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              89783.656 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75540.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.910 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 42741.320 ops/s
[info]                  ·gc.alloc.rate:                   2451.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              90273.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99002.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.767 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   42307.190 ±(99.9%) 1306.642 ops/s [Average]
[info]   (min, avg, max) = (41892.036, 42307.190, 42741.320), stdev = 339.331
[info]   CI (99.9%): [41000.548, 43613.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2423.743 ±(99.9%) 87.058 MB/sec [Average]
[info]   (min, avg, max) = (2390.359, 2423.743, 2451.962), stdev = 22.609
[info]   CI (99.9%): [2336.685, 2510.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   90151.775 ±(99.9%) 1684.269 B/op [Average]
[info]   (min, avg, max) = (89617.939, 90151.775, 90654.756), stdev = 437.399
[info]   CI (99.9%): [88467.506, 91836.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2410.145 ±(99.9%) 1416.188 MB/sec [Average]
[info]   (min, avg, max) = (2003.534, 2410.145, 2689.061), stdev = 367.780
[info]   CI (99.9%): [993.957, 3826.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   89622.655 ±(99.9%) 51899.617 B/op [Average]
[info]   (min, avg, max) = (74203.804, 89622.655, 99966.472), stdev = 13478.166
[info]   CI (99.9%): [37723.038, 141522.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.225 ±(99.9%) 1.538 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.225, 0.937), stdev = 0.399
[info]   CI (99.9%): [≈ 0, 1.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.410 ±(99.9%) 57.573 B/op [Average]
[info]   (min, avg, max) = (0.767, 8.410, 35.057), stdev = 14.951
[info]   CI (99.9%): [≈ 0, 65.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 8.000), stdev = 1.304
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.88% complete, ETA 01:42:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7542.023 ops/s
[info] # Warmup Iteration   2: 23541.022 ops/s
[info] # Warmup Iteration   3: 39124.746 ops/s
[info] # Warmup Iteration   4: 38134.953 ops/s
[info] # Warmup Iteration   5: 42062.090 ops/s
[info] Iteration   1: 43308.695 ops/s
[info]                  ·gc.alloc.rate:                   1873.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              68034.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72598.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.755 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 43352.069 ops/s
[info]                  ·gc.alloc.rate:                   1877.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              68160.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48584.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.405 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 44127.279 ops/s
[info]                  ·gc.alloc.rate:                   1913.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              68235.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71740.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.970 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 44229.837 ops/s
[info]                  ·gc.alloc.rate:               1911.865 MB/sec
[info]                  ·gc.alloc.rate.norm:          68024.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71691.528 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 44180.423 ops/s
[info]                  ·gc.alloc.rate:                   1921.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              68437.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71959.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.225 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   43839.661 ±(99.9%) 1796.596 ops/s [Average]
[info]   (min, avg, max) = (43308.695, 43839.661, 44229.837), stdev = 466.570
[info]   CI (99.9%): [42043.065, 45636.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1899.506 ±(99.9%) 84.982 MB/sec [Average]
[info]   (min, avg, max) = (1873.877, 1899.506, 1921.113), stdev = 22.070
[info]   CI (99.9%): [1814.524, 1984.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   68178.330 ±(99.9%) 654.428 B/op [Average]
[info]   (min, avg, max) = (68024.018, 68178.330, 68437.820), stdev = 169.953
[info]   CI (99.9%): [67523.902, 68832.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1876.845 ±(99.9%) 1159.660 MB/sec [Average]
[info]   (min, avg, max) = (1338.281, 1876.845, 2019.962), stdev = 301.160
[info]   CI (99.9%): [717.185, 3036.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   67314.800 ±(99.9%) 40341.703 B/op [Average]
[info]   (min, avg, max) = (48584.819, 67314.800, 72598.368), stdev = 10476.612
[info]   CI (99.9%): [26973.096, 107656.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.146 ±(99.9%) 0.905 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.146, 0.562), stdev = 0.235
[info]   CI (99.9%): [≈ 0, 1.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.271 ±(99.9%) 32.888 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.271, 20.405), stdev = 8.541
[info]   CI (99.9%): [≈ 0, 38.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.12% complete, ETA 01:42:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15955.205 ops/s
[info] # Warmup Iteration   2: 46001.674 ops/s
[info] # Warmup Iteration   3: 51266.270 ops/s
[info] # Warmup Iteration   4: 52131.762 ops/s
[info] # Warmup Iteration   5: 54808.873 ops/s
[info] Iteration   1: 54554.150 ops/s
[info]                  ·gc.alloc.rate:                   1731.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              49940.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57922.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85.879 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 55402.052 ops/s
[info]                  ·gc.alloc.rate:                   1722.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              48921.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37998.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.073 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 55375.596 ops/s
[info]                  ·gc.alloc.rate:                   1746.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              49602.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56894.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.958 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 56469.073 ops/s
[info]                  ·gc.alloc.rate:                   1750.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              48773.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37169.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.580 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 56636.758 ops/s
[info]                  ·gc.alloc.rate:               1768.123 MB/sec
[info]                  ·gc.alloc.rate.norm:          49134.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55609.108 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   55687.526 ±(99.9%) 3320.941 ops/s [Average]
[info]   (min, avg, max) = (54554.150, 55687.526, 56636.758), stdev = 862.438
[info]   CI (99.9%): [52366.585, 59008.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1743.636 ±(99.9%) 68.494 MB/sec [Average]
[info]   (min, avg, max) = (1722.263, 1743.636, 1768.123), stdev = 17.788
[info]   CI (99.9%): [1675.142, 1812.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   49274.517 ±(99.9%) 1872.285 B/op [Average]
[info]   (min, avg, max) = (48773.638, 49274.517, 49940.079), stdev = 486.226
[info]   CI (99.9%): [47402.232, 51146.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1736.701 ±(99.9%) 1408.970 MB/sec [Average]
[info]   (min, avg, max) = (1334.051, 1736.701, 2007.865), stdev = 365.905
[info]   CI (99.9%): [327.731, 3145.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   49118.682 ±(99.9%) 40684.429 B/op [Average]
[info]   (min, avg, max) = (37169.325, 49118.682, 57922.183), stdev = 10565.617
[info]   CI (99.9%): [8434.253, 89803.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.874 ±(99.9%) 4.970 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.874, 2.977), stdev = 1.291
[info]   CI (99.9%): [≈ 0, 5.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   25.098 ±(99.9%) 143.252 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25.098, 85.879), stdev = 37.202
[info]   CI (99.9%): [≈ 0, 168.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 14.000), stdev = 4.712
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 10.35% complete, ETA 01:42:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21060.889 ops/s
[info] # Warmup Iteration   2: 45336.610 ops/s
[info] # Warmup Iteration   3: 54919.607 ops/s
[info] # Warmup Iteration   4: 56924.204 ops/s
[info] # Warmup Iteration   5: 56604.760 ops/s
[info] Iteration   1: 57265.553 ops/s
[info]                  ·gc.alloc.rate:                   1695.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              46598.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36652.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.572 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 55426.710 ops/s
[info]                  ·gc.alloc.rate:                   1655.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              46989.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56838.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.886 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110.312 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 57429.040 ops/s
[info]                  ·gc.alloc.rate:                   1680.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              46055.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36511.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.852 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 57445.402 ops/s
[info]                  ·gc.alloc.rate:                   1706.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              46754.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54697.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.852 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 57759.240 ops/s
[info]                  ·gc.alloc.rate:               1701.487 MB/sec
[info]                  ·gc.alloc.rate.norm:          46362.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36302.377 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   57065.189 ±(99.9%) 3593.404 ops/s [Average]
[info]   (min, avg, max) = (55426.710, 57065.189, 57759.240), stdev = 933.196
[info]   CI (99.9%): [53471.785, 60658.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1687.849 ±(99.9%) 79.829 MB/sec [Average]
[info]   (min, avg, max) = (1655.107, 1687.849, 1706.556), stdev = 20.731
[info]   CI (99.9%): [1608.020, 1767.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   46551.924 ±(99.9%) 1383.683 B/op [Average]
[info]   (min, avg, max) = (46055.781, 46551.924, 46989.369), stdev = 359.338
[info]   CI (99.9%): [45168.241, 47935.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1599.354 ±(99.9%) 1405.753 MB/sec [Average]
[info]   (min, avg, max) = (1332.290, 1599.354, 2002.033), stdev = 365.070
[info]   CI (99.9%): [193.601, 3005.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   44200.566 ±(99.9%) 40768.597 B/op [Average]
[info]   (min, avg, max) = (36302.377, 44200.566, 56838.770), stdev = 10587.475
[info]   CI (99.9%): [3431.969, 84969.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.823 ±(99.9%) 6.595 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.823, 3.886), stdev = 1.713
[info]   CI (99.9%): [≈ 0, 7.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   23.318 ±(99.9%) 187.328 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.318, 110.312), stdev = 48.648
[info]   CI (99.9%): [≈ 0, 210.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 8.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10.59% complete, ETA 01:41:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63821.470 ops/s
[info] # Warmup Iteration   2: 359051.528 ops/s
[info] # Warmup Iteration   3: 385746.342 ops/s
[info] # Warmup Iteration   4: 437805.324 ops/s
[info] # Warmup Iteration   5: 434757.805 ops/s
[info] Iteration   1: 436251.260 ops/s
[info]                  ·gc.alloc.rate:                   2358.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              8506.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7214.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.229 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 439359.634 ops/s
[info]                  ·gc.alloc.rate:                   2392.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              8568.422 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9554.810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.768 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 441923.096 ops/s
[info]                  ·gc.alloc.rate:                   2387.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              8500.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7117.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 441380.848 ops/s
[info]                  ·gc.alloc.rate:               2411.027 MB/sec
[info]                  ·gc.alloc.rate.norm:          8596.225 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2665.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9504.869 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 441773.534 ops/s
[info]                  ·gc.alloc.rate:               2413.301 MB/sec
[info]                  ·gc.alloc.rate.norm:          8596.583 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7134.841 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   440137.674 ±(99.9%) 9257.338 ops/s [Average]
[info]   (min, avg, max) = (436251.260, 440137.674, 441923.096), stdev = 2404.101
[info]   CI (99.9%): [430880.336, 449395.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2392.479 ±(99.9%) 85.570 MB/sec [Average]
[info]   (min, avg, max) = (2358.271, 2392.479, 2413.301), stdev = 22.222
[info]   CI (99.9%): [2306.909, 2478.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8553.753 ±(99.9%) 181.324 B/op [Average]
[info]   (min, avg, max) = (8500.672, 8553.753, 8596.583), stdev = 47.089
[info]   CI (99.9%): [8372.429, 8735.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2267.118 ±(99.9%) 1405.431 MB/sec [Average]
[info]   (min, avg, max) = (1998.772, 2267.118, 2667.993), stdev = 364.986
[info]   CI (99.9%): [861.687, 3672.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8105.282 ±(99.9%) 5009.965 B/op [Average]
[info]   (min, avg, max) = (7117.402, 8105.282, 9554.810), stdev = 1301.072
[info]   CI (99.9%): [3095.317, 13115.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.785 ±(99.9%) 5.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.785, 3.007), stdev = 1.300
[info]   CI (99.9%): [≈ 0, 5.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.814 ±(99.9%) 17.935 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.814, 10.768), stdev = 4.658
[info]   CI (99.9%): [≈ 0, 20.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10.82% complete, ETA 01:41:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.793 ops/s
[info] # Warmup Iteration   2: 1462157.934 ops/s
[info] # Warmup Iteration   3: 1771856.958 ops/s
[info] # Warmup Iteration   4: 1910596.832 ops/s
[info] # Warmup Iteration   5: 1917243.239 ops/s
[info] Iteration   1: 1911519.614 ops/s
[info]                  ·gc.alloc.rate:               621.347 MB/sec
[info]                  ·gc.alloc.rate.norm:          511.584 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 546.288 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1849768.859 ops/s
[info]                  ·gc.alloc.rate:               595.509 MB/sec
[info]                  ·gc.alloc.rate.norm:          506.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 565.091 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1929770.174 ops/s
[info]                  ·gc.alloc.rate:      608.425 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.198 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1855625.606 ops/s
[info]                  ·gc.alloc.rate:               598.771 MB/sec
[info]                  ·gc.alloc.rate.norm:          507.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 563.297 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1851585.060 ops/s
[info]                  ·gc.alloc.rate:                   604.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              514.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     565.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1879653.863 ±(99.9%) 146443.475 ops/s [Average]
[info]   (min, avg, max) = (1849768.859, 1879653.863, 1929770.174), stdev = 38030.905
[info]   CI (99.9%): [1733210.388, 2026097.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   605.770 ±(99.9%) 38.743 MB/sec [Average]
[info]   (min, avg, max) = (595.509, 605.770, 621.347), stdev = 10.061
[info]   CI (99.9%): [567.027, 644.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   507.261 ±(99.9%) 26.416 B/op [Average]
[info]   (min, avg, max) = (496.198, 507.261, 514.068), stdev = 6.860
[info]   CI (99.9%): [480.846, 533.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   531.345 ±(99.9%) 1143.761 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.345, 664.826), stdev = 297.031
[info]   CI (99.9%): [≈ 0, 1675.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   447.954 ±(99.9%) 964.736 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 447.954, 565.093), stdev = 250.539
[info]   CI (99.9%): [≈ 0, 1412.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.009 ±(99.9%) 0.079 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.046), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.039), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.06% complete, ETA 01:41:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143491.211 ops/s
[info] # Warmup Iteration   2: 889821.056 ops/s
[info] # Warmup Iteration   3: 827113.748 ops/s
[info] # Warmup Iteration   4: 831526.782 ops/s
[info] # Warmup Iteration   5: 824266.835 ops/s
[info] Iteration   1: 831788.723 ops/s
[info]                  ·gc.alloc.rate:      304.424 MB/sec
[info]                  ·gc.alloc.rate.norm: 576.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 826104.949 ops/s
[info]                  ·gc.alloc.rate:               322.830 MB/sec
[info]                  ·gc.alloc.rate.norm:          615.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1259.601 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 824020.671 ops/s
[info]                  ·gc.alloc.rate:      306.093 MB/sec
[info]                  ·gc.alloc.rate.norm: 584.618 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 823995.581 ops/s
[info]                  ·gc.alloc.rate:               316.092 MB/sec
[info]                  ·gc.alloc.rate.norm:          603.665 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1262.825 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 826482.290 ops/s
[info]                  ·gc.alloc.rate:      302.473 MB/sec
[info]                  ·gc.alloc.rate.norm: 576.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   826478.443 ±(99.9%) 12259.304 ops/s [Average]
[info]   (min, avg, max) = (823995.581, 826478.443, 831788.723), stdev = 3183.702
[info]   CI (99.9%): [814219.139, 838737.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   310.383 ±(99.9%) 33.570 MB/sec [Average]
[info]   (min, avg, max) = (302.473, 310.383, 322.830), stdev = 8.718
[info]   CI (99.9%): [276.813, 343.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   591.066 ±(99.9%) 67.504 B/op [Average]
[info]   (min, avg, max) = (576.001, 591.066, 615.046), stdev = 17.531
[info]   CI (99.9%): [523.562, 658.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   264.479 ±(99.9%) 1394.519 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 264.479, 661.243), stdev = 362.152
[info]   CI (99.9%): [≈ 0, 1658.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   504.485 ±(99.9%) 2660.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 504.485, 1262.825), stdev = 690.796
[info]   CI (99.9%): [≈ 0, 3164.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.29% complete, ETA 01:41:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 583688.294 ops/s
[info] # Warmup Iteration   2: 2082580.148 ops/s
[info] # Warmup Iteration   3: 2212850.225 ops/s
[info] # Warmup Iteration   4: 2200638.403 ops/s
[info] # Warmup Iteration   5: 2199372.798 ops/s
[info] Iteration   1: 2200107.552 ops/s
[info]                  ·gc.alloc.rate:               441.279 MB/sec
[info]                  ·gc.alloc.rate.norm:          315.668 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 477.969 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 2213925.927 ops/s
[info]                  ·gc.alloc.rate:      427.633 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2203547.255 ops/s
[info]                  ·gc.alloc.rate:                   439.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              313.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     477.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.969 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.834 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2202955.766 ops/s
[info]                  ·gc.alloc.rate:                   442.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              316.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     476.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2210524.027 ops/s
[info]                  ·gc.alloc.rate:      427.060 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   2206212.106 ±(99.9%) 22209.443 ops/s [Average]
[info]   (min, avg, max) = (2200107.552, 2206212.106, 2213925.927), stdev = 5767.722
[info]   CI (99.9%): [2184002.663, 2228421.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   435.550 ±(99.9%) 29.186 MB/sec [Average]
[info]   (min, avg, max) = (427.060, 435.550, 442.504), stdev = 7.580
[info]   CI (99.9%): [406.364, 464.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   310.699 ±(99.9%) 23.816 B/op [Average]
[info]   (min, avg, max) = (304.000, 310.699, 316.146), stdev = 6.185
[info]   CI (99.9%): [286.884, 334.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   400.773 ±(99.9%) 1408.773 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 400.773, 668.248), stdev = 365.854
[info]   CI (99.9%): [≈ 0, 1809.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   286.404 ±(99.9%) 1006.753 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 286.404, 477.969), stdev = 261.451
[info]   CI (99.9%): [≈ 0, 1293.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.798 ±(99.9%) 6.826 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.798, 3.969), stdev = 1.773
[info]   CI (99.9%): [≈ 0, 7.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.570 ±(99.9%) 4.874 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.570, 2.834), stdev = 1.266
[info]   CI (99.9%): [≈ 0, 5.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 2.049
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11.53% complete, ETA 01:40:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7356.031 ops/s
[info] # Warmup Iteration   2: 112786.689 ops/s
[info] # Warmup Iteration   3: 151221.859 ops/s
[info] # Warmup Iteration   4: 177309.376 ops/s
[info] # Warmup Iteration   5: 178272.777 ops/s
[info] Iteration   1: 178256.240 ops/s
[info]                  ·gc.alloc.rate:                   4684.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              41363.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4690.086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41407.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.368 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 177178.205 ops/s
[info]                  ·gc.alloc.rate:                   4674.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              41503.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4717.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41891.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.370 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 179148.422 ops/s
[info]                  ·gc.alloc.rate:                   4696.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              41260.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4058.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35656.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 177138.347 ops/s
[info]                  ·gc.alloc.rate:               4674.117 MB/sec
[info]                  ·gc.alloc.rate.norm:          41530.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4748.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42190.317 B/op
[info]                  ·gc.count:                    7.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   5: 178287.329 ops/s
[info]                  ·gc.alloc.rate:                   4703.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              41520.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4757.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42001.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.551 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   178001.708 ±(99.9%) 3270.140 ops/s [Average]
[info]   (min, avg, max) = (177138.347, 178001.708, 179148.422), stdev = 849.245
[info]   CI (99.9%): [174731.569, 181271.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4686.687 ±(99.9%) 50.685 MB/sec [Average]
[info]   (min, avg, max) = (4674.117, 4686.687, 4703.351), stdev = 13.163
[info]   CI (99.9%): [4636.002, 4737.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   41435.791 ±(99.9%) 458.577 B/op [Average]
[info]   (min, avg, max) = (41260.802, 41435.791, 41530.381), stdev = 119.091
[info]   CI (99.9%): [40977.214, 41894.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4594.610 ±(99.9%) 1158.002 MB/sec [Average]
[info]   (min, avg, max) = (4058.768, 4594.610, 4757.860), stdev = 300.729
[info]   CI (99.9%): [3436.608, 5752.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   40629.712 ±(99.9%) 10762.802 B/op [Average]
[info]   (min, avg, max) = (35656.535, 40629.712, 42190.317), stdev = 2795.065
[info]   CI (99.9%): [29866.911, 51392.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.294 ±(99.9%) 0.808 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.294, 0.551), stdev = 0.210
[info]   CI (99.9%): [≈ 0, 1.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 11.76% complete, ETA 01:40:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58856.456 ops/s
[info] # Warmup Iteration   2: 424155.025 ops/s
[info] # Warmup Iteration   3: 450327.504 ops/s
[info] # Warmup Iteration   4: 477479.725 ops/s
[info] # Warmup Iteration   5: 486349.369 ops/s
[info] Iteration   1: 483129.324 ops/s
[info]                  ·gc.alloc.rate:                   1606.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              5231.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6521.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 486408.794 ops/s
[info]                  ·gc.alloc.rate:                   1582.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              5121.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4321.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.394 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 482478.564 ops/s
[info]                  ·gc.alloc.rate:                   1566.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              5110.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4352.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.241 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 488425.867 ops/s
[info]                  ·gc.alloc.rate:                   1610.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              5188.558 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6435.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.201 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 489783.253 ops/s
[info]                  ·gc.alloc.rate:               1601.670 MB/sec
[info]                  ·gc.alloc.rate.norm:          5144.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4276.949 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   486045.160 ±(99.9%) 12327.481 ops/s [Average]
[info]   (min, avg, max) = (482478.564, 486045.160, 489783.253), stdev = 3201.408
[info]   CI (99.9%): [473717.679, 498372.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1593.739 ±(99.9%) 71.207 MB/sec [Average]
[info]   (min, avg, max) = (1566.669, 1593.739, 1610.693), stdev = 18.492
[info]   CI (99.9%): [1522.532, 1664.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5159.364 ±(99.9%) 194.160 B/op [Average]
[info]   (min, avg, max) = (5110.483, 5159.364, 5231.899), stdev = 50.423
[info]   CI (99.9%): [4965.204, 5353.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1600.414 ±(99.9%) 1405.399 MB/sec [Average]
[info]   (min, avg, max) = (1331.552, 1600.414, 2002.615), stdev = 364.978
[info]   CI (99.9%): [195.015, 3005.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5181.555 ±(99.9%) 4561.057 B/op [Average]
[info]   (min, avg, max) = (4276.949, 5181.555, 6521.063), stdev = 1184.492
[info]   CI (99.9%): [620.498, 9742.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.918 ±(99.9%) 6.368 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.918, 3.831), stdev = 1.654
[info]   CI (99.9%): [≈ 0, 7.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.972 ±(99.9%) 20.601 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.972, 12.394), stdev = 5.350
[info]   CI (99.9%): [≈ 0, 23.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 12.000), stdev = 3.768
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 12.00% complete, ETA 01:40:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.785 ops/s
[info] # Warmup Iteration   2: 2309504.630 ops/s
[info] # Warmup Iteration   3: 2625585.050 ops/s
[info] # Warmup Iteration   4: 2722886.939 ops/s
[info] # Warmup Iteration   5: 2728347.064 ops/s
[info] Iteration   1: 2684709.061 ops/s
[info]                  ·gc.alloc.rate:               1265.222 MB/sec
[info]                  ·gc.alloc.rate.norm:          741.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 389.927 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2689113.742 ops/s
[info]                  ·gc.alloc.rate:                   1275.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              746.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     778.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2638537.583 ops/s
[info]                  ·gc.alloc.rate:                   1250.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              745.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     794.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2594954.108 ops/s
[info]                  ·gc.alloc.rate:                   1241.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              752.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     808.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.779 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 2682749.860 ops/s
[info]                  ·gc.alloc.rate:                   1281.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              751.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     781.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   2658012.871 ±(99.9%) 156976.493 ops/s [Average]
[info]   (min, avg, max) = (2594954.108, 2658012.871, 2689113.742), stdev = 40766.297
[info]   CI (99.9%): [2501036.378, 2814989.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1262.874 ±(99.9%) 65.304 MB/sec [Average]
[info]   (min, avg, max) = (1241.524, 1262.874, 1281.702), stdev = 16.959
[info]   CI (99.9%): [1197.570, 1328.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   747.671 ±(99.9%) 17.740 B/op [Average]
[info]   (min, avg, max) = (741.725, 747.671, 752.996), stdev = 4.607
[info]   CI (99.9%): [729.932, 765.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1199.065 ±(99.9%) 1149.335 MB/sec [Average]
[info]   (min, avg, max) = (665.131, 1199.065, 1333.543), stdev = 298.479
[info]   CI (99.9%): [49.730, 2348.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   710.793 ±(99.9%) 692.199 B/op [Average]
[info]   (min, avg, max) = (389.927, 710.793, 808.807), stdev = 179.762
[info]   CI (99.9%): [18.594, 1402.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.940 ±(99.9%) 7.840 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.940, 4.582), stdev = 2.036
[info]   CI (99.9%): [≈ 0, 8.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.570 ±(99.9%) 4.756 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.570, 2.779), stdev = 1.235
[info]   CI (99.9%): [≈ 0, 5.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.24% complete, ETA 01:40:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 233515.503 ops/s
[info] # Warmup Iteration   2: 1067696.862 ops/s
[info] # Warmup Iteration   3: 1152442.410 ops/s
[info] # Warmup Iteration   4: 1187763.365 ops/s
[info] # Warmup Iteration   5: 1191357.367 ops/s
[info] Iteration   1: 1149529.812 ops/s
[info]                  ·gc.alloc.rate:               554.437 MB/sec
[info]                  ·gc.alloc.rate.norm:          759.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 904.749 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1192994.506 ops/s
[info]                  ·gc.alloc.rate:      551.839 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1191514.596 ops/s
[info]                  ·gc.alloc.rate:               564.776 MB/sec
[info]                  ·gc.alloc.rate.norm:          746.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 873.330 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 1192940.634 ops/s
[info]                  ·gc.alloc.rate:                   565.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              746.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     872.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1193872.722 ops/s
[info]                  ·gc.alloc.rate:               566.723 MB/sec
[info]                  ·gc.alloc.rate.norm:          747.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 872.465 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   1184170.454 ±(99.9%) 74637.569 ops/s [Average]
[info]   (min, avg, max) = (1149529.812, 1184170.454, 1193872.722), stdev = 19383.140
[info]   CI (99.9%): [1109532.885, 1258808.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   560.685 ±(99.9%) 26.896 MB/sec [Average]
[info]   (min, avg, max) = (551.839, 560.685, 566.723), stdev = 6.985
[info]   CI (99.9%): [533.789, 587.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   745.267 ±(99.9%) 42.793 B/op [Average]
[info]   (min, avg, max) = (728.000, 745.267, 759.098), stdev = 11.113
[info]   CI (99.9%): [702.475, 788.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   529.017 ±(99.9%) 1138.750 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 529.017, 661.860), stdev = 295.730
[info]   CI (99.9%): [≈ 0, 1667.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   704.562 ±(99.9%) 1517.566 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 704.562, 904.749), stdev = 394.107
[info]   CI (99.9%): [≈ 0, 2222.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.142 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.082), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.47% complete, ETA 01:39:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1220561.185 ops/s
[info] # Warmup Iteration   2: 2850361.404 ops/s
[info] # Warmup Iteration   3: 2996351.910 ops/s
[info] # Warmup Iteration   4: 3022781.909 ops/s
[info] # Warmup Iteration   5: 3009284.127 ops/s
[info] Iteration   1: 2969377.586 ops/s
[info]                  ·gc.alloc.rate:               1406.586 MB/sec
[info]                  ·gc.alloc.rate.norm:          745.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 710.040 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 3029012.995 ops/s
[info]                  ·gc.alloc.rate:               1440.206 MB/sec
[info]                  ·gc.alloc.rate.norm:          748.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 696.426 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 3038794.353 ops/s
[info]                  ·gc.alloc.rate:                   1445.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              748.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     694.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.938 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.039 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2963558.379 ops/s
[info]                  ·gc.alloc.rate:                   1411.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              749.257 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     710.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3033112.832 ops/s
[info]                  ·gc.alloc.rate:               1456.731 MB/sec
[info]                  ·gc.alloc.rate.norm:          755.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 693.421 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   3006771.229 ±(99.9%) 142521.841 ops/s [Average]
[info]   (min, avg, max) = (2963558.379, 3006771.229, 3038794.353), stdev = 37012.470
[info]   CI (99.9%): [2864249.388, 3149293.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1432.112 ±(99.9%) 85.146 MB/sec [Average]
[info]   (min, avg, max) = (1406.586, 1432.112, 1456.731), stdev = 22.112
[info]   CI (99.9%): [1346.966, 1517.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   749.425 ±(99.9%) 14.632 B/op [Average]
[info]   (min, avg, max) = (745.260, 749.425, 755.625), stdev = 3.800
[info]   CI (99.9%): [734.792, 764.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1339.310 ±(99.9%) 7.161 MB/sec [Average]
[info]   (min, avg, max) = (1336.811, 1339.310, 1341.140), stdev = 1.860
[info]   CI (99.9%): [1332.149, 1346.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   700.962 ±(99.9%) 32.794 B/op [Average]
[info]   (min, avg, max) = (693.421, 700.962, 710.391), stdev = 8.517
[info]   CI (99.9%): [668.168, 733.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.804 ±(99.9%) 6.746 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.804, 3.938), stdev = 1.752
[info]   CI (99.9%): [≈ 0, 7.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.417 ±(99.9%) 3.493 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.417, 2.039), stdev = 0.907
[info]   CI (99.9%): [≈ 0, 3.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 2.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 12.71% complete, ETA 01:39:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1538842.411 ops/s
[info] # Warmup Iteration   2: 3006792.283 ops/s
[info] # Warmup Iteration   3: 3236456.971 ops/s
[info] # Warmup Iteration   4: 3234663.024 ops/s
[info] # Warmup Iteration   5: 3232203.398 ops/s
[info] Iteration   1: 3232687.008 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3234162.556 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3234735.913 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3233508.501 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3223450.495 ops/s
[info]                  ·gc.alloc.rate:      3.442 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.681 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   3231708.895 ±(99.9%) 18017.943 ops/s [Average]
[info]   (min, avg, max) = (3223450.495, 3231708.895, 3234735.913), stdev = 4679.203
[info]   CI (99.9%): [3213690.951, 3249726.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.689 ±(99.9%) 5.928 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.689, 3.442), stdev = 1.539
[info]   CI (99.9%): [≈ 0, 6.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.336 ±(99.9%) 2.894 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.336, 1.681), stdev = 0.752
[info]   CI (99.9%): [≈ 0, 3.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12.94% complete, ETA 01:39:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52990.547 ops/s
[info] # Warmup Iteration   2: 690270.657 ops/s
[info] # Warmup Iteration   3: 618025.336 ops/s
[info] # Warmup Iteration   4: 1007842.049 ops/s
[info] # Warmup Iteration   5: 1032550.600 ops/s
[info] Iteration   1: 1022537.046 ops/s
[info]                  ·gc.alloc.rate:               1104.130 MB/sec
[info]                  ·gc.alloc.rate.norm:          1699.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1323.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2037.274 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     12.000 ms
[info] Iteration   2: 1032153.696 ops/s
[info]                  ·gc.alloc.rate:               1091.557 MB/sec
[info]                  ·gc.alloc.rate.norm:          1664.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1009.691 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 1024473.349 ops/s
[info]                  ·gc.alloc.rate:                   1108.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              1701.915 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2035.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 1028327.790 ops/s
[info]                  ·gc.alloc.rate:                   1119.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              1713.234 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2029.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.563 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 1046736.511 ops/s
[info]                  ·gc.alloc.rate:                   1109.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              1668.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     997.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.657 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   1030845.679 ±(99.9%) 37044.775 ops/s [Average]
[info]   (min, avg, max) = (1022537.046, 1030845.679, 1046736.511), stdev = 9620.410
[info]   CI (99.9%): [993800.903, 1067890.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1106.627 ±(99.9%) 38.950 MB/sec [Average]
[info]   (min, avg, max) = (1091.557, 1106.627, 1119.412), stdev = 10.115
[info]   CI (99.9%): [1067.677, 1145.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1689.446 ±(99.9%) 83.908 B/op [Average]
[info]   (min, avg, max) = (1664.094, 1689.446, 1713.234), stdev = 21.791
[info]   CI (99.9%): [1605.538, 1773.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1060.129 ±(99.9%) 1396.918 MB/sec [Average]
[info]   (min, avg, max) = (662.303, 1060.129, 1325.981), stdev = 362.775
[info]   CI (99.9%): [≈ 0, 2457.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1621.800 ±(99.9%) 2173.873 B/op [Average]
[info]   (min, avg, max) = (997.101, 1621.800, 2037.274), stdev = 564.548
[info]   CI (99.9%): [≈ 0, 3795.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.949 ±(99.9%) 7.223 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.949, 4.288), stdev = 1.876
[info]   CI (99.9%): [≈ 0, 8.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.451 ±(99.9%) 11.058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.451, 6.563), stdev = 2.872
[info]   CI (99.9%): [≈ 0, 12.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.000, 12.000), stdev = 4.243
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13.18% complete, ETA 01:38:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38456.296 ops/s
[info] # Warmup Iteration   2: 185164.824 ops/s
[info] # Warmup Iteration   3: 196171.090 ops/s
[info] # Warmup Iteration   4: 229011.942 ops/s
[info] # Warmup Iteration   5: 230159.852 ops/s
[info] Iteration   1: 231947.567 ops/s
[info]                  ·gc.alloc.rate:                   2883.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              19564.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3329.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22586.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.966 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 233127.226 ops/s
[info]                  ·gc.alloc.rate:                   2897.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              19561.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2663.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17979.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.281 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 233229.443 ops/s
[info]                  ·gc.alloc.rate:                   2891.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              19511.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18026.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 233429.526 ops/s
[info]                  ·gc.alloc.rate:               2926.134 MB/sec
[info]                  ·gc.alloc.rate.norm:          19720.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2681.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18072.779 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 232696.585 ops/s
[info]                  ·gc.alloc.rate:               2916.531 MB/sec
[info]                  ·gc.alloc.rate.norm:          19724.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689.956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18192.618 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   232886.069 ±(99.9%) 2268.368 ops/s [Average]
[info]   (min, avg, max) = (231947.567, 232886.069, 233429.526), stdev = 589.088
[info]   CI (99.9%): [230617.701, 235154.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2903.109 ±(99.9%) 68.050 MB/sec [Average]
[info]   (min, avg, max) = (2883.662, 2903.109, 2926.134), stdev = 17.672
[info]   CI (99.9%): [2835.059, 2971.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19616.477 ±(99.9%) 381.969 B/op [Average]
[info]   (min, avg, max) = (19511.644, 19616.477, 19724.978), stdev = 99.196
[info]   CI (99.9%): [19234.508, 19998.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2807.129 ±(99.9%) 1124.431 MB/sec [Average]
[info]   (min, avg, max) = (2663.228, 2807.129, 3329.183), stdev = 292.011
[info]   CI (99.9%): [1682.698, 3931.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   18971.672 ±(99.9%) 7787.833 B/op [Average]
[info]   (min, avg, max) = (17979.803, 18971.672, 22586.814), stdev = 2022.475
[info]   CI (99.9%): [11183.840, 26759.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.729 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.100, 0.437), stdev = 0.189
[info]   CI (99.9%): [≈ 0, 0.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.678 ±(99.9%) 4.947 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.678, 2.966), stdev = 1.285
[info]   CI (99.9%): [≈ 0, 5.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 8.000), stdev = 1.342
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.41% complete, ETA 01:38:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38635.404 ops/s
[info] # Warmup Iteration   2: 442241.809 ops/s
[info] # Warmup Iteration   3: 406621.634 ops/s
[info] # Warmup Iteration   4: 423229.456 ops/s
[info] # Warmup Iteration   5: 422075.146 ops/s
[info] Iteration   1: 423346.322 ops/s
[info]                  ·gc.alloc.rate:      288.354 MB/sec
[info]                  ·gc.alloc.rate.norm: 1072.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 423590.756 ops/s
[info]                  ·gc.alloc.rate:               303.646 MB/sec
[info]                  ·gc.alloc.rate.norm:          1128.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2457.757 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 424495.974 ops/s
[info]                  ·gc.alloc.rate:      289.173 MB/sec
[info]                  ·gc.alloc.rate.norm: 1072.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 423428.980 ops/s
[info]                  ·gc.alloc.rate:                   298.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              1109.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2458.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 424422.556 ops/s
[info]                  ·gc.alloc.rate:      289.122 MB/sec
[info]                  ·gc.alloc.rate.norm: 1072.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   423856.918 ±(99.9%) 2146.557 ops/s [Average]
[info]   (min, avg, max) = (423346.322, 423856.918, 424495.974), stdev = 557.454
[info]   CI (99.9%): [421710.361, 426003.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   293.737 ±(99.9%) 26.605 MB/sec [Average]
[info]   (min, avg, max) = (288.354, 293.737, 303.646), stdev = 6.909
[info]   CI (99.9%): [267.132, 320.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1090.614 ±(99.9%) 101.513 B/op [Average]
[info]   (min, avg, max) = (1072.001, 1090.614, 1128.065), stdev = 26.363
[info]   CI (99.9%): [989.100, 1192.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   264.625 ±(99.9%) 1395.289 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 264.625, 661.565), stdev = 362.352
[info]   CI (99.9%): [≈ 0, 1659.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   983.300 ±(99.9%) 5184.657 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 983.300, 2458.743), stdev = 1346.439
[info]   CI (99.9%): [≈ 0, 6167.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.133 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.077), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.65% complete, ETA 01:38:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 588222.348 ops/s
[info] # Warmup Iteration   2: 1301970.360 ops/s
[info] # Warmup Iteration   3: 1318241.381 ops/s
[info] # Warmup Iteration   4: 1321831.669 ops/s
[info] # Warmup Iteration   5: 1316689.906 ops/s
[info] Iteration   1: 1321254.235 ops/s
[info]                  ·gc.alloc.rate:      255.261 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1316936.609 ops/s
[info]                  ·gc.alloc.rate:               264.346 MB/sec
[info]                  ·gc.alloc.rate.norm:          315.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 611.443 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1321966.440 ops/s
[info]                  ·gc.alloc.rate:      255.404 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1312825.816 ops/s
[info]                  ·gc.alloc.rate:                   272.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              326.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     613.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1321600.799 ops/s
[info]                  ·gc.alloc.rate:      255.276 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1318916.780 ±(99.9%) 15280.435 ops/s [Average]
[info]   (min, avg, max) = (1312825.816, 1318916.780, 1321966.440), stdev = 3968.280
[info]   CI (99.9%): [1303636.345, 1334197.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   260.573 ±(99.9%) 29.911 MB/sec [Average]
[info]   (min, avg, max) = (255.261, 260.573, 272.578), stdev = 7.768
[info]   CI (99.9%): [230.661, 290.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   310.927 ±(99.9%) 39.422 B/op [Average]
[info]   (min, avg, max) = (304.000, 310.927, 326.766), stdev = 10.238
[info]   CI (99.9%): [271.506, 350.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.669 ±(99.9%) 1079.159 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.669, 511.709), stdev = 280.254
[info]   CI (99.9%): [≈ 0, 1283.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   244.958 ±(99.9%) 1291.595 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 244.958, 613.347), stdev = 335.423
[info]   CI (99.9%): [≈ 0, 1536.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 2.191
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13.88% complete, ETA 01:38:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6707.538 ops/s
[info] # Warmup Iteration   2: 92896.263 ops/s
[info] # Warmup Iteration   3: 119684.366 ops/s
[info] # Warmup Iteration   4: 130827.718 ops/s
[info] # Warmup Iteration   5: 131622.495 ops/s
[info] Iteration   1: 133060.783 ops/s
[info]                  ·gc.alloc.rate:                   4353.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              51488.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4031.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47678.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.246 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 129826.730 ops/s
[info]                  ·gc.alloc.rate:                   4319.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              52346.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4729.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57317.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.252 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 132523.243 ops/s
[info]                  ·gc.alloc.rate:                   4377.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              51992.257 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4066.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48297.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.494 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 126615.062 ops/s
[info]                  ·gc.alloc.rate:                   4235.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              52631.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4072.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50601.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.189 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.776 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 127861.387 ops/s
[info]                  ·gc.alloc.rate:                   4161.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              51220.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4075.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50156.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.512 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   129977.441 ±(99.9%) 10856.169 ops/s [Average]
[info]   (min, avg, max) = (126615.062, 129977.441, 133060.783), stdev = 2819.313
[info]   CI (99.9%): [119121.271, 140833.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4289.544 ±(99.9%) 344.632 MB/sec [Average]
[info]   (min, avg, max) = (4161.578, 4289.544, 4377.900), stdev = 89.500
[info]   CI (99.9%): [3944.912, 4634.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   51935.613 ±(99.9%) 2252.056 B/op [Average]
[info]   (min, avg, max) = (51220.052, 51935.613, 52631.174), stdev = 584.852
[info]   CI (99.9%): [49683.557, 54187.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4195.001 ±(99.9%) 1152.376 MB/sec [Average]
[info]   (min, avg, max) = (4031.252, 4195.001, 4729.415), stdev = 299.268
[info]   CI (99.9%): [3042.625, 5347.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   50810.514 ±(99.9%) 14781.225 B/op [Average]
[info]   (min, avg, max) = (47678.304, 50810.514, 57317.880), stdev = 3838.637
[info]   CI (99.9%): [36029.289, 65591.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.263 ±(99.9%) 1.994 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.263, 1.189), stdev = 0.518
[info]   CI (99.9%): [≈ 0, 2.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.256 ±(99.9%) 24.801 B/op [Average]
[info]   (min, avg, max) = (0.246, 3.256, 14.776), stdev = 6.441
[info]   CI (99.9%): [≈ 0, 28.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14.12% complete, ETA 01:37:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83678.936 ops/s
[info] # Warmup Iteration   2: 310229.836 ops/s
[info] # Warmup Iteration   3: 355776.340 ops/s
[info] # Warmup Iteration   4: 343378.115 ops/s
[info] # Warmup Iteration   5: 344302.890 ops/s
[info] Iteration   1: 346112.839 ops/s
[info]                  ·gc.alloc.rate:                   1867.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              8490.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6079.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.259 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 347245.968 ops/s
[info]                  ·gc.alloc.rate:                   1884.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              8539.892 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9075.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.378 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 347329.432 ops/s
[info]                  ·gc.alloc.rate:                   1906.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              8634.323 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9052.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.377 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 347280.796 ops/s
[info]                  ·gc.alloc.rate:                   1905.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              8635.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9053.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 345318.708 ops/s
[info]                  ·gc.alloc.rate:               1869.045 MB/sec
[info]                  ·gc.alloc.rate.norm:          8517.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6078.244 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   346657.549 ±(99.9%) 3484.409 ops/s [Average]
[info]   (min, avg, max) = (345318.708, 346657.549, 347329.432), stdev = 904.890
[info]   CI (99.9%): [343173.140, 350141.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1886.420 ±(99.9%) 72.915 MB/sec [Average]
[info]   (min, avg, max) = (1867.210, 1886.420, 1906.263), stdev = 18.936
[info]   CI (99.9%): [1813.505, 1959.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8563.702 ±(99.9%) 259.526 B/op [Average]
[info]   (min, avg, max) = (8490.913, 8563.702, 8635.768), stdev = 67.398
[info]   CI (99.9%): [8304.176, 8823.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1733.886 ±(99.9%) 1400.915 MB/sec [Average]
[info]   (min, avg, max) = (1333.766, 1733.886, 2002.322), stdev = 363.813
[info]   CI (99.9%): [332.971, 3134.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7868.056 ±(99.9%) 6289.179 B/op [Average]
[info]   (min, avg, max) = (6078.244, 7868.056, 9075.835), stdev = 1633.280
[info]   CI (99.9%): [1578.877, 14157.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.885 ±(99.9%) 5.212 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.885, 3.136), stdev = 1.354
[info]   CI (99.9%): [≈ 0, 6.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.022 ±(99.9%) 23.699 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.022, 14.259), stdev = 6.155
[info]   CI (99.9%): [≈ 0, 27.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.387
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.35% complete, ETA 01:37:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 631875.600 ops/s
[info] # Warmup Iteration   2: 2073591.265 ops/s
[info] # Warmup Iteration   3: 2158678.522 ops/s
[info] # Warmup Iteration   4: 2263435.853 ops/s
[info] # Warmup Iteration   5: 2271949.583 ops/s
[info] Iteration   1: 2245582.439 ops/s
[info]                  ·gc.alloc.rate:                   617.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     463.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2312734.721 ops/s
[info]                  ·gc.alloc.rate:               643.792 MB/sec
[info]                  ·gc.alloc.rate.norm:          437.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 450.175 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 2325855.994 ops/s
[info]                  ·gc.alloc.rate:               651.718 MB/sec
[info]                  ·gc.alloc.rate.norm:          440.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 447.627 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 2320189.463 ops/s
[info]                  ·gc.alloc.rate:                   639.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              433.443 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     449.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2327986.920 ops/s
[info]                  ·gc.alloc.rate:      627.153 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   2306469.907 ±(99.9%) 133022.334 ops/s [Average]
[info]   (min, avg, max) = (2245582.439, 2306469.907, 2327986.920), stdev = 34545.478
[info]   CI (99.9%): [2173447.573, 2439492.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   635.810 ±(99.9%) 52.570 MB/sec [Average]
[info]   (min, avg, max) = (617.290, 635.810, 651.718), stdev = 13.652
[info]   CI (99.9%): [583.240, 688.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   433.789 ±(99.9%) 24.754 B/op [Average]
[info]   (min, avg, max) = (424.000, 433.789, 440.924), stdev = 6.429
[info]   CI (99.9%): [409.035, 458.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   529.492 ±(99.9%) 1139.773 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 529.492, 662.590), stdev = 295.995
[info]   CI (99.9%): [≈ 0, 1669.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   362.155 ±(99.9%) 779.952 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 362.155, 463.599), stdev = 202.551
[info]   CI (99.9%): [≈ 0, 1142.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.59% complete, ETA 01:37:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1630208.061 ops/s
[info] # Warmup Iteration   2: 3046525.792 ops/s
[info] # Warmup Iteration   3: 3281254.275 ops/s
[info] # Warmup Iteration   4: 3306754.767 ops/s
[info] # Warmup Iteration   5: 3282840.849 ops/s
[info] Iteration   1: 3329325.498 ops/s
[info]                  ·gc.alloc.rate:                   939.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              444.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     632.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3331098.856 ops/s
[info]                  ·gc.alloc.rate:               921.648 MB/sec
[info]                  ·gc.alloc.rate.norm:          435.380 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 316.320 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 3327105.954 ops/s
[info]                  ·gc.alloc.rate:                   915.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              433.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     316.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3323931.767 ops/s
[info]                  ·gc.alloc.rate:                   929.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              439.958 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     634.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 3386350.478 ops/s
[info]                  ·gc.alloc.rate:               938.407 MB/sec
[info]                  ·gc.alloc.rate.norm:          436.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 311.454 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   3339562.511 ±(99.9%) 101240.264 ops/s [Average]
[info]   (min, avg, max) = (3323931.767, 3339562.511, 3386350.478), stdev = 26291.775
[info]   CI (99.9%): [3238322.246, 3440802.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   928.877 ±(99.9%) 40.004 MB/sec [Average]
[info]   (min, avg, max) = (915.466, 928.877, 939.283), stdev = 10.389
[info]   CI (99.9%): [888.873, 968.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   437.711 ±(99.9%) 16.662 B/op [Average]
[info]   (min, avg, max) = (433.039, 437.711, 444.043), stdev = 4.327
[info]   CI (99.9%): [421.048, 454.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.417 ±(99.9%) 1411.299 MB/sec [Average]
[info]   (min, avg, max) = (669.519, 937.417, 1340.220), stdev = 366.510
[info]   CI (99.9%): [≈ 0, 2348.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   442.225 ±(99.9%) 671.799 B/op [Average]
[info]   (min, avg, max) = (311.454, 442.225, 634.308), stdev = 174.464
[info]   CI (99.9%): [≈ 0, 1114.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.051 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.014), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 14.82% complete, ETA 01:37:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1023718.149 ops/s
[info] # Warmup Iteration   2: 3121480.717 ops/s
[info] # Warmup Iteration   3: 3650228.411 ops/s
[info] # Warmup Iteration   4: 3649563.319 ops/s
[info] # Warmup Iteration   5: 3648761.249 ops/s
[info] Iteration   1: 3647697.838 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3638114.459 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3636360.346 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3650698.139 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3651418.432 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   3644857.843 ±(99.9%) 27424.631 ops/s [Average]
[info]   (min, avg, max) = (3636360.346, 3644857.843, 3651418.432), stdev = 7122.090
[info]   CI (99.9%): [3617433.211, 3672282.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 15.06% complete, ETA 01:36:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6747.459 ops/s
[info] # Warmup Iteration   2: 27055.213 ops/s
[info] # Warmup Iteration   3: 54512.588 ops/s
[info] # Warmup Iteration   4: 50972.693 ops/s
[info] # Warmup Iteration   5: 56968.225 ops/s
[info] Iteration   1: 55909.027 ops/s
[info]                  ·gc.alloc.rate:                   1980.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              55738.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1973.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55553.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.237 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 55950.353 ops/s
[info]                  ·gc.alloc.rate:                   1975.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              55557.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1977.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55625.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.549 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 56905.326 ops/s
[info]                  ·gc.alloc.rate:                   1991.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              55081.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1981.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54793.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.768 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 57404.119 ops/s
[info]                  ·gc.alloc.rate:                   2015.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              55251.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1984.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54408.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64.263 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 57745.950 ops/s
[info]                  ·gc.alloc.rate:                   2012.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              54835.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1985.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54121.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.760 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   56782.955 ±(99.9%) 3213.129 ops/s [Average]
[info]   (min, avg, max) = (55909.027, 56782.955, 57745.950), stdev = 834.439
[info]   CI (99.9%): [53569.826, 59996.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1994.770 ±(99.9%) 70.254 MB/sec [Average]
[info]   (min, avg, max) = (1975.069, 1994.770, 2015.193), stdev = 18.245
[info]   CI (99.9%): [1924.516, 2065.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   55292.957 ±(99.9%) 1393.892 B/op [Average]
[info]   (min, avg, max) = (54835.692, 55292.957, 55738.496), stdev = 361.989
[info]   CI (99.9%): [53899.066, 56686.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1980.472 ±(99.9%) 19.572 MB/sec [Average]
[info]   (min, avg, max) = (1973.444, 1980.472, 1985.835), stdev = 5.083
[info]   CI (99.9%): [1960.901, 2000.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   54900.694 ±(99.9%) 2591.996 B/op [Average]
[info]   (min, avg, max) = (54121.809, 54900.694, 55625.609), stdev = 673.133
[info]   CI (99.9%): [52308.697, 57492.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.013 ±(99.9%) 3.753 MB/sec [Average]
[info]   (min, avg, max) = (0.008, 1.013, 2.344), stdev = 0.975
[info]   CI (99.9%): [≈ 0, 4.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   27.915 ±(99.9%) 102.975 B/op [Average]
[info]   (min, avg, max) = (0.237, 27.915, 64.263), stdev = 26.742
[info]   CI (99.9%): [≈ 0, 130.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 11.000, 14.000), stdev = 3.082
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.29% complete, ETA 01:36:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55475.366 ops/s
[info] # Warmup Iteration   2: 275985.506 ops/s
[info] # Warmup Iteration   3: 283675.652 ops/s
[info] # Warmup Iteration   4: 297705.172 ops/s
[info] # Warmup Iteration   5: 304108.254 ops/s
[info] Iteration   1: 306483.435 ops/s
[info]                  ·gc.alloc.rate:                   3255.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              16717.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3322.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17061.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.176 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 304099.000 ops/s
[info]                  ·gc.alloc.rate:                   3254.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              16841.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3332.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17247.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.323 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 300898.404 ops/s
[info]                  ·gc.alloc.rate:               3248.563 MB/sec
[info]                  ·gc.alloc.rate.norm:          16991.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3347.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17510.820 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 306357.904 ops/s
[info]                  ·gc.alloc.rate:                   3291.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              16907.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13818.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 302838.154 ops/s
[info]                  ·gc.alloc.rate:                   3283.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              17059.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3374.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17533.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.216 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   304135.379 ±(99.9%) 9155.934 ops/s [Average]
[info]   (min, avg, max) = (300898.404, 304135.379, 306483.435), stdev = 2377.767
[info]   CI (99.9%): [294979.445, 313291.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3266.592 ±(99.9%) 74.229 MB/sec [Average]
[info]   (min, avg, max) = (3248.563, 3266.592, 3291.329), stdev = 19.277
[info]   CI (99.9%): [3192.362, 3340.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16903.542 ±(99.9%) 511.458 B/op [Average]
[info]   (min, avg, max) = (16717.505, 16903.542, 17059.586), stdev = 132.824
[info]   CI (99.9%): [16392.084, 17415.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3213.512 ±(99.9%) 1129.629 MB/sec [Average]
[info]   (min, avg, max) = (2689.902, 3213.512, 3374.500), stdev = 293.361
[info]   CI (99.9%): [2083.883, 4343.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   16634.360 ±(99.9%) 6108.317 B/op [Average]
[info]   (min, avg, max) = (13818.305, 16634.360, 17533.853), stdev = 1586.311
[info]   CI (99.9%): [10526.043, 22742.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.352 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.229), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.364 ±(99.9%) 1.807 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.364, 1.176), stdev = 0.469
[info]   CI (99.9%): [≈ 0, 2.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.53% complete, ETA 01:36:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 114056.562 ops/s
[info] # Warmup Iteration   2: 578398.618 ops/s
[info] # Warmup Iteration   3: 700446.836 ops/s
[info] # Warmup Iteration   4: 685245.762 ops/s
[info] # Warmup Iteration   5: 699342.519 ops/s
[info] Iteration   1: 696495.971 ops/s
[info]                  ·gc.alloc.rate:                   1906.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              4307.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4510.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 702406.867 ops/s
[info]                  ·gc.alloc.rate:                   1931.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              4328.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4486.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.528 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.423 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 704853.629 ops/s
[info]                  ·gc.alloc.rate:               1924.665 MB/sec
[info]                  ·gc.alloc.rate.norm:          4297.521 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2985.184 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 705680.562 ops/s
[info]                  ·gc.alloc.rate:               1940.420 MB/sec
[info]                  ·gc.alloc.rate.norm:          4327.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4476.167 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 699199.191 ops/s
[info]                  ·gc.alloc.rate:                   1949.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              4388.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4526.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   701727.244 ±(99.9%) 14866.449 ops/s [Average]
[info]   (min, avg, max) = (696495.971, 701727.244, 705680.562), stdev = 3860.769
[info]   CI (99.9%): [686860.795, 716593.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1930.592 ±(99.9%) 63.400 MB/sec [Average]
[info]   (min, avg, max) = (1906.304, 1930.592, 1949.587), stdev = 16.465
[info]   CI (99.9%): [1867.191, 1993.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4329.918 ±(99.9%) 135.332 B/op [Average]
[info]   (min, avg, max) = (4297.521, 4329.918, 4388.147), stdev = 35.145
[info]   CI (99.9%): [4194.586, 4465.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1870.700 ±(99.9%) 1149.181 MB/sec [Average]
[info]   (min, avg, max) = (1336.929, 1870.700, 2010.870), stdev = 298.439
[info]   CI (99.9%): [721.519, 3019.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4196.963 ±(99.9%) 2609.535 B/op [Average]
[info]   (min, avg, max) = (2985.184, 4196.963, 4526.084), stdev = 677.688
[info]   CI (99.9%): [1587.428, 6806.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.322 ±(99.9%) 2.596 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.322, 1.528), stdev = 0.674
[info]   CI (99.9%): [≈ 0, 2.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.722 ±(99.9%) 5.817 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.722, 3.423), stdev = 1.511
[info]   CI (99.9%): [≈ 0, 6.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.76% complete, ETA 01:36:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1502491.541 ops/s
[info] # Warmup Iteration   2: 2604991.045 ops/s
[info] # Warmup Iteration   3: 2844843.537 ops/s
[info] # Warmup Iteration   4: 2865051.728 ops/s
[info] # Warmup Iteration   5: 2873881.056 ops/s
[info] Iteration   1: 2869087.563 ops/s
[info]                  ·gc.alloc.rate:               1041.889 MB/sec
[info]                  ·gc.alloc.rate.norm:          571.401 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 734.108 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 2776607.393 ops/s
[info]                  ·gc.alloc.rate:               1075.628 MB/sec
[info]                  ·gc.alloc.rate.norm:          609.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 379.479 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 2864348.025 ops/s
[info]                  ·gc.alloc.rate:                   1026.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              563.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     736.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2918897.155 ops/s
[info]                  ·gc.alloc.rate:                   1049.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              565.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     361.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2920498.255 ops/s
[info]                  ·gc.alloc.rate:                   1043.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              562.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     722.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.907 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.566 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   2869887.678 ±(99.9%) 225319.425 ops/s [Average]
[info]   (min, avg, max) = (2776607.393, 2869887.678, 2920498.255), stdev = 58514.739
[info]   CI (99.9%): [2644568.253, 3095207.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1047.325 ±(99.9%) 69.463 MB/sec [Average]
[info]   (min, avg, max) = (1026.074, 1047.325, 1075.628), stdev = 18.039
[info]   CI (99.9%): [977.863, 1116.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   574.625 ±(99.9%) 76.499 B/op [Average]
[info]   (min, avg, max) = (562.367, 574.625, 609.629), stdev = 19.866
[info]   CI (99.9%): [498.126, 651.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1071.756 ±(99.9%) 1412.791 MB/sec [Average]
[info]   (min, avg, max) = (669.553, 1071.756, 1340.931), stdev = 366.897
[info]   CI (99.9%): [≈ 0, 2484.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   586.734 ±(99.9%) 761.077 B/op [Average]
[info]   (min, avg, max) = (361.336, 586.734, 736.094), stdev = 197.649
[info]   CI (99.9%): [≈ 0, 1347.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.590 ±(99.9%) 4.987 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.590, 2.907), stdev = 1.295
[info]   CI (99.9%): [≈ 0, 5.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.318 ±(99.9%) 2.688 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.318, 1.566), stdev = 0.698
[info]   CI (99.9%): [≈ 0, 3.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16.00% complete, ETA 01:35:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2727.670 ops/s
[info] # Warmup Iteration   2: 80980.180 ops/s
[info] # Warmup Iteration   3: 118015.855 ops/s
[info] # Warmup Iteration   4: 129933.722 ops/s
[info] # Warmup Iteration   5: 130503.672 ops/s
[info] Iteration   1: 134209.314 ops/s
[info]                  ·gc.alloc.rate:                   4290.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              50308.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4017.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47108.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.244 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 133155.348 ops/s
[info]                  ·gc.alloc.rate:                   4298.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              50803.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4034.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47690.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.492 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 133794.122 ops/s
[info]                  ·gc.alloc.rate:                   4329.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              50931.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4051.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47660.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.490 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 130503.626 ops/s
[info]                  ·gc.alloc.rate:                   4242.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              51163.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4064.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49017.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.502 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 133262.971 ops/s
[info]                  ·gc.alloc.rate:                   4328.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              51119.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4073.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48108.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.738 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   132985.076 ±(99.9%) 5585.800 ops/s [Average]
[info]   (min, avg, max) = (130503.626, 132985.076, 134209.314), stdev = 1450.614
[info]   CI (99.9%): [127399.276, 138570.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4297.939 ±(99.9%) 137.429 MB/sec [Average]
[info]   (min, avg, max) = (4242.424, 4297.939, 4329.977), stdev = 35.690
[info]   CI (99.9%): [4160.511, 4435.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   50865.161 ±(99.9%) 1321.512 B/op [Average]
[info]   (min, avg, max) = (50308.808, 50865.161, 51163.259), stdev = 343.192
[info]   CI (99.9%): [49543.649, 52186.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4048.486 ±(99.9%) 86.710 MB/sec [Average]
[info]   (min, avg, max) = (4017.653, 4048.486, 4073.499), stdev = 22.518
[info]   CI (99.9%): [3961.776, 4135.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   47916.983 ±(99.9%) 2734.674 B/op [Average]
[info]   (min, avg, max) = (47108.974, 47916.983, 49017.311), stdev = 710.186
[info]   CI (99.9%): [45182.309, 50651.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.062), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.493 ±(99.9%) 0.672 B/op [Average]
[info]   (min, avg, max) = (0.244, 0.493, 0.738), stdev = 0.175
[info]   CI (99.9%): [≈ 0, 1.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.000, 10.000), stdev = 1.000
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16.24% complete, ETA 01:35:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47427.393 ops/s
[info] # Warmup Iteration   2: 300422.508 ops/s
[info] # Warmup Iteration   3: 307231.859 ops/s
[info] # Warmup Iteration   4: 323054.436 ops/s
[info] # Warmup Iteration   5: 323901.295 ops/s
[info] Iteration   1: 323832.149 ops/s
[info]                  ·gc.alloc.rate:                   2551.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              12400.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2659.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12924.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.911 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 322320.197 ops/s
[info]                  ·gc.alloc.rate:                   2535.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              12378.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2658.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12978.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 325674.909 ops/s
[info]                  ·gc.alloc.rate:                   2576.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              12440.087 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2661.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12852.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 328749.860 ops/s
[info]                  ·gc.alloc.rate:                   2598.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              12438.292 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9597.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 327843.347 ops/s
[info]                  ·gc.alloc.rate:               2619.085 MB/sec
[info]                  ·gc.alloc.rate.norm:          12571.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2682.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12874.910 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   325684.092 ±(99.9%) 10333.596 ops/s [Average]
[info]   (min, avg, max) = (322320.197, 325684.092, 328749.860), stdev = 2683.602
[info]   CI (99.9%): [315350.496, 336017.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2576.203 ±(99.9%) 130.841 MB/sec [Average]
[info]   (min, avg, max) = (2535.535, 2576.203, 2619.085), stdev = 33.979
[info]   CI (99.9%): [2445.362, 2707.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12445.790 ±(99.9%) 287.993 B/op [Average]
[info]   (min, avg, max) = (12378.983, 12445.790, 12571.298), stdev = 74.791
[info]   CI (99.9%): [12157.796, 12733.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2533.320 ±(99.9%) 1137.265 MB/sec [Average]
[info]   (min, avg, max) = (2005.289, 2533.320, 2682.339), stdev = 295.344
[info]   CI (99.9%): [1396.056, 3670.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12245.407 ±(99.9%) 5702.672 B/op [Average]
[info]   (min, avg, max) = (9597.596, 12245.407, 12978.231), stdev = 1480.966
[info]   CI (99.9%): [6542.735, 17948.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.298 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.187), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.242 ±(99.9%) 1.448 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.242, 0.911), stdev = 0.376
[info]   CI (99.9%): [≈ 0, 1.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.47% complete, ETA 01:35:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 498176.885 ops/s
[info] # Warmup Iteration   2: 1806275.445 ops/s
[info] # Warmup Iteration   3: 2131864.537 ops/s
[info] # Warmup Iteration   4: 2143349.077 ops/s
[info] # Warmup Iteration   5: 2100336.235 ops/s
[info] Iteration   1: 2137130.006 ops/s
[info]                  ·gc.alloc.rate:               747.257 MB/sec
[info]                  ·gc.alloc.rate.norm:          550.304 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 489.350 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 2142032.541 ops/s
[info]                  ·gc.alloc.rate:               747.181 MB/sec
[info]                  ·gc.alloc.rate.norm:          548.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 488.963 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 2135611.549 ops/s
[info]                  ·gc.alloc.rate:                   764.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              563.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     981.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 2124837.863 ops/s
[info]                  ·gc.alloc.rate:               744.666 MB/sec
[info]                  ·gc.alloc.rate.norm:          551.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 493.418 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2100224.609 ops/s
[info]                  ·gc.alloc.rate:                   735.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              551.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     499.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   2127967.314 ±(99.9%) 64424.132 ops/s [Average]
[info]   (min, avg, max) = (2100224.609, 2127967.314, 2142032.541), stdev = 16730.743
[info]   CI (99.9%): [2063543.181, 2192391.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   747.769 ±(99.9%) 40.620 MB/sec [Average]
[info]   (min, avg, max) = (735.276, 747.769, 764.466), stdev = 10.549
[info]   CI (99.9%): [707.149, 788.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   553.028 ±(99.9%) 22.589 B/op [Average]
[info]   (min, avg, max) = (548.984, 553.028, 563.388), stdev = 5.866
[info]   CI (99.9%): [530.438, 575.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   798.938 ±(99.9%) 1146.637 MB/sec [Average]
[info]   (min, avg, max) = (664.488, 798.938, 1331.617), stdev = 297.778
[info]   CI (99.9%): [≈ 0, 1945.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   590.557 ±(99.9%) 841.398 B/op [Average]
[info]   (min, avg, max) = (488.963, 590.557, 981.360), stdev = 218.508
[info]   CI (99.9%): [≈ 0, 1431.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.029), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.71% complete, ETA 01:35:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 962908.498 ops/s
[info] # Warmup Iteration   2: 2570695.748 ops/s
[info] # Warmup Iteration   3: 2733049.680 ops/s
[info] # Warmup Iteration   4: 2804941.486 ops/s
[info] # Warmup Iteration   5: 2790284.281 ops/s
[info] Iteration   1: 2805009.814 ops/s
[info]                  ·gc.alloc.rate:                   969.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              543.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     375.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2805650.301 ops/s
[info]                  ·gc.alloc.rate:               978.541 MB/sec
[info]                  ·gc.alloc.rate.norm:          548.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 375.551 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2791592.616 ops/s
[info]                  ·gc.alloc.rate:                   988.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              557.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     755.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2746781.661 ops/s
[info]                  ·gc.alloc.rate:               950.111 MB/sec
[info]                  ·gc.alloc.rate.norm:          544.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 383.789 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2748617.969 ops/s
[info]                  ·gc.alloc.rate:               988.335 MB/sec
[info]                  ·gc.alloc.rate.norm:          565.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 767.464 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2779530.472 ±(99.9%) 113984.997 ops/s [Average]
[info]   (min, avg, max) = (2746781.661, 2779530.472, 2805650.301), stdev = 29601.542
[info]   CI (99.9%): [2665545.475, 2893515.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   974.983 ±(99.9%) 61.447 MB/sec [Average]
[info]   (min, avg, max) = (950.111, 974.983, 988.379), stdev = 15.958
[info]   CI (99.9%): [913.536, 1036.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   551.986 ±(99.9%) 36.144 B/op [Average]
[info]   (min, avg, max) = (543.824, 551.986, 565.826), stdev = 9.386
[info]   CI (99.9%): [515.843, 588.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.731 ±(99.9%) 1414.296 MB/sec [Average]
[info]   (min, avg, max) = (669.026, 937.731, 1340.540), stdev = 367.288
[info]   CI (99.9%): [≈ 0, 2352.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   531.432 ±(99.9%) 808.228 B/op [Average]
[info]   (min, avg, max) = (375.261, 531.432, 767.464), stdev = 209.894
[info]   CI (99.9%): [≈ 0, 1339.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.029), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 16.94% complete, ETA 01:34:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1014378.255 ops/s
[info] # Warmup Iteration   2: 2597693.752 ops/s
[info] # Warmup Iteration   3: 2941765.597 ops/s
[info] # Warmup Iteration   4: 2947765.250 ops/s
[info] # Warmup Iteration   5: 2949164.198 ops/s
[info] Iteration   1: 2948984.094 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2946734.023 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2947797.713 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2938711.829 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2930103.473 ops/s
[info]                  ·gc.alloc.rate:      23.167 MB/sec
[info]                  ·gc.alloc.rate.norm: 12.444 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2942466.226 ±(99.9%) 30808.437 ops/s [Average]
[info]   (min, avg, max) = (2930103.473, 2942466.226, 2948984.094), stdev = 8000.853
[info]   CI (99.9%): [2911657.789, 2973274.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   4.634 ±(99.9%) 39.895 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 4.634, 23.167), stdev = 10.360
[info]   CI (99.9%): [≈ 0, 44.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2.489 ±(99.9%) 21.429 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 2.489, 12.444), stdev = 5.565
[info]   CI (99.9%): [≈ 0, 23.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17.18% complete, ETA 01:34:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60861.165 ops/s
[info] # Warmup Iteration   2: 523207.968 ops/s
[info] # Warmup Iteration   3: 735138.971 ops/s
[info] # Warmup Iteration   4: 772139.681 ops/s
[info] # Warmup Iteration   5: 777899.294 ops/s
[info] Iteration   1: 779864.377 ops/s
[info]                  ·gc.alloc.rate:                   4774.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              9632.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4715.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9513.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 777019.880 ops/s
[info]                  ·gc.alloc.rate:                   4757.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              9636.926 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4734.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9589.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 771599.919 ops/s
[info]                  ·gc.alloc.rate:                   4699.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              9584.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4069.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8300.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.085 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 778280.467 ops/s
[info]                  ·gc.alloc.rate:                   4766.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              9639.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4757.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9619.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 776773.839 ops/s
[info]                  ·gc.alloc.rate:                   4758.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              9640.835 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4763.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9650.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   776707.696 ±(99.9%) 11966.377 ops/s [Average]
[info]   (min, avg, max) = (771599.919, 776707.696, 779864.377), stdev = 3107.630
[info]   CI (99.9%): [764741.320, 788674.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   4751.379 ±(99.9%) 115.448 MB/sec [Average]
[info]   (min, avg, max) = (4699.153, 4751.379, 4774.538), stdev = 29.982
[info]   CI (99.9%): [4635.931, 4866.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   9626.885 ±(99.9%) 91.370 B/op [Average]
[info]   (min, avg, max) = (9584.802, 9626.885, 9640.835), stdev = 23.729
[info]   CI (99.9%): [9535.515, 9718.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   4607.961 ±(99.9%) 1161.563 MB/sec [Average]
[info]   (min, avg, max) = (4069.416, 4607.961, 4763.223), stdev = 301.654
[info]   CI (99.9%): [3446.398, 5769.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9334.706 ±(99.9%) 2235.193 B/op [Average]
[info]   (min, avg, max) = (8300.336, 9334.706, 9650.599), stdev = 580.472
[info]   CI (99.9%): [7099.513, 11569.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.042), stdev = 0.009
[info]   CI (99.9%): [0.002, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.076 ±(99.9%) 0.073 B/op [Average]
[info]   (min, avg, max) = (0.042, 0.076, 0.085), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 10.000, 11.000), stdev = 1.225
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17.41% complete, ETA 01:34:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4672.138 ops/s
[info] # Warmup Iteration   2: 20134.938 ops/s
[info] # Warmup Iteration   3: 29437.302 ops/s
[info] # Warmup Iteration   4: 30032.995 ops/s
[info] # Warmup Iteration   5: 28865.738 ops/s
[info] Iteration   1: 28759.964 ops/s
[info]                  ·gc.alloc.rate:                   1855.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              101532.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72976.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.985 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.924 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 29097.887 ops/s
[info]                  ·gc.alloc.rate:                   1766.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              95537.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108197.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 234.336 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 29333.732 ops/s
[info]                  ·gc.alloc.rate:                   1795.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              96321.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107077.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.468 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 29993.336 ops/s
[info]                  ·gc.alloc.rate:                   1795.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              94229.691 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69767.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.462 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 30178.877 ops/s
[info]                  ·gc.alloc.rate:               1809.942 MB/sec
[info]                  ·gc.alloc.rate.norm:          94383.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1995.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 104058.619 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   29472.759 ±(99.9%) 2308.409 ops/s [Average]
[info]   (min, avg, max) = (28759.964, 29472.759, 30178.877), stdev = 599.487
[info]   CI (99.9%): [27164.350, 31781.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1804.684 ±(99.9%) 125.143 MB/sec [Average]
[info]   (min, avg, max) = (1766.373, 1804.684, 1855.410), stdev = 32.499
[info]   CI (99.9%): [1679.541, 1929.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   96400.749 ±(99.9%) 11531.329 B/op [Average]
[info]   (min, avg, max) = (94229.691, 96400.749, 101532.616), stdev = 2994.650
[info]   CI (99.9%): [84869.419, 107932.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1731.111 ±(99.9%) 1404.373 MB/sec [Average]
[info]   (min, avg, max) = (1329.616, 1731.111, 2000.451), stdev = 364.711
[info]   CI (99.9%): [326.738, 3135.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   92415.514 ±(99.9%) 74328.156 B/op [Average]
[info]   (min, avg, max) = (69767.582, 92415.514, 108197.565), stdev = 19302.786
[info]   CI (99.9%): [18087.358, 166743.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.101 ±(99.9%) 7.126 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.101, 4.333), stdev = 1.851
[info]   CI (99.9%): [≈ 0, 8.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   59.638 ±(99.9%) 385.485 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 59.638, 234.336), stdev = 100.109
[info]   CI (99.9%): [≈ 0, 445.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 10.000), stdev = 2.966
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 17.65% complete, ETA 01:33:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.640 ops/s
[info] # Warmup Iteration   2: 65470.463 ops/s
[info] # Warmup Iteration   3: 101306.057 ops/s
[info] # Warmup Iteration   4: 99556.752 ops/s
[info] # Warmup Iteration   5: 97149.442 ops/s
[info] Iteration   1: 101422.586 ops/s
[info]                  ·gc.alloc.rate:                   805.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              12502.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10274.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.435 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 98188.562 ops/s
[info]                  ·gc.alloc.rate:               911.840 MB/sec
[info]                  ·gc.alloc.rate.norm:          14615.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10619.126 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 100000.564 ops/s
[info]                  ·gc.alloc.rate:                   829.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              13048.862 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20857.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.513 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 96951.725 ops/s
[info]                  ·gc.alloc.rate:               946.594 MB/sec
[info]                  ·gc.alloc.rate.norm:          15366.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10760.005 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 100894.081 ops/s
[info]                  ·gc.alloc.rate:               809.530 MB/sec
[info]                  ·gc.alloc.rate.norm:          12627.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:      656.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10235.636 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   99491.504 ±(99.9%) 7230.495 ops/s [Average]
[info]   (min, avg, max) = (96951.725, 99491.504, 101422.586), stdev = 1877.737
[info]   CI (99.9%): [92261.009, 106721.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   860.595 ±(99.9%) 248.165 MB/sec [Average]
[info]   (min, avg, max) = (805.864, 860.595, 946.594), stdev = 64.448
[info]   CI (99.9%): [612.430, 1108.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   13632.111 ±(99.9%) 4946.709 B/op [Average]
[info]   (min, avg, max) = (12502.065, 13632.111, 15366.565), stdev = 1284.645
[info]   CI (99.9%): [8685.401, 18578.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   793.832 ±(99.9%) 1144.141 MB/sec [Average]
[info]   (min, avg, max) = (656.182, 793.832, 1325.331), stdev = 297.130
[info]   CI (99.9%): [≈ 0, 1937.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   12549.464 ±(99.9%) 17904.674 B/op [Average]
[info]   (min, avg, max) = (10235.636, 12549.464, 20857.665), stdev = 4649.787
[info]   CI (99.9%): [≈ 0, 30454.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.355 ±(99.9%) 2.999 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.355, 1.748), stdev = 0.779
[info]   CI (99.9%): [≈ 0, 3.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   5.590 ±(99.9%) 47.198 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.590, 27.513), stdev = 12.257
[info]   CI (99.9%): [≈ 0, 52.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 8.000), stdev = 1.817
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.88% complete, ETA 01:33:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7838.813 ops/s
[info] # Warmup Iteration   2: 51560.159 ops/s
[info] # Warmup Iteration   3: 67114.966 ops/s
[info] # Warmup Iteration   4: 75133.340 ops/s
[info] # Warmup Iteration   5: 83081.083 ops/s
[info] Iteration   1: 77718.973 ops/s
[info]                  ·gc.alloc.rate:                   1474.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              29865.423 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26844.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.201 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 82914.340 ops/s
[info]                  ·gc.alloc.rate:                   1500.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              28472.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1959.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37200.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.542 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.261 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         27.000 ms
[info] Iteration   3: 79457.752 ops/s
[info]                  ·gc.alloc.rate:                        1621.262 MB/sec
[info]                  ·gc.alloc.rate.norm:                   32098.397 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.010 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0.199 B/op
[info]                  ·gc.churn.Metaspace:                   0.028 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              0.563 B/op
[info]                  ·gc.churn.PS_Eden_Space:               1556.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          30822.728 B/op
[info]                  ·gc.churn.PS_Old_Gen:                  14.017 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:             277.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           17.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      337.358 B/op
[info]                  ·gc.count:                             4.000 counts
[info]                  ·gc.time:                              74.000 ms
[info] Iteration   4: 75239.938 ops/s
[info]                  ·gc.alloc.rate:                   1571.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              32873.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1299.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27172.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.866 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 143.607 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 74844.020 ops/s
[info]                  ·gc.alloc.rate:                   1154.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              24275.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1297.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27272.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.206 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   78035.005 ±(99.9%) 12760.511 ops/s [Average]
[info]   (min, avg, max) = (74844.020, 78035.005, 82914.340), stdev = 3313.864
[info]   CI (99.9%): [65274.493, 90795.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1464.496 ±(99.9%) 703.368 MB/sec [Average]
[info]   (min, avg, max) = (1154.631, 1464.496, 1621.262), stdev = 182.662
[info]   CI (99.9%): [761.128, 2167.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   29517.094 ±(99.9%) 13144.303 B/op [Average]
[info]   (min, avg, max) = (24275.765, 29517.094, 32873.043), stdev = 3413.534
[info]   CI (99.9%): [16372.791, 42661.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space":
[info]   0.002 ±(99.9%) 0.017 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm":
[info]   0.040 ±(99.9%) 0.342 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.199), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.Metaspace":
[info]   0.006 ±(99.9%) 0.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.028), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.Metaspace.norm":
[info]   0.113 ±(99.9%) 0.970 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.113, 0.563), stdev = 0.252
[info]   CI (99.9%): [≈ 0, 1.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1487.722 ±(99.9%) 1098.917 MB/sec [Average]
[info]   (min, avg, max) = (1297.156, 1487.722, 1959.810), stdev = 285.385
[info]   CI (99.9%): [388.806, 2586.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   29862.423 ±(99.9%) 16984.402 B/op [Average]
[info]   (min, avg, max) = (26844.366, 29862.423, 37200.316), stdev = 4410.795
[info]   CI (99.9%): [12878.022, 46846.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Old_Gen":
[info]   2.803 ±(99.9%) 24.138 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.803, 14.017), stdev = 6.269
[info]   CI (99.9%): [≈ 0, 26.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Old_Gen.norm":
[info]   55.503 ±(99.9%) 477.896 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 55.503, 277.514), stdev = 124.108
[info]   CI (99.9%): [≈ 0, 533.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   5.794 ±(99.9%) 25.809 MB/sec [Average]
[info]   (min, avg, max) = (0.899, 5.794, 17.040), stdev = 6.703
[info]   CI (99.9%): [≈ 0, 31.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   116.727 ±(99.9%) 511.365 B/op [Average]
[info]   (min, avg, max) = (18.201, 116.727, 337.358), stdev = 132.800
[info]   CI (99.9%): [≈ 0, 628.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   135.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 27.000, 74.000), stdev = 27.595
[info]   CI (99.9%): [135.000, 135.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.12% complete, ETA 01:33:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42932.748 ops/s
[info] # Warmup Iteration   2: 120832.654 ops/s
[info] # Warmup Iteration   3: 129179.125 ops/s
[info] # Warmup Iteration   4: 129720.255 ops/s
[info] # Warmup Iteration   5: 127922.841 ops/s
[info] Iteration   1: 139358.742 ops/s
[info]                  ·gc.alloc.rate:                   846.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              9557.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1220.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13782.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      14.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 158.898 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         27.000 ms
[info] Iteration   2: 141072.836 ops/s
[info]                  ·gc.alloc.rate:               861.407 MB/sec
[info]                  ·gc.alloc.rate.norm:          9608.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:      614.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6852.078 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   3: 139128.874 ops/s
[info]                  ·gc.alloc.rate:                   855.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              9678.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1233.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13952.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.339 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   4: 140677.880 ops/s
[info]                  ·gc.alloc.rate:               851.502 MB/sec
[info]                  ·gc.alloc.rate.norm:          9526.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:      619.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6927.111 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   5: 140986.575 ops/s
[info]                  ·gc.alloc.rate:                   857.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              9571.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          623.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6956.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.088 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   140244.981 ±(99.9%) 3578.107 ops/s [Average]
[info]   (min, avg, max) = (139128.874, 140244.981, 141072.836), stdev = 929.223
[info]   CI (99.9%): [136666.874, 143823.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   854.468 ±(99.9%) 22.082 MB/sec [Average]
[info]   (min, avg, max) = (846.430, 854.468, 861.407), stdev = 5.734
[info]   CI (99.9%): [832.386, 876.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9588.451 ±(99.9%) 224.829 B/op [Average]
[info]   (min, avg, max) = (9526.108, 9588.451, 9678.272), stdev = 58.387
[info]   CI (99.9%): [9363.622, 9813.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   862.135 ±(99.9%) 1282.810 MB/sec [Average]
[info]   (min, avg, max) = (614.263, 862.135, 1233.419), stdev = 333.142
[info]   CI (99.9%): [≈ 0, 2144.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9694.123 ±(99.9%) 14671.934 B/op [Average]
[info]   (min, avg, max) = (6852.078, 9694.123, 13952.528), stdev = 3810.255
[info]   CI (99.9%): [≈ 0, 24366.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2.822 ±(99.9%) 24.218 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.822, 14.073), stdev = 6.289
[info]   CI (99.9%): [≈ 0, 27.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   31.865 ±(99.9%) 273.448 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.865, 158.898), stdev = 71.014
[info]   CI (99.9%): [≈ 0, 305.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   82.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (11.000, 16.400, 27.000), stdev = 7.603
[info]   CI (99.9%): [82.000, 82.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 18.35% complete, ETA 01:33:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3402.294 ops/s
[info] # Warmup Iteration   2: 24434.133 ops/s
[info] # Warmup Iteration   3: 51237.888 ops/s
[info] # Warmup Iteration   4: 48402.601 ops/s
[info] # Warmup Iteration   5: 51573.987 ops/s
[info] Iteration   1: 51632.331 ops/s
[info]                  ·gc.alloc.rate:               2169.799 MB/sec
[info]                  ·gc.alloc.rate.norm:          66142.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1985.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60509.217 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 51366.265 ops/s
[info]                  ·gc.alloc.rate:                   2161.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              66225.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60924.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.551 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 50471.770 ops/s
[info]                  ·gc.alloc.rate:                   2140.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              66755.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2661.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83006.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.298 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 51598.718 ops/s
[info]                  ·gc.alloc.rate:                   2156.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              65790.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61147.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.635 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 51464.294 ops/s
[info]                  ·gc.alloc.rate:               2164.393 MB/sec
[info]                  ·gc.alloc.rate.norm:          66189.511 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61468.248 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   51306.676 ±(99.9%) 1843.491 ops/s [Average]
[info]   (min, avg, max) = (50471.770, 51306.676, 51632.331), stdev = 478.749
[info]   CI (99.9%): [49463.185, 53150.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2158.721 ±(99.9%) 42.512 MB/sec [Average]
[info]   (min, avg, max) = (2140.805, 2158.721, 2169.799), stdev = 11.040
[info]   CI (99.9%): [2116.210, 2201.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66220.360 ±(99.9%) 1331.219 B/op [Average]
[info]   (min, avg, max) = (65790.142, 66220.360, 66755.041), stdev = 345.713
[info]   CI (99.9%): [64889.140, 67551.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2130.080 ±(99.9%) 1145.712 MB/sec [Average]
[info]   (min, avg, max) = (1985.012, 2130.080, 2661.998), stdev = 297.538
[info]   CI (99.9%): [984.368, 3275.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65411.261 ±(99.9%) 37899.945 B/op [Average]
[info]   (min, avg, max) = (60509.217, 65411.261, 83006.987), stdev = 9842.495
[info]   CI (99.9%): [27511.317, 103311.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.897 ±(99.9%) 4.118 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.897, 2.551), stdev = 1.070
[info]   CI (99.9%): [≈ 0, 5.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18.59% complete, ETA 01:32:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9918.912 ops/s
[info] # Warmup Iteration   2: 32513.113 ops/s
[info] # Warmup Iteration   3: 35183.821 ops/s
[info] # Warmup Iteration   4: 40773.165 ops/s
[info] # Warmup Iteration   5: 42789.157 ops/s
[info] Iteration   1: 45166.204 ops/s
[info]                  ·gc.alloc.rate:               730.102 MB/sec
[info]                  ·gc.alloc.rate.norm:          25440.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23141.788 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 42062.752 ops/s
[info]                  ·gc.alloc.rate:               1018.425 MB/sec
[info]                  ·gc.alloc.rate.norm:          38096.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24862.834 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 43275.225 ops/s
[info]                  ·gc.alloc.rate:                   870.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              31645.940 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48333.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.344 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 43157.501 ops/s
[info]                  ·gc.alloc.rate:               849.355 MB/sec
[info]                  ·gc.alloc.rate.norm:          30972.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24232.105 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 45038.121 ops/s
[info]                  ·gc.alloc.rate:                   886.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              30976.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23209.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.161 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.491 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   43739.961 ±(99.9%) 5125.718 ops/s [Average]
[info]   (min, avg, max) = (42062.752, 43739.961, 45166.204), stdev = 1331.133
[info]   CI (99.9%): [38614.243, 48865.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   870.924 ±(99.9%) 395.973 MB/sec [Average]
[info]   (min, avg, max) = (730.102, 870.924, 1018.425), stdev = 102.833
[info]   CI (99.9%): [474.951, 1266.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   31426.341 ±(99.9%) 17304.663 B/op [Average]
[info]   (min, avg, max) = (25440.582, 31426.341, 38096.903), stdev = 4493.966
[info]   CI (99.9%): [14121.678, 48731.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   797.315 ±(99.9%) 1144.496 MB/sec [Average]
[info]   (min, avg, max) = (664.131, 797.315, 1329.002), stdev = 297.222
[info]   CI (99.9%): [≈ 0, 1941.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   28755.803 ±(99.9%) 42233.359 B/op [Average]
[info]   (min, avg, max) = (23141.788, 28755.803, 48333.197), stdev = 10967.869
[info]   CI (99.9%): [≈ 0, 70989.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.753 ±(99.9%) 4.042 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.753, 2.161), stdev = 1.050
[info]   CI (99.9%): [≈ 0, 4.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   26.767 ±(99.9%) 143.052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.767, 75.491), stdev = 37.150
[info]   CI (99.9%): [≈ 0, 169.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.600, 14.000), stdev = 3.050
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.82% complete, ETA 01:32:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11135.748 ops/s
[info] # Warmup Iteration   2: 32518.584 ops/s
[info] # Warmup Iteration   3: 40087.950 ops/s
[info] # Warmup Iteration   4: 40827.249 ops/s
[info] # Warmup Iteration   5: 44710.299 ops/s
[info] Iteration   1: 44028.954 ops/s
[info]                  ·gc.alloc.rate:               570.315 MB/sec
[info]                  ·gc.alloc.rate.norm:          20385.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23717.082 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 45161.322 ops/s
[info]                  ·gc.alloc.rate:                   615.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              21436.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23134.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60.804 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 43847.202 ops/s
[info]                  ·gc.alloc.rate:               554.301 MB/sec
[info]                  ·gc.alloc.rate.norm:          19895.842 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23827.469 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 44590.649 ops/s
[info]                  ·gc.alloc.rate:      457.317 MB/sec
[info]                  ·gc.alloc.rate.norm: 16141.064 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 43116.538 ops/s
[info]                  ·gc.alloc.rate:               597.203 MB/sec
[info]                  ·gc.alloc.rate.norm:          21799.735 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24242.986 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   44148.933 ±(99.9%) 2977.297 ops/s [Average]
[info]   (min, avg, max) = (43116.538, 44148.933, 45161.322), stdev = 773.195
[info]   CI (99.9%): [41171.636, 47126.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   558.853 ±(99.9%) 236.585 MB/sec [Average]
[info]   (min, avg, max) = (457.317, 558.853, 615.131), stdev = 61.440
[info]   CI (99.9%): [322.269, 795.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19931.553 ±(99.9%) 8680.708 B/op [Average]
[info]   (min, avg, max) = (16141.064, 19931.553, 21799.735), stdev = 2254.352
[info]   CI (99.9%): [11250.846, 28612.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   531.077 ±(99.9%) 1143.184 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.077, 664.135), stdev = 296.881
[info]   CI (99.9%): [≈ 0, 1674.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18984.465 ±(99.9%) 40893.925 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18984.465, 24242.986), stdev = 10620.022
[info]   CI (99.9%): [≈ 0, 59878.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.349 ±(99.9%) 3.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.349, 1.745), stdev = 0.780
[info]   CI (99.9%): [≈ 0, 3.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12.161 ±(99.9%) 104.707 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.161, 60.804), stdev = 27.192
[info]   CI (99.9%): [≈ 0, 116.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 5.000), stdev = 2.236
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.06% complete, ETA 01:32:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16856.494 ops/s
[info] # Warmup Iteration   2: 36878.459 ops/s
[info] # Warmup Iteration   3: 48409.010 ops/s
[info] # Warmup Iteration   4: 47452.778 ops/s
[info] # Warmup Iteration   5: 48850.264 ops/s
[info] Iteration   1: 47054.598 ops/s
[info]                  ·gc.alloc.rate:               588.226 MB/sec
[info]                  ·gc.alloc.rate.norm:          19675.387 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22236.647 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 49170.625 ops/s
[info]                  ·gc.alloc.rate:                   514.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              16456.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21290.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.660 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.144 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 48558.426 ops/s
[info]                  ·gc.alloc.rate:                   506.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              16421.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21558.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.590 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 49752.181 ops/s
[info]                  ·gc.alloc.rate:      500.251 MB/sec
[info]                  ·gc.alloc.rate.norm: 15824.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 49559.537 ops/s
[info]                  ·gc.alloc.rate:               510.493 MB/sec
[info]                  ·gc.alloc.rate.norm:          16212.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21133.565 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   48819.073 ±(99.9%) 4184.586 ops/s [Average]
[info]   (min, avg, max) = (47054.598, 48819.073, 49752.181), stdev = 1086.724
[info]   CI (99.9%): [44634.488, 53003.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   523.953 ±(99.9%) 139.760 MB/sec [Average]
[info]   (min, avg, max) = (500.251, 523.953, 588.226), stdev = 36.295
[info]   CI (99.9%): [384.193, 663.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   16917.845 ±(99.9%) 6014.294 B/op [Average]
[info]   (min, avg, max) = (15824.009, 16917.845, 19675.387), stdev = 1561.893
[info]   CI (99.9%): [10903.551, 22932.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   532.116 ±(99.9%) 1145.421 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.116, 665.462), stdev = 297.462
[info]   CI (99.9%): [≈ 0, 1677.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   17243.817 ±(99.9%) 37154.173 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17243.817, 22236.647), stdev = 9648.821
[info]   CI (99.9%): [≈ 0, 54397.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.336 ±(99.9%) 2.851 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.336, 1.660), stdev = 0.741
[info]   CI (99.9%): [≈ 0, 3.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10.747 ±(99.9%) 91.268 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.747, 53.144), stdev = 23.702
[info]   CI (99.9%): [≈ 0, 102.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 5.000), stdev = 2.074
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 19.29% complete, ETA 01:32:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16823.012 ops/s
[info] # Warmup Iteration   2: 40488.343 ops/s
[info] # Warmup Iteration   3: 46913.180 ops/s
[info] # Warmup Iteration   4: 50151.125 ops/s
[info] # Warmup Iteration   5: 48810.080 ops/s
[info] Iteration   1: 50185.859 ops/s
[info]                  ·gc.alloc.rate:               543.098 MB/sec
[info]                  ·gc.alloc.rate.norm:          17032.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20953.554 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 50777.012 ops/s
[info]                  ·gc.alloc.rate:                   546.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              16942.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20689.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.837 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.931 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 49420.351 ops/s
[info]                  ·gc.alloc.rate:               552.215 MB/sec
[info]                  ·gc.alloc.rate.norm:          17582.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21257.499 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 50396.394 ops/s
[info]                  ·gc.alloc.rate:               539.109 MB/sec
[info]                  ·gc.alloc.rate.norm:          16835.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20824.645 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 48941.184 ops/s
[info]                  ·gc.alloc.rate:      450.996 MB/sec
[info]                  ·gc.alloc.rate.norm: 14501.195 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   49944.160 ±(99.9%) 2879.572 ops/s [Average]
[info]   (min, avg, max) = (48941.184, 49944.160, 50777.012), stdev = 747.816
[info]   CI (99.9%): [47064.588, 52823.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   526.457 ±(99.9%) 163.497 MB/sec [Average]
[info]   (min, avg, max) = (450.996, 526.457, 552.215), stdev = 42.460
[info]   CI (99.9%): [362.960, 689.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16578.915 ±(99.9%) 4607.972 B/op [Average]
[info]   (min, avg, max) = (14501.195, 16578.915, 17582.565), stdev = 1196.676
[info]   CI (99.9%): [11970.943, 21186.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   534.081 ±(99.9%) 1149.651 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.081, 668.130), stdev = 298.561
[info]   CI (99.9%): [≈ 0, 1683.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   16745.033 ±(99.9%) 36054.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16745.033, 21257.499), stdev = 9363.118
[info]   CI (99.9%): [≈ 0, 52799.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.167 ±(99.9%) 1.441 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.167, 0.837), stdev = 0.374
[info]   CI (99.9%): [≈ 0, 1.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   5.186 ±(99.9%) 44.654 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.186, 25.931), stdev = 11.597
[info]   CI (99.9%): [≈ 0, 49.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 6.000), stdev = 2.345
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19.53% complete, ETA 01:31:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3481.688 ops/s
[info] # Warmup Iteration   2: 9783.323 ops/s
[info] # Warmup Iteration   3: 15028.291 ops/s
[info] # Warmup Iteration   4: 18131.403 ops/s
[info] # Warmup Iteration   5: 17600.941 ops/s
[info] Iteration   1: 17583.120 ops/s
[info]                  ·gc.alloc.rate:                   1259.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              112771.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118827.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 135.348 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 17668.532 ops/s
[info]                  ·gc.alloc.rate:                   1273.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              113471.357 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118314.879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.694 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 16826.859 ops/s
[info]                  ·gc.alloc.rate:                   1451.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              135724.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124351.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.635 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 339.976 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 16929.037 ops/s
[info]                  ·gc.alloc.rate:                   1652.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              153659.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123485.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.892 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 175.893 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 17047.860 ops/s
[info]                  ·gc.alloc.rate:                   1453.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              134211.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     183639.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 587.760 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   17211.082 ±(99.9%) 1493.200 ops/s [Average]
[info]   (min, avg, max) = (16826.859, 17211.082, 17668.532), stdev = 387.779
[info]   CI (99.9%): [15717.882, 18704.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   1418.319 ±(99.9%) 618.588 MB/sec [Average]
[info]   (min, avg, max) = (1259.927, 1418.319, 1652.740), stdev = 160.645
[info]   CI (99.9%): [799.731, 2036.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   129967.459 ±(99.9%) 66144.408 B/op [Average]
[info]   (min, avg, max) = (112771.530, 129967.459, 153659.125), stdev = 17177.493
[info]   CI (99.9%): [63823.051, 196111.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1460.578 ±(99.9%) 1137.889 MB/sec [Average]
[info]   (min, avg, max) = (1327.582, 1460.578, 1989.194), stdev = 295.506
[info]   CI (99.9%): [322.690, 2598.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   133723.648 ±(99.9%) 107947.776 B/op [Average]
[info]   (min, avg, max) = (118314.879, 133723.648, 183639.175), stdev = 28033.695
[info]   CI (99.9%): [25775.871, 241671.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2.683 ±(99.9%) 9.359 MB/sec [Average]
[info]   (min, avg, max) = (0.008, 2.683, 6.367), stdev = 2.431
[info]   CI (99.9%): [≈ 0, 12.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   247.934 ±(99.9%) 867.349 B/op [Average]
[info]   (min, avg, max) = (0.694, 247.934, 587.760), stdev = 225.248
[info]   CI (99.9%): [≈ 0, 1115.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.600, 11.000), stdev = 2.702
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.76% complete, ETA 01:31:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3831.308 ops/s
[info] # Warmup Iteration   2: 12368.966 ops/s
[info] # Warmup Iteration   3: 17732.901 ops/s
[info] # Warmup Iteration   4: 17903.710 ops/s
[info] # Warmup Iteration   5: 16409.632 ops/s
[info] Iteration   1: 17053.376 ops/s
[info]                  ·gc.alloc.rate:                   1126.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              103938.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1294.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119391.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.126 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 472.902 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 17686.853 ops/s
[info]                  ·gc.alloc.rate:                   1368.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              121747.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1297.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115372.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.694 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 16031.770 ops/s
[info]                  ·gc.alloc.rate:               1511.099 MB/sec
[info]                  ·gc.alloc.rate.norm:          148272.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1271.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 124810.234 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     32.000 ms
[info] Iteration   4: 15894.459 ops/s
[info]                  ·gc.alloc.rate:               1236.358 MB/sec
[info]                  ·gc.alloc.rate.norm:          122412.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1209.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 119710.998 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     34.000 ms
[info] Iteration   5: 16782.854 ops/s
[info]                  ·gc.alloc.rate:                   1046.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              98146.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1168.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109598.868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      9.289 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 871.103 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         25.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   16689.862 ±(99.9%) 2856.060 ops/s [Average]
[info]   (min, avg, max) = (15894.459, 16689.862, 17686.853), stdev = 741.710
[info]   CI (99.9%): [13833.803, 19545.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1257.917 ±(99.9%) 717.235 MB/sec [Average]
[info]   (min, avg, max) = (1046.606, 1257.917, 1511.099), stdev = 186.264
[info]   CI (99.9%): [540.681, 1975.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   118903.594 ±(99.9%) 75499.632 B/op [Average]
[info]   (min, avg, max) = (98146.542, 118903.594, 148272.594), stdev = 19607.015
[info]   CI (99.9%): [43403.962, 194403.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1248.224 ±(99.9%) 218.864 MB/sec [Average]
[info]   (min, avg, max) = (1168.730, 1248.224, 1297.219), stdev = 56.838
[info]   CI (99.9%): [1029.360, 1467.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   117776.720 ±(99.9%) 21822.994 B/op [Average]
[info]   (min, avg, max) = (109598.868, 117776.720, 124810.234), stdev = 5667.362
[info]   CI (99.9%): [95953.726, 139599.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2.885 ±(99.9%) 16.218 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.885, 9.289), stdev = 4.212
[info]   CI (99.9%): [≈ 0, 19.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   268.940 ±(99.9%) 1516.995 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 268.940, 871.103), stdev = 393.959
[info]   CI (99.9%): [≈ 0, 1785.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   111.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 22.200, 34.000), stdev = 11.628
[info]   CI (99.9%): [111.000, 111.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.00% complete, ETA 01:31:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75223.058 ops/s
[info] # Warmup Iteration   2: 121717.532 ops/s
[info] # Warmup Iteration   3: 153600.718 ops/s
[info] # Warmup Iteration   4: 156570.852 ops/s
[info] # Warmup Iteration   5: 150002.594 ops/s
[info] Iteration   1: 155526.113 ops/s
[info]                  ·gc.alloc.rate:      404.754 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 154438.369 ops/s
[info]                  ·gc.alloc.rate:               413.519 MB/sec
[info]                  ·gc.alloc.rate.norm:          4213.467 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6761.415 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 156154.112 ops/s
[info]                  ·gc.alloc.rate:      406.475 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 159136.662 ops/s
[info]                  ·gc.alloc.rate:                   431.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              4270.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6561.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.412 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 158146.691 ops/s
[info]                  ·gc.alloc.rate:               424.451 MB/sec
[info]                  ·gc.alloc.rate.norm:          4222.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6612.892 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   156680.389 ±(99.9%) 7411.688 ops/s [Average]
[info]   (min, avg, max) = (154438.369, 156680.389, 159136.662), stdev = 1924.792
[info]   CI (99.9%): [149268.702, 164092.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   416.201 ±(99.9%) 44.921 MB/sec [Average]
[info]   (min, avg, max) = (404.754, 416.201, 431.805), stdev = 11.666
[info]   CI (99.9%): [371.280, 461.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4179.720 ±(99.9%) 305.755 B/op [Average]
[info]   (min, avg, max) = (4096.003, 4179.720, 4270.310), stdev = 79.404
[info]   CI (99.9%): [3873.965, 4485.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   398.358 ±(99.9%) 1400.286 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 398.358, 664.687), stdev = 363.650
[info]   CI (99.9%): [≈ 0, 1798.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3987.237 ±(99.9%) 14018.541 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3987.237, 6761.415), stdev = 3640.571
[info]   CI (99.9%): [≈ 0, 18005.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.082 ±(99.9%) 0.709 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.082, 0.412), stdev = 0.184
[info]   CI (99.9%): [≈ 0, 0.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20.24% complete, ETA 01:31:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 894.294 ops/s
[info] # Warmup Iteration   2: 9708.428 ops/s
[info] # Warmup Iteration   3: 14906.347 ops/s
[info] # Warmup Iteration   4: 16395.021 ops/s
[info] # Warmup Iteration   5: 16652.201 ops/s
[info] Iteration   1: 15282.341 ops/s
[info]                  ·gc.alloc.rate:                   1592.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              164028.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1310.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134939.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.814 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 186.812 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 15042.796 ops/s
[info]                  ·gc.alloc.rate:                   1398.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              146334.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137510.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.615 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 15188.893 ops/s
[info]                  ·gc.alloc.rate:               1654.481 MB/sec
[info]                  ·gc.alloc.rate.norm:          171366.548 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1977.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 204781.131 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 14975.772 ops/s
[info]                  ·gc.alloc.rate:                   1561.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              164119.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138921.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.382 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145.226 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 15723.781 ops/s
[info]                  ·gc.alloc.rate:                   1399.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              140068.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132680.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 333.224 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   15242.717 ±(99.9%) 1134.337 ops/s [Average]
[info]   (min, avg, max) = (14975.772, 15242.717, 15723.781), stdev = 294.584
[info]   CI (99.9%): [14108.380, 16377.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1521.511 ±(99.9%) 448.402 MB/sec [Average]
[info]   (min, avg, max) = (1398.745, 1521.511, 1654.481), stdev = 116.449
[info]   CI (99.9%): [1073.109, 1969.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   157183.673 ±(99.9%) 51183.802 B/op [Average]
[info]   (min, avg, max) = (140068.585, 157183.673, 171366.548), stdev = 13292.271
[info]   CI (99.9%): [105999.872, 208367.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1449.945 ±(99.9%) 1134.960 MB/sec [Average]
[info]   (min, avg, max) = (1310.295, 1449.945, 1977.087), stdev = 294.746
[info]   CI (99.9%): [314.985, 2584.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   149766.462 ±(99.9%) 118781.972 B/op [Average]
[info]   (min, avg, max) = (132680.501, 149766.462, 204781.131), stdev = 30847.301
[info]   CI (99.9%): [30984.490, 268548.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.308 ±(99.9%) 5.354 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.308, 3.330), stdev = 1.390
[info]   CI (99.9%): [≈ 0, 6.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   133.375 ±(99.9%) 538.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 133.375, 333.224), stdev = 139.719
[info]   CI (99.9%): [≈ 0, 671.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.140
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20.47% complete, ETA 01:30:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14775.682 ops/s
[info] # Warmup Iteration   2: 49822.616 ops/s
[info] # Warmup Iteration   3: 67368.199 ops/s
[info] # Warmup Iteration   4: 68131.139 ops/s
[info] # Warmup Iteration   5: 70221.770 ops/s
[info] Iteration   1: 70904.974 ops/s
[info]                  ·gc.alloc.rate:                   1641.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              36439.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29454.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.462 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 71807.056 ops/s
[info]                  ·gc.alloc.rate:               1666.107 MB/sec
[info]                  ·gc.alloc.rate.norm:          36514.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29113.727 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 70263.119 ops/s
[info]                  ·gc.alloc.rate:                   1637.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              36672.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44727.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.466 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 71672.432 ops/s
[info]                  ·gc.alloc.rate:                   1649.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              36210.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29299.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.914 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 71455.073 ops/s
[info]                  ·gc.alloc.rate:                   1683.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              37079.926 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44186.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.459 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   71220.531 ±(99.9%) 2450.119 ops/s [Average]
[info]   (min, avg, max) = (70263.119, 71220.531, 71807.056), stdev = 636.288
[info]   CI (99.9%): [68770.412, 73670.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1655.608 ±(99.9%) 73.977 MB/sec [Average]
[info]   (min, avg, max) = (1637.475, 1655.608, 1683.850), stdev = 19.211
[info]   CI (99.9%): [1581.632, 1729.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   36583.564 ±(99.9%) 1246.056 B/op [Average]
[info]   (min, avg, max) = (36210.630, 36583.564, 37079.926), stdev = 323.597
[info]   CI (99.9%): [35337.508, 37829.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1598.669 ±(99.9%) 1417.337 MB/sec [Average]
[info]   (min, avg, max) = (1326.938, 1598.669, 2006.568), stdev = 368.078
[info]   CI (99.9%): [181.332, 3016.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   35356.522 ±(99.9%) 32001.680 B/op [Average]
[info]   (min, avg, max) = (29113.727, 35356.522, 44727.723), stdev = 8310.735
[info]   CI (99.9%): [3354.842, 67358.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.460 ±(99.9%) 1.245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.460, 0.914), stdev = 0.323
[info]   CI (99.9%): [≈ 0, 1.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.71% complete, ETA 01:30:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26125.315 ops/s
[info] # Warmup Iteration   2: 76622.895 ops/s
[info] # Warmup Iteration   3: 98778.285 ops/s
[info] # Warmup Iteration   4: 108437.657 ops/s
[info] # Warmup Iteration   5: 108574.560 ops/s
[info] Iteration   1: 106944.706 ops/s
[info]                  ·gc.alloc.rate:                   1418.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              20869.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19469.451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.306 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 105254.258 ops/s
[info]                  ·gc.alloc.rate:               1399.010 MB/sec
[info]                  ·gc.alloc.rate.norm:          20919.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1323.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19792.722 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 105452.820 ops/s
[info]                  ·gc.alloc.rate:                   1412.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              21082.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29691.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.621 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 105403.670 ops/s
[info]                  ·gc.alloc.rate:                   1393.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              20803.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19848.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.739 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 109019.997 ops/s
[info]                  ·gc.alloc.rate:                   1450.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              20934.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19237.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.826 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.918 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   106415.090 ±(99.9%) 6197.772 ops/s [Average]
[info]   (min, avg, max) = (105254.258, 106415.090, 109019.997), stdev = 1609.542
[info]   CI (99.9%): [100217.318, 112612.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1414.857 ±(99.9%) 85.418 MB/sec [Average]
[info]   (min, avg, max) = (1393.870, 1414.857, 1450.379), stdev = 22.183
[info]   CI (99.9%): [1329.439, 1500.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20921.928 ±(99.9%) 398.226 B/op [Average]
[info]   (min, avg, max) = (20803.533, 20921.928, 21082.869), stdev = 103.418
[info]   CI (99.9%): [20523.702, 21320.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1459.836 ±(99.9%) 1140.890 MB/sec [Average]
[info]   (min, avg, max) = (1322.994, 1459.836, 1989.796), stdev = 296.285
[info]   CI (99.9%): [318.946, 2600.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21608.013 ±(99.9%) 17427.328 B/op [Average]
[info]   (min, avg, max) = (19237.853, 21608.013, 29691.874), stdev = 4525.822
[info]   CI (99.9%): [4180.686, 39035.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.188 ±(99.9%) 1.376 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.188, 0.826), stdev = 0.357
[info]   CI (99.9%): [≈ 0, 1.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.717 ±(99.9%) 19.836 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.717, 11.918), stdev = 5.151
[info]   CI (99.9%): [≈ 0, 22.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.94% complete, ETA 01:30:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68960.470 ops/s
[info] # Warmup Iteration   2: 241850.078 ops/s
[info] # Warmup Iteration   3: 241428.996 ops/s
[info] # Warmup Iteration   4: 273764.966 ops/s
[info] # Warmup Iteration   5: 272944.412 ops/s
[info] Iteration   1: 274759.395 ops/s
[info]                  ·gc.alloc.rate:                   452.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              2593.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2930.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 272108.701 ops/s
[info]                  ·gc.alloc.rate:               450.310 MB/sec
[info]                  ·gc.alloc.rate.norm:          2604.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3860.654 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 275025.443 ops/s
[info]                  ·gc.alloc.rate:      436.239 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 273682.084 ops/s
[info]                  ·gc.alloc.rate:               454.905 MB/sec
[info]                  ·gc.alloc.rate.norm:          2616.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3838.398 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 274277.765 ops/s
[info]                  ·gc.alloc.rate:      434.965 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   273970.677 ±(99.9%) 4465.399 ops/s [Average]
[info]   (min, avg, max) = (272108.701, 273970.677, 275025.443), stdev = 1159.650
[info]   CI (99.9%): [269505.278, 278436.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   445.870 ±(99.9%) 36.675 MB/sec [Average]
[info]   (min, avg, max) = (434.965, 445.870, 454.905), stdev = 9.524
[info]   CI (99.9%): [409.194, 482.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2561.229 ±(99.9%) 231.346 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2561.229, 2616.139), stdev = 60.080
[info]   CI (99.9%): [2329.883, 2792.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   369.343 ±(99.9%) 1321.158 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.343, 667.496), stdev = 343.101
[info]   CI (99.9%): [≈ 0, 1690.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2125.912 ±(99.9%) 7611.311 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2125.912, 3860.654), stdev = 1976.633
[info]   CI (99.9%): [≈ 0, 9737.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.077 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 21.18% complete, ETA 01:29:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120884.944 ops/s
[info] # Warmup Iteration   2: 251485.418 ops/s
[info] # Warmup Iteration   3: 267985.868 ops/s
[info] # Warmup Iteration   4: 287526.941 ops/s
[info] # Warmup Iteration   5: 287263.524 ops/s
[info] Iteration   1: 287037.022 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 286981.538 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 287056.706 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 286633.840 ops/s
[info]                  ·gc.alloc.rate:      0.849 MB/sec
[info]                  ·gc.alloc.rate.norm: 4.663 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 287004.943 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   286942.810 ±(99.9%) 674.332 ops/s [Average]
[info]   (min, avg, max) = (286633.840, 286942.810, 287056.706), stdev = 175.122
[info]   CI (99.9%): [286268.478, 287617.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.170 ±(99.9%) 1.462 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.170, 0.849), stdev = 0.380
[info]   CI (99.9%): [≈ 0, 1.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.934 ±(99.9%) 8.028 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.934, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.41% complete, ETA 01:29:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16224.371 ops/s
[info] # Warmup Iteration   2: 65141.696 ops/s
[info] # Warmup Iteration   3: 86854.151 ops/s
[info] # Warmup Iteration   4: 86753.095 ops/s
[info] # Warmup Iteration   5: 78420.133 ops/s
[info] Iteration   1: 93857.575 ops/s
[info]                  ·gc.alloc.rate:               1982.173 MB/sec
[info]                  ·gc.alloc.rate.norm:          33232.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2343.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39285.437 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     58.000 ms
[info] Iteration   2: 101546.588 ops/s
[info]                  ·gc.alloc.rate:                   1703.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              26399.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1181.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18315.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      14.153 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 219.359 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   3: 100255.819 ops/s
[info]                  ·gc.alloc.rate:                   1707.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              26802.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1783.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28004.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.481 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         35.000 ms
[info] Iteration   4: 100861.857 ops/s
[info]                  ·gc.alloc.rate:                   1717.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              26800.912 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1815.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28325.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60.848 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         32.000 ms
[info] Iteration   5: 102414.466 ops/s
[info]                  ·gc.alloc.rate:                   1739.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              26728.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1826.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28058.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      14.494 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 222.678 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   99787.261 ±(99.9%) 13133.592 ops/s [Average]
[info]   (min, avg, max) = (93857.575, 99787.261, 102414.466), stdev = 3410.752
[info]   CI (99.9%): [86653.669, 112920.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1770.040 ±(99.9%) 459.852 MB/sec [Average]
[info]   (min, avg, max) = (1703.350, 1770.040, 1982.173), stdev = 119.422
[info]   CI (99.9%): [1310.188, 2229.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   27992.850 ±(99.9%) 11296.132 B/op [Average]
[info]   (min, avg, max) = (26399.712, 27992.850, 33232.143), stdev = 2933.570
[info]   CI (99.9%): [16696.718, 39288.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1790.083 ±(99.9%) 1585.342 MB/sec [Average]
[info]   (min, avg, max) = (1181.754, 1790.083, 2343.230), stdev = 411.708
[info]   CI (99.9%): [204.741, 3375.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   28397.750 ±(99.9%) 28587.353 B/op [Average]
[info]   (min, avg, max) = (18315.648, 28397.750, 39285.437), stdev = 7424.045
[info]   CI (99.9%): [≈ 0, 56985.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   6.605 ±(99.9%) 27.748 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 6.605, 14.494), stdev = 7.206
[info]   CI (99.9%): [≈ 0, 34.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   102.073 ±(99.9%) 427.784 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 102.073, 222.678), stdev = 111.094
[info]   CI (99.9%): [≈ 0, 529.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   162.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (13.000, 32.400, 58.000), stdev = 16.652
[info]   CI (99.9%): [162.000, 162.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21.65% complete, ETA 01:29:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16262.625 ops/s
[info] # Warmup Iteration   2: 69793.051 ops/s
[info] # Warmup Iteration   3: 124166.489 ops/s
[info] # Warmup Iteration   4: 130254.350 ops/s
[info] # Warmup Iteration   5: 130062.072 ops/s
[info] Iteration   1: 131768.183 ops/s
[info]                  ·gc.alloc.rate:                   1643.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              19627.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15833.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.497 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 131474.491 ops/s
[info]                  ·gc.alloc.rate:                   1646.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              19705.818 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15852.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.822 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 131352.161 ops/s
[info]                  ·gc.alloc.rate:                   1665.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              19957.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1983.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23769.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.744 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 130609.453 ops/s
[info]                  ·gc.alloc.rate:                   1624.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              19579.628 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15925.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.254 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 132625.393 ops/s
[info]                  ·gc.alloc.rate:                   1674.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              19866.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1983.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23533.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.817 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.418 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   131565.936 ±(99.9%) 2811.415 ops/s [Average]
[info]   (min, avg, max) = (130609.453, 131565.936, 132625.393), stdev = 730.115
[info]   CI (99.9%): [128754.522, 134377.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1650.869 ±(99.9%) 75.260 MB/sec [Average]
[info]   (min, avg, max) = (1624.867, 1650.869, 1674.412), stdev = 19.545
[info]   CI (99.9%): [1575.609, 1726.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19747.297 ±(99.9%) 615.834 B/op [Average]
[info]   (min, avg, max) = (19579.628, 19747.297, 19957.102), stdev = 159.930
[info]   CI (99.9%): [19131.463, 20363.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1587.768 ±(99.9%) 1391.586 MB/sec [Average]
[info]   (min, avg, max) = (1321.647, 1587.768, 1983.818), stdev = 361.390
[info]   CI (99.9%): [196.182, 2979.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   18982.949 ±(99.9%) 16413.978 B/op [Average]
[info]   (min, avg, max) = (15833.507, 18982.949, 23769.596), stdev = 4262.658
[info]   CI (99.9%): [2568.971, 35396.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.554 ±(99.9%) 7.914 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.554, 4.580), stdev = 2.055
[info]   CI (99.9%): [≈ 0, 9.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   18.547 ±(99.9%) 94.549 B/op [Average]
[info]   (min, avg, max) = (0.497, 18.547, 54.822), stdev = 24.554
[info]   CI (99.9%): [≈ 0, 113.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.400, 12.000), stdev = 2.608
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.88% complete, ETA 01:29:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26918.366 ops/s
[info] # Warmup Iteration   2: 91172.550 ops/s
[info] # Warmup Iteration   3: 141159.911 ops/s
[info] # Warmup Iteration   4: 155235.614 ops/s
[info] # Warmup Iteration   5: 161664.643 ops/s
[info] Iteration   1: 161761.949 ops/s
[info]                  ·gc.alloc.rate:               975.248 MB/sec
[info]                  ·gc.alloc.rate.norm:          9481.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1301.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12653.398 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 159165.955 ops/s
[info]                  ·gc.alloc.rate:                   948.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              9375.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6451.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.412 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 161667.085 ops/s
[info]                  ·gc.alloc.rate:               967.888 MB/sec
[info]                  ·gc.alloc.rate.norm:          9420.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:      652.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6352.078 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 161362.179 ops/s
[info]                  ·gc.alloc.rate:               983.321 MB/sec
[info]                  ·gc.alloc.rate.norm:          9590.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1308.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12766.753 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 159264.045 ops/s
[info]                  ·gc.alloc.rate:               950.661 MB/sec
[info]                  ·gc.alloc.rate.norm:          9394.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:      656.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6487.238 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   160644.243 ±(99.9%) 5057.842 ops/s [Average]
[info]   (min, avg, max) = (159165.955, 160644.243, 161761.949), stdev = 1313.505
[info]   CI (99.9%): [155586.401, 165702.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   965.125 ±(99.9%) 58.608 MB/sec [Average]
[info]   (min, avg, max) = (948.505, 965.125, 983.321), stdev = 15.220
[info]   CI (99.9%): [906.517, 1023.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9452.549 ±(99.9%) 335.294 B/op [Average]
[info]   (min, avg, max) = (9375.540, 9452.549, 9590.950), stdev = 87.075
[info]   CI (99.9%): [9117.255, 9787.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   914.456 ±(99.9%) 1373.652 MB/sec [Average]
[info]   (min, avg, max) = (652.623, 914.456, 1308.924), stdev = 356.733
[info]   CI (99.9%): [≈ 0, 2288.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8942.284 ±(99.9%) 13246.592 B/op [Average]
[info]   (min, avg, max) = (6352.078, 8942.284, 12766.753), stdev = 3440.098
[info]   CI (99.9%): [≈ 0, 22188.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.082 ±(99.9%) 0.709 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.082, 0.412), stdev = 0.184
[info]   CI (99.9%): [≈ 0, 0.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 1.095
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.12% complete, ETA 01:28:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83088.245 ops/s
[info] # Warmup Iteration   2: 200447.130 ops/s
[info] # Warmup Iteration   3: 219435.542 ops/s
[info] # Warmup Iteration   4: 229793.803 ops/s
[info] # Warmup Iteration   5: 229590.207 ops/s
[info] Iteration   1: 223943.212 ops/s
[info]                  ·gc.alloc.rate:                   177.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              1245.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3595.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.913 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 229208.673 ops/s
[info]                  ·gc.alloc.rate:      149.134 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 229329.349 ops/s
[info]                  ·gc.alloc.rate:      149.213 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 228302.862 ops/s
[info]                  ·gc.alloc.rate:               160.079 MB/sec
[info]                  ·gc.alloc.rate.norm:          1103.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3526.771 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 229139.280 ops/s
[info]                  ·gc.alloc.rate:      149.336 MB/sec
[info]                  ·gc.alloc.rate.norm: 1025.755 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   227984.675 ±(99.9%) 8838.486 ops/s [Average]
[info]   (min, avg, max) = (223943.212, 227984.675, 229329.349), stdev = 2295.327
[info]   CI (99.9%): [219146.189, 236823.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   156.992 ±(99.9%) 47.111 MB/sec [Average]
[info]   (min, avg, max) = (149.134, 156.992, 177.199), stdev = 12.235
[info]   CI (99.9%): [109.881, 204.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1084.477 ±(99.9%) 370.357 B/op [Average]
[info]   (min, avg, max) = (1024.002, 1084.477, 1245.373), stdev = 96.180
[info]   CI (99.9%): [714.120, 1454.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.664 ±(99.9%) 1079.136 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.664, 511.726), stdev = 280.248
[info]   CI (99.9%): [≈ 0, 1283.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1424.464 ±(99.9%) 7511.373 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1424.464, 3595.551), stdev = 1950.680
[info]   CI (99.9%): [≈ 0, 8935.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.339 ±(99.9%) 2.919 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.339, 1.695), stdev = 0.758
[info]   CI (99.9%): [≈ 0, 3.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.383 ±(99.9%) 20.515 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.383, 11.913), stdev = 5.328
[info]   CI (99.9%): [≈ 0, 22.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 2.191
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22.35% complete, ETA 01:28:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1743.291 ops/s
[info] # Warmup Iteration   2: 46700.435 ops/s
[info] # Warmup Iteration   3: 85263.736 ops/s
[info] # Warmup Iteration   4: 79666.752 ops/s
[info] # Warmup Iteration   5: 85568.396 ops/s
[info] Iteration   1: 86131.222 ops/s
[info]                  ·gc.alloc.rate:                   2699.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              49318.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48738.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.172 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 83993.390 ops/s
[info]                  ·gc.alloc.rate:                   2636.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              49405.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50002.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.340 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 85409.772 ops/s
[info]                  ·gc.alloc.rate:                   2711.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              49970.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49296.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.384 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 86271.636 ops/s
[info]                  ·gc.alloc.rate:                   2714.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              49507.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48973.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.760 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 86399.919 ops/s
[info]                  ·gc.alloc.rate:                   2722.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              49597.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49046.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.379 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   85641.188 ±(99.9%) 3842.001 ops/s [Average]
[info]   (min, avg, max) = (83993.390, 85641.188, 86399.919), stdev = 997.755
[info]   CI (99.9%): [81799.187, 89483.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2697.021 ±(99.9%) 133.656 MB/sec [Average]
[info]   (min, avg, max) = (2636.729, 2697.021, 2722.833), stdev = 34.710
[info]   CI (99.9%): [2563.365, 2830.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   49559.827 ±(99.9%) 971.496 B/op [Average]
[info]   (min, avg, max) = (49318.602, 49559.827, 49970.223), stdev = 252.294
[info]   CI (99.9%): [48588.330, 50531.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2677.835 ±(99.9%) 41.209 MB/sec [Average]
[info]   (min, avg, max) = (2667.831, 2677.835, 2692.607), stdev = 10.702
[info]   CI (99.9%): [2636.625, 2719.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   49211.631 ±(99.9%) 1868.154 B/op [Average]
[info]   (min, avg, max) = (48738.140, 49211.631, 50002.922), stdev = 485.154
[info]   CI (99.9%): [47343.478, 51079.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.175 ±(99.9%) 1.071 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.175, 0.666), stdev = 0.278
[info]   CI (99.9%): [≈ 0, 1.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.207 ±(99.9%) 19.548 B/op [Average]
[info]   (min, avg, max) = (0.379, 3.207, 12.172), stdev = 5.077
[info]   CI (99.9%): [≈ 0, 22.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 22.59% complete, ETA 01:28:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66080.662 ops/s
[info] # Warmup Iteration   2: 214600.967 ops/s
[info] # Warmup Iteration   3: 220937.127 ops/s
[info] # Warmup Iteration   4: 238887.628 ops/s
[info] # Warmup Iteration   5: 240086.721 ops/s
[info] Iteration   1: 239550.185 ops/s
[info]                  ·gc.alloc.rate:                   1556.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              10224.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8762.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 241042.765 ops/s
[info]                  ·gc.alloc.rate:                   1556.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              10162.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8713.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.695 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 244802.668 ops/s
[info]                  ·gc.alloc.rate:                   1577.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              10139.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8573.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.889 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 244921.977 ops/s
[info]                  ·gc.alloc.rate:                   1613.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              10371.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12825.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.936 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 246343.657 ops/s
[info]                  ·gc.alloc.rate:               1583.518 MB/sec
[info]                  ·gc.alloc.rate.norm:          10114.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8494.698 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   243332.250 ±(99.9%) 11110.907 ops/s [Average]
[info]   (min, avg, max) = (239550.185, 243332.250, 246343.657), stdev = 2885.467
[info]   CI (99.9%): [232221.344, 254443.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1577.583 ±(99.9%) 91.631 MB/sec [Average]
[info]   (min, avg, max) = (1556.149, 1577.583, 1613.984), stdev = 23.796
[info]   CI (99.9%): [1485.952, 1669.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10202.498 ±(99.9%) 396.490 B/op [Average]
[info]   (min, avg, max) = (10114.885, 10202.498, 10371.592), stdev = 102.967
[info]   CI (99.9%): [9806.008, 10598.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1465.611 ±(99.9%) 1141.253 MB/sec [Average]
[info]   (min, avg, max) = (1329.872, 1465.611, 1995.780), stdev = 296.380
[info]   CI (99.9%): [324.358, 2606.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9473.909 ±(99.9%) 7225.321 B/op [Average]
[info]   (min, avg, max) = (8494.698, 9473.909, 12825.047), stdev = 1876.393
[info]   CI (99.9%): [2248.588, 16699.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.881 ±(99.9%) 5.453 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.881, 3.323), stdev = 1.416
[info]   CI (99.9%): [≈ 0, 6.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.731 ±(99.9%) 35.606 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.731, 21.695), stdev = 9.247
[info]   CI (99.9%): [≈ 0, 41.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 10.000), stdev = 3.564
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.82% complete, ETA 01:28:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 207961.359 ops/s
[info] # Warmup Iteration   2: 708180.931 ops/s
[info] # Warmup Iteration   3: 764104.924 ops/s
[info] # Warmup Iteration   4: 741643.948 ops/s
[info] # Warmup Iteration   5: 767632.409 ops/s
[info] Iteration   1: 774751.650 ops/s
[info]                  ·gc.alloc.rate:               609.138 MB/sec
[info]                  ·gc.alloc.rate.norm:          1237.490 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1348.489 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 772089.260 ops/s
[info]                  ·gc.alloc.rate:               614.673 MB/sec
[info]                  ·gc.alloc.rate.norm:          1252.504 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1353.177 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 773106.219 ops/s
[info]                  ·gc.alloc.rate:                   612.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              1247.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1353.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 749725.060 ops/s
[info]                  ·gc.alloc.rate:               594.635 MB/sec
[info]                  ·gc.alloc.rate.norm:          1247.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1395.603 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 771852.582 ops/s
[info]                  ·gc.alloc.rate:                   617.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              1259.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1356.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   768304.954 ±(99.9%) 40235.596 ops/s [Average]
[info]   (min, avg, max) = (749725.060, 768304.954, 774751.650), stdev = 10449.057
[info]   CI (99.9%): [728069.357, 808540.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   609.821 ±(99.9%) 34.905 MB/sec [Average]
[info]   (min, avg, max) = (594.635, 609.821, 617.912), stdev = 9.065
[info]   CI (99.9%): [574.916, 644.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1248.992 ±(99.9%) 31.271 B/op [Average]
[info]   (min, avg, max) = (1237.490, 1248.992, 1259.731), stdev = 8.121
[info]   CI (99.9%): [1217.721, 1280.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   664.672 ±(99.9%) 2.874 MB/sec [Average]
[info]   (min, avg, max) = (663.776, 664.672, 665.621), stdev = 0.746
[info]   CI (99.9%): [661.798, 667.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1361.539 ±(99.9%) 74.242 B/op [Average]
[info]   (min, avg, max) = (1348.489, 1361.539, 1395.603), stdev = 19.280
[info]   CI (99.9%): [1287.297, 1435.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.089 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.06% complete, ETA 01:27:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 382787.243 ops/s
[info] # Warmup Iteration   2: 683512.415 ops/s
[info] # Warmup Iteration   3: 687811.913 ops/s
[info] # Warmup Iteration   4: 696587.657 ops/s
[info] # Warmup Iteration   5: 698990.830 ops/s
[info] Iteration   1: 700276.020 ops/s
[info]                  ·gc.alloc.rate:                   553.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              1244.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1503.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 693861.002 ops/s
[info]                  ·gc.alloc.rate:               548.561 MB/sec
[info]                  ·gc.alloc.rate.norm:          1244.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1517.032 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 698364.896 ops/s
[info]                  ·gc.alloc.rate:      536.119 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 696723.512 ops/s
[info]                  ·gc.alloc.rate:                   559.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1511.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 697742.974 ops/s
[info]                  ·gc.alloc.rate:                   560.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              1263.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1509.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   697393.681 ±(99.9%) 9092.351 ops/s [Average]
[info]   (min, avg, max) = (693861.002, 697393.681, 700276.020), stdev = 2361.255
[info]   CI (99.9%): [688301.330, 706486.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   551.675 ±(99.9%) 38.312 MB/sec [Average]
[info]   (min, avg, max) = (536.119, 551.675, 560.501), stdev = 9.950
[info]   CI (99.9%): [513.363, 589.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1244.827 ±(99.9%) 87.954 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1244.827, 1264.134), stdev = 22.841
[info]   CI (99.9%): [1156.873, 1332.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   535.259 ±(99.9%) 1152.187 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535.259, 669.462), stdev = 299.219
[info]   CI (99.9%): [≈ 0, 1687.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1208.215 ±(99.9%) 2600.844 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1208.215, 1517.032), stdev = 675.431
[info]   CI (99.9%): [≈ 0, 3809.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.151 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.094), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 23.29% complete, ETA 01:27:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 381789.412 ops/s
[info] # Warmup Iteration   2: 614329.825 ops/s
[info] # Warmup Iteration   3: 685500.759 ops/s
[info] # Warmup Iteration   4: 683248.057 ops/s
[info] # Warmup Iteration   5: 685791.725 ops/s
[info] Iteration   1: 670884.846 ops/s
[info]                  ·gc.alloc.rate:      0.457 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.072 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 685949.202 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 685808.553 ops/s
[info]                  ·gc.alloc.rate:      0.434 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.995 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 686055.031 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 685695.456 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   682878.617 ±(99.9%) 25822.849 ops/s [Average]
[info]   (min, avg, max) = (670884.846, 682878.617, 686055.031), stdev = 6706.112
[info]   CI (99.9%): [657055.768, 708701.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.178 ±(99.9%) 0.940 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.178, 0.457), stdev = 0.244
[info]   CI (99.9%): [≈ 0, 1.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.414 ±(99.9%) 2.182 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.414, 1.072), stdev = 0.567
[info]   CI (99.9%): [≈ 0, 2.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23.53% complete, ETA 01:27:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33232.886 ops/s
[info] # Warmup Iteration   2: 430097.414 ops/s
[info] # Warmup Iteration   3: 552813.948 ops/s
[info] # Warmup Iteration   4: 612907.318 ops/s
[info] # Warmup Iteration   5: 619185.982 ops/s
[info] Iteration   1: 621340.265 ops/s
[info]                  ·gc.alloc.rate:                   1537.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              3893.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3372.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 626783.567 ops/s
[info]                  ·gc.alloc.rate:                   1540.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              3868.535 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3350.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 623864.850 ops/s
[info]                  ·gc.alloc.rate:                   1556.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              3926.680 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5056.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.884 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.754 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 617506.844 ops/s
[info]                  ·gc.alloc.rate:                   1512.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              3856.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3409.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 629671.282 ops/s
[info]                  ·gc.alloc.rate:                   1552.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              3879.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3345.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   623833.362 ±(99.9%) 18166.142 ops/s [Average]
[info]   (min, avg, max) = (617506.844, 623833.362, 629671.282), stdev = 4717.689
[info]   CI (99.9%): [605667.219, 641999.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1539.878 ±(99.9%) 65.629 MB/sec [Average]
[info]   (min, avg, max) = (1512.951, 1539.878, 1556.546), stdev = 17.044
[info]   CI (99.9%): [1474.248, 1605.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   3884.877 ±(99.9%) 104.336 B/op [Average]
[info]   (min, avg, max) = (3856.194, 3884.877, 3926.680), stdev = 27.096
[info]   CI (99.9%): [3780.541, 3989.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1469.267 ±(99.9%) 1152.176 MB/sec [Average]
[info]   (min, avg, max) = (1331.623, 1469.267, 2004.500), stdev = 299.216
[info]   CI (99.9%): [317.090, 2621.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3706.885 ±(99.9%) 2907.262 B/op [Average]
[info]   (min, avg, max) = (3345.109, 3706.885, 5056.727), stdev = 755.007
[info]   CI (99.9%): [799.624, 6614.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.394 ±(99.9%) 3.209 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.394, 1.884), stdev = 0.833
[info]   CI (99.9%): [≈ 0, 3.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.993 ±(99.9%) 8.096 B/op [Average]
[info]   (min, avg, max) = (0.052, 0.993, 4.754), stdev = 2.102
[info]   CI (99.9%): [≈ 0, 9.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23.76% complete, ETA 01:27:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6725.260 ops/s
[info] # Warmup Iteration   2: 25338.774 ops/s
[info] # Warmup Iteration   3: 38696.097 ops/s
[info] # Warmup Iteration   4: 41221.019 ops/s
[info] # Warmup Iteration   5: 40163.161 ops/s
[info] Iteration   1: 43488.664 ops/s
[info]                  ·gc.alloc.rate:                   2010.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              72776.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1969.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71290.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145.879 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 42669.645 ops/s
[info]                  ·gc.alloc.rate:                   1991.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              73450.219 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1968.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72604.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.356 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 44413.744 ops/s
[info]                  ·gc.alloc.rate:                   2056.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              72877.387 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1970.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69839.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.738 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 44254.030 ops/s
[info]                  ·gc.alloc.rate:                   2033.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              72324.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1976.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70278.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.663 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 44284.415 ops/s
[info]                  ·gc.alloc.rate:                   2043.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              72639.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1985.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70552.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.959 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   43822.100 ±(99.9%) 2849.003 ops/s [Average]
[info]   (min, avg, max) = (42669.645, 43822.100, 44413.744), stdev = 739.877
[info]   CI (99.9%): [40973.097, 46671.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   2027.372 ±(99.9%) 100.297 MB/sec [Average]
[info]   (min, avg, max) = (1991.745, 2027.372, 2056.619), stdev = 26.047
[info]   CI (99.9%): [1927.076, 2127.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   72813.512 ±(99.9%) 1588.032 B/op [Average]
[info]   (min, avg, max) = (72324.586, 72813.512, 73450.219), stdev = 412.407
[info]   CI (99.9%): [71225.480, 74401.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1974.180 ±(99.9%) 26.154 MB/sec [Average]
[info]   (min, avg, max) = (1968.812, 1974.180, 1985.180), stdev = 6.792
[info]   CI (99.9%): [1948.026, 2000.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   70913.113 ±(99.9%) 4168.758 B/op [Average]
[info]   (min, avg, max) = (69839.755, 70913.113, 72604.496), stdev = 1082.613
[info]   CI (99.9%): [66744.356, 75081.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.948 ±(99.9%) 6.661 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.948, 4.031), stdev = 1.730
[info]   CI (99.9%): [≈ 0, 7.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   34.319 ±(99.9%) 241.098 B/op [Average]
[info]   (min, avg, max) = (0.738, 34.319, 145.879), stdev = 62.612
[info]   CI (99.9%): [≈ 0, 275.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 9.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24.00% complete, ETA 01:26:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.580 ops/s
[info] # Warmup Iteration   2: 248155.030 ops/s
[info] # Warmup Iteration   3: 289728.622 ops/s
[info] # Warmup Iteration   4: 307215.014 ops/s
[info] # Warmup Iteration   5: 308301.429 ops/s
[info] Iteration   1: 307831.742 ops/s
[info]                  ·gc.alloc.rate:      319.238 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 305438.455 ops/s
[info]                  ·gc.alloc.rate:               336.097 MB/sec
[info]                  ·gc.alloc.rate.norm:          1731.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3410.319 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 309174.126 ops/s
[info]                  ·gc.alloc.rate:      320.609 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 307954.558 ops/s
[info]                  ·gc.alloc.rate:                   339.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              1734.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3382.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.190 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 309070.013 ops/s
[info]                  ·gc.alloc.rate:      320.493 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   307893.779 ±(99.9%) 5794.859 ops/s [Average]
[info]   (min, avg, max) = (305438.455, 307893.779, 309174.126), stdev = 1504.907
[info]   CI (99.9%): [302098.919, 313688.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   327.167 ±(99.9%) 37.517 MB/sec [Average]
[info]   (min, avg, max) = (319.238, 327.167, 339.397), stdev = 9.743
[info]   CI (99.9%): [289.650, 364.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1672.377 ±(99.9%) 212.935 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1672.377, 1734.543), stdev = 55.298
[info]   CI (99.9%): [1459.443, 1885.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   264.768 ±(99.9%) 1396.045 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 264.768, 662.029), stdev = 362.548
[info]   CI (99.9%): [≈ 0, 1660.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1358.523 ±(99.9%) 7163.199 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1358.523, 3410.319), stdev = 1860.260
[info]   CI (99.9%): [≈ 0, 8521.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.064 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.037), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.327 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.190), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 2.191
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.24% complete, ETA 01:26:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32051.378 ops/s
[info] # Warmup Iteration   2: 91057.444 ops/s
[info] # Warmup Iteration   3: 128464.886 ops/s
[info] # Warmup Iteration   4: 123721.814 ops/s
[info] # Warmup Iteration   5: 124824.696 ops/s
[info] Iteration   1: 124545.350 ops/s
[info]                  ·gc.alloc.rate:               1137.179 MB/sec
[info]                  ·gc.alloc.rate.norm:          14369.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8409.754 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 121892.641 ops/s
[info]                  ·gc.alloc.rate:                   1140.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              14719.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17185.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.168 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 117771.089 ops/s
[info]                  ·gc.alloc.rate:                        1104.742 MB/sec
[info]                  ·gc.alloc.rate.norm:                   14762.825 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.014 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0.183 B/op
[info]                  ·gc.churn.Metaspace:                   0.038 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              0.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:               1346.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          17994.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           5.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      67.879 B/op
[info]                  ·gc.count:                             4.000 counts
[info]                  ·gc.time:                              48.000 ms
[info] Iteration   4: 123519.158 ops/s
[info]                  ·gc.alloc.rate:               1129.155 MB/sec
[info]                  ·gc.alloc.rate.norm:          14386.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8492.126 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 123540.926 ops/s
[info]                  ·gc.alloc.rate:                   1144.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              14575.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16921.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.265 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   122253.833 ±(99.9%) 10320.545 ops/s [Average]
[info]   (min, avg, max) = (117771.089, 122253.833, 124545.350), stdev = 2680.213
[info]   CI (99.9%): [111933.288, 132574.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1131.080 ±(99.9%) 60.512 MB/sec [Average]
[info]   (min, avg, max) = (1104.742, 1131.080, 1144.108), stdev = 15.715
[info]   CI (99.9%): [1070.568, 1191.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   14562.851 ±(99.9%) 701.557 B/op [Average]
[info]   (min, avg, max) = (14369.768, 14562.851, 14762.825), stdev = 182.192
[info]   CI (99.9%): [13861.294, 15264.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space":
[info]   0.003 ±(99.9%) 0.024 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.014), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm":
[info]   0.037 ±(99.9%) 0.314 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.183), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.Metaspace":
[info]   0.008 ±(99.9%) 0.065 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.038), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.Metaspace.norm":
[info]   0.101 ±(99.9%) 0.873 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.101, 0.507), stdev = 0.227
[info]   CI (99.9%): [≈ 0, 0.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1067.617 ±(99.9%) 1411.953 MB/sec [Average]
[info]   (min, avg, max) = (665.522, 1067.617, 1346.582), stdev = 366.680
[info]   CI (99.9%): [≈ 0, 2479.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   13800.570 ±(99.9%) 18866.595 B/op [Average]
[info]   (min, avg, max) = (8409.754, 13800.570, 17994.575), stdev = 4899.595
[info]   CI (99.9%): [≈ 0, 32667.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.023 ±(99.9%) 8.733 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.023, 5.080), stdev = 2.268
[info]   CI (99.9%): [≈ 0, 9.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13.662 ±(99.9%) 116.706 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.662, 67.879), stdev = 30.308
[info]   CI (99.9%): [≈ 0, 130.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   66.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 13.200, 48.000), stdev = 19.677
[info]   CI (99.9%): [66.000, 66.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.47% complete, ETA 01:26:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 274408.421 ops/s
[info] # Warmup Iteration   2: 478201.059 ops/s
[info] # Warmup Iteration   3: 519900.957 ops/s
[info] # Warmup Iteration   4: 557638.801 ops/s
[info] # Warmup Iteration   5: 551322.085 ops/s
[info] Iteration   1: 554975.192 ops/s
[info]                  ·gc.alloc.rate:                   376.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              1067.502 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1450.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 557704.163 ops/s
[info]                  ·gc.alloc.rate:      363.003 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 555393.700 ops/s
[info]                  ·gc.alloc.rate:               381.832 MB/sec
[info]                  ·gc.alloc.rate.norm:          1081.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1894.321 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 557374.632 ops/s
[info]                  ·gc.alloc.rate:      362.711 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 538539.039 ops/s
[info]                  ·gc.alloc.rate:                   373.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              1090.379 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1953.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   552797.345 ±(99.9%) 31033.645 ops/s [Average]
[info]   (min, avg, max) = (538539.039, 552797.345, 557704.163), stdev = 8059.339
[info]   CI (99.9%): [521763.700, 583830.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   371.444 ±(99.9%) 32.419 MB/sec [Average]
[info]   (min, avg, max) = (362.711, 371.444, 381.832), stdev = 8.419
[info]   CI (99.9%): [339.025, 403.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1057.560 ±(99.9%) 122.096 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1057.560, 1090.379), stdev = 31.708
[info]   CI (99.9%): [935.464, 1179.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   369.781 ±(99.9%) 1323.064 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.781, 668.739), stdev = 343.595
[info]   CI (99.9%): [≈ 0, 1692.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1059.766 ±(99.9%) 3799.602 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1059.766, 1953.636), stdev = 986.745
[info]   CI (99.9%): [≈ 0, 4859.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.060 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.034), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.032 ±(99.9%) 0.175 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.099), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 24.71% complete, ETA 01:26:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1285.977 ops/s
[info] # Warmup Iteration   2: 25707.384 ops/s
[info] # Warmup Iteration   3: 51216.117 ops/s
[info] # Warmup Iteration   4: 50625.372 ops/s
[info] # Warmup Iteration   5: 53921.035 ops/s
[info] Iteration   1: 54299.479 ops/s
[info]                  ·gc.alloc.rate:                   2344.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              67999.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2654.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76997.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89.658 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 54438.301 ops/s
[info]                  ·gc.alloc.rate:                   2321.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              67156.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57580.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.730 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 54969.015 ops/s
[info]                  ·gc.alloc.rate:                   2349.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              67275.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2657.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76076.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.575 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 54804.157 ops/s
[info]                  ·gc.alloc.rate:               2326.579 MB/sec
[info]                  ·gc.alloc.rate.norm:          66813.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1996.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57332.942 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 54732.295 ops/s
[info]                  ·gc.alloc.rate:                   2363.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              67957.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76812.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.599 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   54648.649 ±(99.9%) 1054.506 ops/s [Average]
[info]   (min, avg, max) = (54299.479, 54648.649, 54969.015), stdev = 273.852
[info]   CI (99.9%): [53594.143, 55703.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2340.951 ±(99.9%) 66.270 MB/sec [Average]
[info]   (min, avg, max) = (2321.071, 2340.951, 2363.240), stdev = 17.210
[info]   CI (99.9%): [2274.681, 2407.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67440.347 ±(99.9%) 2001.927 B/op [Average]
[info]   (min, avg, max) = (66813.174, 67440.347, 67999.783), stdev = 519.894
[info]   CI (99.9%): [65438.420, 69442.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2393.842 ±(99.9%) 1408.245 MB/sec [Average]
[info]   (min, avg, max) = (1990.119, 2393.842, 2671.191), stdev = 365.717
[info]   CI (99.9%): [985.597, 3802.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68960.068 ±(99.9%) 40458.391 B/op [Average]
[info]   (min, avg, max) = (57332.942, 68960.068, 76997.594), stdev = 10506.916
[info]   CI (99.9%): [28501.677, 109418.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.721 ±(99.9%) 5.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.721, 3.091), stdev = 1.333
[info]   CI (99.9%): [≈ 0, 5.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   20.913 ±(99.9%) 148.889 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.913, 89.658), stdev = 38.666
[info]   CI (99.9%): [≈ 0, 169.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 11.000), stdev = 2.702
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24.94% complete, ETA 01:25:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24969.852 ops/s
[info] # Warmup Iteration   2: 78375.136 ops/s
[info] # Warmup Iteration   3: 90044.662 ops/s
[info] # Warmup Iteration   4: 95598.741 ops/s
[info] # Warmup Iteration   5: 95246.739 ops/s
[info] Iteration   1: 94183.108 ops/s
[info]                  ·gc.alloc.rate:                   750.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              12544.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11148.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.870 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 93986.707 ops/s
[info]                  ·gc.alloc.rate:               748.550 MB/sec
[info]                  ·gc.alloc.rate.norm:          12534.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11171.083 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 94456.999 ops/s
[info]                  ·gc.alloc.rate:                   757.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              12622.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11121.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.477 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 95483.573 ops/s
[info]                  ·gc.alloc.rate:                   764.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              12609.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11002.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.729 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 92242.203 ops/s
[info]                  ·gc.alloc.rate:               732.495 MB/sec
[info]                  ·gc.alloc.rate.norm:          12493.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11388.794 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   94070.518 ±(99.9%) 4518.780 ops/s [Average]
[info]   (min, avg, max) = (92242.203, 94070.518, 95483.573), stdev = 1173.513
[info]   CI (99.9%): [89551.739, 98589.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   750.850 ±(99.9%) 46.652 MB/sec [Average]
[info]   (min, avg, max) = (732.495, 750.850, 764.980), stdev = 12.115
[info]   CI (99.9%): [704.199, 797.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12560.917 ±(99.9%) 208.828 B/op [Average]
[info]   (min, avg, max) = (12493.150, 12560.917, 12622.817), stdev = 54.232
[info]   CI (99.9%): [12352.089, 12769.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   667.385 ±(99.9%) 1.026 MB/sec [Average]
[info]   (min, avg, max) = (667.112, 667.385, 667.744), stdev = 0.266
[info]   CI (99.9%): [666.359, 668.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11166.423 ±(99.9%) 540.401 B/op [Average]
[info]   (min, avg, max) = (11002.159, 11166.423, 11388.794), stdev = 140.340
[info]   CI (99.9%): [10626.022, 11706.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.052), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.415 ±(99.9%) 1.557 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.415, 0.870), stdev = 0.404
[info]   CI (99.9%): [≈ 0, 1.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 25.18% complete, ETA 01:25:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.766 ops/s
[info] # Warmup Iteration   2: 105363.234 ops/s
[info] # Warmup Iteration   3: 120207.441 ops/s
[info] # Warmup Iteration   4: 121379.168 ops/s
[info] # Warmup Iteration   5: 115887.765 ops/s
[info] Iteration   1: 120073.457 ops/s
[info]                  ·gc.alloc.rate:               463.282 MB/sec
[info]                  ·gc.alloc.rate.norm:          6070.888 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8687.710 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 121506.998 ops/s
[info]                  ·gc.alloc.rate:               472.495 MB/sec
[info]                  ·gc.alloc.rate.norm:          6118.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8585.337 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 122161.144 ops/s
[info]                  ·gc.alloc.rate:      452.053 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 121929.471 ops/s
[info]                  ·gc.alloc.rate:                   464.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              5997.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8564.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.407 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 122346.977 ops/s
[info]                  ·gc.alloc.rate:                   473.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              6095.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8534.831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   121603.609 ±(99.9%) 3508.276 ops/s [Average]
[info]   (min, avg, max) = (120073.457, 121603.609, 122346.977), stdev = 911.088
[info]   CI (99.9%): [118095.334, 125111.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   465.263 ±(99.9%) 33.647 MB/sec [Average]
[info]   (min, avg, max) = (452.053, 465.263, 473.880), stdev = 8.738
[info]   CI (99.9%): [431.615, 498.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   6021.406 ±(99.9%) 459.979 B/op [Average]
[info]   (min, avg, max) = (5824.004, 6021.406, 6118.969), stdev = 119.455
[info]   CI (99.9%): [5561.427, 6481.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   530.572 ±(99.9%) 1142.096 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 530.572, 663.470), stdev = 296.599
[info]   CI (99.9%): [≈ 0, 1672.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   6874.421 ±(99.9%) 14799.368 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6874.421, 8687.710), stdev = 3843.349
[info]   CI (99.9%): [≈ 0, 21673.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.053 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.107 ±(99.9%) 0.681 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.107, 0.407), stdev = 0.177
[info]   CI (99.9%): [≈ 0, 0.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.41% complete, ETA 01:25:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36391.680 ops/s
[info] # Warmup Iteration   2: 93342.901 ops/s
[info] # Warmup Iteration   3: 103768.497 ops/s
[info] # Warmup Iteration   4: 103865.731 ops/s
[info] # Warmup Iteration   5: 103634.580 ops/s
[info] Iteration   1: 107272.368 ops/s
[info]                  ·gc.alloc.rate:      396.914 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 106654.849 ops/s
[info]                  ·gc.alloc.rate:                   409.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              6044.927 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9810.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.153 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 107139.310 ops/s
[info]                  ·gc.alloc.rate:      396.396 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 106715.465 ops/s
[info]                  ·gc.alloc.rate:               411.140 MB/sec
[info]                  ·gc.alloc.rate.norm:          6060.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9804.091 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 106901.183 ops/s
[info]                  ·gc.alloc.rate:                   408.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              6014.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9801.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.306 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   106936.635 ±(99.9%) 1024.897 ops/s [Average]
[info]   (min, avg, max) = (106654.849, 106936.635, 107272.368), stdev = 266.163
[info]   CI (99.9%): [105911.737, 107961.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   404.528 ±(99.9%) 27.914 MB/sec [Average]
[info]   (min, avg, max) = (396.396, 404.528, 411.140), stdev = 7.249
[info]   CI (99.9%): [376.613, 432.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5953.686 ±(99.9%) 460.345 B/op [Average]
[info]   (min, avg, max) = (5824.004, 5953.686, 6060.949), stdev = 119.550
[info]   CI (99.9%): [5493.341, 6414.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   399.130 ±(99.9%) 1403.000 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.130, 665.730), stdev = 364.355
[info]   CI (99.9%): [≈ 0, 1802.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5883.217 ±(99.9%) 20680.340 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5883.217, 9810.157), stdev = 5370.619
[info]   CI (99.9%): [≈ 0, 26563.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.092 ±(99.9%) 0.528 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.306), stdev = 0.137
[info]   CI (99.9%): [≈ 0, 0.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 5.000), stdev = 2.588
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.65% complete, ETA 01:24:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46441.847 ops/s
[info] # Warmup Iteration   2: 105243.460 ops/s
[info] # Warmup Iteration   3: 117153.448 ops/s
[info] # Warmup Iteration   4: 121786.825 ops/s
[info] # Warmup Iteration   5: 124877.629 ops/s
[info] Iteration   1: 125970.226 ops/s
[info]                  ·gc.alloc.rate:      466.121 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 124923.547 ops/s
[info]                  ·gc.alloc.rate:               477.420 MB/sec
[info]                  ·gc.alloc.rate.norm:          6014.858 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8417.343 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 125100.367 ops/s
[info]                  ·gc.alloc.rate:                   485.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              6101.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8403.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.262 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 125020.428 ops/s
[info]                  ·gc.alloc.rate:               483.079 MB/sec
[info]                  ·gc.alloc.rate.norm:          6081.912 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8418.930 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 121947.953 ops/s
[info]                  ·gc.alloc.rate:      451.258 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   124592.504 ±(99.9%) 5916.224 ops/s [Average]
[info]   (min, avg, max) = (121947.953, 124592.504, 125970.226), stdev = 1536.425
[info]   CI (99.9%): [118676.280, 130508.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   472.585 ±(99.9%) 53.958 MB/sec [Average]
[info]   (min, avg, max) = (451.258, 472.585, 485.046), stdev = 14.013
[info]   CI (99.9%): [418.627, 526.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5969.291 ±(99.9%) 525.519 B/op [Average]
[info]   (min, avg, max) = (5824.004, 5969.291, 6101.677), stdev = 136.476
[info]   CI (99.9%): [5443.772, 6494.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   400.972 ±(99.9%) 1409.474 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 400.972, 668.706), stdev = 366.036
[info]   CI (99.9%): [≈ 0, 1810.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5047.992 ±(99.9%) 17744.419 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5047.992, 8418.930), stdev = 4608.169
[info]   CI (99.9%): [≈ 0, 22792.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.052 ±(99.9%) 0.451 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.262), stdev = 0.117
[info]   CI (99.9%): [≈ 0, 0.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25.88% complete, ETA 01:24:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42879.448 ops/s
[info] # Warmup Iteration   2: 106495.375 ops/s
[info] # Warmup Iteration   3: 119949.351 ops/s
[info] # Warmup Iteration   4: 124267.806 ops/s
[info] # Warmup Iteration   5: 123864.762 ops/s
[info] Iteration   1: 123586.138 ops/s
[info]                  ·gc.alloc.rate:                   370.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              4723.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6514.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.530 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 123990.837 ops/s
[info]                  ·gc.alloc.rate:      361.125 MB/sec
[info]                  ·gc.alloc.rate.norm: 4584.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 123508.848 ops/s
[info]                  ·gc.alloc.rate:               379.148 MB/sec
[info]                  ·gc.alloc.rate.norm:          4831.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8505.409 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 123749.710 ops/s
[info]                  ·gc.alloc.rate:      368.840 MB/sec
[info]                  ·gc.alloc.rate.norm: 4689.987 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 120873.082 ops/s
[info]                  ·gc.alloc.rate:               366.504 MB/sec
[info]                  ·gc.alloc.rate.norm:          4771.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8691.582 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   123141.723 ±(99.9%) 4934.861 ops/s [Average]
[info]   (min, avg, max) = (120873.082, 123141.723, 123990.837), stdev = 1281.568
[info]   CI (99.9%): [118206.862, 128076.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   369.317 ±(99.9%) 25.442 MB/sec [Average]
[info]   (min, avg, max) = (361.125, 369.317, 379.148), stdev = 6.607
[info]   CI (99.9%): [343.875, 394.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4720.102 ±(99.9%) 357.501 B/op [Average]
[info]   (min, avg, max) = (4584.003, 4720.102, 4831.440), stdev = 92.842
[info]   CI (99.9%): [4362.600, 5077.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   369.337 ±(99.9%) 1321.210 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.337, 667.612), stdev = 343.114
[info]   CI (99.9%): [≈ 0, 1690.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   4742.283 ±(99.9%) 16990.576 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4742.283, 8691.582), stdev = 4412.399
[info]   CI (99.9%): [≈ 0, 21732.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.106 ±(99.9%) 0.913 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.106, 0.530), stdev = 0.237
[info]   CI (99.9%): [≈ 0, 1.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 5.000), stdev = 2.302
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26.12% complete, ETA 01:24:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1054.552 ops/s
[info] # Warmup Iteration   2: 8431.030 ops/s
[info] # Warmup Iteration   3: 5674.956 ops/s
[info] # Warmup Iteration   4: 12350.757 ops/s
[info] # Warmup Iteration   5: 13166.016 ops/s
[info] Iteration   1: 13328.544 ops/s
[info]                  ·gc.alloc.rate:                   2012.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              237539.242 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1932.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     228088.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.916 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         25.000 ms
[info] Iteration   2: 12879.434 ops/s
[info]                  ·gc.alloc.rate:                   2268.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              277127.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2578.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     315077.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.287 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         37.000 ms
[info] Iteration   3: 13884.361 ops/s
[info]                  ·gc.alloc.rate:                   2087.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              236619.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1935.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219425.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      12.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1407.252 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   4: 13681.332 ops/s
[info]                  ·gc.alloc.rate:                   2057.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              236713.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1927.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221744.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 191.086 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 13557.259 ops/s
[info]                  ·gc.alloc.rate:               2490.924 MB/sec
[info]                  ·gc.alloc.rate.norm:          289027.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2559.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 297019.205 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   13466.186 ±(99.9%) 1482.218 ops/s [Average]
[info]   (min, avg, max) = (12879.434, 13466.186, 13884.361), stdev = 384.927
[info]   CI (99.9%): [11983.968, 14948.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   2183.446 ±(99.9%) 760.208 MB/sec [Average]
[info]   (min, avg, max) = (2012.541, 2183.446, 2490.924), stdev = 197.424
[info]   CI (99.9%): [1423.238, 2943.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   255405.314 ±(99.9%) 98620.326 B/op [Average]
[info]   (min, avg, max) = (236619.056, 255405.314, 289027.049), stdev = 25611.385
[info]   CI (99.9%): [156784.988, 354025.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2186.966 ±(99.9%) 1344.450 MB/sec [Average]
[info]   (min, avg, max) = (1927.733, 2186.966, 2578.907), stdev = 349.149
[info]   CI (99.9%): [842.516, 3531.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   256271.000 ±(99.9%) 177114.114 B/op [Average]
[info]   (min, avg, max) = (219425.495, 256271.000, 315077.314), stdev = 45995.973
[info]   CI (99.9%): [79156.886, 433385.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2.949 ±(99.9%) 20.542 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.949, 12.416), stdev = 5.335
[info]   CI (99.9%): [≈ 0, 23.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   335.908 ±(99.9%) 2325.216 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 335.908, 1407.252), stdev = 603.851
[info]   CI (99.9%): [≈ 0, 2661.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   96.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 19.200, 37.000), stdev = 12.538
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.35% complete, ETA 01:24:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1067.446 ops/s
[info] # Warmup Iteration   2: 10460.405 ops/s
[info] # Warmup Iteration   3: 12916.692 ops/s
[info] # Warmup Iteration   4: 13897.904 ops/s
[info] # Warmup Iteration   5: 13609.960 ops/s
[info] Iteration   1: 13853.767 ops/s
[info]                  ·gc.alloc.rate:               1949.312 MB/sec
[info]                  ·gc.alloc.rate.norm:          221453.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1982.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 225175.945 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 13740.058 ops/s
[info]                  ·gc.alloc.rate:                   1964.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              224868.285 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227806.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.769 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 13827.647 ops/s
[info]                  ·gc.alloc.rate:                   1949.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              221807.884 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227115.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.216 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 13099.413 ops/s
[info]                  ·gc.alloc.rate:               2112.686 MB/sec
[info]                  ·gc.alloc.rate.norm:          253814.851 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 240655.475 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 12522.575 ops/s
[info]                  ·gc.alloc.rate:                   2029.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              255072.218 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     252096.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 176.639 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   13408.692 ±(99.9%) 2248.820 ops/s [Average]
[info]   (min, avg, max) = (12522.575, 13408.692, 13853.767), stdev = 584.011
[info]   CI (99.9%): [11159.872, 15657.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2000.960 ±(99.9%) 272.389 MB/sec [Average]
[info]   (min, avg, max) = (1949.082, 2000.960, 2112.686), stdev = 70.739
[info]   CI (99.9%): [1728.571, 2273.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   235403.424 ±(99.9%) 67145.438 B/op [Average]
[info]   (min, avg, max) = (221453.885, 235403.424, 255072.218), stdev = 17437.457
[info]   CI (99.9%): [168257.986, 302548.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1995.333 ±(99.9%) 37.494 MB/sec [Average]
[info]   (min, avg, max) = (1982.075, 1995.333, 2005.903), stdev = 9.737
[info]   CI (99.9%): [1957.838, 2032.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   234570.203 ±(99.9%) 44482.076 B/op [Average]
[info]   (min, avg, max) = (225175.945, 234570.203, 252096.961), stdev = 11551.854
[info]   CI (99.9%): [190088.127, 279052.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.314 ±(99.9%) 2.357 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.314, 1.405), stdev = 0.612
[info]   CI (99.9%): [≈ 0, 2.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   39.125 ±(99.9%) 296.852 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39.125, 176.639), stdev = 77.091
[info]   CI (99.9%): [≈ 0, 335.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.59% complete, ETA 01:23:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94165.987 ops/s
[info] # Warmup Iteration   2: 162765.073 ops/s
[info] # Warmup Iteration   3: 222148.791 ops/s
[info] # Warmup Iteration   4: 226646.211 ops/s
[info] # Warmup Iteration   5: 221373.027 ops/s
[info] Iteration   1: 229586.648 ops/s
[info]                  ·gc.alloc.rate:                   614.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              4213.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4555.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 211206.984 ops/s
[info]                  ·gc.alloc.rate:               616.986 MB/sec
[info]                  ·gc.alloc.rate.norm:          4597.573 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4954.145 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 225165.725 ops/s
[info]                  ·gc.alloc.rate:      586.033 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 229686.949 ops/s
[info]                  ·gc.alloc.rate:               617.970 MB/sec
[info]                  ·gc.alloc.rate.norm:          4233.271 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4555.176 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 223907.183 ops/s
[info]                  ·gc.alloc.rate:               596.419 MB/sec
[info]                  ·gc.alloc.rate.norm:          4192.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4679.951 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   223910.698 ±(99.9%) 29106.191 ops/s [Average]
[info]   (min, avg, max) = (211206.984, 223910.698, 229686.949), stdev = 7558.785
[info]   CI (99.9%): [194804.507, 253016.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   606.418 ±(99.9%) 55.435 MB/sec [Average]
[info]   (min, avg, max) = (586.033, 606.418, 617.970), stdev = 14.396
[info]   CI (99.9%): [550.983, 661.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4266.491 ±(99.9%) 741.000 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4266.491, 4597.573), stdev = 192.435
[info]   CI (99.9%): [3525.490, 5007.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   532.036 ±(99.9%) 1145.250 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.036, 665.822), stdev = 297.418
[info]   CI (99.9%): [≈ 0, 1677.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3748.929 ±(99.9%) 8094.188 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3748.929, 4954.145), stdev = 2102.035
[info]   CI (99.9%): [≈ 0, 11843.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.123 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.071), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 26.82% complete, ETA 01:23:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 537.632 ops/s
[info] # Warmup Iteration   2: 4427.991 ops/s
[info] # Warmup Iteration   3: 5857.769 ops/s
[info] # Warmup Iteration   4: 7112.430 ops/s
[info] # Warmup Iteration   5: 7021.591 ops/s
[info] Iteration   1: 7108.121 ops/s
[info]                  ·gc.alloc.rate:                   1829.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              405181.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     441625.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.609 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 6976.973 ops/s
[info]                  ·gc.alloc.rate:                   1783.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              402204.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     450881.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.696 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 6874.360 ops/s
[info]                  ·gc.alloc.rate:                   1749.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              400594.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     305529.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 611.921 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 6904.211 ops/s
[info]                  ·gc.alloc.rate:                   1769.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              403364.656 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     456113.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.449 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 6924.920 ops/s
[info]                  ·gc.alloc.rate:               1760.920 MB/sec
[info]                  ·gc.alloc.rate.norm:          400198.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 303204.523 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   6957.717 ±(99.9%) 354.380 ops/s [Average]
[info]   (min, avg, max) = (6874.360, 6957.717, 7108.121), stdev = 92.031
[info]   CI (99.9%): [6603.337, 7312.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1778.649 ±(99.9%) 119.851 MB/sec [Average]
[info]   (min, avg, max) = (1749.850, 1778.649, 1829.924), stdev = 31.125
[info]   CI (99.9%): [1658.798, 1898.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   402308.674 ±(99.9%) 7884.728 B/op [Average]
[info]   (min, avg, max) = (400198.299, 402308.674, 405181.530), stdev = 2047.639
[info]   CI (99.9%): [394423.946, 410193.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1732.599 ±(99.9%) 1399.879 MB/sec [Average]
[info]   (min, avg, max) = (1334.136, 1732.599, 2000.939), stdev = 363.544
[info]   CI (99.9%): [332.721, 3132.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   391471.143 ±(99.9%) 306850.259 B/op [Average]
[info]   (min, avg, max) = (303204.523, 391471.143, 456113.858), stdev = 79688.038
[info]   CI (99.9%): [84620.884, 698321.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.585 ±(99.9%) 4.507 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.585, 2.673), stdev = 1.171
[info]   CI (99.9%): [≈ 0, 5.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   133.735 ±(99.9%) 1032.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 133.735, 611.921), stdev = 268.010
[info]   CI (99.9%): [≈ 0, 1165.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.789
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27.06% complete, ETA 01:23:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6320.686 ops/s
[info] # Warmup Iteration   2: 19608.317 ops/s
[info] # Warmup Iteration   3: 32981.548 ops/s
[info] # Warmup Iteration   4: 35395.748 ops/s
[info] # Warmup Iteration   5: 33111.401 ops/s
[info] Iteration   1: 33141.793 ops/s
[info]                  ·gc.alloc.rate:                   2509.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              119105.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1918.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91058.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.571 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 264.459 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         25.000 ms
[info] Iteration   2: 34379.777 ops/s
[info]                  ·gc.alloc.rate:                   2109.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              96521.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2529.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115762.986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      10.156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 464.756 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         35.000 ms
[info] Iteration   3: 36032.393 ops/s
[info]                  ·gc.alloc.rate:                   2133.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              93164.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1899.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82980.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.943 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   4: 35932.415 ops/s
[info]                  ·gc.alloc.rate:                   2137.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              93596.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1913.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83795.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.697 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   5: 35584.003 ops/s
[info]                  ·gc.alloc.rate:                   2102.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              92976.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1926.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85223.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 221.383 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   35014.076 ±(99.9%) 4760.224 ops/s [Average]
[info]   (min, avg, max) = (33141.793, 35014.076, 36032.393), stdev = 1236.215
[info]   CI (99.9%): [30253.852, 39774.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2198.106 ±(99.9%) 672.217 MB/sec [Average]
[info]   (min, avg, max) = (2102.094, 2198.106, 2509.238), stdev = 174.573
[info]   CI (99.9%): [1525.889, 2870.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   99072.909 ±(99.9%) 43474.271 B/op [Average]
[info]   (min, avg, max) = (92976.588, 99072.909, 119105.232), stdev = 11290.130
[info]   CI (99.9%): [55598.637, 142547.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2037.573 ±(99.9%) 1059.778 MB/sec [Average]
[info]   (min, avg, max) = (1899.863, 2037.573, 2529.592), stdev = 275.221
[info]   CI (99.9%): [977.795, 3097.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   91764.118 ±(99.9%) 53073.392 B/op [Average]
[info]   (min, avg, max) = (82980.625, 91764.118, 115762.986), stdev = 13782.991
[info]   CI (99.9%): [38690.726, 144837.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   4.369 ±(99.9%) 15.510 MB/sec [Average]
[info]   (min, avg, max) = (0.067, 4.369, 10.156), stdev = 4.028
[info]   CI (99.9%): [≈ 0, 19.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   199.848 ±(99.9%) 713.535 B/op [Average]
[info]   (min, avg, max) = (2.943, 199.848, 464.756), stdev = 185.303
[info]   CI (99.9%): [≈ 0, 913.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   125.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (20.000, 25.000, 35.000), stdev = 5.874
[info]   CI (99.9%): [125.000, 125.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.29% complete, ETA 01:23:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5389.972 ops/s
[info] # Warmup Iteration   2: 20796.324 ops/s
[info] # Warmup Iteration   3: 30513.748 ops/s
[info] # Warmup Iteration   4: 40587.660 ops/s
[info] # Warmup Iteration   5: 37201.536 ops/s
[info] Iteration   1: 40721.057 ops/s
[info]                  ·gc.alloc.rate:                   2130.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              82299.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1941.218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74997.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.611 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100.862 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 40844.213 ops/s
[info]                  ·gc.alloc.rate:                   2206.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              84817.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2580.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99205.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.139 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120.673 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         25.000 ms
[info] Iteration   3: 45075.761 ops/s
[info]                  ·gc.alloc.rate:                   2129.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              74368.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1933.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67498.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.793 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   4: 44279.690 ops/s
[info]                  ·gc.alloc.rate:                   2091.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              74341.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1934.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68769.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.907 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.223 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   5: 45584.020 ops/s
[info]                  ·gc.alloc.rate:                   2147.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              74145.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1938.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66937.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 171.056 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   43300.948 ±(99.9%) 9032.962 ops/s [Average]
[info]   (min, avg, max) = (40721.057, 43300.948, 45584.020), stdev = 2345.832
[info]   CI (99.9%): [34267.986, 52333.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2141.109 ±(99.9%) 161.276 MB/sec [Average]
[info]   (min, avg, max) = (2091.415, 2141.109, 2206.348), stdev = 41.883
[info]   CI (99.9%): [1979.833, 2302.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   77994.560 ±(99.9%) 19859.696 B/op [Average]
[info]   (min, avg, max) = (74145.167, 77994.560, 84817.570), stdev = 5157.500
[info]   CI (99.9%): [58134.864, 97854.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2065.702 ±(99.9%) 1108.469 MB/sec [Average]
[info]   (min, avg, max) = (1933.043, 2065.702, 2580.619), stdev = 287.866
[info]   CI (99.9%): [957.234, 3174.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   75481.681 ±(99.9%) 52545.483 B/op [Average]
[info]   (min, avg, max) = (66937.478, 75481.681, 99205.462), stdev = 13645.895
[info]   CI (99.9%): [22936.198, 128027.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2.333 ±(99.9%) 7.417 MB/sec [Average]
[info]   (min, avg, max) = (0.051, 2.333, 4.955), stdev = 1.926
[info]   CI (99.9%): [≈ 0, 9.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   85.322 ±(99.9%) 262.848 B/op [Average]
[info]   (min, avg, max) = (1.793, 85.322, 171.056), stdev = 68.261
[info]   CI (99.9%): [≈ 0, 348.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   94.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (14.000, 18.800, 25.000), stdev = 4.207
[info]   CI (99.9%): [94.000, 94.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.53% complete, ETA 01:22:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 184372.048 ops/s
[info] # Warmup Iteration   2: 299056.650 ops/s
[info] # Warmup Iteration   3: 317891.790 ops/s
[info] # Warmup Iteration   4: 322147.351 ops/s
[info] # Warmup Iteration   5: 322166.070 ops/s
[info] Iteration   1: 322584.678 ops/s
[info]                  ·gc.alloc.rate:               728.962 MB/sec
[info]                  ·gc.alloc.rate.norm:          3556.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3262.957 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 322632.515 ops/s
[info]                  ·gc.alloc.rate:               734.232 MB/sec
[info]                  ·gc.alloc.rate.norm:          3580.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3265.833 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 319969.526 ops/s
[info]                  ·gc.alloc.rate:                   733.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              3606.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3292.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 320709.635 ops/s
[info]                  ·gc.alloc.rate:                   731.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              3588.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3285.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 317333.254 ops/s
[info]                  ·gc.alloc.rate:               719.327 MB/sec
[info]                  ·gc.alloc.rate.norm:          3567.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3320.296 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   320645.921 ±(99.9%) 8423.293 ops/s [Average]
[info]   (min, avg, max) = (317333.254, 320645.921, 322632.515), stdev = 2187.502
[info]   CI (99.9%): [312222.629, 329069.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   729.385 ±(99.9%) 23.020 MB/sec [Average]
[info]   (min, avg, max) = (719.327, 729.385, 734.232), stdev = 5.978
[info]   CI (99.9%): [706.365, 752.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3579.902 ±(99.9%) 74.597 B/op [Average]
[info]   (min, avg, max) = (3556.194, 3579.902, 3606.752), stdev = 19.373
[info]   CI (99.9%): [3505.305, 3654.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   669.376 ±(99.9%) 1.159 MB/sec [Average]
[info]   (min, avg, max) = (668.854, 669.376, 669.634), stdev = 0.301
[info]   CI (99.9%): [668.216, 670.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3285.487 ±(99.9%) 89.516 B/op [Average]
[info]   (min, avg, max) = (3262.957, 3285.487, 3320.296), stdev = 23.247
[info]   CI (99.9%): [3195.971, 3375.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.023 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.113 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.064), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 27.76% complete, ETA 01:22:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 200812.435 ops/s
[info] # Warmup Iteration   2: 325722.379 ops/s
[info] # Warmup Iteration   3: 353776.932 ops/s
[info] # Warmup Iteration   4: 353691.053 ops/s
[info] # Warmup Iteration   5: 353676.151 ops/s
[info] Iteration   1: 353513.982 ops/s
[info]                  ·gc.alloc.rate:      0.167 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.745 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 353706.987 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 353519.991 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 344380.169 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 353814.465 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   351787.119 ±(99.9%) 15951.596 ops/s [Average]
[info]   (min, avg, max) = (344380.169, 351787.119, 353814.465), stdev = 4142.579
[info]   CI (99.9%): [335835.522, 367738.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.034 ±(99.9%) 0.288 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.034, 0.167), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.150 ±(99.9%) 1.281 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.150, 0.745), stdev = 0.333
[info]   CI (99.9%): [≈ 0, 1.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28.00% complete, ETA 01:22:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7393.263 ops/s
[info] # Warmup Iteration   2: 22475.118 ops/s
[info] # Warmup Iteration   3: 35846.208 ops/s
[info] # Warmup Iteration   4: 38674.368 ops/s
[info] # Warmup Iteration   5: 39857.860 ops/s
[info] Iteration   1: 40835.372 ops/s
[info]                  ·gc.alloc.rate:                   2375.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              91502.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2411.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92916.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.318 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89.292 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         32.000 ms
[info] Iteration   2: 33024.751 ops/s
[info]                  ·gc.alloc.rate:                   2790.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              132226.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2381.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112855.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      14.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 699.852 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         56.000 ms
[info] Iteration   3: 37604.134 ops/s
[info]                  ·gc.alloc.rate:                   2672.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              111799.556 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2918.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122118.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      33.307 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1393.566 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         82.000 ms
[info] Iteration   4: 45846.475 ops/s
[info]                  ·gc.alloc.rate:                   2337.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              80198.668 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2309.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79257.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      27.443 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 941.589 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 46569.095 ops/s
[info]                  ·gc.alloc.rate:               2380.425 MB/sec
[info]                  ·gc.alloc.rate.norm:          80438.757 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2306.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 77939.114 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   40775.965 ±(99.9%) 21902.666 ops/s [Average]
[info]   (min, avg, max) = (33024.751, 40775.965, 46569.095), stdev = 5688.053
[info]   CI (99.9%): [18873.299, 62678.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2511.194 ±(99.9%) 793.571 MB/sec [Average]
[info]   (min, avg, max) = (2337.399, 2511.194, 2790.840), stdev = 206.088
[info]   CI (99.9%): [1717.623, 3304.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   99233.281 ±(99.9%) 86571.279 B/op [Average]
[info]   (min, avg, max) = (80198.668, 99233.281, 132226.991), stdev = 22482.286
[info]   CI (99.9%): [12662.002, 185804.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2465.808 ±(99.9%) 990.655 MB/sec [Average]
[info]   (min, avg, max) = (2306.453, 2465.808, 2918.732), stdev = 257.270
[info]   CI (99.9%): [1475.153, 3456.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   97017.403 ±(99.9%) 76460.082 B/op [Average]
[info]   (min, avg, max) = (77939.114, 97017.403, 122118.718), stdev = 19856.440
[info]   CI (99.9%): [20557.322, 173477.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   15.568 ±(99.9%) 56.928 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 15.568, 33.307), stdev = 14.784
[info]   CI (99.9%): [≈ 0, 72.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   624.860 ±(99.9%) 2256.928 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 624.860, 1393.566), stdev = 586.117
[info]   CI (99.9%): [≈ 0, 2881.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   190.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 38.000, 82.000), stdev = 31.081
[info]   CI (99.9%): [190.000, 190.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28.24% complete, ETA 01:21:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24790.269 ops/s
[info] # Warmup Iteration   2: 155334.009 ops/s
[info] # Warmup Iteration   3: 157427.022 ops/s
[info] # Warmup Iteration   4: 179496.463 ops/s
[info] # Warmup Iteration   5: 180060.696 ops/s
[info] Iteration   1: 181085.551 ops/s
[info]                  ·gc.alloc.rate:                   2524.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              21938.096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2666.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23170.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.704 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 181940.616 ops/s
[info]                  ·gc.alloc.rate:                   2531.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              21901.787 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17293.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.244 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.408 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 181814.448 ops/s
[info]                  ·gc.alloc.rate:               2543.241 MB/sec
[info]                  ·gc.alloc.rate.norm:          22014.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2664.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23066.158 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 181682.779 ops/s
[info]                  ·gc.alloc.rate:                   2580.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              22357.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23108.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 181319.683 ops/s
[info]                  ·gc.alloc.rate:               2550.154 MB/sec
[info]                  ·gc.alloc.rate.norm:          22134.349 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17412.568 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   181568.615 ±(99.9%) 1371.135 ops/s [Average]
[info]   (min, avg, max) = (181085.551, 181568.615, 181940.616), stdev = 356.079
[info]   CI (99.9%): [180197.480, 182939.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2546.175 ±(99.9%) 83.934 MB/sec [Average]
[info]   (min, avg, max) = (2524.627, 2546.175, 2580.937), stdev = 21.797
[info]   CI (99.9%): [2462.241, 2630.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22069.290 ±(99.9%) 708.418 B/op [Average]
[info]   (min, avg, max) = (21901.787, 22069.290, 22357.268), stdev = 183.974
[info]   CI (99.9%): [21360.872, 22777.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2400.800 ±(99.9%) 1399.617 MB/sec [Average]
[info]   (min, avg, max) = (1999.139, 2400.800, 2667.616), stdev = 363.476
[info]   CI (99.9%): [1001.183, 3800.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   20810.032 ±(99.9%) 12154.433 B/op [Average]
[info]   (min, avg, max) = (17293.117, 20810.032, 23170.199), stdev = 3156.468
[info]   CI (99.9%): [8655.599, 32964.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.561 ±(99.9%) 3.730 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.561, 2.244), stdev = 0.969
[info]   CI (99.9%): [≈ 0, 4.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.859 ±(99.9%) 32.264 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.859, 19.408), stdev = 8.379
[info]   CI (99.9%): [≈ 0, 37.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.387
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28.47% complete, ETA 01:21:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.637 ops/s
[info] # Warmup Iteration   2: 503975.310 ops/s
[info] # Warmup Iteration   3: 549020.596 ops/s
[info] # Warmup Iteration   4: 564148.191 ops/s
[info] # Warmup Iteration   5: 550958.648 ops/s
[info] Iteration   1: 563877.421 ops/s
[info]                  ·gc.alloc.rate:               602.839 MB/sec
[info]                  ·gc.alloc.rate.norm:          1682.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1851.787 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 561119.471 ops/s
[info]                  ·gc.alloc.rate:               603.548 MB/sec
[info]                  ·gc.alloc.rate.norm:          1692.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1862.788 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 564137.304 ops/s
[info]                  ·gc.alloc.rate:                   608.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              1696.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1852.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 560828.001 ops/s
[info]                  ·gc.alloc.rate:               604.424 MB/sec
[info]                  ·gc.alloc.rate.norm:          1696.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1865.727 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 563514.843 ops/s
[info]                  ·gc.alloc.rate:      584.323 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   562695.408 ±(99.9%) 6124.364 ops/s [Average]
[info]   (min, avg, max) = (560828.001, 562695.408, 564137.304), stdev = 1590.478
[info]   CI (99.9%): [556571.044, 568819.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   600.681 ±(99.9%) 36.128 MB/sec [Average]
[info]   (min, avg, max) = (584.323, 600.681, 608.272), stdev = 9.382
[info]   CI (99.9%): [564.553, 636.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1680.043 ±(99.9%) 105.788 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1680.043, 1696.773), stdev = 27.473
[info]   CI (99.9%): [1574.255, 1785.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   531.349 ±(99.9%) 1143.770 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.349, 664.821), stdev = 297.033
[info]   CI (99.9%): [≈ 0, 1675.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1486.638 ±(99.9%) 3200.185 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1486.638, 1865.727), stdev = 831.078
[info]   CI (99.9%): [≈ 0, 4686.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.001 ±(99.9%) 0.009 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.71% complete, ETA 01:21:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76123.681 ops/s
[info] # Warmup Iteration   2: 327295.366 ops/s
[info] # Warmup Iteration   3: 435983.558 ops/s
[info] # Warmup Iteration   4: 511646.840 ops/s
[info] # Warmup Iteration   5: 514041.859 ops/s
[info] Iteration   1: 515655.991 ops/s
[info]                  ·gc.alloc.rate:                   510.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              1557.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2018.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.127 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 518793.912 ops/s
[info]                  ·gc.alloc.rate:      493.201 MB/sec
[info]                  ·gc.alloc.rate.norm: 1496.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 515917.690 ops/s
[info]                  ·gc.alloc.rate:               513.585 MB/sec
[info]                  ·gc.alloc.rate.norm:          1566.495 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2019.998 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 527948.966 ops/s
[info]                  ·gc.alloc.rate:                   514.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              1533.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1973.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 529714.542 ops/s
[info]                  ·gc.alloc.rate:               519.282 MB/sec
[info]                  ·gc.alloc.rate.norm:          1542.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1969.237 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   521606.220 ±(99.9%) 25948.955 ops/s [Average]
[info]   (min, avg, max) = (515655.991, 521606.220, 529714.542), stdev = 6738.861
[info]   CI (99.9%): [495657.266, 547555.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   510.095 ±(99.9%) 38.470 MB/sec [Average]
[info]   (min, avg, max) = (493.201, 510.095, 519.282), stdev = 9.991
[info]   CI (99.9%): [471.625, 548.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1539.018 ±(99.9%) 105.070 B/op [Average]
[info]   (min, avg, max) = (1496.001, 1539.018, 1566.495), stdev = 27.286
[info]   CI (99.9%): [1433.948, 1644.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   529.767 ±(99.9%) 1140.365 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 529.767, 662.958), stdev = 296.149
[info]   CI (99.9%): [≈ 0, 1670.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1596.413 ±(99.9%) 3437.642 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1596.413, 2019.998), stdev = 892.745
[info]   CI (99.9%): [≈ 0, 5034.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.218 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.127), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 5.000), stdev = 2.236
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.94% complete, ETA 01:21:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 267546.104 ops/s
[info] # Warmup Iteration   2: 542463.748 ops/s
[info] # Warmup Iteration   3: 664671.342 ops/s
[info] # Warmup Iteration   4: 669775.958 ops/s
[info] # Warmup Iteration   5: 667181.381 ops/s
[info] Iteration   1: 668423.172 ops/s
[info]                  ·gc.alloc.rate:               451.490 MB/sec
[info]                  ·gc.alloc.rate.norm:          1063.154 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1204.631 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 633391.075 ops/s
[info]                  ·gc.alloc.rate:               504.220 MB/sec
[info]                  ·gc.alloc.rate.norm:          1252.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1661.088 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 672854.154 ops/s
[info]                  ·gc.alloc.rate:      437.782 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 670482.196 ops/s
[info]                  ·gc.alloc.rate:                   451.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              1058.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1569.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 675282.573 ops/s
[info]                  ·gc.alloc.rate:               457.238 MB/sec
[info]                  ·gc.alloc.rate.norm:          1065.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1559.540 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   664086.634 ±(99.9%) 66810.187 ops/s [Average]
[info]   (min, avg, max) = (633391.075, 664086.634, 675282.573), stdev = 17350.393
[info]   CI (99.9%): [597276.447, 730896.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   460.370 ±(99.9%) 98.310 MB/sec [Average]
[info]   (min, avg, max) = (437.782, 460.370, 504.220), stdev = 25.531
[info]   CI (99.9%): [362.061, 558.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1092.937 ±(99.9%) 350.384 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1092.937, 1252.885), stdev = 90.994
[info]   CI (99.9%): [742.553, 1443.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   503.532 ±(99.9%) 1115.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503.532, 669.131), stdev = 289.589
[info]   CI (99.9%): [≈ 0, 1618.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1198.880 ±(99.9%) 2666.520 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1198.880, 1661.088), stdev = 692.487
[info]   CI (99.9%): [≈ 0, 3865.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29.18% complete, ETA 01:20:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6176.430 ops/s
[info] # Warmup Iteration   2: 84519.190 ops/s
[info] # Warmup Iteration   3: 110855.025 ops/s
[info] # Warmup Iteration   4: 112617.169 ops/s
[info] # Warmup Iteration   5: 113444.633 ops/s
[info] Iteration   1: 115051.017 ops/s
[info]                  ·gc.alloc.rate:                   3887.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              53172.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3342.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45709.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.570 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 113375.609 ops/s
[info]                  ·gc.alloc.rate:                   3875.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              53786.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4026.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55884.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.734 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 114436.336 ops/s
[info]                  ·gc.alloc.rate:                   3948.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              54303.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4044.338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55621.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.286 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 114976.207 ops/s
[info]                  ·gc.alloc.rate:                   3939.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              53933.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3381.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46290.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.570 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 114806.492 ops/s
[info]                  ·gc.alloc.rate:                   3961.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              54311.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4067.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55762.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.856 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   114529.132 ±(99.9%) 2645.757 ops/s [Average]
[info]   (min, avg, max) = (113375.609, 114529.132, 115051.017), stdev = 687.095
[info]   CI (99.9%): [111883.375, 117174.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3922.682 ±(99.9%) 148.395 MB/sec [Average]
[info]   (min, avg, max) = (3875.440, 3922.682, 3961.752), stdev = 38.538
[info]   CI (99.9%): [3774.287, 4071.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   53901.530 ±(99.9%) 1801.738 B/op [Average]
[info]   (min, avg, max) = (53172.455, 53901.530, 54311.857), stdev = 467.906
[info]   CI (99.9%): [52099.792, 55703.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3772.440 ±(99.9%) 1445.368 MB/sec [Average]
[info]   (min, avg, max) = (3342.087, 3772.440, 4067.589), stdev = 375.358
[info]   CI (99.9%): [2327.072, 5217.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   51853.611 ±(99.9%) 20595.754 B/op [Average]
[info]   (min, avg, max) = (45709.122, 51853.611, 55884.226), stdev = 5348.652
[info]   CI (99.9%): [31257.856, 72449.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.803 ±(99.9%) 2.149 B/op [Average]
[info]   (min, avg, max) = (0.286, 0.803, 1.734), stdev = 0.558
[info]   CI (99.9%): [≈ 0, 2.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.400, 11.000), stdev = 1.673
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 29.41% complete, ETA 01:20:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54185.301 ops/s
[info] # Warmup Iteration   2: 223469.088 ops/s
[info] # Warmup Iteration   3: 241324.944 ops/s
[info] # Warmup Iteration   4: 247387.561 ops/s
[info] # Warmup Iteration   5: 246928.410 ops/s
[info] Iteration   1: 240884.525 ops/s
[info]                  ·gc.alloc.rate:               1712.342 MB/sec
[info]                  ·gc.alloc.rate.norm:          11187.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8735.159 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 245039.073 ops/s
[info]                  ·gc.alloc.rate:                   1747.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              11223.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12874.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.894 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 245769.625 ops/s
[info]                  ·gc.alloc.rate:                   1740.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              11143.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8535.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.066 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 246294.352 ops/s
[info]                  ·gc.alloc.rate:                   1757.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              11229.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12761.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 248364.847 ops/s
[info]                  ·gc.alloc.rate:               1777.714 MB/sec
[info]                  ·gc.alloc.rate.norm:          11265.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12661.800 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   245270.484 ±(99.9%) 10573.983 ops/s [Average]
[info]   (min, avg, max) = (240884.525, 245270.484, 248364.847), stdev = 2746.030
[info]   CI (99.9%): [234696.501, 255844.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1747.018 ±(99.9%) 92.329 MB/sec [Average]
[info]   (min, avg, max) = (1712.342, 1747.018, 1777.714), stdev = 23.977
[info]   CI (99.9%): [1654.689, 1839.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11209.950 ±(99.9%) 178.276 B/op [Average]
[info]   (min, avg, max) = (11143.346, 11209.950, 11265.514), stdev = 46.298
[info]   CI (99.9%): [11031.674, 11388.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1733.942 ±(99.9%) 1402.613 MB/sec [Average]
[info]   (min, avg, max) = (1332.939, 1733.942, 2004.645), stdev = 364.254
[info]   CI (99.9%): [331.329, 3136.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11113.808 ±(99.9%) 8720.462 B/op [Average]
[info]   (min, avg, max) = (8535.933, 11113.808, 12874.179), stdev = 2264.676
[info]   CI (99.9%): [2393.346, 19834.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.906 ±(99.9%) 7.404 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.906, 4.343), stdev = 1.923
[info]   CI (99.9%): [≈ 0, 8.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.819 ±(99.9%) 47.550 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.819, 27.894), stdev = 12.349
[info]   CI (99.9%): [≈ 0, 53.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 29.65% complete, ETA 01:20:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.628 ops/s
[info] # Warmup Iteration   2: 1185797.151 ops/s
[info] # Warmup Iteration   3: 1138133.860 ops/s
[info] # Warmup Iteration   4: 1224437.936 ops/s
[info] # Warmup Iteration   5: 1227782.315 ops/s
[info] Iteration   1: 1229629.966 ops/s
[info]                  ·gc.alloc.rate:               689.570 MB/sec
[info]                  ·gc.alloc.rate.norm:          882.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 850.116 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1254564.045 ops/s
[info]                  ·gc.alloc.rate:               697.723 MB/sec
[info]                  ·gc.alloc.rate.norm:          875.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 833.201 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1257064.190 ops/s
[info]                  ·gc.alloc.rate:               701.193 MB/sec
[info]                  ·gc.alloc.rate.norm:          877.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 832.357 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1239498.257 ops/s
[info]                  ·gc.alloc.rate:               696.739 MB/sec
[info]                  ·gc.alloc.rate.norm:          884.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 844.152 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1233072.243 ops/s
[info]                  ·gc.alloc.rate:               691.632 MB/sec
[info]                  ·gc.alloc.rate.norm:          882.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 848.994 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   1242765.740 ±(99.9%) 47972.384 ops/s [Average]
[info]   (min, avg, max) = (1229629.966, 1242765.740, 1257064.190), stdev = 12458.276
[info]   CI (99.9%): [1194793.356, 1290738.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   695.372 ±(99.9%) 18.156 MB/sec [Average]
[info]   (min, avg, max) = (689.570, 695.372, 701.193), stdev = 4.715
[info]   CI (99.9%): [677.216, 713.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   880.652 ±(99.9%) 15.052 B/op [Average]
[info]   (min, avg, max) = (875.276, 880.652, 884.699), stdev = 3.909
[info]   CI (99.9%): [865.600, 895.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   664.631 ±(99.9%) 1.619 MB/sec [Average]
[info]   (min, avg, max) = (664.183, 664.631, 665.146), stdev = 0.421
[info]   CI (99.9%): [663.012, 666.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   841.764 ±(99.9%) 32.761 B/op [Average]
[info]   (min, avg, max) = (832.357, 841.764, 850.116), stdev = 8.508
[info]   CI (99.9%): [809.003, 874.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.88% complete, ETA 01:20:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 343322.361 ops/s
[info] # Warmup Iteration   2: 1092408.565 ops/s
[info] # Warmup Iteration   3: 1197489.677 ops/s
[info] # Warmup Iteration   4: 1224163.024 ops/s
[info] # Warmup Iteration   5: 1229214.086 ops/s
[info] Iteration   1: 1230896.516 ops/s
[info]                  ·gc.alloc.rate:                   693.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              886.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     850.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1230466.252 ops/s
[info]                  ·gc.alloc.rate:               688.125 MB/sec
[info]                  ·gc.alloc.rate.norm:          879.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 851.201 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1240862.326 ops/s
[info]                  ·gc.alloc.rate:                   694.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              880.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     844.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1242208.776 ops/s
[info]                  ·gc.alloc.rate:                   701.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              888.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     843.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1226020.842 ops/s
[info]                  ·gc.alloc.rate:               700.287 MB/sec
[info]                  ·gc.alloc.rate.norm:          898.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 855.068 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   1234090.942 ±(99.9%) 27243.143 ops/s [Average]
[info]   (min, avg, max) = (1226020.842, 1234090.942, 1242208.776), stdev = 7074.958
[info]   CI (99.9%): [1206847.799, 1261334.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   695.509 ±(99.9%) 21.009 MB/sec [Average]
[info]   (min, avg, max) = (688.125, 695.509, 701.432), stdev = 5.456
[info]   CI (99.9%): [674.500, 716.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   886.958 ±(99.9%) 29.432 B/op [Average]
[info]   (min, avg, max) = (879.960, 886.958, 898.975), stdev = 7.643
[info]   CI (99.9%): [857.527, 916.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   665.625 ±(99.9%) 2.050 MB/sec [Average]
[info]   (min, avg, max) = (664.777, 665.625, 666.084), stdev = 0.532
[info]   CI (99.9%): [663.575, 667.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   848.856 ±(99.9%) 18.554 B/op [Average]
[info]   (min, avg, max) = (843.907, 848.856, 855.068), stdev = 4.818
[info]   CI (99.9%): [830.302, 867.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.027 ±(99.9%) 0.152 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.094), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.035 ±(99.9%) 0.194 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.120), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.12% complete, ETA 01:19:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 383499.956 ops/s
[info] # Warmup Iteration   2: 997821.656 ops/s
[info] # Warmup Iteration   3: 1103950.261 ops/s
[info] # Warmup Iteration   4: 1140042.625 ops/s
[info] # Warmup Iteration   5: 1127805.583 ops/s
[info] Iteration   1: 1136841.589 ops/s
[info]                  ·gc.alloc.rate:                   643.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              890.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     924.986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1139913.034 ops/s
[info]                  ·gc.alloc.rate:               633.602 MB/sec
[info]                  ·gc.alloc.rate.norm:          874.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 922.497 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1143693.652 ops/s
[info]                  ·gc.alloc.rate:               642.221 MB/sec
[info]                  ·gc.alloc.rate.norm:          883.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 920.362 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1135524.535 ops/s
[info]                  ·gc.alloc.rate:               639.228 MB/sec
[info]                  ·gc.alloc.rate.norm:          886.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 926.995 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1138755.550 ops/s
[info]                  ·gc.alloc.rate:                   640.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              885.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     924.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1138945.672 ±(99.9%) 12122.894 ops/s [Average]
[info]   (min, avg, max) = (1135524.535, 1138945.672, 1143693.652), stdev = 3148.277
[info]   CI (99.9%): [1126822.778, 1151068.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   639.785 ±(99.9%) 14.506 MB/sec [Average]
[info]   (min, avg, max) = (633.602, 639.785, 643.167), stdev = 3.767
[info]   CI (99.9%): [625.280, 654.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   884.079 ±(99.9%) 22.174 B/op [Average]
[info]   (min, avg, max) = (874.778, 884.079, 890.418), stdev = 5.759
[info]   CI (99.9%): [861.905, 906.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   668.618 ±(99.9%) 1.702 MB/sec [Average]
[info]   (min, avg, max) = (668.136, 668.618, 669.113), stdev = 0.442
[info]   CI (99.9%): [666.915, 670.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   923.921 ±(99.9%) 9.815 B/op [Average]
[info]   (min, avg, max) = (920.362, 923.921, 926.995), stdev = 2.549
[info]   CI (99.9%): [914.105, 933.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.023 ±(99.9%) 0.145 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.086), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 30.35% complete, ETA 01:19:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 695745.859 ops/s
[info] # Warmup Iteration   2: 1048858.372 ops/s
[info] # Warmup Iteration   3: 1151973.525 ops/s
[info] # Warmup Iteration   4: 1152001.328 ops/s
[info] # Warmup Iteration   5: 1153570.315 ops/s
[info] Iteration   1: 1151824.533 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1153162.325 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1152447.871 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1117079.326 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1152438.661 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1145390.543 ±(99.9%) 60969.317 ops/s [Average]
[info]   (min, avg, max) = (1117079.326, 1145390.543, 1153162.325), stdev = 15833.538
[info]   CI (99.9%): [1084421.226, 1206359.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.59% complete, ETA 01:19:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2399.959 ops/s
[info] # Warmup Iteration   2: 21092.987 ops/s
[info] # Warmup Iteration   3: 40480.485 ops/s
[info] # Warmup Iteration   4: 40272.240 ops/s
[info] # Warmup Iteration   5: 36216.723 ops/s
[info] Iteration   1: 40121.251 ops/s
[info]                  ·gc.alloc.rate:                   1938.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              76049.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1984.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77843.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 196.573 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 39639.926 ops/s
[info]                  ·gc.alloc.rate:                   1909.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              75805.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1984.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78789.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.020 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 40226.479 ops/s
[info]                  ·gc.alloc.rate:                   1932.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              75587.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1984.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77655.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.072 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 40570.969 ops/s
[info]                  ·gc.alloc.rate:                   1924.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              74670.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51386.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.808 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 40385.246 ops/s
[info]                  ·gc.alloc.rate:                   1953.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              76098.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77566.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.174 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84.721 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   40188.774 ±(99.9%) 1350.321 ops/s [Average]
[info]   (min, avg, max) = (39639.926, 40188.774, 40570.969), stdev = 350.674
[info]   CI (99.9%): [38838.453, 41539.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1931.531 ±(99.9%) 62.508 MB/sec [Average]
[info]   (min, avg, max) = (1909.302, 1931.531, 1953.079), stdev = 16.233
[info]   CI (99.9%): [1869.024, 1994.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   75642.125 ±(99.9%) 2235.431 B/op [Average]
[info]   (min, avg, max) = (74670.229, 75642.125, 76098.081), stdev = 580.534
[info]   CI (99.9%): [73406.694, 77877.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1853.785 ±(99.9%) 1139.275 MB/sec [Average]
[info]   (min, avg, max) = (1324.546, 1853.785, 1990.768), stdev = 295.866
[info]   CI (99.9%): [714.511, 2993.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   72648.323 ±(99.9%) 45807.014 B/op [Average]
[info]   (min, avg, max) = (51386.090, 72648.323, 78789.989), stdev = 11895.936
[info]   CI (99.9%): [26841.310, 118455.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.654 ±(99.9%) 7.960 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.654, 5.011), stdev = 2.067
[info]   CI (99.9%): [≈ 0, 9.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   64.839 ±(99.9%) 312.003 B/op [Average]
[info]   (min, avg, max) = (0.808, 64.839, 196.573), stdev = 81.026
[info]   CI (99.9%): [≈ 0, 376.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 12.000), stdev = 2.588
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30.82% complete, ETA 01:19:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12851.749 ops/s
[info] # Warmup Iteration   2: 87940.018 ops/s
[info] # Warmup Iteration   3: 139887.000 ops/s
[info] # Warmup Iteration   4: 142453.640 ops/s
[info] # Warmup Iteration   5: 147798.812 ops/s
[info] Iteration   1: 146883.809 ops/s
[info]                  ·gc.alloc.rate:                   1843.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              19752.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21334.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.669 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 144245.002 ops/s
[info]                  ·gc.alloc.rate:                   1828.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              19952.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21765.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.909 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 144707.745 ops/s
[info]                  ·gc.alloc.rate:                   1800.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              19581.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14490.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.585 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 144165.799 ops/s
[info]                  ·gc.alloc.rate:                   1803.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              19688.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21856.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.909 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 145882.179 ops/s
[info]                  ·gc.alloc.rate:                   1834.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              19793.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21671.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.225 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   145176.907 ±(99.9%) 4524.229 ops/s [Average]
[info]   (min, avg, max) = (144165.799, 145176.907, 146883.809), stdev = 1174.928
[info]   CI (99.9%): [140652.678, 149701.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1822.313 ±(99.9%) 73.218 MB/sec [Average]
[info]   (min, avg, max) = (1800.718, 1822.313, 1843.552), stdev = 19.014
[info]   CI (99.9%): [1749.095, 1895.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19753.832 ±(99.9%) 527.109 B/op [Average]
[info]   (min, avg, max) = (19581.770, 19753.832, 19952.669), stdev = 136.888
[info]   CI (99.9%): [19226.723, 20280.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1865.968 ±(99.9%) 1148.619 MB/sec [Average]
[info]   (min, avg, max) = (1332.502, 1865.968, 2008.620), stdev = 298.293
[info]   CI (99.9%): [717.349, 3014.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   20223.635 ±(99.9%) 12365.042 B/op [Average]
[info]   (min, avg, max) = (14490.199, 20223.635, 21856.545), stdev = 3211.162
[info]   CI (99.9%): [7858.594, 32588.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.146), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.859 ±(99.9%) 1.897 B/op [Average]
[info]   (min, avg, max) = (0.225, 0.859, 1.585), stdev = 0.493
[info]   CI (99.9%): [≈ 0, 2.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.06% complete, ETA 01:18:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54356.429 ops/s
[info] # Warmup Iteration   2: 173954.310 ops/s
[info] # Warmup Iteration   3: 198774.831 ops/s
[info] # Warmup Iteration   4: 202076.788 ops/s
[info] # Warmup Iteration   5: 208380.126 ops/s
[info] Iteration   1: 207494.594 ops/s
[info]                  ·gc.alloc.rate:                   1239.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              9399.439 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10043.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.316 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 208317.558 ops/s
[info]                  ·gc.alloc.rate:                   1234.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              9325.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5010.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.157 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 208086.220 ops/s
[info]                  ·gc.alloc.rate:               1251.672 MB/sec
[info]                  ·gc.alloc.rate.norm:          9466.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10041.428 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 208477.354 ops/s
[info]                  ·gc.alloc.rate:                   1244.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              9396.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10042.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.043 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 207549.179 ops/s
[info]                  ·gc.alloc.rate:                   1258.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              9544.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10108.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.947 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   207984.981 ±(99.9%) 1715.255 ops/s [Average]
[info]   (min, avg, max) = (207494.594, 207984.981, 208477.354), stdev = 445.446
[info]   CI (99.9%): [206269.726, 209700.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1245.832 ±(99.9%) 36.825 MB/sec [Average]
[info]   (min, avg, max) = (1234.340, 1245.832, 1258.623), stdev = 9.563
[info]   CI (99.9%): [1209.007, 1282.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9426.526 ±(99.9%) 318.873 B/op [Average]
[info]   (min, avg, max) = (9325.399, 9426.526, 9544.503), stdev = 82.810
[info]   CI (99.9%): [9107.653, 9745.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1195.761 ±(99.9%) 1146.538 MB/sec [Average]
[info]   (min, avg, max) = (663.152, 1195.761, 1332.939), stdev = 297.752
[info]   CI (99.9%): [49.223, 2342.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9049.134 ±(99.9%) 8695.032 B/op [Average]
[info]   (min, avg, max) = (5010.091, 9049.134, 10108.059), stdev = 2258.072
[info]   CI (99.9%): [354.102, 17744.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.426 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.271), stdev = 0.111
[info]   CI (99.9%): [≈ 0, 0.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.693 ±(99.9%) 3.220 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.693, 2.043), stdev = 0.836
[info]   CI (99.9%): [≈ 0, 3.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 3.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.29% complete, ETA 01:18:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102094.882 ops/s
[info] # Warmup Iteration   2: 152182.689 ops/s
[info] # Warmup Iteration   3: 254296.312 ops/s
[info] # Warmup Iteration   4: 255383.628 ops/s
[info] # Warmup Iteration   5: 255341.366 ops/s
[info] Iteration   1: 254977.376 ops/s
[info]                  ·gc.alloc.rate:               1363.063 MB/sec
[info]                  ·gc.alloc.rate.norm:          8413.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8223.061 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 252338.411 ops/s
[info]                  ·gc.alloc.rate:                   1372.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              8555.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8313.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 254398.036 ops/s
[info]                  ·gc.alloc.rate:               1355.057 MB/sec
[info]                  ·gc.alloc.rate.norm:          8379.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8254.719 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 255381.904 ops/s
[info]                  ·gc.alloc.rate:                   1357.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              8365.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8234.879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.516 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 253424.552 ops/s
[info]                  ·gc.alloc.rate:                   1346.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              8363.274 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8307.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.776 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   254104.056 ±(99.9%) 4740.061 ops/s [Average]
[info]   (min, avg, max) = (252338.411, 254104.056, 255381.904), stdev = 1230.979
[info]   CI (99.9%): [249363.995, 258844.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1358.959 ±(99.9%) 35.919 MB/sec [Average]
[info]   (min, avg, max) = (1346.955, 1358.959, 1372.009), stdev = 9.328
[info]   CI (99.9%): [1323.040, 1394.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   8415.556 ±(99.9%) 311.478 B/op [Average]
[info]   (min, avg, max) = (8363.274, 8415.556, 8555.686), stdev = 80.890
[info]   CI (99.9%): [8104.077, 8727.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1334.927 ±(99.9%) 9.040 MB/sec [Average]
[info]   (min, avg, max) = (1332.175, 1334.927, 1337.906), stdev = 2.348
[info]   CI (99.9%): [1325.886, 1343.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8266.655 ±(99.9%) 159.750 B/op [Average]
[info]   (min, avg, max) = (8223.061, 8266.655, 8313.525), stdev = 41.486
[info]   CI (99.9%): [8106.906, 8426.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.208 ±(99.9%) 1.492 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.208, 0.895), stdev = 0.388
[info]   CI (99.9%): [≈ 0, 1.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.284 ±(99.9%) 9.193 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.284, 5.516), stdev = 2.387
[info]   CI (99.9%): [≈ 0, 10.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31.53% complete, ETA 01:18:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2888.750 ops/s
[info] # Warmup Iteration   2: 60572.105 ops/s
[info] # Warmup Iteration   3: 88434.906 ops/s
[info] # Warmup Iteration   4: 96403.548 ops/s
[info] # Warmup Iteration   5: 101776.867 ops/s
[info] Iteration   1: 104491.797 ops/s
[info]                  ·gc.alloc.rate:                   3450.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              51972.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3344.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50377.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.135 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 102054.988 ops/s
[info]                  ·gc.alloc.rate:                   3372.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              52009.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3352.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51705.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.963 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 103007.024 ops/s
[info]                  ·gc.alloc.rate:                   3400.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              51940.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3365.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51407.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.636 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 105556.924 ops/s
[info]                  ·gc.alloc.rate:                   3530.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              52638.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3375.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50322.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.310 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 105476.591 ops/s
[info]                  ·gc.alloc.rate:                   3528.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              52633.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3386.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50509.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.621 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   104117.465 ±(99.9%) 5948.678 ops/s [Average]
[info]   (min, avg, max) = (102054.988, 104117.465, 105556.924), stdev = 1544.853
[info]   CI (99.9%): [98168.787, 110066.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3456.564 ±(99.9%) 278.023 MB/sec [Average]
[info]   (min, avg, max) = (3372.677, 3456.564, 3530.485), stdev = 72.202
[info]   CI (99.9%): [3178.541, 3734.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52238.838 ±(99.9%) 1398.482 B/op [Average]
[info]   (min, avg, max) = (51940.844, 52238.838, 52638.205), stdev = 363.181
[info]   CI (99.9%): [50840.355, 53637.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3364.915 ±(99.9%) 64.683 MB/sec [Average]
[info]   (min, avg, max) = (3344.359, 3364.915, 3386.295), stdev = 16.798
[info]   CI (99.9%): [3300.231, 3429.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   50864.389 ±(99.9%) 2479.343 B/op [Average]
[info]   (min, avg, max) = (50322.153, 50864.389, 51705.053), stdev = 643.878
[info]   CI (99.9%): [48385.046, 53343.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.292 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.208), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.133 ±(99.9%) 4.401 B/op [Average]
[info]   (min, avg, max) = (0.310, 1.133, 3.135), stdev = 1.143
[info]   CI (99.9%): [≈ 0, 5.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31.76% complete, ETA 01:18:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55152.076 ops/s
[info] # Warmup Iteration   2: 215303.050 ops/s
[info] # Warmup Iteration   3: 222773.253 ops/s
[info] # Warmup Iteration   4: 238743.046 ops/s
[info] # Warmup Iteration   5: 238702.053 ops/s
[info] Iteration   1: 236397.463 ops/s
[info]                  ·gc.alloc.rate:                   1552.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              10333.847 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13313.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.295 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 238822.479 ops/s
[info]                  ·gc.alloc.rate:                   1543.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              10170.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8792.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.440 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 238253.407 ops/s
[info]                  ·gc.alloc.rate:                   1533.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              10132.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8810.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.389 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 235029.649 ops/s
[info]                  ·gc.alloc.rate:                   1513.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              10133.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8912.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.279 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 238536.363 ops/s
[info]                  ·gc.alloc.rate:                   1571.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              10369.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13159.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   237407.872 ±(99.9%) 6287.998 ops/s [Average]
[info]   (min, avg, max) = (235029.649, 237407.872, 238822.479), stdev = 1632.973
[info]   CI (99.9%): [231119.875, 243695.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1543.068 ±(99.9%) 83.360 MB/sec [Average]
[info]   (min, avg, max) = (1513.424, 1543.068, 1571.658), stdev = 21.648
[info]   CI (99.9%): [1459.708, 1626.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10228.097 ±(99.9%) 442.060 B/op [Average]
[info]   (min, avg, max) = (10132.128, 10228.097, 10369.998), stdev = 114.802
[info]   CI (99.9%): [9786.037, 10670.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1598.858 ±(99.9%) 1401.137 MB/sec [Average]
[info]   (min, avg, max) = (1331.089, 1598.858, 2000.469), stdev = 363.871
[info]   CI (99.9%): [197.721, 2999.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10597.848 ±(99.9%) 9279.548 B/op [Average]
[info]   (min, avg, max) = (8792.971, 10597.848, 13313.646), stdev = 2409.869
[info]   CI (99.9%): [1318.301, 19877.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.896 ±(99.9%) 5.177 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.896, 3.102), stdev = 1.344
[info]   CI (99.9%): [≈ 0, 6.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.908 ±(99.9%) 34.108 B/op [Average]
[info]   (min, avg, max) = (0.137, 5.908, 20.440), stdev = 8.858
[info]   CI (99.9%): [≈ 0, 40.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 12.000), stdev = 4.087
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.00% complete, ETA 01:17:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 233451.299 ops/s
[info] # Warmup Iteration   2: 572231.768 ops/s
[info] # Warmup Iteration   3: 704340.921 ops/s
[info] # Warmup Iteration   4: 703089.142 ops/s
[info] # Warmup Iteration   5: 705175.982 ops/s
[info] Iteration   1: 706725.017 ops/s
[info]                  ·gc.alloc.rate:      542.448 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 715865.746 ops/s
[info]                  ·gc.alloc.rate:                   568.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              1249.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1452.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 712745.303 ops/s
[info]                  ·gc.alloc.rate:                   562.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              1242.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1461.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 713505.668 ops/s
[info]                  ·gc.alloc.rate:                   566.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              1249.936 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1459.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 715900.663 ops/s
[info]                  ·gc.alloc.rate:               574.872 MB/sec
[info]                  ·gc.alloc.rate.norm:          1263.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1457.883 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   712948.479 ±(99.9%) 14447.494 ops/s [Average]
[info]   (min, avg, max) = (706725.017, 712948.479, 715900.663), stdev = 3751.968
[info]   CI (99.9%): [698500.986, 727395.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   562.987 ±(99.9%) 47.372 MB/sec [Average]
[info]   (min, avg, max) = (542.448, 562.987, 574.872), stdev = 12.302
[info]   CI (99.9%): [515.615, 610.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1242.669 ±(99.9%) 80.491 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1242.669, 1263.796), stdev = 20.903
[info]   CI (99.9%): [1162.178, 1323.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   529.561 ±(99.9%) 1139.925 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 529.561, 663.158), stdev = 296.035
[info]   CI (99.9%): [≈ 0, 1669.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1166.417 ±(99.9%) 2510.831 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1166.417, 1461.455), stdev = 652.055
[info]   CI (99.9%): [≈ 0, 3677.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.097 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.046), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.24% complete, ETA 01:17:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 419641.196 ops/s
[info] # Warmup Iteration   2: 689421.921 ops/s
[info] # Warmup Iteration   3: 637550.049 ops/s
[info] # Warmup Iteration   4: 683496.497 ops/s
[info] # Warmup Iteration   5: 683023.449 ops/s
[info] Iteration   1: 632782.809 ops/s
[info]                  ·gc.alloc.rate:               509.121 MB/sec
[info]                  ·gc.alloc.rate.norm:          1266.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1661.732 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 684644.300 ops/s
[info]                  ·gc.alloc.rate:      525.578 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.190 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 687922.058 ops/s
[info]                  ·gc.alloc.rate:               551.740 MB/sec
[info]                  ·gc.alloc.rate.norm:          1262.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1528.559 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 682524.266 ops/s
[info]                  ·gc.alloc.rate:               552.522 MB/sec
[info]                  ·gc.alloc.rate.norm:          1274.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1542.245 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 680541.144 ops/s
[info]                  ·gc.alloc.rate:                   546.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1546.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   673682.915 ±(99.9%) 88667.894 ops/s [Average]
[info]   (min, avg, max) = (632782.809, 673682.915, 687922.058), stdev = 23026.771
[info]   CI (99.9%): [585015.021, 762350.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   537.116 ±(99.9%) 73.525 MB/sec [Average]
[info]   (min, avg, max) = (509.121, 537.116, 552.522), stdev = 19.094
[info]   CI (99.9%): [463.592, 610.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1254.999 ±(99.9%) 102.244 B/op [Average]
[info]   (min, avg, max) = (1208.190, 1254.999, 1274.104), stdev = 26.552
[info]   CI (99.9%): [1152.755, 1357.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   534.773 ±(99.9%) 1151.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.773, 668.802), stdev = 298.947
[info]   CI (99.9%): [≈ 0, 1685.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1255.854 ±(99.9%) 2711.155 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1255.854, 1661.732), stdev = 704.078
[info]   CI (99.9%): [≈ 0, 3967.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.114 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.066), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 32.47% complete, ETA 01:17:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 367352.345 ops/s
[info] # Warmup Iteration   2: 709041.269 ops/s
[info] # Warmup Iteration   3: 686416.308 ops/s
[info] # Warmup Iteration   4: 686494.601 ops/s
[info] # Warmup Iteration   5: 686572.126 ops/s
[info] Iteration   1: 686289.477 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 686600.150 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 642607.695 ops/s
[info]                  ·gc.alloc.rate:      0.825 MB/sec
[info]                  ·gc.alloc.rate.norm: 2.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 684004.266 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 684023.852 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   676705.088 ±(99.9%) 73547.482 ops/s [Average]
[info]   (min, avg, max) = (642607.695, 676705.088, 686600.150), stdev = 19100.047
[info]   CI (99.9%): [603157.606, 750252.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.165 ±(99.9%) 1.420 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.165, 0.825), stdev = 0.369
[info]   CI (99.9%): [≈ 0, 1.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.404 ±(99.9%) 3.476 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.404, 2.019), stdev = 0.903
[info]   CI (99.9%): [≈ 0, 3.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32.71% complete, ETA 01:16:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91730.500 ops/s
[info] # Warmup Iteration   2: 494330.701 ops/s
[info] # Warmup Iteration   3: 600342.729 ops/s
[info] # Warmup Iteration   4: 617394.466 ops/s
[info] # Warmup Iteration   5: 624075.471 ops/s
[info] Iteration   1: 628412.945 ops/s
[info]                  ·gc.alloc.rate:                   1546.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              3872.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3338.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 627634.563 ops/s
[info]                  ·gc.alloc.rate:                   1567.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              3929.525 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5026.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 622397.916 ops/s
[info]                  ·gc.alloc.rate:                   1524.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              3854.219 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3384.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.081 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 605646.535 ops/s
[info]                  ·gc.alloc.rate:               1495.827 MB/sec
[info]                  ·gc.alloc.rate.norm:          3886.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3479.431 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 627397.661 ops/s
[info]                  ·gc.alloc.rate:                   1548.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              3884.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3359.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   622297.924 ±(99.9%) 36992.208 ops/s [Average]
[info]   (min, avg, max) = (605646.535, 622297.924, 628412.945), stdev = 9606.759
[info]   CI (99.9%): [585305.716, 659290.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1536.444 ±(99.9%) 105.344 MB/sec [Average]
[info]   (min, avg, max) = (1495.827, 1536.444, 1567.229), stdev = 27.358
[info]   CI (99.9%): [1431.100, 1641.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   3885.512 ±(99.9%) 106.803 B/op [Average]
[info]   (min, avg, max) = (3854.219, 3885.512, 3929.525), stdev = 27.736
[info]   CI (99.9%): [3778.709, 3992.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1470.872 ±(99.9%) 1149.040 MB/sec [Average]
[info]   (min, avg, max) = (1332.818, 1470.872, 2004.648), stdev = 298.402
[info]   CI (99.9%): [321.833, 2619.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3717.536 ±(99.9%) 2824.791 B/op [Average]
[info]   (min, avg, max) = (3338.293, 3717.536, 5026.269), stdev = 733.589
[info]   CI (99.9%): [892.745, 6542.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.421 ±(99.9%) 3.420 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.421, 2.009), stdev = 0.888
[info]   CI (99.9%): [≈ 0, 3.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.063 ±(99.9%) 8.649 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.063, 5.081), stdev = 2.246
[info]   CI (99.9%): [≈ 0, 9.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32.94% complete, ETA 01:16:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 736.406 ops/s
[info] # Warmup Iteration   2: 7715.064 ops/s
[info] # Warmup Iteration   3: 11097.284 ops/s
[info] # Warmup Iteration   4: 12492.330 ops/s
[info] # Warmup Iteration   5: 12344.893 ops/s
[info] Iteration   1: 12361.735 ops/s
[info]                  ·gc.alloc.rate:                   1636.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              208278.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169278.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.658 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 11585.098 ops/s
[info]                  ·gc.alloc.rate:                   1879.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              255195.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     270944.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.350 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 454.911 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 12406.344 ops/s
[info]                  ·gc.alloc.rate:                   1633.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              207259.668 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     168509.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.502 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 190.513 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 11990.644 ops/s
[info]                  ·gc.alloc.rate:                   1592.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              209002.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     260810.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.335 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 306.407 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 11999.959 ops/s
[info]                  ·gc.alloc.rate:               1898.489 MB/sec
[info]                  ·gc.alloc.rate.norm:          248876.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1322.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 173423.043 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   12068.756 ±(99.9%) 1283.717 ops/s [Average]
[info]   (min, avg, max) = (11585.098, 12068.756, 12406.344), stdev = 333.377
[info]   CI (99.9%): [10785.039, 13352.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1728.039 ±(99.9%) 569.440 MB/sec [Average]
[info]   (min, avg, max) = (1592.823, 1728.039, 1898.489), stdev = 147.882
[info]   CI (99.9%): [1158.599, 2297.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   225722.257 ±(99.9%) 92924.870 B/op [Average]
[info]   (min, avg, max) = (207259.668, 225722.257, 255195.098), stdev = 24132.294
[info]   CI (99.9%): [132797.387, 318647.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1592.722 ±(99.9%) 1401.224 MB/sec [Average]
[info]   (min, avg, max) = (1322.914, 1592.722, 1994.994), stdev = 363.894
[info]   CI (99.9%): [191.497, 2993.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   208593.172 ±(99.9%) 201963.515 B/op [Average]
[info]   (min, avg, max) = (168509.070, 208593.172, 270944.726), stdev = 52449.283
[info]   CI (99.9%): [6629.657, 410556.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.440 ±(99.9%) 5.633 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.440, 3.350), stdev = 1.463
[info]   CI (99.9%): [≈ 0, 7.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   190.698 ±(99.9%) 758.731 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 190.698, 454.911), stdev = 197.040
[info]   CI (99.9%): [≈ 0, 949.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.000, 18.000), stdev = 6.042
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.18% complete, ETA 01:16:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1118.512 ops/s
[info] # Warmup Iteration   2: 6348.725 ops/s
[info] # Warmup Iteration   3: 12347.198 ops/s
[info] # Warmup Iteration   4: 12596.151 ops/s
[info] # Warmup Iteration   5: 12602.714 ops/s
[info] Iteration   1: 12527.150 ops/s
[info]                  ·gc.alloc.rate:                   1483.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              186350.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     249778.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.615 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 12630.806 ops/s
[info]                  ·gc.alloc.rate:                   1470.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              183143.562 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165424.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.594 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 12560.968 ops/s
[info]                  ·gc.alloc.rate:                   1459.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              182878.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166500.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.216 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 12593.592 ops/s
[info]                  ·gc.alloc.rate:               1461.767 MB/sec
[info]                  ·gc.alloc.rate.norm:          182677.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 166410.243 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 11611.748 ops/s
[info]                  ·gc.alloc.rate:                   1575.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              213466.831 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180645.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.843 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 385.260 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   12384.853 ±(99.9%) 1670.732 ops/s [Average]
[info]   (min, avg, max) = (11611.748, 12384.853, 12630.806), stdev = 433.884
[info]   CI (99.9%): [10714.121, 14055.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1490.076 ±(99.9%) 186.763 MB/sec [Average]
[info]   (min, avg, max) = (1459.656, 1490.076, 1575.172), stdev = 48.502
[info]   CI (99.9%): [1303.313, 1676.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   189703.389 ±(99.9%) 51479.037 B/op [Average]
[info]   (min, avg, max) = (182677.947, 189703.389, 213466.831), stdev = 13368.942
[info]   CI (99.9%): [138224.352, 241182.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1462.020 ±(99.9%) 1133.892 MB/sec [Average]
[info]   (min, avg, max) = (1327.817, 1462.020, 1988.767), stdev = 294.468
[info]   CI (99.9%): [328.128, 2595.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   185751.923 ±(99.9%) 139945.823 B/op [Average]
[info]   (min, avg, max) = (165424.837, 185751.923, 249778.520), stdev = 36343.486
[info]   CI (99.9%): [45806.099, 325697.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.585 ±(99.9%) 4.860 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.585, 2.843), stdev = 1.262
[info]   CI (99.9%): [≈ 0, 5.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   79.137 ±(99.9%) 658.992 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 79.137, 385.260), stdev = 171.138
[info]   CI (99.9%): [≈ 0, 738.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.41% complete, ETA 01:16:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 144421.045 ops/s
[info] # Warmup Iteration   2: 252464.614 ops/s
[info] # Warmup Iteration   3: 345415.580 ops/s
[info] # Warmup Iteration   4: 342562.040 ops/s
[info] # Warmup Iteration   5: 349213.763 ops/s
[info] Iteration   1: 348993.025 ops/s
[info]                  ·gc.alloc.rate:                   2318.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              10454.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9027.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.506 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 349935.535 ops/s
[info]                  ·gc.alloc.rate:                   2337.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              10511.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11984.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.187 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 351721.782 ops/s
[info]                  ·gc.alloc.rate:               2341.386 MB/sec
[info]                  ·gc.alloc.rate.norm:          10476.927 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8949.870 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 351087.672 ops/s
[info]                  ·gc.alloc.rate:               2390.543 MB/sec
[info]                  ·gc.alloc.rate.norm:          10716.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2672.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11980.586 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 350635.956 ops/s
[info]                  ·gc.alloc.rate:                   2361.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              10599.668 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9022.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   350474.794 ±(99.9%) 4058.281 ops/s [Average]
[info]   (min, avg, max) = (348993.025, 350474.794, 351721.782), stdev = 1053.923
[info]   CI (99.9%): [346416.513, 354533.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2349.915 ±(99.9%) 105.841 MB/sec [Average]
[info]   (min, avg, max) = (2318.237, 2349.915, 2390.543), stdev = 27.487
[info]   CI (99.9%): [2244.074, 2455.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10551.941 ±(99.9%) 412.889 B/op [Average]
[info]   (min, avg, max) = (10454.898, 10551.941, 10716.426), stdev = 107.226
[info]   CI (99.9%): [10139.052, 10964.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2269.971 ±(99.9%) 1402.028 MB/sec [Average]
[info]   (min, avg, max) = (2000.119, 2269.971, 2672.542), stdev = 364.102
[info]   CI (99.9%): [867.943, 3671.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10192.980 ±(99.9%) 6291.585 B/op [Average]
[info]   (min, avg, max) = (8949.870, 10192.980, 11984.445), stdev = 1633.905
[info]   CI (99.9%): [3901.394, 16484.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.212 ±(99.9%) 1.695 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.212, 0.999), stdev = 0.440
[info]   CI (99.9%): [≈ 0, 1.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.957 ±(99.9%) 7.645 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.957, 4.506), stdev = 1.985
[info]   CI (99.9%): [≈ 0, 8.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 33.65% complete, ETA 01:15:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 634.342 ops/s
[info] # Warmup Iteration   2: 4413.382 ops/s
[info] # Warmup Iteration   3: 8773.269 ops/s
[info] # Warmup Iteration   4: 10178.914 ops/s
[info] # Warmup Iteration   5: 10069.379 ops/s
[info] Iteration   1: 9966.831 ops/s
[info]                  ·gc.alloc.rate:                   1714.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              270686.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209420.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.287 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 9881.117 ops/s
[info]                  ·gc.alloc.rate:                   1713.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              272852.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     317341.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.947 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 9756.099 ops/s
[info]                  ·gc.alloc.rate:                   1728.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              278723.292 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214808.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 188.778 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9773.706 ops/s
[info]                  ·gc.alloc.rate:                   1710.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              275487.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     322156.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.630 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 10072.000 ops/s
[info]                  ·gc.alloc.rate:               1737.460 MB/sec
[info]                  ·gc.alloc.rate.norm:          271497.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 208591.057 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   9889.951 ±(99.9%) 511.424 ops/s [Average]
[info]   (min, avg, max) = (9756.099, 9889.951, 10072.000), stdev = 132.815
[info]   CI (99.9%): [9378.526, 10401.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1720.841 ±(99.9%) 44.435 MB/sec [Average]
[info]   (min, avg, max) = (1710.891, 1720.841, 1737.460), stdev = 11.540
[info]   CI (99.9%): [1676.407, 1765.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   273849.716 ±(99.9%) 12619.740 B/op [Average]
[info]   (min, avg, max) = (270686.960, 273849.716, 278723.292), stdev = 3277.306
[info]   CI (99.9%): [261229.976, 286469.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1597.286 ±(99.9%) 1403.689 MB/sec [Average]
[info]   (min, avg, max) = (1326.362, 1597.286, 2000.721), stdev = 364.534
[info]   CI (99.9%): [193.598, 3000.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   254463.707 ±(99.9%) 229764.649 B/op [Average]
[info]   (min, avg, max) = (208591.057, 254463.707, 322156.098), stdev = 59669.150
[info]   CI (99.9%): [24699.058, 484228.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.317 ±(99.9%) 1.908 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.317, 1.171), stdev = 0.495
[info]   CI (99.9%): [≈ 0, 2.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   51.128 ±(99.9%) 307.766 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 51.128, 188.778), stdev = 79.926
[info]   CI (99.9%): [≈ 0, 358.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33.88% complete, ETA 01:15:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5370.713 ops/s
[info] # Warmup Iteration   2: 20144.923 ops/s
[info] # Warmup Iteration   3: 28763.520 ops/s
[info] # Warmup Iteration   4: 28736.307 ops/s
[info] # Warmup Iteration   5: 27619.260 ops/s
[info] Iteration   1: 27293.901 ops/s
[info]                  ·gc.alloc.rate:                   1623.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              93613.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1965.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113354.377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.176 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         29.000 ms
[info] Iteration   2: 26087.803 ops/s
[info]                  ·gc.alloc.rate:                   1691.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              101980.217 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1294.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78087.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.180 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 432.964 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 27407.198 ops/s
[info]                  ·gc.alloc.rate:                   1399.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              80370.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1909.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109639.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      8.357 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 479.846 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         27.000 ms
[info] Iteration   4: 27651.594 ops/s
[info]                  ·gc.alloc.rate:                   1360.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              77435.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1271.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72379.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.053 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 27412.652 ops/s
[info]                  ·gc.alloc.rate:                   1342.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              77074.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1278.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73433.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.870 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   27170.630 ±(99.9%) 2384.273 ops/s [Average]
[info]   (min, avg, max) = (26087.803, 27170.630, 27651.594), stdev = 619.188
[info]   CI (99.9%): [24786.357, 29554.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1483.502 ±(99.9%) 622.982 MB/sec [Average]
[info]   (min, avg, max) = (1342.408, 1483.502, 1691.155), stdev = 161.786
[info]   CI (99.9%): [860.520, 2106.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   86094.999 ±(99.9%) 42965.014 B/op [Average]
[info]   (min, avg, max) = (77074.859, 86094.999, 101980.217), stdev = 11157.878
[info]   CI (99.9%): [43129.985, 129060.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1544.230 ±(99.9%) 1385.519 MB/sec [Average]
[info]   (min, avg, max) = (1271.858, 1544.230, 1965.789), stdev = 359.815
[info]   CI (99.9%): [158.711, 2929.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   89379.018 ±(99.9%) 78349.592 B/op [Average]
[info]   (min, avg, max) = (72379.649, 89379.018, 113354.377), stdev = 20347.140
[info]   CI (99.9%): [11029.426, 167728.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   3.122 ±(99.9%) 16.413 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 3.122, 8.357), stdev = 4.263
[info]   CI (99.9%): [≈ 0, 19.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   183.373 ±(99.9%) 961.876 B/op [Average]
[info]   (min, avg, max) = (0.176, 183.373, 479.846), stdev = 249.796
[info]   CI (99.9%): [≈ 0, 1145.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   97.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (13.000, 19.400, 29.000), stdev = 7.893
[info]   CI (99.9%): [97.000, 97.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.12% complete, ETA 01:15:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3428.692 ops/s
[info] # Warmup Iteration   2: 22303.430 ops/s
[info] # Warmup Iteration   3: 28700.456 ops/s
[info] # Warmup Iteration   4: 31314.883 ops/s
[info] # Warmup Iteration   5: 29857.239 ops/s
[info] Iteration   1: 28555.274 ops/s
[info]                  ·gc.alloc.rate:                   1380.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              76077.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1288.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71008.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 277.961 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   2: 30775.248 ops/s
[info]                  ·gc.alloc.rate:                   1165.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              59588.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1263.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64592.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.696 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   3: 31675.430 ops/s
[info]                  ·gc.alloc.rate:                   1183.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              58817.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:          630.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31311.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.566 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 31603.562 ops/s
[info]                  ·gc.alloc.rate:                   1207.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              60101.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1261.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62782.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.764 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   5: 30730.983 ops/s
[info]                  ·gc.alloc.rate:                   1167.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              59781.720 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1262.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64666.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 190.957 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   30668.099 ±(99.9%) 4859.015 ops/s [Average]
[info]   (min, avg, max) = (28555.274, 30668.099, 31675.430), stdev = 1261.871
[info]   CI (99.9%): [25809.084, 35527.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1220.799 ±(99.9%) 349.472 MB/sec [Average]
[info]   (min, avg, max) = (1165.269, 1220.799, 1380.345), stdev = 90.757
[info]   CI (99.9%): [871.327, 1570.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   62873.364 ±(99.9%) 28480.044 B/op [Average]
[info]   (min, avg, max) = (58817.898, 62873.364, 76077.003), stdev = 7396.177
[info]   CI (99.9%): [34393.321, 91353.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1141.094 ±(99.9%) 1100.511 MB/sec [Average]
[info]   (min, avg, max) = (630.243, 1141.094, 1288.391), stdev = 285.799
[info]   CI (99.9%): [40.584, 2241.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   58872.393 ±(99.9%) 60532.016 B/op [Average]
[info]   (min, avg, max) = (31311.644, 58872.393, 71008.998), stdev = 15719.972
[info]   CI (99.9%): [≈ 0, 119404.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2.160 ±(99.9%) 8.207 MB/sec [Average]
[info]   (min, avg, max) = (0.011, 2.160, 5.043), stdev = 2.131
[info]   CI (99.9%): [≈ 0, 10.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   114.189 ±(99.9%) 447.275 B/op [Average]
[info]   (min, avg, max) = (0.566, 114.189, 277.961), stdev = 116.156
[info]   CI (99.9%): [≈ 0, 561.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   94.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 18.800, 24.000), stdev = 5.541
[info]   CI (99.9%): [94.000, 94.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.35% complete, ETA 01:15:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 427039.575 ops/s
[info] # Warmup Iteration   2: 690530.618 ops/s
[info] # Warmup Iteration   3: 780765.680 ops/s
[info] # Warmup Iteration   4: 768626.846 ops/s
[info] # Warmup Iteration   5: 801352.658 ops/s
[info] Iteration   1: 795382.523 ops/s
[info]                  ·gc.alloc.rate:               1472.780 MB/sec
[info]                  ·gc.alloc.rate.norm:          2914.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2653.381 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 802827.216 ops/s
[info]                  ·gc.alloc.rate:                   1479.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              2900.202 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2629.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 793821.576 ops/s
[info]                  ·gc.alloc.rate:                   1461.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              2896.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2661.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.814 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 794090.304 ops/s
[info]                  ·gc.alloc.rate:                   1486.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              2945.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2653.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.320 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 790647.879 ops/s
[info]                  ·gc.alloc.rate:                   1480.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              2946.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3989.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   795353.900 ±(99.9%) 17428.428 ops/s [Average]
[info]   (min, avg, max) = (790647.879, 795353.900, 802827.216), stdev = 4526.107
[info]   CI (99.9%): [777925.472, 812782.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1476.046 ±(99.9%) 37.108 MB/sec [Average]
[info]   (min, avg, max) = (1461.120, 1476.046, 1486.359), stdev = 9.637
[info]   CI (99.9%): [1438.938, 1513.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2920.615 ±(99.9%) 92.349 B/op [Average]
[info]   (min, avg, max) = (2896.844, 2920.615, 2946.415), stdev = 23.983
[info]   CI (99.9%): [2828.266, 3012.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1473.781 ±(99.9%) 1143.155 MB/sec [Average]
[info]   (min, avg, max) = (1339.223, 1473.781, 2004.841), stdev = 296.874
[info]   CI (99.9%): [330.626, 2616.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2917.654 ±(99.9%) 2308.372 B/op [Average]
[info]   (min, avg, max) = (2629.993, 2917.654, 3989.824), stdev = 599.477
[info]   CI (99.9%): [609.282, 5226.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.829 ±(99.9%) 5.719 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.829, 3.437), stdev = 1.485
[info]   CI (99.9%): [≈ 0, 6.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.643 ±(99.9%) 11.338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.643, 6.814), stdev = 2.944
[info]   CI (99.9%): [≈ 0, 12.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 34.59% complete, ETA 01:14:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 507241.924 ops/s
[info] # Warmup Iteration   2: 882307.729 ops/s
[info] # Warmup Iteration   3: 936012.535 ops/s
[info] # Warmup Iteration   4: 937032.613 ops/s
[info] # Warmup Iteration   5: 939285.609 ops/s
[info] Iteration   1: 935905.185 ops/s
[info]                  ·gc.alloc.rate:      0.134 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.226 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 938813.131 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 939577.489 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 939320.062 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 939023.691 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   938527.911 ±(99.9%) 5755.056 ops/s [Average]
[info]   (min, avg, max) = (935905.185, 938527.911, 939577.489), stdev = 1494.570
[info]   CI (99.9%): [932772.855, 944282.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.027 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.027, 0.134), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.046 ±(99.9%) 0.388 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.046, 0.226), stdev = 0.101
[info]   CI (99.9%): [≈ 0, 0.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34.82% complete, ETA 01:14:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5682.401 ops/s
[info] # Warmup Iteration   2: 17348.525 ops/s
[info] # Warmup Iteration   3: 26735.239 ops/s
[info] # Warmup Iteration   4: 32099.897 ops/s
[info] # Warmup Iteration   5: 30306.972 ops/s
[info] Iteration   1: 29477.067 ops/s
[info]                  ·gc.alloc.rate:                   1525.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              81433.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70777.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.622 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.210 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 33159.394 ops/s
[info]                  ·gc.alloc.rate:                   1378.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              65423.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62755.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.931 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 139.076 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 33029.652 ops/s
[info]                  ·gc.alloc.rate:                   1375.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              65529.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62925.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.607 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 33233.917 ops/s
[info]                  ·gc.alloc.rate:                   1388.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              65753.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62572.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.702 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 33426.978 ops/s
[info]                  ·gc.alloc.rate:                   1390.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              65476.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62225.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83.120 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   32465.402 ±(99.9%) 6456.404 ops/s [Average]
[info]   (min, avg, max) = (29477.067, 32465.402, 33426.978), stdev = 1676.708
[info]   CI (99.9%): [26008.998, 38921.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1411.727 ±(99.9%) 245.558 MB/sec [Average]
[info]   (min, avg, max) = (1375.456, 1411.727, 1525.229), stdev = 63.771
[info]   CI (99.9%): [1166.169, 1657.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68723.389 ±(99.9%) 27364.589 B/op [Average]
[info]   (min, avg, max) = (65423.654, 68723.389, 81433.886), stdev = 7106.497
[info]   CI (99.9%): [41358.800, 96087.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1322.388 ±(99.9%) 7.443 MB/sec [Average]
[info]   (min, avg, max) = (1320.800, 1322.388, 1325.641), stdev = 1.933
[info]   CI (99.9%): [1314.945, 1329.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64251.325 ±(99.9%) 14083.927 B/op [Average]
[info]   (min, avg, max) = (62225.190, 64251.325, 70777.635), stdev = 3657.551
[info]   CI (99.9%): [50167.398, 78335.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.347 ±(99.9%) 3.913 MB/sec [Average]
[info]   (min, avg, max) = (0.479, 1.347, 2.931), stdev = 1.016
[info]   CI (99.9%): [≈ 0, 5.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   64.543 ±(99.9%) 182.958 B/op [Average]
[info]   (min, avg, max) = (22.702, 64.543, 139.076), stdev = 47.514
[info]   CI (99.9%): [≈ 0, 247.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 11.000, 14.000), stdev = 2.828
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35.06% complete, ETA 01:14:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2935.525 ops/s
[info] # Warmup Iteration   2: 24356.883 ops/s
[info] # Warmup Iteration   3: 34084.505 ops/s
[info] # Warmup Iteration   4: 51865.796 ops/s
[info] # Warmup Iteration   5: 48851.284 ops/s
[info] Iteration   1: 44520.471 ops/s
[info]                  ·gc.alloc.rate:               2244.808 MB/sec
[info]                  ·gc.alloc.rate.norm:          79354.646 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2604.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 92077.440 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     40.000 ms
[info] Iteration   2: 43998.690 ops/s
[info]                  ·gc.alloc.rate:                   1847.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              66060.157 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1286.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45989.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.382 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 263.949 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 43976.520 ops/s
[info]                  ·gc.alloc.rate:                   1839.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              65817.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1925.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68921.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.531 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.991 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   4: 43962.376 ops/s
[info]                  ·gc.alloc.rate:                   1867.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              66869.719 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1939.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69447.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.290 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   5: 43536.077 ops/s
[info]                  ·gc.alloc.rate:                   1825.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              65992.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1948.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70413.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.384 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86.179 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   43998.827 ±(99.9%) 1345.077 ops/s [Average]
[info]   (min, avg, max) = (43536.077, 43998.827, 44520.471), stdev = 349.312
[info]   CI (99.9%): [42653.750, 45343.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1925.028 ±(99.9%) 690.859 MB/sec [Average]
[info]   (min, avg, max) = (1825.845, 1925.028, 2244.808), stdev = 179.414
[info]   CI (99.9%): [1234.168, 2615.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   68818.906 ±(99.9%) 22732.568 B/op [Average]
[info]   (min, avg, max) = (65817.492, 68818.906, 79354.646), stdev = 5903.576
[info]   CI (99.9%): [46086.338, 91551.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1940.956 ±(99.9%) 1795.423 MB/sec [Average]
[info]   (min, avg, max) = (1286.160, 1940.956, 2604.714), stdev = 466.266
[info]   CI (99.9%): [145.533, 3736.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   69369.800 ±(99.9%) 62790.004 B/op [Average]
[info]   (min, avg, max) = (45989.130, 69369.800, 92077.440), stdev = 16306.365
[info]   CI (99.9%): [6579.796, 132159.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2.128 ±(99.9%) 11.858 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.128, 7.382), stdev = 3.079
[info]   CI (99.9%): [≈ 0, 13.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   76.282 ±(99.9%) 424.064 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 76.282, 263.949), stdev = 110.128
[info]   CI (99.9%): [≈ 0, 500.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   124.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (18.000, 24.800, 40.000), stdev = 8.672
[info]   CI (99.9%): [124.000, 124.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.29% complete, ETA 01:13:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2992.626 ops/s
[info] # Warmup Iteration   2: 33158.815 ops/s
[info] # Warmup Iteration   3: 48078.280 ops/s
[info] # Warmup Iteration   4: 50594.084 ops/s
[info] # Warmup Iteration   5: 39928.493 ops/s
[info] Iteration   1: 42620.373 ops/s
[info]                  ·gc.alloc.rate:                   1472.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              54361.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1310.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48410.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.064 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 42873.353 ops/s
[info]                  ·gc.alloc.rate:                   1485.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              54497.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48124.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 161.202 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 43216.438 ops/s
[info]                  ·gc.alloc.rate:                   1496.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              54496.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1310.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47744.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.921 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 42249.894 ops/s
[info]                  ·gc.alloc.rate:                   1468.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              54676.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48882.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.081 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 41323.070 ops/s
[info]                  ·gc.alloc.rate:                   1443.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              54986.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1970.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75057.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.343 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   42456.625 ±(99.9%) 2793.691 ops/s [Average]
[info]   (min, avg, max) = (41323.070, 42456.625, 43216.438), stdev = 725.513
[info]   CI (99.9%): [39662.934, 45250.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1473.094 ±(99.9%) 76.079 MB/sec [Average]
[info]   (min, avg, max) = (1443.931, 1473.094, 1496.385), stdev = 19.757
[info]   CI (99.9%): [1397.015, 1549.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   54603.604 ±(99.9%) 930.218 B/op [Average]
[info]   (min, avg, max) = (54361.619, 54603.604, 54986.641), stdev = 241.575
[info]   CI (99.9%): [53673.386, 55533.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1443.357 ±(99.9%) 1135.777 MB/sec [Average]
[info]   (min, avg, max) = (1310.961, 1443.357, 1970.992), stdev = 294.958
[info]   CI (99.9%): [307.579, 2579.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   53644.070 ±(99.9%) 46122.362 B/op [Average]
[info]   (min, avg, max) = (47744.148, 53644.070, 75057.756), stdev = 11977.831
[info]   CI (99.9%): [7521.708, 99766.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.325 ±(99.9%) 6.849 MB/sec [Average]
[info]   (min, avg, max) = (0.167, 1.325, 4.393), stdev = 1.779
[info]   CI (99.9%): [≈ 0, 8.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   48.722 ±(99.9%) 251.169 B/op [Average]
[info]   (min, avg, max) = (6.343, 48.722, 161.202), stdev = 65.228
[info]   CI (99.9%): [≈ 0, 299.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 10.400, 15.000), stdev = 3.435
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.53% complete, ETA 01:13:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 220360.551 ops/s
[info] # Warmup Iteration   2: 489027.591 ops/s
[info] # Warmup Iteration   3: 528322.005 ops/s
[info] # Warmup Iteration   4: 540120.370 ops/s
[info] # Warmup Iteration   5: 539342.552 ops/s
[info] Iteration   1: 524780.997 ops/s
[info]                  ·gc.alloc.rate:               1401.389 MB/sec
[info]                  ·gc.alloc.rate.norm:          4202.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4005.699 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 536199.106 ops/s
[info]                  ·gc.alloc.rate:                   1438.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              4221.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3924.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 541000.989 ops/s
[info]                  ·gc.alloc.rate:                   1436.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              4178.522 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3893.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.614 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.515 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 543001.441 ops/s
[info]                  ·gc.alloc.rate:                   1440.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              4175.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3869.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.724 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 542553.185 ops/s
[info]                  ·gc.alloc.rate:               1452.264 MB/sec
[info]                  ·gc.alloc.rate.norm:          4212.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3868.450 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   537507.144 ±(99.9%) 29295.440 ops/s [Average]
[info]   (min, avg, max) = (524780.997, 537507.144, 543001.441), stdev = 7607.933
[info]   CI (99.9%): [508211.704, 566802.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1433.870 ±(99.9%) 73.778 MB/sec [Average]
[info]   (min, avg, max) = (1401.389, 1433.870, 1452.264), stdev = 19.160
[info]   CI (99.9%): [1360.093, 1507.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4198.036 ±(99.9%) 79.165 B/op [Average]
[info]   (min, avg, max) = (4175.139, 4198.036, 4221.832), stdev = 20.559
[info]   CI (99.9%): [4118.871, 4277.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1336.040 ±(99.9%) 7.172 MB/sec [Average]
[info]   (min, avg, max) = (1333.766, 1336.040, 1338.255), stdev = 1.863
[info]   CI (99.9%): [1328.868, 1343.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3912.183 ±(99.9%) 219.659 B/op [Average]
[info]   (min, avg, max) = (3868.450, 3912.183, 4005.699), stdev = 57.045
[info]   CI (99.9%): [3692.524, 4131.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.775 ±(99.9%) 6.125 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.775, 3.614), stdev = 1.591
[info]   CI (99.9%): [≈ 0, 6.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.255 ±(99.9%) 17.819 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.255, 10.515), stdev = 4.627
[info]   CI (99.9%): [≈ 0, 20.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 2.280
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35.76% complete, ETA 01:13:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1271.176 ops/s
[info] # Warmup Iteration   2: 11787.346 ops/s
[info] # Warmup Iteration   3: 20025.095 ops/s
[info] # Warmup Iteration   4: 22747.512 ops/s
[info] # Warmup Iteration   5: 22616.063 ops/s
[info] Iteration   1: 22130.352 ops/s
[info]                  ·gc.alloc.rate:                   2052.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              145933.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1980.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140860.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.244 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 20748.139 ops/s
[info]                  ·gc.alloc.rate:                   2259.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              171383.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     150709.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84.143 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 23219.058 ops/s
[info]                  ·gc.alloc.rate:                   2107.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              142811.402 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135276.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 157.972 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 23180.713 ops/s
[info]                  ·gc.alloc.rate:               2110.648 MB/sec
[info]                  ·gc.alloc.rate.norm:          143300.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 135815.127 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 22993.388 ops/s
[info]                  ·gc.alloc.rate:                   2101.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              143816.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137340.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.849 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   22454.330 ±(99.9%) 4047.334 ops/s [Average]
[info]   (min, avg, max) = (20748.139, 22454.330, 23219.058), stdev = 1051.080
[info]   CI (99.9%): [18406.996, 26501.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2126.196 ±(99.9%) 300.886 MB/sec [Average]
[info]   (min, avg, max) = (2052.208, 2126.196, 2259.379), stdev = 78.139
[info]   CI (99.9%): [1825.310, 2427.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   149448.918 ±(99.9%) 47436.901 B/op [Average]
[info]   (min, avg, max) = (142811.402, 149448.918, 171383.039), stdev = 12319.212
[info]   CI (99.9%): [102012.017, 196885.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1994.209 ±(99.9%) 40.120 MB/sec [Average]
[info]   (min, avg, max) = (1980.863, 1994.209, 2006.856), stdev = 10.419
[info]   CI (99.9%): [1954.089, 2034.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   140000.513 ±(99.9%) 24530.463 B/op [Average]
[info]   (min, avg, max) = (135276.825, 140000.513, 150709.745), stdev = 6370.483
[info]   CI (99.9%): [115470.051, 164530.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.703 ±(99.9%) 3.945 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.703, 2.331), stdev = 1.024
[info]   CI (99.9%): [≈ 0, 4.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   49.442 ±(99.9%) 271.095 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 49.442, 157.972), stdev = 70.402
[info]   CI (99.9%): [≈ 0, 320.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36.00% complete, ETA 01:13:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8747.479 ops/s
[info] # Warmup Iteration   2: 64524.706 ops/s
[info] # Warmup Iteration   3: 68420.856 ops/s
[info] # Warmup Iteration   4: 68815.457 ops/s
[info] # Warmup Iteration   5: 72951.225 ops/s
[info] Iteration   1: 72497.170 ops/s
[info]                  ·gc.alloc.rate:                   1924.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              41779.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43311.660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.464 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 72208.515 ops/s
[info]                  ·gc.alloc.rate:                   1907.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              41548.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43455.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.149 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 73477.104 ops/s
[info]                  ·gc.alloc.rate:                   1943.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              41629.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42634.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.121 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 71317.663 ops/s
[info]                  ·gc.alloc.rate:               1913.665 MB/sec
[info]                  ·gc.alloc.rate.norm:          42232.328 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1991.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43940.580 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 71297.907 ops/s
[info]                  ·gc.alloc.rate:                   1873.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              41350.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29349.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.460 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   72159.672 ±(99.9%) 3499.394 ops/s [Average]
[info]   (min, avg, max) = (71297.907, 72159.672, 73477.104), stdev = 908.782
[info]   CI (99.9%): [68660.277, 75659.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1912.456 ±(99.9%) 99.928 MB/sec [Average]
[info]   (min, avg, max) = (1873.164, 1912.456, 1943.500), stdev = 25.951
[info]   CI (99.9%): [1812.528, 2012.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   41708.069 ±(99.9%) 1276.124 B/op [Average]
[info]   (min, avg, max) = (41350.632, 41708.069, 42232.328), stdev = 331.405
[info]   CI (99.9%): [40431.945, 42984.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1860.215 ±(99.9%) 1142.375 MB/sec [Average]
[info]   (min, avg, max) = (1329.528, 1860.215, 1995.519), stdev = 296.671
[info]   CI (99.9%): [717.840, 3002.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   40538.300 ±(99.9%) 24151.346 B/op [Average]
[info]   (min, avg, max) = (29349.717, 40538.300, 43940.580), stdev = 6272.028
[info]   CI (99.9%): [16386.953, 64689.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.923 ±(99.9%) 5.942 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.923, 3.615), stdev = 1.543
[info]   CI (99.9%): [≈ 0, 6.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   20.039 ±(99.9%) 128.985 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.039, 78.464), stdev = 33.497
[info]   CI (99.9%): [≈ 0, 149.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 15.000), stdev = 4.970
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.24% complete, ETA 01:12:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42570.400 ops/s
[info] # Warmup Iteration   2: 172119.903 ops/s
[info] # Warmup Iteration   3: 195312.275 ops/s
[info] # Warmup Iteration   4: 209997.619 ops/s
[info] # Warmup Iteration   5: 209910.136 ops/s
[info] Iteration   1: 209533.566 ops/s
[info]                  ·gc.alloc.rate:                   1659.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              12463.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14935.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.156 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 210059.339 ops/s
[info]                  ·gc.alloc.rate:               1622.480 MB/sec
[info]                  ·gc.alloc.rate.norm:          12156.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9957.252 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 209026.642 ops/s
[info]                  ·gc.alloc.rate:               1625.309 MB/sec
[info]                  ·gc.alloc.rate.norm:          12237.467 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10026.373 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 209882.316 ops/s
[info]                  ·gc.alloc.rate:                   1631.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              12233.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15013.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.922 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 209218.265 ops/s
[info]                  ·gc.alloc.rate:               1625.701 MB/sec
[info]                  ·gc.alloc.rate.norm:          12229.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10052.635 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   209544.026 ±(99.9%) 1671.712 ops/s [Average]
[info]   (min, avg, max) = (209026.642, 209544.026, 210059.339), stdev = 434.138
[info]   CI (99.9%): [207872.314, 211215.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1632.910 ±(99.9%) 58.313 MB/sec [Average]
[info]   (min, avg, max) = (1622.480, 1632.910, 1659.318), stdev = 15.144
[info]   CI (99.9%): [1574.597, 1691.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   12264.222 ±(99.9%) 448.380 B/op [Average]
[info]   (min, avg, max) = (12156.801, 12264.222, 12463.807), stdev = 116.443
[info]   CI (99.9%): [11815.842, 12712.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1597.557 ±(99.9%) 1398.826 MB/sec [Average]
[info]   (min, avg, max) = (1328.922, 1597.557, 2002.511), stdev = 363.271
[info]   CI (99.9%): [198.731, 2996.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   11997.016 ±(99.9%) 10467.355 B/op [Average]
[info]   (min, avg, max) = (9957.252, 11997.016, 15013.197), stdev = 2718.339
[info]   CI (99.9%): [1529.661, 22464.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.269 ±(99.9%) 2.270 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.269, 1.323), stdev = 0.590
[info]   CI (99.9%): [≈ 0, 2.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.016 ±(99.9%) 17.022 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.016, 9.922), stdev = 4.420
[info]   CI (99.9%): [≈ 0, 19.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.47% complete, ETA 01:12:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 515560.348 ops/s
[info] # Warmup Iteration   2: 809106.133 ops/s
[info] # Warmup Iteration   3: 832891.125 ops/s
[info] # Warmup Iteration   4: 854009.317 ops/s
[info] # Warmup Iteration   5: 860988.593 ops/s
[info] Iteration   1: 861385.599 ops/s
[info]                  ·gc.alloc.rate:                   948.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              1732.633 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1222.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 841207.424 ops/s
[info]                  ·gc.alloc.rate:               921.516 MB/sec
[info]                  ·gc.alloc.rate.norm:          1723.601 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1252.596 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 844498.559 ops/s
[info]                  ·gc.alloc.rate:                   940.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              1753.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2496.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 848612.037 ops/s
[info]                  ·gc.alloc.rate:                   926.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              1717.927 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1242.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 832477.129 ops/s
[info]                  ·gc.alloc.rate:               922.157 MB/sec
[info]                  ·gc.alloc.rate.norm:          1743.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1266.822 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   845636.150 ±(99.9%) 40886.179 ops/s [Average]
[info]   (min, avg, max) = (832477.129, 845636.150, 861385.599), stdev = 10618.011
[info]   CI (99.9%): [804749.971, 886522.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   931.862 ±(99.9%) 46.546 MB/sec [Average]
[info]   (min, avg, max) = (921.516, 931.862, 948.307), stdev = 12.088
[info]   CI (99.9%): [885.316, 978.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1734.234 ±(99.9%) 55.796 B/op [Average]
[info]   (min, avg, max) = (1717.927, 1734.234, 1753.555), stdev = 14.490
[info]   CI (99.9%): [1678.438, 1790.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   803.747 ±(99.9%) 1153.580 MB/sec [Average]
[info]   (min, avg, max) = (669.162, 803.747, 1339.653), stdev = 299.581
[info]   CI (99.9%): [≈ 0, 1957.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1496.280 ±(99.9%) 2154.080 B/op [Average]
[info]   (min, avg, max) = (1222.612, 1496.280, 2496.565), stdev = 559.408
[info]   CI (99.9%): [≈ 0, 3650.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.083 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.039 ±(99.9%) 0.154 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.092), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36.71% complete, ETA 01:12:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 443645.550 ops/s
[info] # Warmup Iteration   2: 894688.517 ops/s
[info] # Warmup Iteration   3: 918991.187 ops/s
[info] # Warmup Iteration   4: 917585.166 ops/s
[info] # Warmup Iteration   5: 917685.614 ops/s
[info] Iteration   1: 917595.751 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 916908.299 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 918506.144 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 914893.411 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 921108.801 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   917802.481 ±(99.9%) 8766.430 ops/s [Average]
[info]   (min, avg, max) = (914893.411, 917802.481, 921108.801), stdev = 2276.614
[info]   CI (99.9%): [909036.051, 926568.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36.94% complete, ETA 01:12:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7681.864 ops/s
[info] # Warmup Iteration   2: 69891.157 ops/s
[info] # Warmup Iteration   3: 78305.471 ops/s
[info] # Warmup Iteration   4: 91698.248 ops/s
[info] # Warmup Iteration   5: 91370.177 ops/s
[info] Iteration   1: 90416.737 ops/s
[info]                  ·gc.alloc.rate:                   1893.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              32947.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34841.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.971 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69.108 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 92910.174 ops/s
[info]                  ·gc.alloc.rate:                   1927.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              32639.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22579.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.105 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 92209.700 ops/s
[info]                  ·gc.alloc.rate:                   1938.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              33096.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34029.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.777 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 92895.191 ops/s
[info]                  ·gc.alloc.rate:                   1935.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              32791.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33761.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.763 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 92402.523 ops/s
[info]                  ·gc.alloc.rate:               1926.693 MB/sec
[info]                  ·gc.alloc.rate.norm:          32816.953 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1994.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33976.377 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   92166.865 ±(99.9%) 3947.278 ops/s [Average]
[info]   (min, avg, max) = (90416.737, 92166.865, 92910.174), stdev = 1025.096
[info]   CI (99.9%): [88219.587, 96114.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1924.377 ±(99.9%) 70.189 MB/sec [Average]
[info]   (min, avg, max) = (1893.119, 1924.377, 1938.982), stdev = 18.228
[info]   CI (99.9%): [1854.187, 1994.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32858.371 ±(99.9%) 663.005 B/op [Average]
[info]   (min, avg, max) = (32639.896, 32858.371, 33096.591), stdev = 172.180
[info]   CI (99.9%): [32195.366, 33521.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1863.321 ±(99.9%) 1140.614 MB/sec [Average]
[info]   (min, avg, max) = (1333.478, 1863.321, 2001.995), stdev = 296.214
[info]   CI (99.9%): [722.707, 3003.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   31837.766 ±(99.9%) 19992.245 B/op [Average]
[info]   (min, avg, max) = (22579.263, 31837.766, 34841.997), stdev = 5191.922
[info]   CI (99.9%): [11845.521, 51830.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.002 ±(99.9%) 6.518 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.002, 3.971), stdev = 1.693
[info]   CI (99.9%): [≈ 0, 7.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   17.351 ±(99.9%) 113.511 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.351, 69.108), stdev = 29.479
[info]   CI (99.9%): [≈ 0, 130.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 16.000), stdev = 5.273
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37.18% complete, ETA 01:11:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2295.712 ops/s
[info] # Warmup Iteration   2: 9332.447 ops/s
[info] # Warmup Iteration   3: 15840.726 ops/s
[info] # Warmup Iteration   4: 18655.953 ops/s
[info] # Warmup Iteration   5: 19308.543 ops/s
[info] Iteration   1: 19338.127 ops/s
[info]                  ·gc.alloc.rate:                   1695.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              137976.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1985.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161580.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.694 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 19032.901 ops/s
[info]                  ·gc.alloc.rate:                   1811.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              149812.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164471.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.475 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 17697.389 ops/s
[info]                  ·gc.alloc.rate:                   1916.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              170460.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118038.852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.657 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.429 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 18497.496 ops/s
[info]                  ·gc.alloc.rate:                   1776.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              151110.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169038.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.632 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 649.342 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   5: 19364.234 ops/s
[info]                  ·gc.alloc.rate:                   1701.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              138265.634 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1982.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161119.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.076 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   18786.029 ±(99.9%) 2701.268 ops/s [Average]
[info]   (min, avg, max) = (17697.389, 18786.029, 19364.234), stdev = 701.511
[info]   CI (99.9%): [16084.762, 21487.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1780.303 ±(99.9%) 350.439 MB/sec [Average]
[info]   (min, avg, max) = (1695.578, 1780.303, 1916.958), stdev = 91.008
[info]   CI (99.9%): [1429.865, 2130.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   149524.964 ±(99.9%) 50977.702 B/op [Average]
[info]   (min, avg, max) = (137976.004, 149524.964, 170460.852), stdev = 13238.747
[info]   CI (99.9%): [98547.262, 200502.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1854.249 ±(99.9%) 1134.049 MB/sec [Average]
[info]   (min, avg, max) = (1327.434, 1854.249, 1989.065), stdev = 294.509
[info]   CI (99.9%): [720.200, 2988.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   154849.677 ±(99.9%) 80162.460 B/op [Average]
[info]   (min, avg, max) = (118038.852, 154849.677, 169038.318), stdev = 20817.936
[info]   CI (99.9%): [74687.217, 235012.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.787 ±(99.9%) 12.630 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.787, 7.632), stdev = 3.280
[info]   CI (99.9%): [≈ 0, 14.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   152.203 ±(99.9%) 1074.424 B/op [Average]
[info]   (min, avg, max) = (1.694, 152.203, 649.342), stdev = 279.025
[info]   CI (99.9%): [≈ 0, 1226.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   64.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 12.800, 16.000), stdev = 3.114
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.41% complete, ETA 01:11:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1975.238 ops/s
[info] # Warmup Iteration   2: 12847.564 ops/s
[info] # Warmup Iteration   3: 18093.237 ops/s
[info] # Warmup Iteration   4: 18957.303 ops/s
[info] # Warmup Iteration   5: 18143.711 ops/s
[info] Iteration   1: 17236.619 ops/s
[info]                  ·gc.alloc.rate:                   1388.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              126780.301 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120549.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.949 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 16278.859 ops/s
[info]                  ·gc.alloc.rate:                        1548.385 MB/sec
[info]                  ·gc.alloc.rate.norm:                   149625.999 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.024 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 2.356 B/op
[info]                  ·gc.churn.Metaspace:                   0.067 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              6.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:               1339.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          129454.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           8.590 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      830.041 B/op
[info]                  ·gc.count:                             4.000 counts
[info]                  ·gc.time:                              52.000 ms
[info] Iteration   3: 17218.433 ops/s
[info]                  ·gc.alloc.rate:                   1593.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              145609.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1979.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180891.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.948 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 360.819 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 18936.170 ops/s
[info]                  ·gc.alloc.rate:                   1504.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              125076.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109397.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.348 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 278.215 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 18960.364 ops/s
[info]                  ·gc.alloc.rate:                   1508.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              125242.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108921.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.278 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   17726.089 ±(99.9%) 4547.796 ops/s [Average]
[info]   (min, avg, max) = (16278.859, 17726.089, 18960.364), stdev = 1181.048
[info]   CI (99.9%): [13178.292, 22273.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1508.726 ±(99.9%) 292.920 MB/sec [Average]
[info]   (min, avg, max) = (1388.507, 1508.726, 1593.029), stdev = 76.070
[info]   CI (99.9%): [1215.806, 1801.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   134466.953 ±(99.9%) 46619.800 B/op [Average]
[info]   (min, avg, max) = (125076.507, 134466.953, 149625.999), stdev = 12107.014
[info]   CI (99.9%): [87847.154, 181086.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space":
[info]   0.005 ±(99.9%) 0.042 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.024), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm":
[info]   0.471 ±(99.9%) 4.058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.471, 2.356), stdev = 1.054
[info]   CI (99.9%): [≈ 0, 4.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Metaspace":
[info]   0.013 ±(99.9%) 0.116 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.067), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Metaspace.norm":
[info]   1.301 ±(99.9%) 11.205 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.301, 6.507), stdev = 2.910
[info]   CI (99.9%): [≈ 0, 12.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1453.475 ±(99.9%) 1132.020 MB/sec [Average]
[info]   (min, avg, max) = (1312.157, 1453.475, 1979.029), stdev = 293.982
[info]   CI (99.9%): [321.455, 2585.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   129842.879 ±(99.9%) 114685.798 B/op [Average]
[info]   (min, avg, max) = (108921.419, 129842.879, 180891.842), stdev = 29783.538
[info]   CI (99.9%): [15157.081, 244528.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   3.221 ±(99.9%) 13.443 MB/sec [Average]
[info]   (min, avg, max) = (0.010, 3.221, 8.590), stdev = 3.491
[info]   CI (99.9%): [≈ 0, 16.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   297.461 ±(99.9%) 1297.912 B/op [Average]
[info]   (min, avg, max) = (0.949, 297.461, 830.041), stdev = 337.064
[info]   CI (99.9%): [≈ 0, 1595.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   82.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 16.400, 52.000), stdev = 20.379
[info]   CI (99.9%): [82.000, 82.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.65% complete, ETA 01:11:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 240916.669 ops/s
[info] # Warmup Iteration   2: 708671.593 ops/s
[info] # Warmup Iteration   3: 794639.534 ops/s
[info] # Warmup Iteration   4: 792424.094 ops/s
[info] # Warmup Iteration   5: 790857.815 ops/s
[info] Iteration   1: 797335.943 ops/s
[info]                  ·gc.alloc.rate:                   2116.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              4178.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3965.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.643 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 795550.508 ops/s
[info]                  ·gc.alloc.rate:               2149.198 MB/sec
[info]                  ·gc.alloc.rate.norm:          4251.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3964.101 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 800396.435 ops/s
[info]                  ·gc.alloc.rate:                   2136.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              4200.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3938.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 800973.960 ops/s
[info]                  ·gc.alloc.rate:               2151.219 MB/sec
[info]                  ·gc.alloc.rate.norm:          4226.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3939.112 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 798349.173 ops/s
[info]                  ·gc.alloc.rate:                   2157.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              4253.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3961.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   798521.204 ±(99.9%) 8565.406 ops/s [Average]
[info]   (min, avg, max) = (795550.508, 798521.204, 800973.960), stdev = 2224.409
[info]   CI (99.9%): [789955.798, 807086.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2142.312 ±(99.9%) 61.995 MB/sec [Average]
[info]   (min, avg, max) = (2116.920, 2142.312, 2157.582), stdev = 16.100
[info]   CI (99.9%): [2080.317, 2204.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4222.276 ±(99.9%) 125.168 B/op [Average]
[info]   (min, avg, max) = (4178.718, 4222.276, 4253.440), stdev = 32.506
[info]   CI (99.9%): [4097.108, 4347.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2006.027 ±(99.9%) 11.527 MB/sec [Average]
[info]   (min, avg, max) = (2003.085, 2006.027, 2009.472), stdev = 2.993
[info]   CI (99.9%): [1994.501, 2017.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3953.685 ±(99.9%) 53.373 B/op [Average]
[info]   (min, avg, max) = (3938.081, 3953.685, 3965.673), stdev = 13.861
[info]   CI (99.9%): [3900.311, 4007.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.787 ±(99.9%) 6.641 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.787, 3.872), stdev = 1.725
[info]   CI (99.9%): [≈ 0, 7.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.553 ±(99.9%) 13.109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.553, 7.643), stdev = 3.404
[info]   CI (99.9%): [≈ 0, 14.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 10.000), stdev = 2.550
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37.88% complete, ETA 01:11:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 896.314 ops/s
[info] # Warmup Iteration   2: 5633.200 ops/s
[info] # Warmup Iteration   3: 12812.435 ops/s
[info] # Warmup Iteration   4: 14730.416 ops/s
[info] # Warmup Iteration   5: 14299.045 ops/s
[info] Iteration   1: 14503.595 ops/s
[info]                  ·gc.alloc.rate:               1830.710 MB/sec
[info]                  ·gc.alloc.rate.norm:          198640.556 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1992.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 216206.454 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 14907.014 ops/s
[info]                  ·gc.alloc.rate:                   1854.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              195806.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140583.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.593 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 14804.158 ops/s
[info]                  ·gc.alloc.rate:                   1867.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              198431.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     212646.794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.898 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 201.710 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 14273.344 ops/s
[info]                  ·gc.alloc.rate:                   1962.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              216356.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220791.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.363 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 14122.131 ops/s
[info]                  ·gc.alloc.rate:                   1958.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              218267.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     223634.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 276.503 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   14522.048 ±(99.9%) 1291.419 ops/s [Average]
[info]   (min, avg, max) = (14122.131, 14522.048, 14907.014), stdev = 335.377
[info]   CI (99.9%): [13230.630, 15813.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1894.783 ±(99.9%) 236.392 MB/sec [Average]
[info]   (min, avg, max) = (1830.710, 1894.783, 1962.412), stdev = 61.390
[info]   CI (99.9%): [1658.391, 2131.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   205500.594 ±(99.9%) 41822.144 B/op [Average]
[info]   (min, avg, max) = (195806.425, 205500.594, 218267.841), stdev = 10861.078
[info]   CI (99.9%): [163678.451, 247322.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1866.968 ±(99.9%) 1152.273 MB/sec [Average]
[info]   (min, avg, max) = (1331.746, 1866.968, 2006.622), stdev = 299.242
[info]   CI (99.9%): [714.694, 3019.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   202772.566 ±(99.9%) 134845.639 B/op [Average]
[info]   (min, avg, max) = (140583.731, 202772.566, 223634.350), stdev = 35018.984
[info]   CI (99.9%): [67926.927, 337618.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.922 ±(99.9%) 4.533 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.922, 2.481), stdev = 1.177
[info]   CI (99.9%): [≈ 0, 5.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   100.634 ±(99.9%) 497.932 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 100.634, 276.503), stdev = 129.311
[info]   CI (99.9%): [≈ 0, 598.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38.12% complete, ETA 01:10:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7677.974 ops/s
[info] # Warmup Iteration   2: 31410.218 ops/s
[info] # Warmup Iteration   3: 46690.455 ops/s
[info] # Warmup Iteration   4: 46821.127 ops/s
[info] # Warmup Iteration   5: 45842.213 ops/s
[info] Iteration   1: 45683.302 ops/s
[info]                  ·gc.alloc.rate:                   1887.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              65014.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1928.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66416.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.134 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 176.852 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         32.000 ms
[info] Iteration   2: 48529.625 ops/s
[info]                  ·gc.alloc.rate:                   1701.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              55166.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1259.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40831.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.793 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 47167.796 ops/s
[info]                  ·gc.alloc.rate:                   1685.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              56243.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1899.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63370.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.650 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121.778 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   4: 48663.256 ops/s
[info]                  ·gc.alloc.rate:                   1743.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              56350.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1911.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61788.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.444 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.358 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   5: 48939.382 ops/s
[info]                  ·gc.alloc.rate:                   1719.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              55294.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1279.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41130.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.127 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132.672 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   47796.672 ±(99.9%) 5257.149 ops/s [Average]
[info]   (min, avg, max) = (45683.302, 47796.672, 48939.382), stdev = 1365.265
[info]   CI (99.9%): [42539.523, 53053.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1747.411 ±(99.9%) 312.503 MB/sec [Average]
[info]   (min, avg, max) = (1685.640, 1747.411, 1887.412), stdev = 81.156
[info]   CI (99.9%): [1434.908, 2059.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   57613.635 ±(99.9%) 16063.172 B/op [Average]
[info]   (min, avg, max) = (55166.055, 57613.635, 65014.015), stdev = 4171.555
[info]   CI (99.9%): [41550.463, 73676.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1655.413 ±(99.9%) 1358.554 MB/sec [Average]
[info]   (min, avg, max) = (1259.024, 1655.413, 1928.134), stdev = 352.812
[info]   CI (99.9%): [296.859, 3013.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   54707.603 ±(99.9%) 48675.143 B/op [Average]
[info]   (min, avg, max) = (40831.726, 54707.603, 66416.698), stdev = 12640.780
[info]   CI (99.9%): [6032.460, 103382.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2.762 ±(99.9%) 8.385 MB/sec [Average]
[info]   (min, avg, max) = (0.444, 2.762, 5.134), stdev = 2.178
[info]   CI (99.9%): [≈ 0, 11.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   92.091 ±(99.9%) 283.814 B/op [Average]
[info]   (min, avg, max) = (14.358, 92.091, 176.852), stdev = 73.706
[info]   CI (99.9%): [≈ 0, 375.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   108.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (13.000, 21.600, 32.000), stdev = 7.021
[info]   CI (99.9%): [108.000, 108.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.35% complete, ETA 01:10:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9348.683 ops/s
[info] # Warmup Iteration   2: 34604.172 ops/s
[info] # Warmup Iteration   3: 46866.004 ops/s
[info] # Warmup Iteration   4: 52883.531 ops/s
[info] # Warmup Iteration   5: 55113.809 ops/s
[info] Iteration   1: 52766.728 ops/s
[info]                  ·gc.alloc.rate:                   1444.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              43078.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1953.367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58265.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.198 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.736 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 54037.837 ops/s
[info]                  ·gc.alloc.rate:                   1464.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              42659.883 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1304.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37997.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.293 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 53901.925 ops/s
[info]                  ·gc.alloc.rate:                   1453.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              42451.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1307.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38172.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.194 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.663 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 54742.832 ops/s
[info]                  ·gc.alloc.rate:                   1483.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              42667.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1310.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37670.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.566 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.263 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 55943.908 ops/s
[info]                  ·gc.alloc.rate:                   1510.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              42503.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36907.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.101 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87.231 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   54278.646 ±(99.9%) 4504.747 ops/s [Average]
[info]   (min, avg, max) = (52766.728, 54278.646, 55943.908), stdev = 1169.868
[info]   CI (99.9%): [49773.899, 58783.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1471.512 ±(99.9%) 101.932 MB/sec [Average]
[info]   (min, avg, max) = (1444.221, 1471.512, 1510.831), stdev = 26.472
[info]   CI (99.9%): [1369.580, 1573.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   42672.006 ±(99.9%) 948.069 B/op [Average]
[info]   (min, avg, max) = (42451.091, 42672.006, 43078.386), stdev = 246.211
[info]   CI (99.9%): [41723.936, 43620.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1437.475 ±(99.9%) 1110.548 MB/sec [Average]
[info]   (min, avg, max) = (1304.636, 1437.475, 1953.367), stdev = 288.406
[info]   CI (99.9%): [326.927, 2548.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   41802.519 ±(99.9%) 35486.465 B/op [Average]
[info]   (min, avg, max) = (36907.042, 41802.519, 58265.260), stdev = 9215.722
[info]   CI (99.9%): [6316.054, 77288.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.220 ±(99.9%) 4.327 MB/sec [Average]
[info]   (min, avg, max) = (0.194, 1.220, 3.101), stdev = 1.124
[info]   CI (99.9%): [≈ 0, 5.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   35.037 ±(99.9%) 121.195 B/op [Average]
[info]   (min, avg, max) = (5.663, 35.037, 87.231), stdev = 31.474
[info]   CI (99.9%): [≈ 0, 156.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   61.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 12.200, 18.000), stdev = 3.421
[info]   CI (99.9%): [61.000, 61.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.59% complete, ETA 01:10:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 567389.279 ops/s
[info] # Warmup Iteration   2: 970687.857 ops/s
[info] # Warmup Iteration   3: 1017391.210 ops/s
[info] # Warmup Iteration   4: 1027093.098 ops/s
[info] # Warmup Iteration   5: 1026104.612 ops/s
[info] Iteration   1: 1018519.711 ops/s
[info]                  ·gc.alloc.rate:               952.563 MB/sec
[info]                  ·gc.alloc.rate.norm:          1471.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1034.414 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1026332.006 ops/s
[info]                  ·gc.alloc.rate:               964.749 MB/sec
[info]                  ·gc.alloc.rate.norm:          1479.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1027.162 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1021351.034 ops/s
[info]                  ·gc.alloc.rate:                   987.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              1522.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2064.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1040753.514 ops/s
[info]                  ·gc.alloc.rate:                   974.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              1473.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1013.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1013366.218 ops/s
[info]                  ·gc.alloc.rate:               950.385 MB/sec
[info]                  ·gc.alloc.rate.norm:          1476.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2083.573 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1024064.497 ±(99.9%) 40212.301 ops/s [Average]
[info]   (min, avg, max) = (1013366.218, 1024064.497, 1040753.514), stdev = 10443.007
[info]   CI (99.9%): [983852.195, 1064276.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   966.011 ±(99.9%) 60.145 MB/sec [Average]
[info]   (min, avg, max) = (950.385, 966.011, 987.856), stdev = 15.619
[info]   CI (99.9%): [905.866, 1026.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1484.592 ±(99.9%) 81.792 B/op [Average]
[info]   (min, avg, max) = (1471.530, 1484.592, 1522.224), stdev = 21.241
[info]   CI (99.9%): [1402.800, 1566.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   938.184 ±(99.9%) 1414.923 MB/sec [Average]
[info]   (min, avg, max) = (669.606, 938.184, 1341.476), stdev = 367.451
[info]   CI (99.9%): [≈ 0, 2353.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1444.642 ±(99.9%) 2213.207 B/op [Average]
[info]   (min, avg, max) = (1013.300, 1444.642, 2083.573), stdev = 574.763
[info]   CI (99.9%): [≈ 0, 3657.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.032), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38.82% complete, ETA 01:09:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 642616.056 ops/s
[info] # Warmup Iteration   2: 998009.734 ops/s
[info] # Warmup Iteration   3: 1032787.800 ops/s
[info] # Warmup Iteration   4: 1033138.126 ops/s
[info] # Warmup Iteration   5: 1032747.392 ops/s
[info] Iteration   1: 1032596.397 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1033259.960 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1028462.949 ops/s
[info]                  ·gc.alloc.rate:      3.286 MB/sec
[info]                  ·gc.alloc.rate.norm: 5.028 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1033890.507 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1010481.620 ops/s
[info]                  ·gc.alloc.rate:      22.565 MB/sec
[info]                  ·gc.alloc.rate.norm: 35.147 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1027738.287 ±(99.9%) 38034.618 ops/s [Average]
[info]   (min, avg, max) = (1010481.620, 1027738.287, 1033890.507), stdev = 9877.470
[info]   CI (99.9%): [989703.669, 1065772.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5.170 ±(99.9%) 37.842 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 5.170, 22.565), stdev = 9.827
[info]   CI (99.9%): [≈ 0, 43.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   8.035 ±(99.9%) 58.958 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 8.035, 35.147), stdev = 15.311
[info]   CI (99.9%): [≈ 0, 66.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39.06% complete, ETA 01:09:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1332.968 ops/s
[info] # Warmup Iteration   2: 2608.161 ops/s
[info] # Warmup Iteration   3: 3564.356 ops/s
[info] # Warmup Iteration   4: 3404.319 ops/s
[info] # Warmup Iteration   5: 3835.716 ops/s
[info] Iteration   1: 4151.108 ops/s
[info]                  ·gc.alloc.rate:               562.125 MB/sec
[info]                  ·gc.alloc.rate.norm:          213119.191 B/op
[info]                  ·gc.churn.PS_Eden_Space:      630.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 238909.657 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     13.000 ms
[info] Iteration   2: 4069.409 ops/s
[info]                  ·gc.alloc.rate:               549.677 MB/sec
[info]                  ·gc.alloc.rate.norm:          212573.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:      630.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 243663.202 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   3: 4146.819 ops/s
[info]                  ·gc.alloc.rate:               569.190 MB/sec
[info]                  ·gc.alloc.rate.norm:          215974.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:      630.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 239140.042 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   4: 4035.218 ops/s
[info]                  ·gc.alloc.rate:                   544.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              212465.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:          630.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     245776.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.022 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 3931.151 ops/s
[info]                  ·gc.alloc.rate:               535.767 MB/sec
[info]                  ·gc.alloc.rate.norm:          214494.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:      630.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 252410.271 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   4066.741 ±(99.9%) 349.304 ops/s [Average]
[info]   (min, avg, max) = (3931.151, 4066.741, 4151.108), stdev = 90.713
[info]   CI (99.9%): [3717.437, 4416.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   552.302 ±(99.9%) 51.626 MB/sec [Average]
[info]   (min, avg, max) = (535.767, 552.302, 569.190), stdev = 13.407
[info]   CI (99.9%): [500.676, 603.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   213725.307 ±(99.9%) 5753.712 B/op [Average]
[info]   (min, avg, max) = (212465.352, 213725.307, 215974.199), stdev = 1494.221
[info]   CI (99.9%): [207971.595, 219479.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   630.219 ±(99.9%) 0.597 MB/sec [Average]
[info]   (min, avg, max) = (630.070, 630.219, 630.474), stdev = 0.155
[info]   CI (99.9%): [629.622, 630.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   243979.882 ±(99.9%) 21398.796 B/op [Average]
[info]   (min, avg, max) = (238909.657, 243979.882, 252410.271), stdev = 5557.199
[info]   CI (99.9%): [222581.086, 265378.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.804 ±(99.9%) 6.926 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.804, 4.022), stdev = 1.799
[info]   CI (99.9%): [≈ 0, 7.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   58.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (11.000, 11.600, 13.000), stdev = 0.894
[info]   CI (99.9%): [58.000, 58.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39.29% complete, ETA 01:09:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15033.858 ops/s
[info] # Warmup Iteration   2: 112540.713 ops/s
[info] # Warmup Iteration   3: 128905.765 ops/s
[info] # Warmup Iteration   4: 146538.648 ops/s
[info] # Warmup Iteration   5: 147119.945 ops/s
[info] Iteration   1: 155491.931 ops/s
[info]                  ·gc.alloc.rate:                   2417.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              24466.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20246.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.638 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 153065.912 ops/s
[info]                  ·gc.alloc.rate:                   2385.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              24527.569 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2659.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27342.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.639 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 153718.530 ops/s
[info]                  ·gc.alloc.rate:                   2371.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              24282.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20426.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.213 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 151555.037 ops/s
[info]                  ·gc.alloc.rate:                   2377.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              24688.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2666.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27688.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.216 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 153520.832 ops/s
[info]                  ·gc.alloc.rate:               2387.936 MB/sec
[info]                  ·gc.alloc.rate.norm:          24481.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20566.005 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   153470.448 ±(99.9%) 5439.818 ops/s [Average]
[info]   (min, avg, max) = (151555.037, 153470.448, 155491.931), stdev = 1412.703
[info]   CI (99.9%): [148030.631, 158910.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2387.929 ±(99.9%) 67.837 MB/sec [Average]
[info]   (min, avg, max) = (2371.677, 2387.929, 2417.227), stdev = 17.617
[info]   CI (99.9%): [2320.092, 2455.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   24489.314 ±(99.9%) 559.208 B/op [Average]
[info]   (min, avg, max) = (24282.343, 24489.314, 24688.047), stdev = 145.225
[info]   CI (99.9%): [23930.105, 25048.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2265.377 ±(99.9%) 1396.885 MB/sec [Average]
[info]   (min, avg, max) = (1995.121, 2265.377, 2666.172), stdev = 362.767
[info]   CI (99.9%): [868.492, 3662.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   23254.085 ±(99.9%) 14992.665 B/op [Average]
[info]   (min, avg, max) = (20246.737, 23254.085, 27688.040), stdev = 3893.547
[info]   CI (99.9%): [8261.420, 38246.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.250 ±(99.9%) 1.418 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.250, 0.853), stdev = 0.368
[info]   CI (99.9%): [≈ 0, 1.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.541 ±(99.9%) 14.364 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.541, 8.638), stdev = 3.730
[info]   CI (99.9%): [≈ 0, 16.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39.53% complete, ETA 01:09:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.791 ops/s
[info] # Warmup Iteration   2: 362002.832 ops/s
[info] # Warmup Iteration   3: 370162.547 ops/s
[info] # Warmup Iteration   4: 403207.435 ops/s
[info] # Warmup Iteration   5: 383975.423 ops/s
[info] Iteration   1: 397608.224 ops/s
[info]                  ·gc.alloc.rate:                   814.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              3224.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2631.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 391457.288 ops/s
[info]                  ·gc.alloc.rate:               806.196 MB/sec
[info]                  ·gc.alloc.rate.norm:          3241.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2672.766 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 387398.700 ops/s
[info]                  ·gc.alloc.rate:                   825.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              3355.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5404.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.173 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 389195.763 ops/s
[info]                  ·gc.alloc.rate:               802.105 MB/sec
[info]                  ·gc.alloc.rate.norm:          3243.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2692.428 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 390287.274 ops/s
[info]                  ·gc.alloc.rate:               797.073 MB/sec
[info]                  ·gc.alloc.rate.norm:          3214.288 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2684.841 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   391189.450 ±(99.9%) 14966.934 ops/s [Average]
[info]   (min, avg, max) = (387398.700, 391189.450, 397608.224), stdev = 3886.865
[info]   CI (99.9%): [376222.516, 406156.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   809.167 ±(99.9%) 43.671 MB/sec [Average]
[info]   (min, avg, max) = (797.073, 809.167, 825.919), stdev = 11.341
[info]   CI (99.9%): [765.497, 852.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3255.724 ±(99.9%) 219.438 B/op [Average]
[info]   (min, avg, max) = (3214.288, 3255.724, 3355.333), stdev = 56.987
[info]   CI (99.9%): [3036.286, 3475.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   798.308 ±(99.9%) 1145.212 MB/sec [Average]
[info]   (min, avg, max) = (664.812, 798.308, 1330.327), stdev = 297.408
[info]   CI (99.9%): [≈ 0, 1943.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   3217.218 ±(99.9%) 4709.192 B/op [Average]
[info]   (min, avg, max) = (2631.539, 3217.218, 5404.515), stdev = 1222.962
[info]   CI (99.9%): [≈ 0, 7926.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.016 ±(99.9%) 0.083 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.043), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.063 ±(99.9%) 0.333 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.063, 0.173), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.76% complete, ETA 01:08:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74435.532 ops/s
[info] # Warmup Iteration   2: 204748.101 ops/s
[info] # Warmup Iteration   3: 274469.782 ops/s
[info] # Warmup Iteration   4: 281645.881 ops/s
[info] # Warmup Iteration   5: 281691.806 ops/s
[info] Iteration   1: 282435.218 ops/s
[info]                  ·gc.alloc.rate:               599.992 MB/sec
[info]                  ·gc.alloc.rate.norm:          3342.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3678.511 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 280988.832 ops/s
[info]                  ·gc.alloc.rate:               596.870 MB/sec
[info]                  ·gc.alloc.rate.norm:          3342.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3703.376 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 281029.368 ops/s
[info]                  ·gc.alloc.rate:               597.270 MB/sec
[info]                  ·gc.alloc.rate.norm:          3344.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3702.836 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 282442.660 ops/s
[info]                  ·gc.alloc.rate:      578.612 MB/sec
[info]                  ·gc.alloc.rate.norm: 3224.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 282073.749 ops/s
[info]                  ·gc.alloc.rate:               597.154 MB/sec
[info]                  ·gc.alloc.rate.norm:          3332.179 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3692.771 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   281793.965 ±(99.9%) 2818.567 ops/s [Average]
[info]   (min, avg, max) = (280988.832, 281793.965, 282442.660), stdev = 731.973
[info]   CI (99.9%): [278975.398, 284612.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   593.980 ±(99.9%) 33.435 MB/sec [Average]
[info]   (min, avg, max) = (578.612, 593.980, 599.992), stdev = 8.683
[info]   CI (99.9%): [560.545, 627.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3317.327 ±(99.9%) 201.795 B/op [Average]
[info]   (min, avg, max) = (3224.002, 3317.327, 3344.798), stdev = 52.406
[info]   CI (99.9%): [3115.531, 3519.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   528.894 ±(99.9%) 1138.486 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 528.894, 661.775), stdev = 295.661
[info]   CI (99.9%): [≈ 0, 1667.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2955.499 ±(99.9%) 6362.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2955.499, 3703.376), stdev = 1652.205
[info]   CI (99.9%): [≈ 0, 9317.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 5.000), stdev = 2.168
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.00% complete, ETA 01:08:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 214383.221 ops/s
[info] # Warmup Iteration   2: 440654.223 ops/s
[info] # Warmup Iteration   3: 493645.760 ops/s
[info] # Warmup Iteration   4: 476690.997 ops/s
[info] # Warmup Iteration   5: 479683.476 ops/s
[info] Iteration   1: 480735.506 ops/s
[info]                  ·gc.alloc.rate:      606.015 MB/sec
[info]                  ·gc.alloc.rate.norm: 1984.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 479491.279 ops/s
[info]                  ·gc.alloc.rate:               630.387 MB/sec
[info]                  ·gc.alloc.rate.norm:          2069.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2193.138 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 491747.915 ops/s
[info]                  ·gc.alloc.rate:                   636.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              2038.422 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2140.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 490743.431 ops/s
[info]                  ·gc.alloc.rate:               634.795 MB/sec
[info]                  ·gc.alloc.rate.norm:          2035.633 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2144.843 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 493013.442 ops/s
[info]                  ·gc.alloc.rate:                   646.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              2065.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2137.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   487146.315 ±(99.9%) 24972.486 ops/s [Average]
[info]   (min, avg, max) = (479491.279, 487146.315, 493013.442), stdev = 6485.275
[info]   CI (99.9%): [462173.829, 512118.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   631.006 ±(99.9%) 58.626 MB/sec [Average]
[info]   (min, avg, max) = (606.015, 631.006, 646.910), stdev = 15.225
[info]   CI (99.9%): [572.379, 689.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2038.476 ±(99.9%) 130.997 B/op [Average]
[info]   (min, avg, max) = (1984.001, 2038.476, 2069.165), stdev = 34.020
[info]   CI (99.9%): [1907.478, 2169.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   535.055 ±(99.9%) 1151.747 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535.055, 669.443), stdev = 299.105
[info]   CI (99.9%): [≈ 0, 1686.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1723.119 ±(99.9%) 3710.184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1723.119, 2193.138), stdev = 963.523
[info]   CI (99.9%): [≈ 0, 5433.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.035 ±(99.9%) 0.223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.133), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40.24% complete, ETA 01:08:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5413.542 ops/s
[info] # Warmup Iteration   2: 71438.406 ops/s
[info] # Warmup Iteration   3: 102059.093 ops/s
[info] # Warmup Iteration   4: 102248.454 ops/s
[info] # Warmup Iteration   5: 102036.039 ops/s
[info] Iteration   1: 102625.751 ops/s
[info]                  ·gc.alloc.rate:                   3547.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              54403.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4017.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61609.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.639 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 102358.017 ops/s
[info]                  ·gc.alloc.rate:                   3550.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              54595.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3360.092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51665.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.320 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 100506.396 ops/s
[info]                  ·gc.alloc.rate:               3516.158 MB/sec
[info]                  ·gc.alloc.rate.norm:          55058.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3372.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52802.233 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 98705.681 ops/s
[info]                  ·gc.alloc.rate:                   3456.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              55105.680 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3382.711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53935.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.664 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 101118.561 ops/s
[info]                  ·gc.alloc.rate:                   3538.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              55073.439 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3389.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52760.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.324 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   101062.881 ±(99.9%) 6085.086 ops/s [Average]
[info]   (min, avg, max) = (98705.681, 101062.881, 102625.751), stdev = 1580.277
[info]   CI (99.9%): [94977.795, 107147.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3521.748 ±(99.9%) 150.558 MB/sec [Average]
[info]   (min, avg, max) = (3456.105, 3521.748, 3550.649), stdev = 39.099
[info]   CI (99.9%): [3371.191, 3672.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54847.180 ±(99.9%) 1252.337 B/op [Average]
[info]   (min, avg, max) = (54403.287, 54847.180, 55105.680), stdev = 325.228
[info]   CI (99.9%): [53594.843, 56099.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3504.401 ±(99.9%) 1105.238 MB/sec [Average]
[info]   (min, avg, max) = (3360.092, 3504.401, 4017.460), stdev = 287.027
[info]   CI (99.9%): [2399.164, 4609.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   54554.512 ±(99.9%) 15497.077 B/op [Average]
[info]   (min, avg, max) = (51665.192, 54554.512, 61609.127), stdev = 4024.542
[info]   CI (99.9%): [39057.435, 70051.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.389 ±(99.9%) 1.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.389, 0.664), stdev = 0.273
[info]   CI (99.9%): [≈ 0, 1.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 9.000), stdev = 1.225
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 40.47% complete, ETA 01:08:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61746.294 ops/s
[info] # Warmup Iteration   2: 196949.599 ops/s
[info] # Warmup Iteration   3: 199276.776 ops/s
[info] # Warmup Iteration   4: 214432.082 ops/s
[info] # Warmup Iteration   5: 217206.713 ops/s
[info] Iteration   1: 214910.543 ops/s
[info]                  ·gc.alloc.rate:                   1852.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              13567.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14662.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.411 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 213598.650 ops/s
[info]                  ·gc.alloc.rate:                   1831.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              13497.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14737.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.203 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 215303.637 ops/s
[info]                  ·gc.alloc.rate:                   1840.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              13455.740 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9729.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.304 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 217172.882 ops/s
[info]                  ·gc.alloc.rate:                   1870.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              13552.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14469.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.151 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 216354.861 ops/s
[info]                  ·gc.alloc.rate:               1890.443 MB/sec
[info]                  ·gc.alloc.rate.norm:          13748.502 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14539.462 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   215468.115 ±(99.9%) 5281.628 ops/s [Average]
[info]   (min, avg, max) = (213598.650, 215468.115, 217172.882), stdev = 1371.622
[info]   CI (99.9%): [210186.487, 220749.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1857.203 ±(99.9%) 90.456 MB/sec [Average]
[info]   (min, avg, max) = (1831.807, 1857.203, 1890.443), stdev = 23.491
[info]   CI (99.9%): [1766.747, 1947.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13564.380 ±(99.9%) 432.042 B/op [Average]
[info]   (min, avg, max) = (13455.740, 13564.380, 13748.502), stdev = 112.200
[info]   CI (99.9%): [13132.338, 13996.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1865.863 ±(99.9%) 1151.297 MB/sec [Average]
[info]   (min, avg, max) = (1331.028, 1865.863, 2002.137), stdev = 298.988
[info]   CI (99.9%): [714.566, 3017.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   13627.677 ±(99.9%) 8401.477 B/op [Average]
[info]   (min, avg, max) = (9729.146, 13627.677, 14737.670), stdev = 2181.837
[info]   CI (99.9%): [5226.200, 22029.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.874 ±(99.9%) 5.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.874, 3.060), stdev = 1.333
[info]   CI (99.9%): [≈ 0, 6.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.414 ±(99.9%) 37.599 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.414, 22.411), stdev = 9.764
[info]   CI (99.9%): [≈ 0, 44.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 12.000), stdev = 3.715
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40.71% complete, ETA 01:07:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.843 ops/s
[info] # Warmup Iteration   2: 758073.072 ops/s
[info] # Warmup Iteration   3: 923989.054 ops/s
[info] # Warmup Iteration   4: 931604.714 ops/s
[info] # Warmup Iteration   5: 935809.202 ops/s
[info] Iteration   1: 924356.916 ops/s
[info]                  ·gc.alloc.rate:               748.836 MB/sec
[info]                  ·gc.alloc.rate.norm:          1275.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1131.414 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 915766.483 ops/s
[info]                  ·gc.alloc.rate:               742.122 MB/sec
[info]                  ·gc.alloc.rate.norm:          1275.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1142.006 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 924589.243 ops/s
[info]                  ·gc.alloc.rate:               740.383 MB/sec
[info]                  ·gc.alloc.rate.norm:          1260.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1132.225 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 940771.893 ops/s
[info]                  ·gc.alloc.rate:                   762.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              1275.556 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1112.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 940567.278 ops/s
[info]                  ·gc.alloc.rate:               756.449 MB/sec
[info]                  ·gc.alloc.rate.norm:          1265.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1114.095 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   929210.363 ±(99.9%) 42544.698 ops/s [Average]
[info]   (min, avg, max) = (915766.483, 929210.363, 940771.893), stdev = 11048.723
[info]   CI (99.9%): [886665.665, 971755.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   750.044 ±(99.9%) 36.121 MB/sec [Average]
[info]   (min, avg, max) = (740.383, 750.044, 762.430), stdev = 9.381
[info]   CI (99.9%): [713.922, 786.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1270.394 ±(99.9%) 27.239 B/op [Average]
[info]   (min, avg, max) = (1260.238, 1270.394, 1275.556), stdev = 7.074
[info]   CI (99.9%): [1243.156, 1297.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   665.023 ±(99.9%) 2.268 MB/sec [Average]
[info]   (min, avg, max) = (664.450, 665.023, 665.878), stdev = 0.589
[info]   CI (99.9%): [662.755, 667.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1126.503 ±(99.9%) 48.694 B/op [Average]
[info]   (min, avg, max) = (1112.774, 1126.503, 1142.006), stdev = 12.646
[info]   CI (99.9%): [1077.809, 1175.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.120 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.070), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.94% complete, ETA 01:07:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 221413.021 ops/s
[info] # Warmup Iteration   2: 515455.125 ops/s
[info] # Warmup Iteration   3: 569759.486 ops/s
[info] # Warmup Iteration   4: 603197.926 ops/s
[info] # Warmup Iteration   5: 608980.604 ops/s
[info] Iteration   1: 608999.797 ops/s
[info]                  ·gc.alloc.rate:                   488.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              1262.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1708.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 608018.936 ops/s
[info]                  ·gc.alloc.rate:               490.100 MB/sec
[info]                  ·gc.alloc.rate.norm:          1268.397 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1711.387 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 603773.783 ops/s
[info]                  ·gc.alloc.rate:                   494.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1725.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.163 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 607693.385 ops/s
[info]                  ·gc.alloc.rate:      475.711 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 603047.085 ops/s
[info]                  ·gc.alloc.rate:               487.818 MB/sec
[info]                  ·gc.alloc.rate.norm:          1273.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1727.228 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   606306.597 ±(99.9%) 10394.630 ops/s [Average]
[info]   (min, avg, max) = (603047.085, 606306.597, 608999.797), stdev = 2699.452
[info]   CI (99.9%): [595911.967, 616701.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   487.342 ±(99.9%) 26.910 MB/sec [Average]
[info]   (min, avg, max) = (475.711, 487.342, 494.456), stdev = 6.988
[info]   CI (99.9%): [460.432, 514.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1264.891 ±(99.9%) 79.882 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1264.891, 1288.477), stdev = 20.745
[info]   CI (99.9%): [1185.009, 1344.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   529.284 ±(99.9%) 1139.324 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 529.284, 662.012), stdev = 295.879
[info]   CI (99.9%): [≈ 0, 1668.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1374.476 ±(99.9%) 2958.830 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1374.476, 1727.228), stdev = 768.399
[info]   CI (99.9%): [≈ 0, 4333.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.043 ±(99.9%) 0.272 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.163), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.18% complete, ETA 01:07:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 427621.977 ops/s
[info] # Warmup Iteration   2: 742034.642 ops/s
[info] # Warmup Iteration   3: 779207.600 ops/s
[info] # Warmup Iteration   4: 791319.878 ops/s
[info] # Warmup Iteration   5: 794227.421 ops/s
[info] Iteration   1: 795340.733 ops/s
[info]                  ·gc.alloc.rate:               645.796 MB/sec
[info]                  ·gc.alloc.rate.norm:          1278.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1321.476 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 792704.411 ops/s
[info]                  ·gc.alloc.rate:      624.118 MB/sec
[info]                  ·gc.alloc.rate.norm: 1238.878 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 787090.506 ops/s
[info]                  ·gc.alloc.rate:               635.607 MB/sec
[info]                  ·gc.alloc.rate.norm:          1270.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1335.968 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 753264.859 ops/s
[info]                  ·gc.alloc.rate:                   604.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              1263.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1396.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 788052.358 ops/s
[info]                  ·gc.alloc.rate:               640.219 MB/sec
[info]                  ·gc.alloc.rate.norm:          1278.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1335.666 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   783290.573 ±(99.9%) 65926.024 ops/s [Average]
[info]   (min, avg, max) = (753264.859, 783290.573, 795340.733), stdev = 17120.779
[info]   CI (99.9%): [717364.550, 849216.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   630.101 ±(99.9%) 62.586 MB/sec [Average]
[info]   (min, avg, max) = (604.766, 630.101, 645.796), stdev = 16.253
[info]   CI (99.9%): [567.515, 692.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1266.013 ±(99.9%) 62.939 B/op [Average]
[info]   (min, avg, max) = (1238.878, 1266.013, 1278.614), stdev = 16.345
[info]   CI (99.9%): [1203.074, 1328.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   534.563 ±(99.9%) 1150.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.563, 668.785), stdev = 298.830
[info]   CI (99.9%): [≈ 0, 1685.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1077.830 ±(99.9%) 2322.751 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1077.830, 1396.041), stdev = 603.211
[info]   CI (99.9%): [≈ 0, 3400.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.112 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.065), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 41.41% complete, ETA 01:06:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 438088.953 ops/s
[info] # Warmup Iteration   2: 761977.372 ops/s
[info] # Warmup Iteration   3: 837860.563 ops/s
[info] # Warmup Iteration   4: 836377.863 ops/s
[info] # Warmup Iteration   5: 837589.678 ops/s
[info] Iteration   1: 838081.409 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 838455.323 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 838229.163 ops/s
[info]                  ·gc.alloc.rate:      0.839 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.576 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 835811.549 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 835021.807 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   837119.850 ±(99.9%) 6104.241 ops/s [Average]
[info]   (min, avg, max) = (835021.807, 837119.850, 838455.323), stdev = 1585.252
[info]   CI (99.9%): [831015.610, 843224.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.168 ±(99.9%) 1.445 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.168, 0.839), stdev = 0.375
[info]   CI (99.9%): [≈ 0, 1.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.316 ±(99.9%) 2.713 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.316, 1.576), stdev = 0.705
[info]   CI (99.9%): [≈ 0, 3.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41.65% complete, ETA 01:06:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6064.393 ops/s
[info] # Warmup Iteration   2: 19074.447 ops/s
[info] # Warmup Iteration   3: 36393.530 ops/s
[info] # Warmup Iteration   4: 36130.935 ops/s
[info] # Warmup Iteration   5: 33516.863 ops/s
[info] Iteration   1: 36455.533 ops/s
[info]                  ·gc.alloc.rate:                   1660.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              71710.587 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85885.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.564 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 36617.144 ops/s
[info]                  ·gc.alloc.rate:                   1638.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              70424.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57088.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.947 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 169.656 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 36793.089 ops/s
[info]                  ·gc.alloc.rate:                   1678.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              71759.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85030.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.948 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 36207.753 ops/s
[info]                  ·gc.alloc.rate:                   1636.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              71098.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57535.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.524 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 36706.944 ops/s
[info]                  ·gc.alloc.rate:                   1655.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              70937.662 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1984.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85032.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.674 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   36556.093 ±(99.9%) 890.872 ops/s [Average]
[info]   (min, avg, max) = (36207.753, 36556.093, 36793.089), stdev = 231.357
[info]   CI (99.9%): [35665.221, 37446.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1653.839 ±(99.9%) 66.584 MB/sec [Average]
[info]   (min, avg, max) = (1636.119, 1653.839, 1678.254), stdev = 17.292
[info]   CI (99.9%): [1587.255, 1720.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   71186.271 ±(99.9%) 2155.561 B/op [Average]
[info]   (min, avg, max) = (70424.570, 71186.271, 71759.778), stdev = 559.792
[info]   CI (99.9%): [69030.710, 73341.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1722.874 ±(99.9%) 1394.611 MB/sec [Average]
[info]   (min, avg, max) = (1323.994, 1722.874, 1989.319), stdev = 362.176
[info]   CI (99.9%): [328.262, 3117.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   74114.530 ±(99.9%) 59082.544 B/op [Average]
[info]   (min, avg, max) = (57088.342, 74114.530, 85885.915), stdev = 15343.549
[info]   CI (99.9%): [15031.986, 133197.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.202 ±(99.9%) 6.159 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 1.202, 3.947), stdev = 1.599
[info]   CI (99.9%): [≈ 0, 7.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   51.673 ±(99.9%) 264.717 B/op [Average]
[info]   (min, avg, max) = (2.674, 51.673, 169.656), stdev = 68.746
[info]   CI (99.9%): [≈ 0, 316.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 16.000), stdev = 5.030
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41.88% complete, ETA 01:06:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 937.603 ops/s
[info] # Warmup Iteration   2: 6340.230 ops/s
[info] # Warmup Iteration   3: 7882.829 ops/s
[info] # Warmup Iteration   4: 9390.587 ops/s
[info] # Warmup Iteration   5: 9626.135 ops/s
[info] Iteration   1: 9656.766 ops/s
[info]                  ·gc.alloc.rate:               1346.024 MB/sec
[info]                  ·gc.alloc.rate.norm:          219302.952 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1314.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 214187.851 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     12.000 ms
[info] Iteration   2: 9557.551 ops/s
[info]                  ·gc.alloc.rate:                   1333.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              219619.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216625.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.855 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 9419.515 ops/s
[info]                  ·gc.alloc.rate:               1350.367 MB/sec
[info]                  ·gc.alloc.rate.norm:          225344.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1316.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 219619.158 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     13.000 ms
[info] Iteration   4: 9258.780 ops/s
[info]                  ·gc.alloc.rate:                   1271.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              216118.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112080.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.614 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 9108.218 ops/s
[info]                  ·gc.alloc.rate:                   1266.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              218718.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227991.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 107.896 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   9400.166 ±(99.9%) 852.837 ops/s [Average]
[info]   (min, avg, max) = (9108.218, 9400.166, 9656.766), stdev = 221.479
[info]   CI (99.9%): [8547.329, 10253.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1313.586 ±(99.9%) 159.080 MB/sec [Average]
[info]   (min, avg, max) = (1266.284, 1313.586, 1350.367), stdev = 41.313
[info]   CI (99.9%): [1154.506, 1472.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   219820.941 ±(99.9%) 13020.501 B/op [Average]
[info]   (min, avg, max) = (216118.897, 219820.941, 225344.196), stdev = 3381.383
[info]   CI (99.9%): [206800.441, 232841.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1185.131 ±(99.9%) 1131.743 MB/sec [Average]
[info]   (min, avg, max) = (659.381, 1185.131, 1319.968), stdev = 293.910
[info]   CI (99.9%): [53.388, 2316.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   198100.837 ±(99.9%) 186248.536 B/op [Average]
[info]   (min, avg, max) = (112080.570, 198100.837, 227991.335), stdev = 48368.153
[info]   CI (99.9%): [11852.301, 384349.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.146 ±(99.9%) 1.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.146, 0.625), stdev = 0.269
[info]   CI (99.9%): [≈ 0, 1.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   25.073 ±(99.9%) 179.147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25.073, 107.896), stdev = 46.524
[info]   CI (99.9%): [≈ 0, 204.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 11.000, 13.000), stdev = 2.828
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.12% complete, ETA 01:06:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 767.485 ops/s
[info] # Warmup Iteration   2: 6151.857 ops/s
[info] # Warmup Iteration   3: 8910.855 ops/s
[info] # Warmup Iteration   4: 9019.952 ops/s
[info] # Warmup Iteration   5: 9106.888 ops/s
[info] Iteration   1: 9292.580 ops/s
[info]                  ·gc.alloc.rate:               1219.130 MB/sec
[info]                  ·gc.alloc.rate.norm:          206468.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1323.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 224154.977 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 9240.754 ops/s
[info]                  ·gc.alloc.rate:                   1237.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              210766.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     225642.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.545 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 9042.313 ops/s
[info]                  ·gc.alloc.rate:               1189.226 MB/sec
[info]                  ·gc.alloc.rate.norm:          206944.819 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1326.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 230839.763 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 9081.672 ops/s
[info]                  ·gc.alloc.rate:               1177.433 MB/sec
[info]                  ·gc.alloc.rate.norm:          204035.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115142.510 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 9141.628 ops/s
[info]                  ·gc.alloc.rate:                   1199.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              206511.337 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     228888.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.334 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   9159.789 ±(99.9%) 405.789 ops/s [Average]
[info]   (min, avg, max) = (9042.313, 9159.789, 9292.580), stdev = 105.382
[info]   CI (99.9%): [8754.000, 9565.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1204.567 ±(99.9%) 92.308 MB/sec [Average]
[info]   (min, avg, max) = (1177.433, 1204.567, 1237.568), stdev = 23.972
[info]   CI (99.9%): [1112.258, 1296.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   206945.282 ±(99.9%) 9330.045 B/op [Average]
[info]   (min, avg, max) = (204035.238, 206945.282, 210766.233), stdev = 2422.983
[info]   CI (99.9%): [197615.237, 216275.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1193.786 ±(99.9%) 1139.452 MB/sec [Average]
[info]   (min, avg, max) = (664.457, 1193.786, 1329.450), stdev = 295.912
[info]   CI (99.9%): [54.334, 2333.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   204933.765 ±(99.9%) 193547.542 B/op [Average]
[info]   (min, avg, max) = (115142.510, 204933.765, 230839.763), stdev = 50263.682
[info]   CI (99.9%): [11386.223, 398481.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.576 ±(99.9%) 23.901 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.576, 14.334), stdev = 6.207
[info]   CI (99.9%): [≈ 0, 27.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 5.000), stdev = 1.095
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.35% complete, ETA 01:05:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58439.619 ops/s
[info] # Warmup Iteration   2: 155778.514 ops/s
[info] # Warmup Iteration   3: 182010.136 ops/s
[info] # Warmup Iteration   4: 198299.241 ops/s
[info] # Warmup Iteration   5: 195968.997 ops/s
[info] Iteration   1: 195565.888 ops/s
[info]                  ·gc.alloc.rate:                   1957.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              15747.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16120.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.815 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 199871.108 ops/s
[info]                  ·gc.alloc.rate:                   1980.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              15597.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15741.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.262 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 199757.760 ops/s
[info]                  ·gc.alloc.rate:                   1989.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              15674.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15729.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.164 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 200030.636 ops/s
[info]                  ·gc.alloc.rate:               1978.205 MB/sec
[info]                  ·gc.alloc.rate.norm:          15562.572 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10476.693 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 200127.453 ops/s
[info]                  ·gc.alloc.rate:                   1978.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              15563.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15734.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.164 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   199070.569 ±(99.9%) 7563.995 ops/s [Average]
[info]   (min, avg, max) = (195565.888, 199070.569, 200127.453), stdev = 1964.346
[info]   CI (99.9%): [191506.574, 206634.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1976.906 ±(99.9%) 45.678 MB/sec [Average]
[info]   (min, avg, max) = (1957.266, 1976.906, 1989.437), stdev = 11.862
[info]   CI (99.9%): [1931.228, 2022.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15629.007 ±(99.9%) 309.426 B/op [Average]
[info]   (min, avg, max) = (15562.572, 15629.007, 15747.529), stdev = 80.357
[info]   CI (99.9%): [15319.581, 15938.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1866.289 ±(99.9%) 1150.736 MB/sec [Average]
[info]   (min, avg, max) = (1331.724, 1866.289, 2003.619), stdev = 298.842
[info]   CI (99.9%): [715.553, 3017.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   14760.471 ±(99.9%) 9243.535 B/op [Average]
[info]   (min, avg, max) = (10476.693, 14760.471, 16120.474), stdev = 2400.517
[info]   CI (99.9%): [5516.937, 24004.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.833 ±(99.9%) 5.982 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.833, 3.581), stdev = 1.553
[info]   CI (99.9%): [≈ 0, 6.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.681 ±(99.9%) 48.147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.681, 28.815), stdev = 12.504
[info]   CI (99.9%): [≈ 0, 54.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42.59% complete, ETA 01:05:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 649.513 ops/s
[info] # Warmup Iteration   2: 5360.339 ops/s
[info] # Warmup Iteration   3: 8126.593 ops/s
[info] # Warmup Iteration   4: 8899.417 ops/s
[info] # Warmup Iteration   5: 8773.892 ops/s
[info] Iteration   1: 8701.245 ops/s
[info]                  ·gc.alloc.rate:                   1348.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              243841.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     238920.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.765 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 9011.844 ops/s
[info]                  ·gc.alloc.rate:               1393.921 MB/sec
[info]                  ·gc.alloc.rate.norm:          243399.305 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1323.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 231026.396 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 8992.908 ops/s
[info]                  ·gc.alloc.rate:                   1384.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              242286.704 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231864.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.929 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 8842.462 ops/s
[info]                  ·gc.alloc.rate:                   1396.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              248611.193 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     236270.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.047 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 8863.359 ops/s
[info]                  ·gc.alloc.rate:                   1415.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              251252.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     236302.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 247.641 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   8882.363 ±(99.9%) 486.090 ops/s [Average]
[info]   (min, avg, max) = (8701.245, 8882.363, 9011.844), stdev = 126.236
[info]   CI (99.9%): [8396.273, 9368.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1387.748 ±(99.9%) 95.361 MB/sec [Average]
[info]   (min, avg, max) = (1348.221, 1387.748, 1415.310), stdev = 24.765
[info]   CI (99.9%): [1292.386, 1483.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   245878.141 ±(99.9%) 14856.831 B/op [Average]
[info]   (min, avg, max) = (242286.704, 245878.141, 251252.416), stdev = 3858.272
[info]   CI (99.9%): [231021.310, 260734.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1325.513 ±(99.9%) 15.115 MB/sec [Average]
[info]   (min, avg, max) = (1321.015, 1325.513, 1331.094), stdev = 3.925
[info]   CI (99.9%): [1310.398, 1340.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   234876.742 ±(99.9%) 12804.226 B/op [Average]
[info]   (min, avg, max) = (231026.396, 234876.742, 238920.626), stdev = 3325.217
[info]   CI (99.9%): [222072.516, 247680.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.337 ±(99.9%) 2.298 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.337, 1.395), stdev = 0.597
[info]   CI (99.9%): [≈ 0, 2.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   59.876 ±(99.9%) 407.997 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 59.876, 247.641), stdev = 105.955
[info]   CI (99.9%): [≈ 0, 467.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42.82% complete, ETA 01:05:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4679.855 ops/s
[info] # Warmup Iteration   2: 15279.754 ops/s
[info] # Warmup Iteration   3: 21227.110 ops/s
[info] # Warmup Iteration   4: 23347.918 ops/s
[info] # Warmup Iteration   5: 20866.387 ops/s
[info] Iteration   1: 19347.130 ops/s
[info]                  ·gc.alloc.rate:               1302.579 MB/sec
[info]                  ·gc.alloc.rate.norm:          105908.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1325.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 107778.289 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     14.000 ms
[info] Iteration   2: 19438.194 ops/s
[info]                  ·gc.alloc.rate:               1362.950 MB/sec
[info]                  ·gc.alloc.rate.norm:          110335.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1324.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 107225.404 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     21.000 ms
[info] Iteration   3: 21144.897 ops/s
[info]                  ·gc.alloc.rate:                   1534.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              114127.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1306.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97177.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100.532 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 21183.246 ops/s
[info]                  ·gc.alloc.rate:                   1295.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              96206.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1284.698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95419.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.117 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 380.087 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   5: 22821.325 ops/s
[info]                  ·gc.alloc.rate:                   1213.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              83640.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1281.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88323.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.705 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   20786.958 ±(99.9%) 5552.171 ops/s [Average]
[info]   (min, avg, max) = (19347.130, 20786.958, 22821.325), stdev = 1441.881
[info]   CI (99.9%): [15234.787, 26339.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1341.642 ±(99.9%) 462.273 MB/sec [Average]
[info]   (min, avg, max) = (1213.280, 1341.642, 1534.109), stdev = 120.051
[info]   CI (99.9%): [879.369, 1803.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   102043.574 ±(99.9%) 47257.241 B/op [Average]
[info]   (min, avg, max) = (83640.351, 102043.574, 114127.618), stdev = 12272.555
[info]   CI (99.9%): [54786.333, 149300.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1304.457 ±(99.9%) 81.307 MB/sec [Average]
[info]   (min, avg, max) = (1281.208, 1304.457, 1325.575), stdev = 21.115
[info]   CI (99.9%): [1223.150, 1385.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   99184.801 ±(99.9%) 31909.318 B/op [Average]
[info]   (min, avg, max) = (88323.141, 99184.801, 107778.289), stdev = 8286.749
[info]   CI (99.9%): [67275.483, 131094.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.296 ±(99.9%) 8.528 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.296, 5.117), stdev = 2.215
[info]   CI (99.9%): [≈ 0, 9.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   96.265 ±(99.9%) 633.425 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 96.265, 380.087), stdev = 164.498
[info]   CI (99.9%): [≈ 0, 729.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   85.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (14.000, 17.000, 21.000), stdev = 2.915
[info]   CI (99.9%): [85.000, 85.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.06% complete, ETA 01:05:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4846.867 ops/s
[info] # Warmup Iteration   2: 17871.736 ops/s
[info] # Warmup Iteration   3: 24239.569 ops/s
[info] # Warmup Iteration   4: 25198.899 ops/s
[info] # Warmup Iteration   5: 24577.803 ops/s
[info] Iteration   1: 22893.058 ops/s
[info]                  ·gc.alloc.rate:               1297.441 MB/sec
[info]                  ·gc.alloc.rate.norm:          89179.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1315.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 90400.010 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     15.000 ms
[info] Iteration   2: 23571.660 ops/s
[info]                  ·gc.alloc.rate:                   1333.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              89022.372 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87533.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 137.532 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 24707.695 ops/s
[info]                  ·gc.alloc.rate:                   1009.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              64271.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83509.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92.545 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   4: 24924.725 ops/s
[info]                  ·gc.alloc.rate:                   1007.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              63618.294 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41431.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.597 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 227.079 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 24819.207 ops/s
[info]                  ·gc.alloc.rate:                   1016.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              64456.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83174.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   24183.269 ±(99.9%) 3480.472 ops/s [Average]
[info]   (min, avg, max) = (22893.058, 24183.269, 24924.725), stdev = 903.868
[info]   CI (99.9%): [20702.796, 27663.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1132.877 ±(99.9%) 643.587 MB/sec [Average]
[info]   (min, avg, max) = (1007.678, 1132.877, 1333.357), stdev = 167.137
[info]   CI (99.9%): [489.290, 1776.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   74109.463 ±(99.9%) 52710.789 B/op [Average]
[info]   (min, avg, max) = (63618.294, 74109.463, 89179.266), stdev = 13688.825
[info]   CI (99.9%): [21398.674, 126820.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1181.151 ±(99.9%) 1129.902 MB/sec [Average]
[info]   (min, avg, max) = (656.253, 1181.151, 1315.201), stdev = 293.432
[info]   CI (99.9%): [51.250, 2311.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   77209.773 ±(99.9%) 77872.131 B/op [Average]
[info]   (min, avg, max) = (41431.560, 77209.773, 90400.010), stdev = 20223.145
[info]   CI (99.9%): [≈ 0, 155081.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.715 ±(99.9%) 4.995 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.715, 3.597), stdev = 1.297
[info]   CI (99.9%): [≈ 0, 6.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   110.034 ±(99.9%) 317.291 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 110.034, 227.079), stdev = 82.399
[info]   CI (99.9%): [≈ 0, 427.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   65.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.000, 17.000), stdev = 3.742
[info]   CI (99.9%): [65.000, 65.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.29% complete, ETA 01:04:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 236485.588 ops/s
[info] # Warmup Iteration   2: 493457.981 ops/s
[info] # Warmup Iteration   3: 532441.623 ops/s
[info] # Warmup Iteration   4: 541260.889 ops/s
[info] # Warmup Iteration   5: 539677.233 ops/s
[info] Iteration   1: 538206.360 ops/s
[info]                  ·gc.alloc.rate:                   1265.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              3700.926 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3919.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 539078.306 ops/s
[info]                  ·gc.alloc.rate:                   1264.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              3690.700 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3913.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 523744.626 ops/s
[info]                  ·gc.alloc.rate:                   1227.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              3689.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4031.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 541818.542 ops/s
[info]                  ·gc.alloc.rate:                   1256.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              3648.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3897.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.211 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.229 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 547307.024 ops/s
[info]                  ·gc.alloc.rate:               1283.120 MB/sec
[info]                  ·gc.alloc.rate.norm:          3686.549 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3839.929 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   538030.972 ±(99.9%) 33658.360 ops/s [Average]
[info]   (min, avg, max) = (523744.626, 538030.972, 547307.024), stdev = 8740.969
[info]   CI (99.9%): [504372.611, 571689.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1259.526 ±(99.9%) 77.590 MB/sec [Average]
[info]   (min, avg, max) = (1227.980, 1259.526, 1283.120), stdev = 20.150
[info]   CI (99.9%): [1181.936, 1337.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3683.195 ±(99.9%) 77.076 B/op [Average]
[info]   (min, avg, max) = (3648.751, 3683.195, 3700.926), stdev = 20.016
[info]   CI (99.9%): [3606.120, 3760.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1340.298 ±(99.9%) 8.671 MB/sec [Average]
[info]   (min, avg, max) = (1336.505, 1340.298, 1342.038), stdev = 2.252
[info]   CI (99.9%): [1331.627, 1348.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3920.241 ±(99.9%) 268.550 B/op [Average]
[info]   (min, avg, max) = (3839.929, 3920.241, 4031.699), stdev = 69.741
[info]   CI (99.9%): [3651.691, 4188.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.854 ±(99.9%) 7.226 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.854, 4.211), stdev = 1.877
[info]   CI (99.9%): [≈ 0, 8.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.481 ±(99.9%) 20.984 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.481, 12.229), stdev = 5.449
[info]   CI (99.9%): [≈ 0, 23.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 43.53% complete, ETA 01:04:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 190279.340 ops/s
[info] # Warmup Iteration   2: 575001.350 ops/s
[info] # Warmup Iteration   3: 606246.576 ops/s
[info] # Warmup Iteration   4: 606019.740 ops/s
[info] # Warmup Iteration   5: 607065.019 ops/s
[info] Iteration   1: 606533.943 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 612084.908 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 609124.316 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 607793.003 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 607277.630 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   608562.760 ±(99.9%) 8410.166 ops/s [Average]
[info]   (min, avg, max) = (606533.943, 608562.760, 612084.908), stdev = 2184.093
[info]   CI (99.9%): [600152.594, 616972.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43.76% complete, ETA 01:04:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4746.127 ops/s
[info] # Warmup Iteration   2: 17291.426 ops/s
[info] # Warmup Iteration   3: 20634.905 ops/s
[info] # Warmup Iteration   4: 24491.995 ops/s
[info] # Warmup Iteration   5: 26388.034 ops/s
[info] Iteration   1: 24838.953 ops/s
[info]                  ·gc.alloc.rate:               1535.982 MB/sec
[info]                  ·gc.alloc.rate.norm:          97302.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1934.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 122535.067 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     25.000 ms
[info] Iteration   2: 24194.744 ops/s
[info]                  ·gc.alloc.rate:                   1372.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              89287.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1285.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83629.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.263 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.221 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 25322.308 ops/s
[info]                  ·gc.alloc.rate:                   1177.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              73180.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1283.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79742.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.633 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 225.762 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   4: 25624.444 ops/s
[info]                  ·gc.alloc.rate:               1175.079 MB/sec
[info]                  ·gc.alloc.rate.norm:          72170.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:      643.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39502.131 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 24304.986 ops/s
[info]                  ·gc.alloc.rate:                   1140.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              73884.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1288.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83445.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 199.895 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   24857.087 ±(99.9%) 2396.318 ops/s [Average]
[info]   (min, avg, max) = (24194.744, 24857.087, 25624.444), stdev = 622.316
[info]   CI (99.9%): [22460.769, 27253.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1280.466 ±(99.9%) 652.743 MB/sec [Average]
[info]   (min, avg, max) = (1140.942, 1280.466, 1535.982), stdev = 169.515
[info]   CI (99.9%): [627.724, 1933.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   81165.112 ±(99.9%) 44075.732 B/op [Average]
[info]   (min, avg, max) = (72170.094, 81165.112, 97302.782), stdev = 11446.328
[info]   CI (99.9%): [37089.380, 125240.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1286.997 ±(99.9%) 1757.755 MB/sec [Average]
[info]   (min, avg, max) = (643.177, 1286.997, 1934.288), stdev = 456.484
[info]   CI (99.9%): [≈ 0, 3044.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   81770.889 ±(99.9%) 113230.191 B/op [Average]
[info]   (min, avg, max) = (39502.131, 81770.889, 122535.067), stdev = 29405.521
[info]   CI (99.9%): [≈ 0, 195001.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.797 ±(99.9%) 6.589 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.797, 3.633), stdev = 1.711
[info]   CI (99.9%): [≈ 0, 8.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   114.576 ±(99.9%) 417.234 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 114.576, 225.762), stdev = 108.354
[info]   CI (99.9%): [≈ 0, 531.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   80.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 16.000, 25.000), stdev = 6.205
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.00% complete, ETA 01:04:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1256.351 ops/s
[info] # Warmup Iteration   2: 7459.938 ops/s
[info] # Warmup Iteration   3: 11873.171 ops/s
[info] # Warmup Iteration   4: 13979.818 ops/s
[info] # Warmup Iteration   5: 13842.797 ops/s
[info] Iteration   1: 13468.127 ops/s
[info]                  ·gc.alloc.rate:                   1610.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              188137.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1981.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231472.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.298 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 13169.879 ops/s
[info]                  ·gc.alloc.rate:                   1508.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              180232.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157302.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 492.968 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   3: 13936.868 ops/s
[info]                  ·gc.alloc.rate:               1327.940 MB/sec
[info]                  ·gc.alloc.rate.norm:          149932.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1307.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 147593.523 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   4: 14040.174 ops/s
[info]                  ·gc.alloc.rate:                   1528.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              171258.600 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1310.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146884.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.340 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 13311.871 ops/s
[info]                  ·gc.alloc.rate:               1477.268 MB/sec
[info]                  ·gc.alloc.rate.norm:          174577.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1314.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 155376.677 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   13585.384 ±(99.9%) 1480.845 ops/s [Average]
[info]   (min, avg, max) = (13169.879, 13585.384, 14040.174), stdev = 384.571
[info]   CI (99.9%): [12104.539, 15066.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1490.501 ±(99.9%) 398.265 MB/sec [Average]
[info]   (min, avg, max) = (1327.940, 1490.501, 1610.659), stdev = 103.428
[info]   CI (99.9%): [1092.236, 1888.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   172827.603 ±(99.9%) 55097.554 B/op [Average]
[info]   (min, avg, max) = (149932.089, 172827.603, 188137.206), stdev = 14308.660
[info]   CI (99.9%): [117730.049, 227925.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1446.181 ±(99.9%) 1152.742 MB/sec [Average]
[info]   (min, avg, max) = (1307.228, 1446.181, 1981.660), stdev = 299.363
[info]   CI (99.9%): [293.439, 2598.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   167725.951 ±(99.9%) 138362.585 B/op [Average]
[info]   (min, avg, max) = (146884.275, 167725.951, 231472.957), stdev = 35932.324
[info]   CI (99.9%): [29363.366, 306088.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.954 ±(99.9%) 6.891 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.954, 4.125), stdev = 1.790
[info]   CI (99.9%): [≈ 0, 7.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   113.121 ±(99.9%) 824.429 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 113.121, 492.968), stdev = 214.102
[info]   CI (99.9%): [≈ 0, 937.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   69.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 13.800, 20.000), stdev = 4.147
[info]   CI (99.9%): [69.000, 69.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.24% complete, ETA 01:03:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 687.500 ops/s
[info] # Warmup Iteration   2: 10657.141 ops/s
[info] # Warmup Iteration   3: 13882.285 ops/s
[info] # Warmup Iteration   4: 13951.221 ops/s
[info] # Warmup Iteration   5: 13879.558 ops/s
[info] Iteration   1: 12283.315 ops/s
[info]                  ·gc.alloc.rate:                        1536.640 MB/sec
[info]                  ·gc.alloc.rate.norm:                   194260.503 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.016 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 1.998 B/op
[info]                  ·gc.churn.Metaspace:                   0.046 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              5.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:               1788.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          226114.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           5.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      665.975 B/op
[info]                  ·gc.count:                             4.000 counts
[info]                  ·gc.time:                              48.000 ms
[info] Iteration   2: 14004.142 ops/s
[info]                  ·gc.alloc.rate:                   1265.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              142163.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148908.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.470 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 389.897 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14005.448 ops/s
[info]                  ·gc.alloc.rate:                   1254.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              140912.101 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148748.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.339 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 13324.993 ops/s
[info]                  ·gc.alloc.rate:                   1375.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              162476.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156259.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.459 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 13310.948 ops/s
[info]                  ·gc.alloc.rate:                   1382.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              163408.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156620.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 207.144 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   13385.769 ±(99.9%) 2716.740 ops/s [Average]
[info]   (min, avg, max) = (12283.315, 13385.769, 14005.448), stdev = 705.529
[info]   CI (99.9%): [10669.029, 16102.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1362.772 ±(99.9%) 439.167 MB/sec [Average]
[info]   (min, avg, max) = (1254.251, 1362.772, 1536.640), stdev = 114.050
[info]   CI (99.9%): [923.605, 1801.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   160644.220 ±(99.9%) 83301.367 B/op [Average]
[info]   (min, avg, max) = (140912.101, 160644.220, 194260.503), stdev = 21633.101
[info]   CI (99.9%): [77342.852, 243945.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space":
[info]   0.003 ±(99.9%) 0.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm":
[info]   0.400 ±(99.9%) 3.440 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.998), stdev = 0.893
[info]   CI (99.9%): [≈ 0, 3.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.Metaspace":
[info]   0.009 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.046), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.Metaspace.norm":
[info]   1.168 ±(99.9%) 10.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.168, 5.838), stdev = 2.611
[info]   CI (99.9%): [≈ 0, 11.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1417.116 ±(99.9%) 799.676 MB/sec [Average]
[info]   (min, avg, max) = (1322.918, 1417.116, 1788.610), stdev = 207.673
[info]   CI (99.9%): [617.440, 2216.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   167330.416 ±(99.9%) 127383.481 B/op [Average]
[info]   (min, avg, max) = (148748.519, 167330.416, 226114.218), stdev = 33081.085
[info]   CI (99.9%): [39946.935, 294713.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2.106 ±(99.9%) 8.756 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 2.106, 5.268), stdev = 2.274
[info]   CI (99.9%): [≈ 0, 10.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   253.563 ±(99.9%) 1083.995 B/op [Average]
[info]   (min, avg, max) = (2.339, 253.563, 665.975), stdev = 281.510
[info]   CI (99.9%): [≈ 0, 1337.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   62.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 12.400, 48.000), stdev = 19.920
[info]   CI (99.9%): [62.000, 62.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.47% complete, ETA 01:03:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101820.603 ops/s
[info] # Warmup Iteration   2: 242793.859 ops/s
[info] # Warmup Iteration   3: 342409.494 ops/s
[info] # Warmup Iteration   4: 335833.078 ops/s
[info] # Warmup Iteration   5: 335039.660 ops/s
[info] Iteration   1: 335846.135 ops/s
[info]                  ·gc.alloc.rate:                   2000.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              9372.573 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9306.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.199 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.988 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 345627.023 ops/s
[info]                  ·gc.alloc.rate:                   2055.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              9356.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1983.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9030.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.829 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 346597.174 ops/s
[info]                  ·gc.alloc.rate:                   2057.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              9341.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1976.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8975.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.930 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 347846.903 ops/s
[info]                  ·gc.alloc.rate:                   2079.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              9406.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1973.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8926.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 348064.837 ops/s
[info]                  ·gc.alloc.rate:                   2064.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              9334.461 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1976.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8935.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   344796.414 ±(99.9%) 19637.171 ops/s [Average]
[info]   (min, avg, max) = (335846.135, 344796.414, 348064.837), stdev = 5099.711
[info]   CI (99.9%): [325159.243, 364433.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2051.302 ±(99.9%) 115.194 MB/sec [Average]
[info]   (min, avg, max) = (2000.476, 2051.302, 2079.116), stdev = 29.916
[info]   CI (99.9%): [1936.108, 2166.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9362.334 ±(99.9%) 109.688 B/op [Average]
[info]   (min, avg, max) = (9334.461, 9362.334, 9406.067), stdev = 28.486
[info]   CI (99.9%): [9252.646, 9472.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1979.127 ±(99.9%) 21.356 MB/sec [Average]
[info]   (min, avg, max) = (1973.020, 1979.127, 1986.381), stdev = 5.546
[info]   CI (99.9%): [1957.771, 2000.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9034.718 ±(99.9%) 606.237 B/op [Average]
[info]   (min, avg, max) = (8926.084, 9034.718, 9306.537), stdev = 157.438
[info]   CI (99.9%): [8428.482, 9640.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1.516 ±(99.9%) 6.892 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.516, 3.696), stdev = 1.790
[info]   CI (99.9%): [≈ 0, 8.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.987 ±(99.9%) 31.774 B/op [Average]
[info]   (min, avg, max) = (0.094, 6.987, 16.829), stdev = 8.252
[info]   CI (99.9%): [≈ 0, 38.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.000, 17.000), stdev = 5.385
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 44.71% complete, ETA 01:03:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 597.420 ops/s
[info] # Warmup Iteration   2: 6427.464 ops/s
[info] # Warmup Iteration   3: 11552.808 ops/s
[info] # Warmup Iteration   4: 13663.884 ops/s
[info] # Warmup Iteration   5: 13896.374 ops/s
[info] Iteration   1: 13654.219 ops/s
[info]                  ·gc.alloc.rate:                   1568.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              180818.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153558.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.198 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 13963.119 ops/s
[info]                  ·gc.alloc.rate:               1611.853 MB/sec
[info]                  ·gc.alloc.rate.norm:          181647.547 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 150322.173 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 13959.904 ops/s
[info]                  ·gc.alloc.rate:                   1615.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              182160.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     225735.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 232.364 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 13971.259 ops/s
[info]                  ·gc.alloc.rate:                   1720.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              193827.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     150386.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.388 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 13188.074 ops/s
[info]                  ·gc.alloc.rate:                   1717.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              204882.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     238992.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.968 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   13747.315 ±(99.9%) 1310.540 ops/s [Average]
[info]   (min, avg, max) = (13188.074, 13747.315, 13971.259), stdev = 340.343
[info]   CI (99.9%): [12436.775, 15057.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1646.865 ±(99.9%) 262.856 MB/sec [Average]
[info]   (min, avg, max) = (1568.841, 1646.865, 1720.693), stdev = 68.263
[info]   CI (99.9%): [1384.009, 1909.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   188667.100 ±(99.9%) 40512.831 B/op [Average]
[info]   (min, avg, max) = (180818.259, 188667.100, 204882.021), stdev = 10521.054
[info]   CI (99.9%): [148154.269, 229179.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1601.323 ±(99.9%) 1410.820 MB/sec [Average]
[info]   (min, avg, max) = (1332.328, 1601.323, 2002.856), stdev = 366.386
[info]   CI (99.9%): [190.502, 3012.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   183798.957 ±(99.9%) 171737.599 B/op [Average]
[info]   (min, avg, max) = (150322.173, 183798.957, 238992.021), stdev = 44599.709
[info]   CI (99.9%): [12061.358, 355536.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.570 ±(99.9%) 3.390 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.570, 2.061), stdev = 0.880
[info]   CI (99.9%): [≈ 0, 3.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   64.384 ±(99.9%) 381.836 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 64.384, 232.364), stdev = 99.162
[info]   CI (99.9%): [≈ 0, 446.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.673
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.94% complete, ETA 01:02:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6131.031 ops/s
[info] # Warmup Iteration   2: 24548.007 ops/s
[info] # Warmup Iteration   3: 33552.963 ops/s
[info] # Warmup Iteration   4: 37657.140 ops/s
[info] # Warmup Iteration   5: 35039.651 ops/s
[info] Iteration   1: 34038.890 ops/s
[info]                  ·gc.alloc.rate:                   1755.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              81114.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1951.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90184.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93.602 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         26.000 ms
[info] Iteration   2: 35062.540 ops/s
[info]                  ·gc.alloc.rate:                   1512.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              67881.953 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1293.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58069.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.076 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 227.871 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 36616.561 ops/s
[info]                  ·gc.alloc.rate:                   1450.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              62330.561 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1279.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54972.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.457 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 36646.525 ops/s
[info]                  ·gc.alloc.rate:                   1448.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              62213.681 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1280.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55013.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.803 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   5: 35596.844 ops/s
[info]                  ·gc.alloc.rate:                   1414.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              62535.979 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1285.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56812.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.141 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.241 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   35592.272 ±(99.9%) 4241.938 ops/s [Average]
[info]   (min, avg, max) = (34038.890, 35592.272, 36646.525), stdev = 1101.618
[info]   CI (99.9%): [31350.333, 39834.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1516.134 ±(99.9%) 532.121 MB/sec [Average]
[info]   (min, avg, max) = (1414.496, 1516.134, 1755.149), stdev = 138.190
[info]   CI (99.9%): [984.013, 2048.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   67215.376 ±(99.9%) 31307.116 B/op [Average]
[info]   (min, avg, max) = (62213.681, 67215.376, 81114.709), stdev = 8130.358
[info]   CI (99.9%): [35908.261, 98522.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1418.006 ±(99.9%) 1148.360 MB/sec [Average]
[info]   (min, avg, max) = (1279.011, 1418.006, 1951.393), stdev = 298.225
[info]   CI (99.9%): [269.646, 2566.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   63010.600 ±(99.9%) 58707.777 B/op [Average]
[info]   (min, avg, max) = (54972.720, 63010.600, 90184.189), stdev = 15246.223
[info]   CI (99.9%): [4302.823, 121718.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.487 ±(99.9%) 8.361 MB/sec [Average]
[info]   (min, avg, max) = (0.057, 1.487, 5.076), stdev = 2.171
[info]   CI (99.9%): [≈ 0, 9.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   67.195 ±(99.9%) 376.250 B/op [Average]
[info]   (min, avg, max) = (2.457, 67.195, 227.871), stdev = 97.711
[info]   CI (99.9%): [≈ 0, 443.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   88.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (14.000, 17.600, 26.000), stdev = 5.128
[info]   CI (99.9%): [88.000, 88.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.18% complete, ETA 01:02:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25853.889 ops/s
[info] # Warmup Iteration   2: 88535.283 ops/s
[info] # Warmup Iteration   3: 125342.326 ops/s
[info] # Warmup Iteration   4: 129443.918 ops/s
[info] # Warmup Iteration   5: 131254.912 ops/s
[info] Iteration   1: 131427.999 ops/s
[info]                  ·gc.alloc.rate:                   2453.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              29380.662 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24004.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.437 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 132478.211 ops/s
[info]                  ·gc.alloc.rate:                   2483.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              29510.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31814.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.484 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 133687.944 ops/s
[info]                  ·gc.alloc.rate:               2505.553 MB/sec
[info]                  ·gc.alloc.rate.norm:          29497.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2684.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31600.716 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 130371.598 ops/s
[info]                  ·gc.alloc.rate:               2458.606 MB/sec
[info]                  ·gc.alloc.rate.norm:          29680.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24361.458 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 130272.775 ops/s
[info]                  ·gc.alloc.rate:                   2484.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              30012.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32585.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.503 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   131647.705 ±(99.9%) 5586.576 ops/s [Average]
[info]   (min, avg, max) = (130272.775, 131647.705, 133687.944), stdev = 1450.816
[info]   CI (99.9%): [126061.130, 137234.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2477.154 ±(99.9%) 81.863 MB/sec [Average]
[info]   (min, avg, max) = (2453.459, 2477.154, 2505.553), stdev = 21.260
[info]   CI (99.9%): [2395.291, 2559.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   29616.200 ±(99.9%) 946.527 B/op [Average]
[info]   (min, avg, max) = (29380.662, 29616.200, 30012.256), stdev = 245.810
[info]   CI (99.9%): [28669.673, 30562.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2416.361 ±(99.9%) 1424.334 MB/sec [Average]
[info]   (min, avg, max) = (2004.511, 2416.361, 2697.231), stdev = 369.895
[info]   CI (99.9%): [992.027, 3840.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   28873.277 ±(99.9%) 16554.588 B/op [Average]
[info]   (min, avg, max) = (24004.422, 28873.277, 32585.666), stdev = 4299.174
[info]   CI (99.9%): [12318.688, 45427.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.258 ±(99.9%) 1.871 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.258, 1.122), stdev = 0.486
[info]   CI (99.9%): [≈ 0, 2.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.085 ±(99.9%) 22.406 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.085, 13.437), stdev = 5.819
[info]   CI (99.9%): [≈ 0, 25.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.41% complete, ETA 01:02:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 381769.186 ops/s
[info] # Warmup Iteration   2: 759838.958 ops/s
[info] # Warmup Iteration   3: 848502.137 ops/s
[info] # Warmup Iteration   4: 881398.363 ops/s
[info] # Warmup Iteration   5: 880028.123 ops/s
[info] Iteration   1: 877659.093 ops/s
[info]                  ·gc.alloc.rate:               1252.416 MB/sec
[info]                  ·gc.alloc.rate.norm:          2245.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2402.308 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 872655.444 ops/s
[info]                  ·gc.alloc.rate:                   1240.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              2236.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2417.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 875141.136 ops/s
[info]                  ·gc.alloc.rate:               1227.250 MB/sec
[info]                  ·gc.alloc.rate.norm:          2206.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1205.820 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 880893.865 ops/s
[info]                  ·gc.alloc.rate:                   1246.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              2226.382 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2396.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.691 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 881360.071 ops/s
[info]                  ·gc.alloc.rate:                   1243.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              2220.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2392.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.710 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   877541.922 ±(99.9%) 14339.313 ops/s [Average]
[info]   (min, avg, max) = (872655.444, 877541.922, 881360.071), stdev = 3723.874
[info]   CI (99.9%): [863202.609, 891881.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1242.025 ±(99.9%) 35.910 MB/sec [Average]
[info]   (min, avg, max) = (1227.250, 1242.025, 1252.416), stdev = 9.326
[info]   CI (99.9%): [1206.115, 1277.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2227.191 ±(99.9%) 57.878 B/op [Average]
[info]   (min, avg, max) = (2206.503, 2227.191, 2245.880), stdev = 15.031
[info]   CI (99.9%): [2169.313, 2285.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1206.472 ±(99.9%) 1153.349 MB/sec [Average]
[info]   (min, avg, max) = (670.674, 1206.472, 1341.264), stdev = 299.521
[info]   CI (99.9%): [53.123, 2359.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2162.831 ±(99.9%) 2060.364 B/op [Average]
[info]   (min, avg, max) = (1205.820, 2162.831, 2417.350), stdev = 535.070
[info]   CI (99.9%): [102.467, 4223.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.835 ±(99.9%) 5.300 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.835, 3.185), stdev = 1.376
[info]   CI (99.9%): [≈ 0, 6.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.491 ±(99.9%) 9.469 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.491, 5.691), stdev = 2.459
[info]   CI (99.9%): [≈ 0, 10.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 8.000), stdev = 2.408
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 45.65% complete, ETA 01:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 528109.393 ops/s
[info] # Warmup Iteration   2: 862904.518 ops/s
[info] # Warmup Iteration   3: 992161.206 ops/s
[info] # Warmup Iteration   4: 993284.580 ops/s
[info] # Warmup Iteration   5: 985994.935 ops/s
[info] Iteration   1: 993636.542 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 945204.889 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 985204.967 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 995683.802 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 996257.173 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   983197.475 ±(99.9%) 83544.439 ops/s [Average]
[info]   (min, avg, max) = (945204.889, 983197.475, 996257.173), stdev = 21696.226
[info]   CI (99.9%): [899653.036, 1066741.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.88% complete, ETA 01:01:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14795.680 ops/s
[info] # Warmup Iteration   2: 71279.940 ops/s
[info] # Warmup Iteration   3: 103938.469 ops/s
[info] # Warmup Iteration   4: 125495.981 ops/s
[info] # Warmup Iteration   5: 130305.718 ops/s
[info] Iteration   1: 129636.786 ops/s
[info]                  ·gc.alloc.rate:                   2902.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              35242.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2656.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32252.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.538 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 129127.645 ops/s
[info]                  ·gc.alloc.rate:                   2899.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              35341.548 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3325.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40531.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.254 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 127112.807 ops/s
[info]                  ·gc.alloc.rate:               2855.056 MB/sec
[info]                  ·gc.alloc.rate.norm:          35346.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2671.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33075.245 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 126890.613 ops/s
[info]                  ·gc.alloc.rate:               2877.419 MB/sec
[info]                  ·gc.alloc.rate.norm:          35683.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2682.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33265.044 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 128403.342 ops/s
[info]                  ·gc.alloc.rate:                   2911.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              35679.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2691.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32987.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.510 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   128234.239 ±(99.9%) 4659.457 ops/s [Average]
[info]   (min, avg, max) = (126890.613, 128234.239, 129636.786), stdev = 1210.046
[info]   CI (99.9%): [123574.781, 132893.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2889.250 ±(99.9%) 88.006 MB/sec [Average]
[info]   (min, avg, max) = (2855.056, 2889.250, 2911.350), stdev = 22.855
[info]   CI (99.9%): [2801.245, 2977.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   35458.825 ±(99.9%) 799.924 B/op [Average]
[info]   (min, avg, max) = (35242.136, 35458.825, 35683.619), stdev = 207.738
[info]   CI (99.9%): [34658.900, 36258.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2805.509 ±(99.9%) 1120.089 MB/sec [Average]
[info]   (min, avg, max) = (2656.616, 2805.509, 3325.334), stdev = 290.883
[info]   CI (99.9%): [1685.420, 3925.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   34422.234 ±(99.9%) 13233.162 B/op [Average]
[info]   (min, avg, max) = (32252.430, 34422.234, 40531.266), stdev = 3436.610
[info]   CI (99.9%): [21189.072, 47655.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.480 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.291), stdev = 0.125
[info]   CI (99.9%): [≈ 0, 0.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.860 ±(99.9%) 5.821 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.860, 3.538), stdev = 1.512
[info]   CI (99.9%): [≈ 0, 6.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46.12% complete, ETA 01:01:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2373.706 ops/s
[info] # Warmup Iteration   2: 11979.253 ops/s
[info] # Warmup Iteration   3: 18734.614 ops/s
[info] # Warmup Iteration   4: 18280.311 ops/s
[info] # Warmup Iteration   5: 16691.611 ops/s
[info] Iteration   1: 18441.877 ops/s
[info]                  ·gc.alloc.rate:                   948.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              80941.228 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113520.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.864 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73.721 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 18683.744 ops/s
[info]                  ·gc.alloc.rate:               1158.774 MB/sec
[info]                  ·gc.alloc.rate.norm:          97599.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56059.479 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 17685.068 ops/s
[info]                  ·gc.alloc.rate:               1229.551 MB/sec
[info]                  ·gc.alloc.rate.norm:          109373.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118563.546 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   4: 18130.964 ops/s
[info]                  ·gc.alloc.rate:                   1064.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              92365.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115705.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.307 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113.440 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 18735.538 ops/s
[info]                  ·gc.alloc.rate:                   942.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              79155.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55984.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.552 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 298.365 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   18335.438 ±(99.9%) 1675.714 ops/s [Average]
[info]   (min, avg, max) = (17685.068, 18335.438, 18735.538), stdev = 435.177
[info]   CI (99.9%): [16659.725, 20011.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   1068.653 ±(99.9%) 488.770 MB/sec [Average]
[info]   (min, avg, max) = (942.216, 1068.653, 1229.551), stdev = 126.932
[info]   CI (99.9%): [579.883, 1557.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   91887.113 ±(99.9%) 47961.458 B/op [Average]
[info]   (min, avg, max) = (79155.639, 91887.113, 109373.853), stdev = 12455.438
[info]   CI (99.9%): [43925.656, 139848.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1065.656 ±(99.9%) 1404.880 MB/sec [Average]
[info]   (min, avg, max) = (665.578, 1065.656, 1333.119), stdev = 364.843
[info]   CI (99.9%): [≈ 0, 2470.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   91966.822 ±(99.9%) 126538.033 B/op [Average]
[info]   (min, avg, max) = (55984.860, 91966.822, 118563.546), stdev = 32861.525
[info]   CI (99.9%): [≈ 0, 218504.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.144 ±(99.9%) 5.619 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.144, 3.552), stdev = 1.459
[info]   CI (99.9%): [≈ 0, 6.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   97.105 ±(99.9%) 472.304 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 97.105, 298.365), stdev = 122.656
[info]   CI (99.9%): [≈ 0, 569.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.000, 11.000), stdev = 2.828
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.35% complete, ETA 01:01:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5571.824 ops/s
[info] # Warmup Iteration   2: 14391.330 ops/s
[info] # Warmup Iteration   3: 18944.403 ops/s
[info] # Warmup Iteration   4: 19032.310 ops/s
[info] # Warmup Iteration   5: 18714.132 ops/s
[info] Iteration   1: 18635.425 ops/s
[info]                  ·gc.alloc.rate:                   775.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              65488.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56088.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.758 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 16969.690 ops/s
[info]                  ·gc.alloc.rate:               1132.082 MB/sec
[info]                  ·gc.alloc.rate.norm:          104968.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 123225.597 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     12.000 ms
[info] Iteration   3: 17761.373 ops/s
[info]                  ·gc.alloc.rate:               1066.872 MB/sec
[info]                  ·gc.alloc.rate.norm:          94531.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58877.262 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 17610.187 ops/s
[info]                  ·gc.alloc.rate:                   747.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              66670.467 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117410.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.584 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 18558.462 ops/s
[info]                  ·gc.alloc.rate:                   768.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              65177.275 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55925.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.949 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   17907.027 ±(99.9%) 2683.639 ops/s [Average]
[info]   (min, avg, max) = (16969.690, 17907.027, 18635.425), stdev = 696.932
[info]   CI (99.9%): [15223.388, 20590.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   898.018 ±(99.9%) 714.822 MB/sec [Average]
[info]   (min, avg, max) = (747.218, 898.018, 1132.082), stdev = 185.637
[info]   CI (99.9%): [183.196, 1612.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   79367.116 ±(99.9%) 73075.276 B/op [Average]
[info]   (min, avg, max) = (65177.275, 79367.116, 104968.510), stdev = 18977.417
[info]   CI (99.9%): [6291.840, 152442.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   926.578 ±(99.9%) 1391.636 MB/sec [Average]
[info]   (min, avg, max) = (659.414, 926.578, 1328.984), stdev = 361.404
[info]   CI (99.9%): [≈ 0, 2318.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   82305.385 ±(99.9%) 133929.870 B/op [Average]
[info]   (min, avg, max) = (55925.560, 82305.385, 123225.597), stdev = 34781.162
[info]   CI (99.9%): [≈ 0, 216235.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.719 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.100, 0.432), stdev = 0.187
[info]   CI (99.9%): [≈ 0, 0.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.858 ±(99.9%) 64.292 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.858, 38.584), stdev = 16.696
[info]   CI (99.9%): [≈ 0, 73.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.400, 16.000), stdev = 4.669
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.59% complete, ETA 01:01:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91695.326 ops/s
[info] # Warmup Iteration   2: 130905.343 ops/s
[info] # Warmup Iteration   3: 155056.918 ops/s
[info] # Warmup Iteration   4: 160095.048 ops/s
[info] # Warmup Iteration   5: 159745.476 ops/s
[info] Iteration   1: 161374.255 ops/s
[info]                  ·gc.alloc.rate:               417.863 MB/sec
[info]                  ·gc.alloc.rate.norm:          4074.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6470.766 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 161621.214 ops/s
[info]                  ·gc.alloc.rate:                   415.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              4048.811 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6461.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 161510.915 ops/s
[info]                  ·gc.alloc.rate:      405.587 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 161926.403 ops/s
[info]                  ·gc.alloc.rate:               424.040 MB/sec
[info]                  ·gc.alloc.rate.norm:          4121.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6452.387 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 163127.442 ops/s
[info]                  ·gc.alloc.rate:      409.614 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   161912.046 ±(99.9%) 2731.043 ops/s [Average]
[info]   (min, avg, max) = (161374.255, 161912.046, 163127.442), stdev = 709.243
[info]   CI (99.9%): [159181.002, 164643.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   414.576 ±(99.9%) 27.716 MB/sec [Average]
[info]   (min, avg, max) = (405.587, 414.576, 424.040), stdev = 7.198
[info]   CI (99.9%): [386.859, 442.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4029.888 ±(99.9%) 291.820 B/op [Average]
[info]   (min, avg, max) = (3952.003, 4029.888, 4121.969), stdev = 75.785
[info]   CI (99.9%): [3738.068, 4321.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   398.173 ±(99.9%) 1399.634 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 398.173, 663.777), stdev = 363.480
[info]   CI (99.9%): [≈ 0, 1797.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3876.854 ±(99.9%) 13627.712 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3876.854, 6470.766), stdev = 3539.074
[info]   CI (99.9%): [≈ 0, 17504.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.076), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46.82% complete, ETA 01:00:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1961.140 ops/s
[info] # Warmup Iteration   2: 9309.832 ops/s
[info] # Warmup Iteration   3: 16871.153 ops/s
[info] # Warmup Iteration   4: 17208.915 ops/s
[info] # Warmup Iteration   5: 16893.537 ops/s
[info] Iteration   1: 15949.052 ops/s
[info]                  ·gc.alloc.rate:               1357.782 MB/sec
[info]                  ·gc.alloc.rate.norm:          133995.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 131006.267 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     16.000 ms
[info] Iteration   2: 17340.054 ops/s
[info]                  ·gc.alloc.rate:                   1186.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              107684.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119833.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.950 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 358.479 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 16294.509 ops/s
[info]                  ·gc.alloc.rate:                   1292.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              124629.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127012.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96.833 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 16370.562 ops/s
[info]                  ·gc.alloc.rate:               1259.909 MB/sec
[info]                  ·gc.alloc.rate.norm:          121083.803 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63594.697 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 15931.917 ops/s
[info]                  ·gc.alloc.rate:                        1096.468 MB/sec
[info]                  ·gc.alloc.rate.norm:                   108268.741 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.016 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 1.539 B/op
[info]                  ·gc.churn.Metaspace:                   0.045 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              4.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:               1338.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          132190.041 B/op
[info]                  ·gc.churn.PS_Old_Gen:                  4.085 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:             403.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           6.575 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      649.239 B/op
[info]                  ·gc.count:                             4.000 counts
[info]                  ·gc.time:                              53.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   16377.219 ±(99.9%) 2208.301 ops/s [Average]
[info]   (min, avg, max) = (15931.917, 16377.219, 17340.054), stdev = 573.489
[info]   CI (99.9%): [14168.918, 18585.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1238.613 ±(99.9%) 387.273 MB/sec [Average]
[info]   (min, avg, max) = (1096.468, 1238.613, 1357.782), stdev = 100.574
[info]   CI (99.9%): [851.340, 1625.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   119132.369 ±(99.9%) 43224.153 B/op [Average]
[info]   (min, avg, max) = (107684.420, 119132.369, 133995.839), stdev = 11225.175
[info]   CI (99.9%): [75908.217, 162356.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space":
[info]   0.003 ±(99.9%) 0.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space.norm":
[info]   0.308 ±(99.9%) 2.651 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.308, 1.539), stdev = 0.688
[info]   CI (99.9%): [≈ 0, 2.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.Metaspace":
[info]   0.009 ±(99.9%) 0.078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.Metaspace.norm":
[info]   0.893 ±(99.9%) 7.686 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.893, 4.463), stdev = 1.996
[info]   CI (99.9%): [≈ 0, 8.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1193.085 ±(99.9%) 1144.250 MB/sec [Average]
[info]   (min, avg, max) = (661.720, 1193.085, 1338.726), stdev = 297.158
[info]   CI (99.9%): [48.835, 2337.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   114727.517 ±(99.9%) 111627.248 B/op [Average]
[info]   (min, avg, max) = (63594.697, 114727.517, 132190.041), stdev = 28989.242
[info]   CI (99.9%): [3100.269, 226354.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Old_Gen":
[info]   0.817 ±(99.9%) 7.035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.817, 4.085), stdev = 1.827
[info]   CI (99.9%): [≈ 0, 7.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Old_Gen.norm":
[info]   80.682 ±(99.9%) 694.697 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 80.682, 403.410), stdev = 180.411
[info]   CI (99.9%): [≈ 0, 775.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2.306 ±(99.9%) 11.103 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.306, 6.575), stdev = 2.883
[info]   CI (99.9%): [≈ 0, 13.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   220.910 ±(99.9%) 1081.250 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 220.910, 649.239), stdev = 280.797
[info]   CI (99.9%): [≈ 0, 1302.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   96.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 19.200, 53.000), stdev = 19.254
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47.06% complete, ETA 01:00:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14630.148 ops/s
[info] # Warmup Iteration   2: 55353.894 ops/s
[info] # Warmup Iteration   3: 58572.555 ops/s
[info] # Warmup Iteration   4: 61662.249 ops/s
[info] # Warmup Iteration   5: 64764.718 ops/s
[info] Iteration   1: 64900.941 ops/s
[info]                  ·gc.alloc.rate:                   1870.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              45362.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48373.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.505 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 65274.187 ops/s
[info]                  ·gc.alloc.rate:                   1854.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              44708.679 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32083.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.602 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 64643.792 ops/s
[info]                  ·gc.alloc.rate:                   1861.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              45310.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48606.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.534 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 64492.784 ops/s
[info]                  ·gc.alloc.rate:                   1852.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              45184.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48769.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.900 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.744 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 64879.961 ops/s
[info]                  ·gc.alloc.rate:                   1876.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              45492.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48411.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.327 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.940 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   64838.333 ±(99.9%) 1143.698 ops/s [Average]
[info]   (min, avg, max) = (64492.784, 64838.333, 65274.187), stdev = 297.015
[info]   CI (99.9%): [63694.635, 65982.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1862.949 ±(99.9%) 39.315 MB/sec [Average]
[info]   (min, avg, max) = (1852.384, 1862.949, 1876.097), stdev = 10.210
[info]   CI (99.9%): [1823.634, 1902.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   45211.975 ±(99.9%) 1163.654 B/op [Average]
[info]   (min, avg, max) = (44708.679, 45211.975, 45492.623), stdev = 302.197
[info]   CI (99.9%): [44048.321, 46375.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1863.583 ±(99.9%) 1146.849 MB/sec [Average]
[info]   (min, avg, max) = (1330.811, 1863.583, 1999.332), stdev = 297.833
[info]   CI (99.9%): [716.734, 3010.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   45248.957 ±(99.9%) 28346.554 B/op [Average]
[info]   (min, avg, max) = (32083.367, 45248.957, 48769.465), stdev = 7361.510
[info]   CI (99.9%): [16902.404, 73595.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.891 ±(99.9%) 4.627 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.891, 2.900), stdev = 1.202
[info]   CI (99.9%): [≈ 0, 5.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   21.665 ±(99.9%) 112.845 B/op [Average]
[info]   (min, avg, max) = (0.505, 21.665, 70.744), stdev = 29.305
[info]   CI (99.9%): [≈ 0, 134.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.000, 11.000), stdev = 2.550
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.29% complete, ETA 01:00:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16352.771 ops/s
[info] # Warmup Iteration   2: 77110.403 ops/s
[info] # Warmup Iteration   3: 87301.624 ops/s
[info] # Warmup Iteration   4: 99841.066 ops/s
[info] # Warmup Iteration   5: 99402.101 ops/s
[info] Iteration   1: 99866.857 ops/s
[info]                  ·gc.alloc.rate:                   1901.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              29968.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31384.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.154 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 97150.844 ops/s
[info]                  ·gc.alloc.rate:                   1843.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              29845.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32316.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.674 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 98915.351 ops/s
[info]                  ·gc.alloc.rate:                   1872.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              29790.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21208.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.331 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 99154.590 ops/s
[info]                  ·gc.alloc.rate:                   1902.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              30196.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31794.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.302 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.661 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 98849.057 ops/s
[info]                  ·gc.alloc.rate:                   1897.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              30209.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31936.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.331 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   98787.340 ±(99.9%) 3849.943 ops/s [Average]
[info]   (min, avg, max) = (97150.844, 98787.340, 99866.857), stdev = 999.818
[info]   CI (99.9%): [94937.397, 102637.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1883.418 ±(99.9%) 98.870 MB/sec [Average]
[info]   (min, avg, max) = (1843.130, 1883.418, 1902.305), stdev = 25.676
[info]   CI (99.9%): [1784.547, 1982.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   30002.033 ±(99.9%) 749.274 B/op [Average]
[info]   (min, avg, max) = (29790.410, 30002.033, 30209.677), stdev = 194.584
[info]   CI (99.9%): [29252.760, 30751.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1865.860 ±(99.9%) 1147.272 MB/sec [Average]
[info]   (min, avg, max) = (1332.986, 1865.860, 2006.272), stdev = 297.943
[info]   CI (99.9%): [718.587, 3013.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   29727.978 ±(99.9%) 18382.768 B/op [Average]
[info]   (min, avg, max) = (21208.941, 29727.978, 32316.425), stdev = 4773.947
[info]   CI (99.9%): [11345.210, 48110.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.292 ±(99.9%) 2.176 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.292, 1.302), stdev = 0.565
[info]   CI (99.9%): [≈ 0, 2.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.630 ±(99.9%) 34.532 B/op [Average]
[info]   (min, avg, max) = (0.331, 4.630, 20.661), stdev = 8.968
[info]   CI (99.9%): [≈ 0, 39.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.53% complete, ETA 00:59:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 163706.481 ops/s
[info] # Warmup Iteration   2: 307788.538 ops/s
[info] # Warmup Iteration   3: 325865.179 ops/s
[info] # Warmup Iteration   4: 313298.449 ops/s
[info] # Warmup Iteration   5: 350075.010 ops/s
[info] Iteration   1: 348946.696 ops/s
[info]                  ·gc.alloc.rate:               686.792 MB/sec
[info]                  ·gc.alloc.rate.norm:          3097.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3016.456 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 349256.568 ops/s
[info]                  ·gc.alloc.rate:               685.330 MB/sec
[info]                  ·gc.alloc.rate.norm:          3087.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3015.384 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 348954.827 ops/s
[info]                  ·gc.alloc.rate:                   686.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              3096.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3018.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 340445.362 ops/s
[info]                  ·gc.alloc.rate:               677.681 MB/sec
[info]                  ·gc.alloc.rate.norm:          3132.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3094.898 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 347068.155 ops/s
[info]                  ·gc.alloc.rate:                   686.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              3112.693 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3035.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.142 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   346934.322 ±(99.9%) 14362.621 ops/s [Average]
[info]   (min, avg, max) = (340445.362, 346934.322, 349256.568), stdev = 3729.927
[info]   CI (99.9%): [332571.701, 361296.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   684.563 ±(99.9%) 14.976 MB/sec [Average]
[info]   (min, avg, max) = (677.681, 684.563, 686.792), stdev = 3.889
[info]   CI (99.9%): [669.588, 699.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3105.566 ±(99.9%) 68.059 B/op [Average]
[info]   (min, avg, max) = (3087.907, 3105.566, 3132.876), stdev = 17.675
[info]   CI (99.9%): [3037.507, 3173.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   669.220 ±(99.9%) 1.049 MB/sec [Average]
[info]   (min, avg, max) = (668.798, 669.220, 669.465), stdev = 0.272
[info]   CI (99.9%): [668.171, 670.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3036.109 ±(99.9%) 130.571 B/op [Average]
[info]   (min, avg, max) = (3015.384, 3036.109, 3094.898), stdev = 33.909
[info]   CI (99.9%): [2905.537, 3166.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.237 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.142), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47.76% complete, ETA 00:59:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 170250.732 ops/s
[info] # Warmup Iteration   2: 354864.088 ops/s
[info] # Warmup Iteration   3: 382859.298 ops/s
[info] # Warmup Iteration   4: 382793.612 ops/s
[info] # Warmup Iteration   5: 383201.608 ops/s
[info] Iteration   1: 382156.514 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 381958.958 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 381789.466 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 382012.646 ops/s
[info]                  ·gc.alloc.rate:      0.081 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.336 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 383007.220 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   382184.961 ±(99.9%) 1840.778 ops/s [Average]
[info]   (min, avg, max) = (381789.466, 382184.961, 383007.220), stdev = 478.044
[info]   CI (99.9%): [380344.183, 384025.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.017 ±(99.9%) 0.140 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.017, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.068 ±(99.9%) 0.576 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.068, 0.336), stdev = 0.150
[info]   CI (99.9%): [≈ 0, 0.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48.00% complete, ETA 00:59:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11714.773 ops/s
[info] # Warmup Iteration   2: 66088.961 ops/s
[info] # Warmup Iteration   3: 79499.141 ops/s
[info] # Warmup Iteration   4: 88353.638 ops/s
[info] # Warmup Iteration   5: 94785.130 ops/s
[info] Iteration   1: 95043.092 ops/s
[info]                  ·gc.alloc.rate:                   1983.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              32851.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33059.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.530 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 94047.096 ops/s
[info]                  ·gc.alloc.rate:                   1959.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              32799.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33287.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.484 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 96187.212 ops/s
[info]                  ·gc.alloc.rate:                   2000.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              32724.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32503.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.747 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 96313.275 ops/s
[info]                  ·gc.alloc.rate:                   1999.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              32667.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32486.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.340 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 96449.669 ops/s
[info]                  ·gc.alloc.rate:                   2001.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              32653.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32507.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.340 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   95608.069 ±(99.9%) 3990.969 ops/s [Average]
[info]   (min, avg, max) = (94047.096, 95608.069, 96449.669), stdev = 1036.442
[info]   CI (99.9%): [91617.100, 99599.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1988.881 ±(99.9%) 68.127 MB/sec [Average]
[info]   (min, avg, max) = (1959.926, 1988.881, 2001.049), stdev = 17.692
[info]   CI (99.9%): [1920.753, 2057.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32739.074 ±(99.9%) 326.930 B/op [Average]
[info]   (min, avg, max) = (32653.578, 32739.074, 32851.133), stdev = 84.903
[info]   CI (99.9%): [32412.144, 33066.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1990.541 ±(99.9%) 14.715 MB/sec [Average]
[info]   (min, avg, max) = (1986.641, 1990.541, 1996.394), stdev = 3.821
[info]   CI (99.9%): [1975.826, 2005.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   32769.046 ±(99.9%) 1456.745 B/op [Average]
[info]   (min, avg, max) = (32486.687, 32769.046, 33287.773), stdev = 378.312
[info]   CI (99.9%): [31312.301, 34225.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.008 ±(99.9%) 7.658 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.008, 4.561), stdev = 1.989
[info]   CI (99.9%): [≈ 0, 8.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   16.688 ±(99.9%) 126.819 B/op [Average]
[info]   (min, avg, max) = (0.340, 16.688, 75.530), stdev = 32.934
[info]   CI (99.9%): [≈ 0, 143.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 11.000), stdev = 3.130
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 48.24% complete, ETA 00:59:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29497.550 ops/s
[info] # Warmup Iteration   2: 190036.523 ops/s
[info] # Warmup Iteration   3: 203576.522 ops/s
[info] # Warmup Iteration   4: 206969.643 ops/s
[info] # Warmup Iteration   5: 212553.283 ops/s
[info] Iteration   1: 210411.882 ops/s
[info]                  ·gc.alloc.rate:                   2672.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              19985.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14918.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.557 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 212228.509 ops/s
[info]                  ·gc.alloc.rate:                   2718.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              20162.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2661.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19734.868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.805 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 213336.661 ops/s
[info]                  ·gc.alloc.rate:                   2731.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              20152.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2664.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19660.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.154 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 213995.248 ops/s
[info]                  ·gc.alloc.rate:               2780.198 MB/sec
[info]                  ·gc.alloc.rate.norm:          20447.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2672.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19655.503 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 213137.338 ops/s
[info]                  ·gc.alloc.rate:               2770.250 MB/sec
[info]                  ·gc.alloc.rate.norm:          20456.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2681.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19803.665 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   212621.927 ±(99.9%) 5343.100 ops/s [Average]
[info]   (min, avg, max) = (210411.882, 212621.927, 213995.248), stdev = 1387.586
[info]   CI (99.9%): [207278.828, 217965.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2734.657 ±(99.9%) 166.558 MB/sec [Average]
[info]   (min, avg, max) = (2672.320, 2734.657, 2780.198), stdev = 43.255
[info]   CI (99.9%): [2568.099, 2901.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20240.829 ±(99.9%) 790.679 B/op [Average]
[info]   (min, avg, max) = (19985.170, 20240.829, 20456.564), stdev = 205.337
[info]   CI (99.9%): [19450.150, 21031.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2535.058 ±(99.9%) 1163.276 MB/sec [Average]
[info]   (min, avg, max) = (1994.831, 2535.058, 2681.834), stdev = 302.099
[info]   CI (99.9%): [1371.782, 3698.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   18754.522 ±(99.9%) 8260.625 B/op [Average]
[info]   (min, avg, max) = (14918.511, 18754.522, 19803.665), stdev = 2145.258
[info]   CI (99.9%): [10493.897, 27015.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.337 ±(99.9%) 2.434 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.337, 1.457), stdev = 0.632
[info]   CI (99.9%): [≈ 0, 2.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.503 ±(99.9%) 18.047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.503, 10.805), stdev = 4.687
[info]   CI (99.9%): [≈ 0, 20.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 48.47% complete, ETA 00:58:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.588 ops/s
[info] # Warmup Iteration   2: 682128.752 ops/s
[info] # Warmup Iteration   3: 758545.075 ops/s
[info] # Warmup Iteration   4: 822168.137 ops/s
[info] # Warmup Iteration   5: 808882.464 ops/s
[info] Iteration   1: 827741.459 ops/s
[info]                  ·gc.alloc.rate:                   478.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              909.504 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1259.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 819656.506 ops/s
[info]                  ·gc.alloc.rate:               468.716 MB/sec
[info]                  ·gc.alloc.rate.norm:          899.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1271.366 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 807955.027 ops/s
[info]                  ·gc.alloc.rate:      447.660 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 805568.546 ops/s
[info]                  ·gc.alloc.rate:                   466.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              910.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1294.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.081 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 799982.034 ops/s
[info]                  ·gc.alloc.rate:               462.753 MB/sec
[info]                  ·gc.alloc.rate.norm:          910.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1304.023 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   812180.715 ±(99.9%) 43412.029 ops/s [Average]
[info]   (min, avg, max) = (799982.034, 812180.715, 827741.459), stdev = 11273.966
[info]   CI (99.9%): [768768.685, 855592.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   464.739 ±(99.9%) 43.073 MB/sec [Average]
[info]   (min, avg, max) = (447.660, 464.739, 478.416), stdev = 11.186
[info]   CI (99.9%): [421.666, 507.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   900.513 ±(99.9%) 63.737 B/op [Average]
[info]   (min, avg, max) = (872.001, 900.513, 910.706), stdev = 16.552
[info]   CI (99.9%): [836.776, 964.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   530.013 ±(99.9%) 1140.894 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 530.013, 662.824), stdev = 296.287
[info]   CI (99.9%): [≈ 0, 1670.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1025.867 ±(99.9%) 2209.341 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1025.867, 1304.023), stdev = 573.759
[info]   CI (99.9%): [≈ 0, 3235.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.071 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.024 ±(99.9%) 0.138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.71% complete, ETA 00:58:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81484.298 ops/s
[info] # Warmup Iteration   2: 340370.091 ops/s
[info] # Warmup Iteration   3: 406990.375 ops/s
[info] # Warmup Iteration   4: 416666.987 ops/s
[info] # Warmup Iteration   5: 404468.420 ops/s
[info] Iteration   1: 413681.444 ops/s
[info]                  ·gc.alloc.rate:      347.025 MB/sec
[info]                  ·gc.alloc.rate.norm: 1320.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 416583.128 ops/s
[info]                  ·gc.alloc.rate:                   364.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              1376.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2501.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.118 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 412585.853 ops/s
[info]                  ·gc.alloc.rate:      349.826 MB/sec
[info]                  ·gc.alloc.rate.norm: 1334.384 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 417469.751 ops/s
[info]                  ·gc.alloc.rate:                   367.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              1385.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2496.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 419752.961 ops/s
[info]                  ·gc.alloc.rate:      352.061 MB/sec
[info]                  ·gc.alloc.rate.norm: 1320.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   416014.628 ±(99.9%) 11162.875 ops/s [Average]
[info]   (min, avg, max) = (412585.853, 416014.628, 419752.961), stdev = 2898.963
[info]   CI (99.9%): [404851.752, 427177.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   356.198 ±(99.9%) 35.531 MB/sec [Average]
[info]   (min, avg, max) = (347.025, 356.198, 367.627), stdev = 9.227
[info]   CI (99.9%): [320.667, 391.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1347.439 ±(99.9%) 122.131 B/op [Average]
[info]   (min, avg, max) = (1320.001, 1347.439, 1385.910), stdev = 31.717
[info]   CI (99.9%): [1225.307, 1469.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   264.869 ±(99.9%) 1396.578 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 264.869, 662.191), stdev = 362.687
[info]   CI (99.9%): [≈ 0, 1661.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   999.603 ±(99.9%) 5270.621 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 999.603, 2501.631), stdev = 1368.764
[info]   CI (99.9%): [≈ 0, 6270.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.031 ±(99.9%) 0.197 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.118), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 2.490
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.94% complete, ETA 00:58:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 269991.336 ops/s
[info] # Warmup Iteration   2: 974743.093 ops/s
[info] # Warmup Iteration   3: 1088675.107 ops/s
[info] # Warmup Iteration   4: 1086996.944 ops/s
[info] # Warmup Iteration   5: 1083774.221 ops/s
[info] Iteration   1: 1078065.541 ops/s
[info]                  ·gc.alloc.rate:               389.400 MB/sec
[info]                  ·gc.alloc.rate.norm:          568.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 746.859 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1081930.298 ops/s
[info]                  ·gc.alloc.rate:      374.010 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1081394.822 ops/s
[info]                  ·gc.alloc.rate:               391.593 MB/sec
[info]                  ·gc.alloc.rate.norm:          569.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 971.967 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1093014.230 ops/s
[info]                  ·gc.alloc.rate:      377.786 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 989966.532 ops/s
[info]                  ·gc.alloc.rate:                   359.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              571.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1061.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   1064874.285 ±(99.9%) 162696.802 ops/s [Average]
[info]   (min, avg, max) = (989966.532, 1064874.285, 1093014.230), stdev = 42251.843
[info]   CI (99.9%): [902177.483, 1227571.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   378.500 ±(99.9%) 49.609 MB/sec [Average]
[info]   (min, avg, max) = (359.711, 378.500, 391.593), stdev = 12.883
[info]   CI (99.9%): [328.891, 428.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   559.605 ±(99.9%) 55.021 B/op [Average]
[info]   (min, avg, max) = (544.000, 559.605, 571.638), stdev = 14.289
[info]   CI (99.9%): [504.584, 614.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   369.511 ±(99.9%) 1321.944 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.511, 668.110), stdev = 343.305
[info]   CI (99.9%): [≈ 0, 1691.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   556.112 ±(99.9%) 2004.088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 556.112, 1061.734), stdev = 520.455
[info]   CI (99.9%): [≈ 0, 2560.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 49.18% complete, ETA 00:58:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5640.485 ops/s
[info] # Warmup Iteration   2: 85539.737 ops/s
[info] # Warmup Iteration   3: 117098.083 ops/s
[info] # Warmup Iteration   4: 119659.890 ops/s
[info] # Warmup Iteration   5: 120072.489 ops/s
[info] Iteration   1: 123439.005 ops/s
[info]                  ·gc.alloc.rate:                   4067.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              51855.743 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4025.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51321.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.265 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 123642.369 ops/s
[info]                  ·gc.alloc.rate:                   4138.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              52671.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4042.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51452.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.265 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 121338.196 ops/s
[info]                  ·gc.alloc.rate:                   4067.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              52741.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4057.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52620.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.270 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 124755.097 ops/s
[info]                  ·gc.alloc.rate:                   4175.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              52681.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4067.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51316.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.525 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 123890.595 ops/s
[info]                  ·gc.alloc.rate:                   4149.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              52708.412 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4075.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51775.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.529 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   123413.052 ±(99.9%) 4865.933 ops/s [Average]
[info]   (min, avg, max) = (121338.196, 123413.052, 124755.097), stdev = 1263.667
[info]   CI (99.9%): [118547.119, 128278.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4119.571 ±(99.9%) 190.909 MB/sec [Average]
[info]   (min, avg, max) = (4067.334, 4119.571, 4175.731), stdev = 49.578
[info]   CI (99.9%): [3928.663, 4310.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52531.590 ±(99.9%) 1458.572 B/op [Average]
[info]   (min, avg, max) = (51855.743, 52531.590, 52741.350), stdev = 378.787
[info]   CI (99.9%): [51073.018, 53990.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4053.852 ±(99.9%) 77.665 MB/sec [Average]
[info]   (min, avg, max) = (4025.470, 4053.852, 4075.879), stdev = 20.169
[info]   CI (99.9%): [3976.187, 4131.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   51697.277 ±(99.9%) 2112.888 B/op [Average]
[info]   (min, avg, max) = (51316.172, 51697.277, 52620.185), stdev = 548.710
[info]   CI (99.9%): [49584.389, 53810.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.029, 0.042), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.371 ±(99.9%) 0.549 B/op [Average]
[info]   (min, avg, max) = (0.265, 0.371, 0.529), stdev = 0.143
[info]   CI (99.9%): [≈ 0, 0.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49.41% complete, ETA 00:57:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73230.076 ops/s
[info] # Warmup Iteration   2: 267347.755 ops/s
[info] # Warmup Iteration   3: 307796.234 ops/s
[info] # Warmup Iteration   4: 306393.715 ops/s
[info] # Warmup Iteration   5: 310789.000 ops/s
[info] Iteration   1: 309528.023 ops/s
[info]                  ·gc.alloc.rate:                   1813.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              9221.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6784.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.212 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 314606.116 ops/s
[info]                  ·gc.alloc.rate:                   1843.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              9221.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10014.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.987 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 311443.917 ops/s
[info]                  ·gc.alloc.rate:                   1823.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              9212.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10092.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.210 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 310741.898 ops/s
[info]                  ·gc.alloc.rate:                   1843.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              9337.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10105.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.105 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 312700.097 ops/s
[info]                  ·gc.alloc.rate:               1829.541 MB/sec
[info]                  ·gc.alloc.rate.norm:          9208.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6703.738 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   311804.010 ±(99.9%) 7479.730 ops/s [Average]
[info]   (min, avg, max) = (309528.023, 311804.010, 314606.116), stdev = 1942.462
[info]   CI (99.9%): [304324.280, 319283.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1830.596 ±(99.9%) 50.094 MB/sec [Average]
[info]   (min, avg, max) = (1813.483, 1830.596, 1843.517), stdev = 13.009
[info]   CI (99.9%): [1780.502, 1880.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9240.249 ±(99.9%) 210.057 B/op [Average]
[info]   (min, avg, max) = (9208.221, 9240.249, 9337.302), stdev = 54.551
[info]   CI (99.9%): [9030.191, 9450.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1732.053 ±(99.9%) 1402.377 MB/sec [Average]
[info]   (min, avg, max) = (1331.936, 1732.053, 2001.747), stdev = 364.193
[info]   CI (99.9%): [329.676, 3134.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8740.024 ±(99.9%) 7017.945 B/op [Average]
[info]   (min, avg, max) = (6703.738, 8740.024, 10105.106), stdev = 1822.538
[info]   CI (99.9%): [1722.079, 15757.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.900 ±(99.9%) 7.524 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.900, 4.395), stdev = 1.954
[info]   CI (99.9%): [≈ 0, 8.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.503 ±(99.9%) 37.638 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.503, 21.987), stdev = 9.774
[info]   CI (99.9%): [≈ 0, 42.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.510
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49.65% complete, ETA 00:57:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.593 ops/s
[info] # Warmup Iteration   2: 1870047.122 ops/s
[info] # Warmup Iteration   3: 1968460.826 ops/s
[info] # Warmup Iteration   4: 2032680.827 ops/s
[info] # Warmup Iteration   5: 1988958.368 ops/s
[info] Iteration   1: 2019827.897 ops/s
[info]                  ·gc.alloc.rate:               710.234 MB/sec
[info]                  ·gc.alloc.rate.norm:          553.185 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 517.254 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 2024433.759 ops/s
[info]                  ·gc.alloc.rate:               712.530 MB/sec
[info]                  ·gc.alloc.rate.norm:          553.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 516.080 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2040394.564 ops/s
[info]                  ·gc.alloc.rate:                   715.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              551.888 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     512.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2026044.829 ops/s
[info]                  ·gc.alloc.rate:               733.099 MB/sec
[info]                  ·gc.alloc.rate.norm:          569.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1032.863 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 1982494.557 ops/s
[info]                  ·gc.alloc.rate:               694.290 MB/sec
[info]                  ·gc.alloc.rate.norm:          551.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 528.049 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   2018639.121 ±(99.9%) 83247.955 ops/s [Average]
[info]   (min, avg, max) = (1982494.557, 2018639.121, 2040394.564), stdev = 21619.229
[info]   CI (99.9%): [1935391.167, 2101887.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   713.148 ±(99.9%) 53.373 MB/sec [Average]
[info]   (min, avg, max) = (694.290, 713.148, 733.099), stdev = 13.861
[info]   CI (99.9%): [659.775, 766.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   555.933 ±(99.9%) 29.450 B/op [Average]
[info]   (min, avg, max) = (551.174, 555.933, 569.477), stdev = 7.648
[info]   CI (99.9%): [526.483, 585.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   797.460 ±(99.9%) 1145.526 MB/sec [Average]
[info]   (min, avg, max) = (663.831, 797.460, 1329.625), stdev = 297.489
[info]   CI (99.9%): [≈ 0, 1942.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   621.360 ±(99.9%) 886.071 B/op [Average]
[info]   (min, avg, max) = (512.553, 621.360, 1032.863), stdev = 230.110
[info]   CI (99.9%): [≈ 0, 1507.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   ≈ 10⁻³ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.88% complete, ETA 00:57:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 623189.962 ops/s
[info] # Warmup Iteration   2: 1806222.989 ops/s
[info] # Warmup Iteration   3: 1868611.237 ops/s
[info] # Warmup Iteration   4: 1888505.266 ops/s
[info] # Warmup Iteration   5: 1895618.563 ops/s
[info] Iteration   1: 1917821.756 ops/s
[info]                  ·gc.alloc.rate:               674.446 MB/sec
[info]                  ·gc.alloc.rate.norm:          553.495 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 544.770 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1903244.287 ops/s
[info]                  ·gc.alloc.rate:                   663.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              548.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     549.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1900533.656 ops/s
[info]                  ·gc.alloc.rate:                   665.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              550.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     550.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1903057.722 ops/s
[info]                  ·gc.alloc.rate:               677.176 MB/sec
[info]                  ·gc.alloc.rate.norm:          560.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 550.665 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1874371.211 ops/s
[info]                  ·gc.alloc.rate:                   656.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              551.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     559.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1899805.726 ±(99.9%) 60713.951 ops/s [Average]
[info]   (min, avg, max) = (1874371.211, 1899805.726, 1917821.756), stdev = 15767.220
[info]   CI (99.9%): [1839091.775, 1960519.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   667.523 ±(99.9%) 31.894 MB/sec [Average]
[info]   (min, avg, max) = (656.797, 667.523, 677.176), stdev = 8.283
[info]   CI (99.9%): [635.629, 699.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   552.948 ±(99.9%) 16.623 B/op [Average]
[info]   (min, avg, max) = (548.732, 552.948, 560.050), stdev = 4.317
[info]   CI (99.9%): [536.325, 569.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   665.092 ±(99.9%) 3.182 MB/sec [Average]
[info]   (min, avg, max) = (663.814, 665.092, 665.827), stdev = 0.826
[info]   CI (99.9%): [661.910, 668.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   550.974 ±(99.9%) 19.802 B/op [Average]
[info]   (min, avg, max) = (544.770, 550.974, 559.075), stdev = 5.143
[info]   CI (99.9%): [531.172, 570.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.035), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.12% complete, ETA 00:57:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1148110.745 ops/s
[info] # Warmup Iteration   2: 2107647.647 ops/s
[info] # Warmup Iteration   3: 2285964.838 ops/s
[info] # Warmup Iteration   4: 2243835.732 ops/s
[info] # Warmup Iteration   5: 2282574.489 ops/s
[info] Iteration   1: 2291647.688 ops/s
[info]                  ·gc.alloc.rate:               802.249 MB/sec
[info]                  ·gc.alloc.rate.norm:          550.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 459.327 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 2282322.354 ops/s
[info]                  ·gc.alloc.rate:               790.447 MB/sec
[info]                  ·gc.alloc.rate.norm:          545.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 461.207 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2257610.557 ops/s
[info]                  ·gc.alloc.rate:                   799.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              557.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     466.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2280452.745 ops/s
[info]                  ·gc.alloc.rate:               795.694 MB/sec
[info]                  ·gc.alloc.rate.norm:          549.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 461.821 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2271709.438 ops/s
[info]                  ·gc.alloc.rate:                   790.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              547.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     463.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   2276748.556 ±(99.9%) 49403.480 ops/s [Average]
[info]   (min, avg, max) = (2257610.557, 2276748.556, 2291647.688), stdev = 12829.927
[info]   CI (99.9%): [2227345.076, 2326152.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   795.794 ±(99.9%) 20.481 MB/sec [Average]
[info]   (min, avg, max) = (790.447, 795.794, 802.249), stdev = 5.319
[info]   CI (99.9%): [775.313, 816.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   550.058 ±(99.9%) 18.166 B/op [Average]
[info]   (min, avg, max) = (545.083, 550.058, 557.630), stdev = 4.718
[info]   CI (99.9%): [531.892, 568.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   669.166 ±(99.9%) 1.143 MB/sec [Average]
[info]   (min, avg, max) = (668.815, 669.166, 669.638), stdev = 0.297
[info]   CI (99.9%): [668.024, 670.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   462.534 ±(99.9%) 10.520 B/op [Average]
[info]   (min, avg, max) = (459.327, 462.534, 466.486), stdev = 2.732
[info]   CI (99.9%): [452.014, 473.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.037 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.021), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.014), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 50.35% complete, ETA 00:56:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1285461.687 ops/s
[info] # Warmup Iteration   2: 2158496.394 ops/s
[info] # Warmup Iteration   3: 2381355.361 ops/s
[info] # Warmup Iteration   4: 2334376.165 ops/s
[info] # Warmup Iteration   5: 2350894.665 ops/s
[info] Iteration   1: 2352587.870 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2354082.753 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2360772.114 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2383316.284 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2385532.096 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   2367258.224 ±(99.9%) 61570.510 ops/s [Average]
[info]   (min, avg, max) = (2352587.870, 2367258.224, 2385532.096), stdev = 15989.666
[info]   CI (99.9%): [2305687.714, 2428828.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50.59% complete, ETA 00:56:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6204.136 ops/s
[info] # Warmup Iteration   2: 22817.840 ops/s
[info] # Warmup Iteration   3: 48039.706 ops/s
[info] # Warmup Iteration   4: 46435.837 ops/s
[info] # Warmup Iteration   5: 47260.449 ops/s
[info] Iteration   1: 46703.724 ops/s
[info]                  ·gc.alloc.rate:                   1866.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              62910.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67368.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 115.839 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 47585.156 ops/s
[info]                  ·gc.alloc.rate:                   1877.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              62084.656 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66033.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.378 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 47307.801 ops/s
[info]                  ·gc.alloc.rate:                   1866.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              62095.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66220.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.003 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 47081.334 ops/s
[info]                  ·gc.alloc.rate:               1838.729 MB/sec
[info]                  ·gc.alloc.rate.norm:          61464.468 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1326.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44357.778 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 47188.376 ops/s
[info]                  ·gc.alloc.rate:                   1854.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              61848.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66449.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.471 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   47173.278 ±(99.9%) 1243.141 ops/s [Average]
[info]   (min, avg, max) = (46703.724, 47173.278, 47585.156), stdev = 322.840
[info]   CI (99.9%): [45930.137, 48416.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1860.869 ±(99.9%) 57.305 MB/sec [Average]
[info]   (min, avg, max) = (1838.729, 1860.869, 1877.784), stdev = 14.882
[info]   CI (99.9%): [1803.564, 1918.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   62080.769 ±(99.9%) 2040.148 B/op [Average]
[info]   (min, avg, max) = (61464.468, 62080.769, 62910.778), stdev = 529.820
[info]   CI (99.9%): [60040.621, 64120.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1861.248 ±(99.9%) 1150.138 MB/sec [Average]
[info]   (min, avg, max) = (1326.977, 1861.248, 1999.159), stdev = 298.687
[info]   CI (99.9%): [711.110, 3011.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   62085.836 ±(99.9%) 38212.020 B/op [Average]
[info]   (min, avg, max) = (44357.778, 62085.836, 67368.370), stdev = 9923.540
[info]   CI (99.9%): [23873.815, 100297.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.025 ±(99.9%) 5.570 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.025, 3.438), stdev = 1.447
[info]   CI (99.9%): [≈ 0, 6.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   34.338 ±(99.9%) 187.636 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.338, 115.839), stdev = 48.728
[info]   CI (99.9%): [≈ 0, 221.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 14.000), stdev = 4.336
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50.82% complete, ETA 00:56:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5081.625 ops/s
[info] # Warmup Iteration   2: 12289.860 ops/s
[info] # Warmup Iteration   3: 15652.852 ops/s
[info] # Warmup Iteration   4: 17673.164 ops/s
[info] # Warmup Iteration   5: 17703.260 ops/s
[info] Iteration   1: 18359.124 ops/s
[info]                  ·gc.alloc.rate:                   2091.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              179243.679 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2529.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216859.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.321 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 284.707 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         29.000 ms
[info] Iteration   2: 18375.531 ops/s
[info]                  ·gc.alloc.rate:                   2308.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              197606.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1902.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162837.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.360 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 544.478 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 17523.711 ops/s
[info]                  ·gc.alloc.rate:                   2402.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              215658.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2536.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227711.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 371.183 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 17335.525 ops/s
[info]                  ·gc.alloc.rate:                   2412.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              218918.297 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2537.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230241.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      12.180 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1105.288 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         25.000 ms
[info] Iteration   5: 16183.439 ops/s
[info]                  ·gc.alloc.rate:                   2317.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              225317.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1912.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     185926.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.969 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 191.400 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   17555.466 ±(99.9%) 3471.038 ops/s [Average]
[info]   (min, avg, max) = (16183.439, 17555.466, 18375.531), stdev = 901.417
[info]   CI (99.9%): [14084.428, 21026.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   2306.441 ±(99.9%) 498.175 MB/sec [Average]
[info]   (min, avg, max) = (2091.100, 2306.441, 2412.468), stdev = 129.374
[info]   CI (99.9%): [1808.266, 2804.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   207348.982 ±(99.9%) 72311.369 B/op [Average]
[info]   (min, avg, max) = (179243.679, 207348.982, 225317.824), stdev = 18779.033
[info]   CI (99.9%): [135037.613, 279660.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2283.742 ±(99.9%) 1322.863 MB/sec [Average]
[info]   (min, avg, max) = (1902.213, 2283.742, 2537.250), stdev = 343.543
[info]   CI (99.9%): [960.879, 3606.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   204715.517 ±(99.9%) 112834.832 B/op [Average]
[info]   (min, avg, max) = (162837.953, 204715.517, 230241.598), stdev = 29302.848
[info]   CI (99.9%): [91880.686, 317550.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   5.593 ±(99.9%) 15.451 MB/sec [Average]
[info]   (min, avg, max) = (1.969, 5.593, 12.180), stdev = 4.012
[info]   CI (99.9%): [≈ 0, 21.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   499.412 ±(99.9%) 1397.058 B/op [Average]
[info]   (min, avg, max) = (191.400, 499.412, 1105.288), stdev = 362.812
[info]   CI (99.9%): [≈ 0, 1896.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   93.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (11.000, 18.600, 29.000), stdev = 8.173
[info]   CI (99.9%): [93.000, 93.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.06% complete, ETA 00:55:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29398.367 ops/s
[info] # Warmup Iteration   2: 74803.542 ops/s
[info] # Warmup Iteration   3: 101287.041 ops/s
[info] # Warmup Iteration   4: 111096.899 ops/s
[info] # Warmup Iteration   5: 109985.096 ops/s
[info] Iteration   1: 107797.993 ops/s
[info]                  ·gc.alloc.rate:                   1202.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              17553.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19315.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.304 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 105837.897 ops/s
[info]                  ·gc.alloc.rate:               1152.230 MB/sec
[info]                  ·gc.alloc.rate.norm:          17133.235 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9841.575 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 106063.415 ops/s
[info]                  ·gc.alloc.rate:                   1176.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              17453.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19681.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.927 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 106348.065 ops/s
[info]                  ·gc.alloc.rate:                   1173.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              17372.842 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19667.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.308 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 108965.963 ops/s
[info]                  ·gc.alloc.rate:                   1199.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              17314.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19232.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.973 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   107002.667 ±(99.9%) 5149.818 ops/s [Average]
[info]   (min, avg, max) = (105837.897, 107002.667, 108965.963), stdev = 1337.391
[info]   CI (99.9%): [101852.849, 112152.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1180.852 ±(99.9%) 79.461 MB/sec [Average]
[info]   (min, avg, max) = (1152.230, 1180.852, 1202.864), stdev = 20.636
[info]   CI (99.9%): [1101.391, 1260.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17365.429 ±(99.9%) 607.862 B/op [Average]
[info]   (min, avg, max) = (17133.235, 17365.429, 17553.639), stdev = 157.860
[info]   CI (99.9%): [16757.567, 17973.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1194.532 ±(99.9%) 1146.683 MB/sec [Average]
[info]   (min, avg, max) = (661.857, 1194.532, 1331.887), stdev = 297.790
[info]   CI (99.9%): [47.849, 2341.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17547.630 ±(99.9%) 16606.116 B/op [Average]
[info]   (min, avg, max) = (9841.575, 17547.630, 19681.126), stdev = 4312.556
[info]   CI (99.9%): [941.514, 34153.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.325 ±(99.9%) 2.577 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.325, 1.522), stdev = 0.669
[info]   CI (99.9%): [≈ 0, 2.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.702 ±(99.9%) 37.200 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.702, 21.973), stdev = 9.661
[info]   CI (99.9%): [≈ 0, 41.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.29% complete, ETA 00:55:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 129692.928 ops/s
[info] # Warmup Iteration   2: 234418.036 ops/s
[info] # Warmup Iteration   3: 278345.898 ops/s
[info] # Warmup Iteration   4: 275215.014 ops/s
[info] # Warmup Iteration   5: 271899.595 ops/s
[info] Iteration   1: 272409.763 ops/s
[info]                  ·gc.alloc.rate:               903.100 MB/sec
[info]                  ·gc.alloc.rate.norm:          5217.761 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3844.970 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 272815.165 ops/s
[info]                  ·gc.alloc.rate:               907.291 MB/sec
[info]                  ·gc.alloc.rate.norm:          5232.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3843.049 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 274782.658 ops/s
[info]                  ·gc.alloc.rate:                   940.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              5388.637 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7634.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.313 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 276254.231 ops/s
[info]                  ·gc.alloc.rate:                   913.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              5202.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3798.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.237 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 273434.910 ops/s
[info]                  ·gc.alloc.rate:               928.885 MB/sec
[info]                  ·gc.alloc.rate.norm:          5345.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3842.033 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   273939.345 ±(99.9%) 6066.362 ops/s [Average]
[info]   (min, avg, max) = (272409.763, 273939.345, 276254.231), stdev = 1575.415
[info]   CI (99.9%): [267872.983, 280005.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   918.700 ±(99.9%) 60.888 MB/sec [Average]
[info]   (min, avg, max) = (903.100, 918.700, 940.921), stdev = 15.812
[info]   CI (99.9%): [857.812, 979.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5277.455 ±(99.9%) 323.673 B/op [Average]
[info]   (min, avg, max) = (5202.062, 5277.455, 5388.637), stdev = 84.057
[info]   CI (99.9%): [4953.782, 5601.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   799.901 ±(99.9%) 1147.872 MB/sec [Average]
[info]   (min, avg, max) = (665.495, 799.901, 1333.155), stdev = 298.099
[info]   CI (99.9%): [≈ 0, 1947.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4592.793 ±(99.9%) 6548.907 B/op [Average]
[info]   (min, avg, max) = (3798.955, 4592.793, 7634.957), stdev = 1700.730
[info]   CI (99.9%): [≈ 0, 11141.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.019 ±(99.9%) 0.103 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.055), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.110 ±(99.9%) 0.589 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.110, 0.313), stdev = 0.153
[info]   CI (99.9%): [≈ 0, 0.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 8.000), stdev = 2.074
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51.53% complete, ETA 00:55:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1517.215 ops/s
[info] # Warmup Iteration   2: 9130.685 ops/s
[info] # Warmup Iteration   3: 14797.494 ops/s
[info] # Warmup Iteration   4: 17449.154 ops/s
[info] # Warmup Iteration   5: 17228.549 ops/s
[info] Iteration   1: 17517.099 ops/s
[info]                  ·gc.alloc.rate:                   2213.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              198843.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1964.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     176468.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.611 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 17403.049 ops/s
[info]                  ·gc.alloc.rate:                   2199.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              198865.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2631.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     237956.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.765 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 16806.924 ops/s
[info]                  ·gc.alloc.rate:                   2351.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              220155.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1979.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     185325.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 411.350 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 16760.192 ops/s
[info]                  ·gc.alloc.rate:                   2363.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              221957.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2638.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     247772.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 445.185 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 16653.256 ops/s
[info]                  ·gc.alloc.rate:               2183.450 MB/sec
[info]                  ·gc.alloc.rate.norm:          206354.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1981.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 187290.682 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   17028.104 ±(99.9%) 1541.350 ops/s [Average]
[info]   (min, avg, max) = (16653.256, 17028.104, 17517.099), stdev = 400.284
[info]   CI (99.9%): [15486.754, 18569.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2262.164 ±(99.9%) 338.269 MB/sec [Average]
[info]   (min, avg, max) = (2183.450, 2262.164, 2363.969), stdev = 87.847
[info]   CI (99.9%): [1923.895, 2600.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   209235.461 ±(99.9%) 43263.708 B/op [Average]
[info]   (min, avg, max) = (198843.701, 209235.461, 221957.644), stdev = 11235.448
[info]   CI (99.9%): [165971.753, 252499.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2239.059 ±(99.9%) 1392.461 MB/sec [Average]
[info]   (min, avg, max) = (1964.137, 2239.059, 2638.910), stdev = 361.618
[info]   CI (99.9%): [846.599, 3631.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   206962.728 ±(99.9%) 127872.862 B/op [Average]
[info]   (min, avg, max) = (176468.398, 206962.728, 247772.447), stdev = 33208.176
[info]   CI (99.9%): [79089.865, 334835.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.848 ±(99.9%) 9.572 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.848, 4.741), stdev = 2.486
[info]   CI (99.9%): [≈ 0, 11.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   173.182 ±(99.9%) 897.876 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 173.182, 445.185), stdev = 233.176
[info]   CI (99.9%): [≈ 0, 1071.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 10.200, 16.000), stdev = 4.324
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51.76% complete, ETA 00:55:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7251.715 ops/s
[info] # Warmup Iteration   2: 38409.236 ops/s
[info] # Warmup Iteration   3: 42134.868 ops/s
[info] # Warmup Iteration   4: 38802.234 ops/s
[info] # Warmup Iteration   5: 44278.427 ops/s
[info] Iteration   1: 44243.312 ops/s
[info]                  ·gc.alloc.rate:                   3453.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              122850.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3331.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118530.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.481 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 43632.468 ops/s
[info]                  ·gc.alloc.rate:                   3429.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              123712.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3343.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120581.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.253 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 43934.853 ops/s
[info]                  ·gc.alloc.rate:               3425.598 MB/sec
[info]                  ·gc.alloc.rate.norm:          122710.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3357.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 120256.218 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 43988.357 ops/s
[info]                  ·gc.alloc.rate:                   3483.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              124650.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3370.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120582.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.745 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 43627.446 ops/s
[info]                  ·gc.alloc.rate:                   3456.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              124691.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3381.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121972.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.751 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   43885.287 ±(99.9%) 1003.501 ops/s [Average]
[info]   (min, avg, max) = (43627.446, 43885.287, 44243.312), stdev = 260.606
[info]   CI (99.9%): [42881.786, 44888.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   3449.828 ±(99.9%) 90.511 MB/sec [Average]
[info]   (min, avg, max) = (3425.598, 3449.828, 3483.982), stdev = 23.505
[info]   CI (99.9%): [3359.317, 3540.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   123723.178 ±(99.9%) 3645.557 B/op [Average]
[info]   (min, avg, max) = (122710.605, 123723.178, 124691.838), stdev = 946.740
[info]   CI (99.9%): [120077.621, 127368.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   3356.662 ±(99.9%) 76.831 MB/sec [Average]
[info]   (min, avg, max) = (3331.767, 3356.662, 3381.169), stdev = 19.953
[info]   CI (99.9%): [3279.831, 3433.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   120384.677 ±(99.9%) 4737.515 B/op [Average]
[info]   (min, avg, max) = (118530.557, 120384.677, 121972.990), stdev = 1230.318
[info]   CI (99.9%): [115647.162, 125122.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.046 ±(99.9%) 3.288 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.046, 2.253), stdev = 0.854
[info]   CI (99.9%): [≈ 0, 4.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.00% complete, ETA 00:54:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33200.317 ops/s
[info] # Warmup Iteration   2: 107616.983 ops/s
[info] # Warmup Iteration   3: 133882.646 ops/s
[info] # Warmup Iteration   4: 146562.345 ops/s
[info] # Warmup Iteration   5: 146613.204 ops/s
[info] Iteration   1: 145591.996 ops/s
[info]                  ·gc.alloc.rate:               2009.067 MB/sec
[info]                  ·gc.alloc.rate.norm:          21718.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21664.407 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 144987.809 ops/s
[info]                  ·gc.alloc.rate:                   2006.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              21779.511 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21826.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.293 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 146860.773 ops/s
[info]                  ·gc.alloc.rate:                   2049.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              21960.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21591.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.669 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 144769.566 ops/s
[info]                  ·gc.alloc.rate:               1995.017 MB/sec
[info]                  ·gc.alloc.rate.norm:          21688.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14635.874 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 146971.560 ops/s
[info]                  ·gc.alloc.rate:                   2031.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              21752.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21658.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.223 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   145836.341 ±(99.9%) 3971.908 ops/s [Average]
[info]   (min, avg, max) = (144769.566, 145836.341, 146971.560), stdev = 1031.492
[info]   CI (99.9%): [141864.433, 149808.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2018.188 ±(99.9%) 83.913 MB/sec [Average]
[info]   (min, avg, max) = (1995.017, 2018.188, 2049.398), stdev = 21.792
[info]   CI (99.9%): [1934.275, 2102.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21779.785 ±(99.9%) 409.900 B/op [Average]
[info]   (min, avg, max) = (21688.599, 21779.785, 21960.020), stdev = 106.450
[info]   CI (99.9%): [21369.886, 22189.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1879.680 ±(99.9%) 1148.477 MB/sec [Average]
[info]   (min, avg, max) = (1346.275, 1879.680, 2022.257), stdev = 298.256
[info]   CI (99.9%): [731.203, 3028.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20275.411 ±(99.9%) 12144.097 B/op [Average]
[info]   (min, avg, max) = (14635.874, 20275.411, 21826.804), stdev = 3153.783
[info]   CI (99.9%): [8131.314, 32419.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.653 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.396), stdev = 0.170
[info]   CI (99.9%): [≈ 0, 0.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.037 ±(99.9%) 7.088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.037, 4.293), stdev = 1.841
[info]   CI (99.9%): [≈ 0, 8.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.24% complete, ETA 00:54:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 137640.884 ops/s
[info] # Warmup Iteration   2: 209635.602 ops/s
[info] # Warmup Iteration   3: 253483.294 ops/s
[info] # Warmup Iteration   4: 251513.446 ops/s
[info] # Warmup Iteration   5: 254003.598 ops/s
[info] Iteration   1: 253091.394 ops/s
[info]                  ·gc.alloc.rate:                   821.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              5111.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4163.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.178 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 253262.558 ops/s
[info]                  ·gc.alloc.rate:               824.774 MB/sec
[info]                  ·gc.alloc.rate.norm:          5124.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4160.375 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 253085.911 ops/s
[info]                  ·gc.alloc.rate:                   831.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              5171.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4163.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.146 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 252085.755 ops/s
[info]                  ·gc.alloc.rate:                   843.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              5266.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8363.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.179 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 253053.054 ops/s
[info]                  ·gc.alloc.rate:                   821.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              5110.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4167.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   252915.734 ±(99.9%) 1814.125 ops/s [Average]
[info]   (min, avg, max) = (252085.755, 252915.734, 253262.558), stdev = 471.122
[info]   CI (99.9%): [251101.609, 254729.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   828.742 ±(99.9%) 35.418 MB/sec [Average]
[info]   (min, avg, max) = (821.757, 828.742, 843.571), stdev = 9.198
[info]   CI (99.9%): [793.324, 864.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5157.172 ±(99.9%) 254.896 B/op [Average]
[info]   (min, avg, max) = (5110.960, 5157.172, 5266.948), stdev = 66.196
[info]   CI (99.9%): [4902.277, 5412.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   803.646 ±(99.9%) 1153.631 MB/sec [Average]
[info]   (min, avg, max) = (669.475, 803.646, 1339.576), stdev = 299.594
[info]   CI (99.9%): [≈ 0, 1957.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5003.717 ±(99.9%) 7232.882 B/op [Average]
[info]   (min, avg, max) = (4160.375, 5003.717, 8363.820), stdev = 1878.357
[info]   CI (99.9%): [≈ 0, 12236.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.018 ±(99.9%) 0.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.113 ±(99.9%) 0.303 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.113, 0.179), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 7.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52.47% complete, ETA 00:54:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 159734.844 ops/s
[info] # Warmup Iteration   2: 262793.146 ops/s
[info] # Warmup Iteration   3: 270054.956 ops/s
[info] # Warmup Iteration   4: 280428.905 ops/s
[info] # Warmup Iteration   5: 281298.059 ops/s
[info] Iteration   1: 281272.032 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 281113.272 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 281219.822 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 279300.809 ops/s
[info]                  ·gc.alloc.rate:      3.527 MB/sec
[info]                  ·gc.alloc.rate.norm: 19.875 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 281059.884 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   280793.164 ±(99.9%) 3228.624 ops/s [Average]
[info]   (min, avg, max) = (279300.809, 280793.164, 281272.032), stdev = 838.464
[info]   CI (99.9%): [277564.539, 284021.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.706 ±(99.9%) 6.073 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.706, 3.527), stdev = 1.577
[info]   CI (99.9%): [≈ 0, 6.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3.976 ±(99.9%) 34.223 B/op [Average]
[info]   (min, avg, max) = (0.002, 3.976, 19.875), stdev = 8.888
[info]   CI (99.9%): [≈ 0, 38.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52.71% complete, ETA 00:54:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16004.517 ops/s
[info] # Warmup Iteration   2: 49125.436 ops/s
[info] # Warmup Iteration   3: 54844.324 ops/s
[info] # Warmup Iteration   4: 60879.580 ops/s
[info] # Warmup Iteration   5: 61849.022 ops/s
[info] Iteration   1: 61169.877 ops/s
[info]                  ·gc.alloc.rate:                   3988.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              102623.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3999.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102903.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.142 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 61783.158 ops/s
[info]                  ·gc.alloc.rate:                   4040.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              102931.656 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4022.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102478.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.530 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 61531.630 ops/s
[info]                  ·gc.alloc.rate:                   4053.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              103672.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4042.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103393.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.532 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 61769.490 ops/s
[info]                  ·gc.alloc.rate:                   4040.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              102938.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3381.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86159.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.061 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 61559.526 ops/s
[info]                  ·gc.alloc.rate:               4055.332 MB/sec
[info]                  ·gc.alloc.rate.norm:          103680.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4067.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 103995.864 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   61562.736 ±(99.9%) 956.188 ops/s [Average]
[info]   (min, avg, max) = (61169.877, 61562.736, 61783.158), stdev = 248.319
[info]   CI (99.9%): [60606.549, 62518.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   4035.562 ±(99.9%) 104.507 MB/sec [Average]
[info]   (min, avg, max) = (3988.635, 4035.562, 4055.332), stdev = 27.140
[info]   CI (99.9%): [3931.055, 4140.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   103169.435 ±(99.9%) 1848.371 B/op [Average]
[info]   (min, avg, max) = (102623.967, 103169.435, 103680.988), stdev = 480.016
[info]   CI (99.9%): [101321.064, 105017.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   3902.759 ±(99.9%) 1126.116 MB/sec [Average]
[info]   (min, avg, max) = (3381.533, 3902.759, 4067.647), stdev = 292.449
[info]   CI (99.9%): [2776.643, 5028.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   99786.269 ±(99.9%) 29413.717 B/op [Average]
[info]   (min, avg, max) = (86159.335, 99786.269, 103995.864), stdev = 7638.649
[info]   CI (99.9%): [70372.552, 129199.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.853 ±(99.9%) 3.128 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.853, 2.142), stdev = 0.812
[info]   CI (99.9%): [≈ 0, 3.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 1.000
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52.94% complete, ETA 00:53:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2814.780 ops/s
[info] # Warmup Iteration   2: 17430.833 ops/s
[info] # Warmup Iteration   3: 32079.475 ops/s
[info] # Warmup Iteration   4: 34867.654 ops/s
[info] # Warmup Iteration   5: 37819.054 ops/s
[info] Iteration   1: 34659.101 ops/s
[info]                  ·gc.alloc.rate:                   2189.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              99440.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1961.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89085.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.465 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 293.550 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 36167.372 ops/s
[info]                  ·gc.alloc.rate:                   1739.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              75687.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1962.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85402.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.900 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 343.752 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 37943.785 ops/s
[info]                  ·gc.alloc.rate:                   1603.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              66514.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1305.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54158.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 141.256 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 37868.973 ops/s
[info]                  ·gc.alloc.rate:                   1647.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              68470.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1954.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81200.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.034 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 38035.143 ops/s
[info]                  ·gc.alloc.rate:                   1630.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              67430.717 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1302.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53860.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.446 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   36934.875 ±(99.9%) 5733.852 ops/s [Average]
[info]   (min, avg, max) = (34659.101, 36934.875, 38035.143), stdev = 1489.063
[info]   CI (99.9%): [31201.023, 42668.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1762.323 ±(99.9%) 941.239 MB/sec [Average]
[info]   (min, avg, max) = (1603.938, 1762.323, 2189.973), stdev = 244.437
[info]   CI (99.9%): [821.085, 2703.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   75508.773 ±(99.9%) 53370.801 B/op [Average]
[info]   (min, avg, max) = (66514.904, 75508.773, 99440.069), stdev = 13860.227
[info]   CI (99.9%): [22137.972, 128879.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1697.439 ±(99.9%) 1382.717 MB/sec [Average]
[info]   (min, avg, max) = (1302.217, 1697.439, 1962.681), stdev = 359.087
[info]   CI (99.9%): [314.721, 3080.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   72741.630 ±(99.9%) 66717.231 B/op [Average]
[info]   (min, avg, max) = (53860.769, 72741.630, 89085.400), stdev = 17326.253
[info]   CI (99.9%): [6024.399, 139458.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3.662 ±(99.9%) 13.471 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 3.662, 7.900), stdev = 3.498
[info]   CI (99.9%): [≈ 0, 17.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   160.207 ±(99.9%) 597.570 B/op [Average]
[info]   (min, avg, max) = (3.446, 160.207, 343.752), stdev = 155.187
[info]   CI (99.9%): [≈ 0, 757.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.600, 19.000), stdev = 6.693
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.18% complete, ETA 00:53:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1531.427 ops/s
[info] # Warmup Iteration   2: 26487.198 ops/s
[info] # Warmup Iteration   3: 45273.099 ops/s
[info] # Warmup Iteration   4: 46268.253 ops/s
[info] # Warmup Iteration   5: 37085.280 ops/s
[info] Iteration   1: 38025.247 ops/s
[info]                  ·gc.alloc.rate:                   1197.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              49576.462 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54617.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.933 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 38052.130 ops/s
[info]                  ·gc.alloc.rate:               1197.580 MB/sec
[info]                  ·gc.alloc.rate.norm:          49518.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1320.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54606.732 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 38077.109 ops/s
[info]                  ·gc.alloc.rate:                   1201.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              49646.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54627.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.860 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 38084.987 ops/s
[info]                  ·gc.alloc.rate:               1175.077 MB/sec
[info]                  ·gc.alloc.rate.norm:          48559.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27362.295 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 38037.893 ops/s
[info]                  ·gc.alloc.rate:                   1201.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              49700.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54862.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.307 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   38055.473 ±(99.9%) 97.662 ops/s [Average]
[info]   (min, avg, max) = (38025.247, 38055.473, 38084.987), stdev = 25.363
[info]   CI (99.9%): [37957.811, 38153.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1194.656 ±(99.9%) 42.784 MB/sec [Average]
[info]   (min, avg, max) = (1175.077, 1194.656, 1201.747), stdev = 11.111
[info]   CI (99.9%): [1151.872, 1237.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   49400.176 ±(99.9%) 1830.028 B/op [Average]
[info]   (min, avg, max) = (48559.044, 49400.176, 49700.626), stdev = 475.253
[info]   CI (99.9%): [47570.148, 51230.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1190.105 ±(99.9%) 1136.536 MB/sec [Average]
[info]   (min, avg, max) = (662.138, 1190.105, 1326.561), stdev = 295.155
[info]   CI (99.9%): [53.569, 2326.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   49215.377 ±(99.9%) 47042.191 B/op [Average]
[info]   (min, avg, max) = (27362.295, 49215.377, 54862.541), stdev = 12216.708
[info]   CI (99.9%): [2173.186, 96257.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.412 ±(99.9%) 3.280 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.412, 1.933), stdev = 0.852
[info]   CI (99.9%): [≈ 0, 3.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17.040 ±(99.9%) 135.766 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.040, 80.031), stdev = 35.258
[info]   CI (99.9%): [≈ 0, 152.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.800, 4.000), stdev = 1.095
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.41% complete, ETA 00:53:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 242336.519 ops/s
[info] # Warmup Iteration   2: 583238.297 ops/s
[info] # Warmup Iteration   3: 649725.185 ops/s
[info] # Warmup Iteration   4: 663073.230 ops/s
[info] # Warmup Iteration   5: 662634.704 ops/s
[info] Iteration   1: 666855.089 ops/s
[info]                  ·gc.alloc.rate:               1764.121 MB/sec
[info]                  ·gc.alloc.rate.norm:          4163.371 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3163.277 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 646156.438 ops/s
[info]                  ·gc.alloc.rate:                   1725.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              4201.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4897.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.906 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.514 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 664668.450 ops/s
[info]                  ·gc.alloc.rate:                   1769.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              4189.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3165.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.197 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 648885.815 ops/s
[info]                  ·gc.alloc.rate:                   1754.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              4256.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4861.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 669839.715 ops/s
[info]                  ·gc.alloc.rate:                   1796.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              4220.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3139.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   659281.101 ±(99.9%) 42102.169 ops/s [Average]
[info]   (min, avg, max) = (646156.438, 659281.101, 669839.715), stdev = 10933.799
[info]   CI (99.9%): [617178.933, 701383.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1761.874 ±(99.9%) 98.941 MB/sec [Average]
[info]   (min, avg, max) = (1725.039, 1761.874, 1796.158), stdev = 25.695
[info]   CI (99.9%): [1662.933, 1860.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4206.200 ±(99.9%) 134.132 B/op [Average]
[info]   (min, avg, max) = (4163.371, 4206.200, 4256.311), stdev = 34.834
[info]   CI (99.9%): [4072.068, 4340.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1605.724 ±(99.9%) 1412.354 MB/sec [Average]
[info]   (min, avg, max) = (1336.278, 1605.724, 2010.545), stdev = 366.784
[info]   CI (99.9%): [193.370, 3018.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3845.541 ±(99.9%) 3634.717 B/op [Average]
[info]   (min, avg, max) = (3139.824, 3845.541, 4897.022), stdev = 943.924
[info]   CI (99.9%): [210.824, 7480.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.806 ±(99.9%) 6.674 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.806, 3.906), stdev = 1.733
[info]   CI (99.9%): [≈ 0, 7.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.962 ±(99.9%) 16.258 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.962, 9.514), stdev = 4.222
[info]   CI (99.9%): [≈ 0, 18.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 8.000), stdev = 2.588
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53.65% complete, ETA 00:53:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 528.672 ops/s
[info] # Warmup Iteration   2: 15812.067 ops/s
[info] # Warmup Iteration   3: 28444.805 ops/s
[info] # Warmup Iteration   4: 37028.406 ops/s
[info] # Warmup Iteration   5: 32498.245 ops/s
[info] Iteration   1: 33324.237 ops/s
[info]                  ·gc.alloc.rate:                   2296.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              108444.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94148.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 182.950 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 33302.628 ops/s
[info]                  ·gc.alloc.rate:                   2078.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              98226.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94336.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121.912 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 34528.131 ops/s
[info]                  ·gc.alloc.rate:                   2027.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              92431.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91004.931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.438 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 34542.350 ops/s
[info]                  ·gc.alloc.rate:                   2033.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              92601.218 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90968.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.897 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 34485.956 ops/s
[info]                  ·gc.alloc.rate:                   2013.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              91883.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91295.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.700 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   34036.661 ±(99.9%) 2543.672 ops/s [Average]
[info]   (min, avg, max) = (33302.628, 34036.661, 34542.350), stdev = 660.583
[info]   CI (99.9%): [31492.989, 36580.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2089.869 ±(99.9%) 453.975 MB/sec [Average]
[info]   (min, avg, max) = (2013.421, 2089.869, 2296.208), stdev = 117.896
[info]   CI (99.9%): [1635.893, 2543.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   96717.453 ±(99.9%) 27125.686 B/op [Average]
[info]   (min, avg, max) = (91883.062, 96717.453, 108444.872), stdev = 7044.454
[info]   CI (99.9%): [69591.767, 123843.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1996.854 ±(99.9%) 9.753 MB/sec [Average]
[info]   (min, avg, max) = (1993.489, 1996.854, 2000.546), stdev = 2.533
[info]   CI (99.9%): [1987.100, 2006.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   92350.583 ±(99.9%) 6672.155 B/op [Average]
[info]   (min, avg, max) = (90968.050, 92350.583, 94336.265), stdev = 1732.737
[info]   CI (99.9%): [85678.428, 99022.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.370 ±(99.9%) 6.766 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.370, 3.874), stdev = 1.757
[info]   CI (99.9%): [≈ 0, 8.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   64.579 ±(99.9%) 320.008 B/op [Average]
[info]   (min, avg, max) = (1.897, 64.579, 182.950), stdev = 83.105
[info]   CI (99.9%): [≈ 0, 384.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 11.000), stdev = 2.608
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53.88% complete, ETA 00:52:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10482.788 ops/s
[info] # Warmup Iteration   2: 87923.719 ops/s
[info] # Warmup Iteration   3: 82322.844 ops/s
[info] # Warmup Iteration   4: 93203.718 ops/s
[info] # Warmup Iteration   5: 95624.788 ops/s
[info] Iteration   1: 93110.431 ops/s
[info]                  ·gc.alloc.rate:                   2084.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              35229.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33803.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74.467 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 94591.119 ops/s
[info]                  ·gc.alloc.rate:                   2118.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              35249.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2658.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44225.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.156 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 95915.762 ops/s
[info]                  ·gc.alloc.rate:                   2129.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              34948.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32699.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.342 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 96085.235 ops/s
[info]                  ·gc.alloc.rate:               2133.099 MB/sec
[info]                  ·gc.alloc.rate.norm:          34940.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1994.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32674.570 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 96693.813 ops/s
[info]                  ·gc.alloc.rate:               2159.667 MB/sec
[info]                  ·gc.alloc.rate.norm:          35152.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32566.055 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   95279.272 ±(99.9%) 5524.382 ops/s [Average]
[info]   (min, avg, max) = (93110.431, 95279.272, 96693.813), stdev = 1434.664
[info]   CI (99.9%): [89754.890, 100803.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2125.120 ±(99.9%) 105.365 MB/sec [Average]
[info]   (min, avg, max) = (2084.213, 2125.120, 2159.667), stdev = 27.363
[info]   CI (99.9%): [2019.755, 2230.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   35104.248 ±(99.9%) 578.063 B/op [Average]
[info]   (min, avg, max) = (34940.840, 35104.248, 35249.630), stdev = 150.121
[info]   CI (99.9%): [34526.185, 35682.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2129.265 ±(99.9%) 1138.565 MB/sec [Average]
[info]   (min, avg, max) = (1992.825, 2129.265, 2658.162), stdev = 295.682
[info]   CI (99.9%): [990.700, 3267.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   35193.574 ±(99.9%) 19537.221 B/op [Average]
[info]   (min, avg, max) = (32566.055, 35193.574, 44225.006), stdev = 5073.754
[info]   CI (99.9%): [15656.352, 54730.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.935 ±(99.9%) 7.481 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.935, 4.406), stdev = 1.943
[info]   CI (99.9%): [≈ 0, 8.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   15.793 ±(99.9%) 126.482 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.793, 74.467), stdev = 32.847
[info]   CI (99.9%): [≈ 0, 142.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 13.000), stdev = 3.912
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.12% complete, ETA 00:52:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73263.984 ops/s
[info] # Warmup Iteration   2: 215646.207 ops/s
[info] # Warmup Iteration   3: 233578.464 ops/s
[info] # Warmup Iteration   4: 247891.896 ops/s
[info] # Warmup Iteration   5: 246478.141 ops/s
[info] Iteration   1: 245721.738 ops/s
[info]                  ·gc.alloc.rate:                   1698.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              10879.218 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12834.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 251308.545 ops/s
[info]                  ·gc.alloc.rate:                   1708.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              10698.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8372.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.260 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.677 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 250649.792 ops/s
[info]                  ·gc.alloc.rate:                   1717.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              10782.433 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12553.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.569 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 252443.756 ops/s
[info]                  ·gc.alloc.rate:                   1727.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              10769.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8297.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.260 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 251000.053 ops/s
[info]                  ·gc.alloc.rate:               1731.880 MB/sec
[info]                  ·gc.alloc.rate.norm:          10858.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1997.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12522.929 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   250224.777 ±(99.9%) 10033.397 ops/s [Average]
[info]   (min, avg, max) = (245721.738, 250224.777, 252443.756), stdev = 2605.641
[info]   CI (99.9%): [240191.380, 260258.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1716.669 ±(99.9%) 52.479 MB/sec [Average]
[info]   (min, avg, max) = (1698.538, 1716.669, 1731.880), stdev = 13.629
[info]   CI (99.9%): [1664.190, 1769.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10797.721 ±(99.9%) 280.060 B/op [Average]
[info]   (min, avg, max) = (10698.841, 10797.721, 10879.218), stdev = 72.731
[info]   CI (99.9%): [10517.661, 11077.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1733.636 ±(99.9%) 1405.114 MB/sec [Average]
[info]   (min, avg, max) = (1330.863, 1733.636, 2003.818), stdev = 364.904
[info]   CI (99.9%): [328.523, 3138.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10916.198 ±(99.9%) 9085.044 B/op [Average]
[info]   (min, avg, max) = (8297.576, 10916.198, 12834.551), stdev = 2359.357
[info]   CI (99.9%): [1831.154, 20001.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.914 ±(99.9%) 7.211 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.914, 4.260), stdev = 1.873
[info]   CI (99.9%): [≈ 0, 8.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.728 ±(99.9%) 45.160 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.728, 26.677), stdev = 11.728
[info]   CI (99.9%): [≈ 0, 50.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 13.000), stdev = 4.062
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.35% complete, ETA 00:52:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 388646.164 ops/s
[info] # Warmup Iteration   2: 1040056.363 ops/s
[info] # Warmup Iteration   3: 1107190.305 ops/s
[info] # Warmup Iteration   4: 1111117.884 ops/s
[info] # Warmup Iteration   5: 1077365.901 ops/s
[info] Iteration   1: 1118870.399 ops/s
[info]                  ·gc.alloc.rate:                   963.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              1354.569 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1880.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1129934.132 ops/s
[info]                  ·gc.alloc.rate:               958.315 MB/sec
[info]                  ·gc.alloc.rate.norm:          1334.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 931.598 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1097342.067 ops/s
[info]                  ·gc.alloc.rate:               935.873 MB/sec
[info]                  ·gc.alloc.rate.norm:          1342.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 959.303 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1061584.983 ops/s
[info]                  ·gc.alloc.rate:                   912.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              1353.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1985.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1099421.661 ops/s
[info]                  ·gc.alloc.rate:                   926.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              1325.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     958.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1101430.649 ±(99.9%) 100505.182 ops/s [Average]
[info]   (min, avg, max) = (1061584.983, 1101430.649, 1129934.132), stdev = 26100.877
[info]   CI (99.9%): [1000925.466, 1201935.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   939.349 ±(99.9%) 82.347 MB/sec [Average]
[info]   (min, avg, max) = (912.615, 939.349, 963.406), stdev = 21.385
[info]   CI (99.9%): [857.002, 1021.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1342.105 ±(99.9%) 46.968 B/op [Average]
[info]   (min, avg, max) = (1325.779, 1342.105, 1354.569), stdev = 12.198
[info]   CI (99.9%): [1295.137, 1389.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   936.849 ±(99.9%) 1410.964 MB/sec [Average]
[info]   (min, avg, max) = (668.833, 936.849, 1338.919), stdev = 366.423
[info]   CI (99.9%): [≈ 0, 2347.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1343.095 ±(99.9%) 2078.476 B/op [Average]
[info]   (min, avg, max) = (931.598, 1343.095, 1985.098), stdev = 539.774
[info]   CI (99.9%): [≈ 0, 3421.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.018 ±(99.9%) 0.068 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.039), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.097 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.056), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.414
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54.59% complete, ETA 00:51:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 434420.324 ops/s
[info] # Warmup Iteration   2: 1081531.613 ops/s
[info] # Warmup Iteration   3: 1182370.491 ops/s
[info] # Warmup Iteration   4: 1178942.916 ops/s
[info] # Warmup Iteration   5: 1178658.707 ops/s
[info] Iteration   1: 1178515.213 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1177706.439 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1178084.264 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1177411.876 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1178488.837 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1178041.326 ±(99.9%) 1861.733 ops/s [Average]
[info]   (min, avg, max) = (1177411.876, 1178041.326, 1178515.213), stdev = 483.486
[info]   CI (99.9%): [1176179.593, 1179903.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54.82% complete, ETA 00:51:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16768.547 ops/s
[info] # Warmup Iteration   2: 188535.479 ops/s
[info] # Warmup Iteration   3: 205643.656 ops/s
[info] # Warmup Iteration   4: 233748.868 ops/s
[info] # Warmup Iteration   5: 235110.563 ops/s
[info] Iteration   1: 234899.671 ops/s
[info]                  ·gc.alloc.rate:                   2468.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              16541.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13429.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.208 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 238443.454 ops/s
[info]                  ·gc.alloc.rate:                   2517.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              16614.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17643.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.275 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 237331.298 ops/s
[info]                  ·gc.alloc.rate:               2504.890 MB/sec
[info]                  ·gc.alloc.rate.norm:          16609.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2677.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17754.579 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 237919.900 ops/s
[info]                  ·gc.alloc.rate:               2523.959 MB/sec
[info]                  ·gc.alloc.rate.norm:          16697.436 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13314.698 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 236089.464 ops/s
[info]                  ·gc.alloc.rate:               2532.697 MB/sec
[info]                  ·gc.alloc.rate.norm:          16884.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2691.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17944.834 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   236936.757 ±(99.9%) 5533.415 ops/s [Average]
[info]   (min, avg, max) = (234899.671, 236936.757, 238443.454), stdev = 1437.010
[info]   CI (99.9%): [231403.342, 242470.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2509.475 ±(99.9%) 95.905 MB/sec [Average]
[info]   (min, avg, max) = (2468.803, 2509.475, 2532.697), stdev = 24.906
[info]   CI (99.9%): [2413.570, 2605.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   16669.365 ±(99.9%) 508.917 B/op [Average]
[info]   (min, avg, max) = (16541.342, 16669.365, 16884.071), stdev = 132.164
[info]   CI (99.9%): [16160.449, 17178.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2411.860 ±(99.9%) 1418.080 MB/sec [Average]
[info]   (min, avg, max) = (2004.418, 2411.860, 2691.817), stdev = 368.271
[info]   CI (99.9%): [993.779, 3829.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   16017.413 ±(99.9%) 9308.560 B/op [Average]
[info]   (min, avg, max) = (13314.698, 16017.413, 17944.834), stdev = 2417.403
[info]   CI (99.9%): [6708.853, 25325.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.810 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.104, 0.479), stdev = 0.210
[info]   CI (99.9%): [≈ 0, 0.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.697 ±(99.9%) 5.425 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.697, 3.208), stdev = 1.409
[info]   CI (99.9%): [≈ 0, 6.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.06% complete, ETA 00:51:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3593.384 ops/s
[info] # Warmup Iteration   2: 29793.942 ops/s
[info] # Warmup Iteration   3: 60020.896 ops/s
[info] # Warmup Iteration   4: 63059.982 ops/s
[info] # Warmup Iteration   5: 51425.752 ops/s
[info] Iteration   1: 54020.840 ops/s
[info]                  ·gc.alloc.rate:                   1508.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              43939.777 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1985.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57816.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79.876 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 54486.488 ops/s
[info]                  ·gc.alloc.rate:                   1496.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              43234.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38234.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.601 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 52558.607 ops/s
[info]                  ·gc.alloc.rate:                   1437.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              43013.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39676.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.623 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 52813.019 ops/s
[info]                  ·gc.alloc.rate:                   1442.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              42991.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39542.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.241 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 52945.767 ops/s
[info]                  ·gc.alloc.rate:                   1440.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              42820.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39502.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.613 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   53364.944 ±(99.9%) 3232.345 ops/s [Average]
[info]   (min, avg, max) = (52558.607, 53364.944, 54486.488), stdev = 839.430
[info]   CI (99.9%): [50132.599, 56597.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1465.164 ±(99.9%) 133.517 MB/sec [Average]
[info]   (min, avg, max) = (1437.037, 1465.164, 1508.758), stdev = 34.674
[info]   CI (99.9%): [1331.647, 1598.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43199.980 ±(99.9%) 1690.509 B/op [Average]
[info]   (min, avg, max) = (42820.110, 43199.980, 43939.777), stdev = 439.020
[info]   CI (99.9%): [41509.472, 44890.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1458.077 ±(99.9%) 1134.783 MB/sec [Average]
[info]   (min, avg, max) = (1323.734, 1458.077, 1985.241), stdev = 294.700
[info]   CI (99.9%): [323.293, 2592.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   42954.700 ±(99.9%) 32069.896 B/op [Average]
[info]   (min, avg, max) = (38234.645, 42954.700, 57816.464), stdev = 8328.450
[info]   CI (99.9%): [10884.804, 75024.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.657 ±(99.9%) 4.547 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.657, 2.743), stdev = 1.181
[info]   CI (99.9%): [≈ 0, 5.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19.191 ±(99.9%) 132.363 B/op [Average]
[info]   (min, avg, max) = (0.601, 19.191, 79.876), stdev = 34.374
[info]   CI (99.9%): [≈ 0, 151.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 9.000), stdev = 1.304
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.29% complete, ETA 00:51:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 334214.701 ops/s
[info] # Warmup Iteration   2: 713071.112 ops/s
[info] # Warmup Iteration   3: 804831.148 ops/s
[info] # Warmup Iteration   4: 796663.663 ops/s
[info] # Warmup Iteration   5: 802308.919 ops/s
[info] Iteration   1: 802141.784 ops/s
[info]                  ·gc.alloc.rate:               1598.766 MB/sec
[info]                  ·gc.alloc.rate.norm:          3136.468 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2626.557 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 800682.114 ops/s
[info]                  ·gc.alloc.rate:                   1622.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              3188.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2633.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.082 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 806506.840 ops/s
[info]                  ·gc.alloc.rate:                   1620.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              3161.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3915.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.828 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 804102.362 ops/s
[info]                  ·gc.alloc.rate:               1632.551 MB/sec
[info]                  ·gc.alloc.rate.norm:          3195.475 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2612.900 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 807247.216 ops/s
[info]                  ·gc.alloc.rate:                   1631.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              3181.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3904.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   804136.063 ±(99.9%) 10755.625 ops/s [Average]
[info]   (min, avg, max) = (800682.114, 804136.063, 807247.216), stdev = 2793.202
[info]   CI (99.9%): [793380.438, 814891.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1621.210 ±(99.9%) 52.661 MB/sec [Average]
[info]   (min, avg, max) = (1598.766, 1621.210, 1632.551), stdev = 13.676
[info]   CI (99.9%): [1568.549, 1673.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3172.703 ±(99.9%) 91.681 B/op [Average]
[info]   (min, avg, max) = (3136.468, 3172.703, 3195.475), stdev = 23.809
[info]   CI (99.9%): [3081.022, 3264.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1604.588 ±(99.9%) 1406.294 MB/sec [Average]
[info]   (min, avg, max) = (1334.917, 1604.588, 2006.846), stdev = 365.210
[info]   CI (99.9%): [198.294, 3010.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3138.429 ±(99.9%) 2711.430 B/op [Average]
[info]   (min, avg, max) = (2612.900, 3138.429, 3915.464), stdev = 704.150
[info]   CI (99.9%): [426.999, 5849.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.810 ±(99.9%) 5.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.810, 3.095), stdev = 1.339
[info]   CI (99.9%): [≈ 0, 5.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.590 ±(99.9%) 10.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.590, 6.082), stdev = 2.631
[info]   CI (99.9%): [≈ 0, 11.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 8.000), stdev = 2.387
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55.53% complete, ETA 00:50:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1219.469 ops/s
[info] # Warmup Iteration   2: 12341.507 ops/s
[info] # Warmup Iteration   3: 45172.276 ops/s
[info] # Warmup Iteration   4: 51067.229 ops/s
[info] # Warmup Iteration   5: 48002.649 ops/s
[info] Iteration   1: 44156.884 ops/s
[info]                  ·gc.alloc.rate:                   2574.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              91780.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95232.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94.968 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 47361.435 ops/s
[info]                  ·gc.alloc.rate:                   2595.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              86248.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88742.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.692 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 47085.749 ops/s
[info]                  ·gc.alloc.rate:                   2550.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              85243.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67029.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.870 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 47547.631 ops/s
[info]                  ·gc.alloc.rate:                   2592.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              85809.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88695.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.689 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 47744.514 ops/s
[info]                  ·gc.alloc.rate:                   2600.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              85741.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2687.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88581.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.686 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   46779.243 ±(99.9%) 5721.748 ops/s [Average]
[info]   (min, avg, max) = (44156.884, 46779.243, 47744.514), stdev = 1485.920
[info]   CI (99.9%): [41057.495, 52500.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2582.871 ±(99.9%) 79.313 MB/sec [Average]
[info]   (min, avg, max) = (2550.420, 2582.871, 2600.957), stdev = 20.597
[info]   CI (99.9%): [2503.559, 2662.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   86964.644 ±(99.9%) 10457.688 B/op [Average]
[info]   (min, avg, max) = (85243.709, 86964.644, 91780.893), stdev = 2715.828
[info]   CI (99.9%): [76506.956, 97422.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2542.930 ±(99.9%) 1157.232 MB/sec [Average]
[info]   (min, avg, max) = (2005.456, 2542.930, 2687.129), stdev = 300.529
[info]   CI (99.9%): [1385.698, 3700.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   85656.200 ±(99.9%) 41561.473 B/op [Average]
[info]   (min, avg, max) = (67029.155, 85656.200, 95232.278), stdev = 10793.383
[info]   CI (99.9%): [44094.727, 127217.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.575 ±(99.9%) 4.503 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.575, 2.664), stdev = 1.170
[info]   CI (99.9%): [≈ 0, 5.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   20.381 ±(99.9%) 160.705 B/op [Average]
[info]   (min, avg, max) = (0.686, 20.381, 94.968), stdev = 41.735
[info]   CI (99.9%): [≈ 0, 181.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 9.000), stdev = 1.643
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.76% complete, ETA 00:50:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 158844.341 ops/s
[info] # Warmup Iteration   2: 343909.899 ops/s
[info] # Warmup Iteration   3: 403312.098 ops/s
[info] # Warmup Iteration   4: 404518.229 ops/s
[info] # Warmup Iteration   5: 403824.809 ops/s
[info] Iteration   1: 406065.567 ops/s
[info]                  ·gc.alloc.rate:               1042.915 MB/sec
[info]                  ·gc.alloc.rate.norm:          4042.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2568.907 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 404777.100 ops/s
[info]                  ·gc.alloc.rate:                   1071.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              4165.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5158.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 406431.516 ops/s
[info]                  ·gc.alloc.rate:                   1073.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              4157.355 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5146.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 406355.209 ops/s
[info]                  ·gc.alloc.rate:               1045.778 MB/sec
[info]                  ·gc.alloc.rate.norm:          4050.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2576.198 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 417997.972 ops/s
[info]                  ·gc.alloc.rate:                   1100.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              4145.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5019.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.138 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   408325.473 ±(99.9%) 20978.446 ops/s [Average]
[info]   (min, avg, max) = (404777.100, 408325.473, 417997.972), stdev = 5448.036
[info]   CI (99.9%): [387347.027, 429303.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1066.952 ±(99.9%) 91.256 MB/sec [Average]
[info]   (min, avg, max) = (1042.915, 1066.952, 1100.943), stdev = 23.699
[info]   CI (99.9%): [975.695, 1158.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4112.133 ±(99.9%) 232.686 B/op [Average]
[info]   (min, avg, max) = (4042.340, 4112.133, 4165.173), stdev = 60.428
[info]   CI (99.9%): [3879.447, 4344.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1063.394 ±(99.9%) 1404.150 MB/sec [Average]
[info]   (min, avg, max) = (662.773, 1063.394, 1333.059), stdev = 364.653
[info]   CI (99.9%): [≈ 0, 2467.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4093.784 ±(99.9%) 5351.474 B/op [Average]
[info]   (min, avg, max) = (2568.907, 4093.784, 5158.273), stdev = 1389.761
[info]   CI (99.9%): [≈ 0, 9445.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.009 ±(99.9%) 0.059 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.037), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.035 ±(99.9%) 0.223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.138), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.00% complete, ETA 00:50:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 578412.080 ops/s
[info] # Warmup Iteration   2: 1571220.602 ops/s
[info] # Warmup Iteration   3: 1528318.147 ops/s
[info] # Warmup Iteration   4: 1653948.045 ops/s
[info] # Warmup Iteration   5: 1651540.036 ops/s
[info] Iteration   1: 1657639.743 ops/s
[info]                  ·gc.alloc.rate:                   982.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              932.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     634.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1646325.581 ops/s
[info]                  ·gc.alloc.rate:               983.056 MB/sec
[info]                  ·gc.alloc.rate.norm:          939.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 639.372 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1609540.406 ops/s
[info]                  ·gc.alloc.rate:                   994.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              971.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1308.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1653629.519 ops/s
[info]                  ·gc.alloc.rate:               987.562 MB/sec
[info]                  ·gc.alloc.rate.norm:          939.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 637.185 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1571987.682 ops/s
[info]                  ·gc.alloc.rate:                   982.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              983.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1341.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   1627824.586 ±(99.9%) 140814.580 ops/s [Average]
[info]   (min, avg, max) = (1571987.682, 1627824.586, 1657639.743), stdev = 36569.099
[info]   CI (99.9%): [1487010.006, 1768639.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   986.002 ±(99.9%) 19.333 MB/sec [Average]
[info]   (min, avg, max) = (982.566, 986.002, 994.171), stdev = 5.021
[info]   CI (99.9%): [966.669, 1005.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   953.544 ±(99.9%) 86.589 B/op [Average]
[info]   (min, avg, max) = (932.998, 953.544, 983.389), stdev = 22.487
[info]   CI (99.9%): [866.955, 1040.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.146 ±(99.9%) 1414.134 MB/sec [Average]
[info]   (min, avg, max) = (668.462, 937.146, 1340.070), stdev = 367.246
[info]   CI (99.9%): [≈ 0, 2351.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   912.211 ±(99.9%) 1451.380 B/op [Average]
[info]   (min, avg, max) = (634.681, 912.211, 1341.192), stdev = 376.919
[info]   CI (99.9%): [≈ 0, 2363.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.018 ±(99.9%) 0.081 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.049), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.048), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56.24% complete, ETA 00:50:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 594073.936 ops/s
[info] # Warmup Iteration   2: 1597531.366 ops/s
[info] # Warmup Iteration   3: 1760167.832 ops/s
[info] # Warmup Iteration   4: 1758931.869 ops/s
[info] # Warmup Iteration   5: 1759581.482 ops/s
[info] Iteration   1: 1759700.119 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1759935.626 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1757768.343 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1759752.233 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1748139.425 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   1757059.149 ±(99.9%) 19498.671 ops/s [Average]
[info]   (min, avg, max) = (1748139.425, 1757059.149, 1759935.626), stdev = 5063.743
[info]   CI (99.9%): [1737560.478, 1776557.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56.47% complete, ETA 00:49:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20754.279 ops/s
[info] # Warmup Iteration   2: 322761.438 ops/s
[info] # Warmup Iteration   3: 344578.064 ops/s
[info] # Warmup Iteration   4: 365786.070 ops/s
[info] # Warmup Iteration   5: 371707.977 ops/s
[info] Iteration   1: 371321.416 ops/s
[info]                  ·gc.alloc.rate:                   2329.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              9872.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8508.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.558 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 364980.201 ops/s
[info]                  ·gc.alloc.rate:                   2315.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              9982.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8661.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.269 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 364029.683 ops/s
[info]                  ·gc.alloc.rate:                   2296.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              9926.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11596.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 364382.663 ops/s
[info]                  ·gc.alloc.rate:               2299.120 MB/sec
[info]                  ·gc.alloc.rate.norm:          9928.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8709.672 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 369897.453 ops/s
[info]                  ·gc.alloc.rate:               2345.987 MB/sec
[info]                  ·gc.alloc.rate.norm:          9981.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2020.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8596.814 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   366922.283 ±(99.9%) 13170.173 ops/s [Average]
[info]   (min, avg, max) = (364029.683, 366922.283, 371321.416), stdev = 3420.252
[info]   CI (99.9%): [353752.111, 380092.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2317.157 ±(99.9%) 80.224 MB/sec [Average]
[info]   (min, avg, max) = (2296.276, 2317.157, 2345.987), stdev = 20.834
[info]   CI (99.9%): [2236.933, 2397.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   9938.294 ±(99.9%) 177.302 B/op [Average]
[info]   (min, avg, max) = (9872.041, 9938.294, 9982.672), stdev = 46.045
[info]   CI (99.9%): [9760.991, 10115.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2147.265 ±(99.9%) 1152.295 MB/sec [Average]
[info]   (min, avg, max) = (2007.363, 2147.265, 2682.487), stdev = 299.247
[info]   CI (99.9%): [994.971, 3299.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9214.692 ±(99.9%) 5135.178 B/op [Average]
[info]   (min, avg, max) = (8508.652, 9214.692, 11596.476), stdev = 1333.589
[info]   CI (99.9%): [4079.514, 14349.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.373 ±(99.9%) 3.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.373, 1.783), stdev = 0.788
[info]   CI (99.9%): [≈ 0, 3.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.583 ±(99.9%) 12.867 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.583, 7.558), stdev = 3.341
[info]   CI (99.9%): [≈ 0, 14.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56.71% complete, ETA 00:49:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9218.251 ops/s
[info] # Warmup Iteration   2: 35449.954 ops/s
[info] # Warmup Iteration   3: 79097.751 ops/s
[info] # Warmup Iteration   4: 78153.093 ops/s
[info] # Warmup Iteration   5: 84019.928 ops/s
[info] Iteration   1: 88950.448 ops/s
[info]                  ·gc.alloc.rate:                   1773.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              31371.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23313.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.414 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 87509.024 ops/s
[info]                  ·gc.alloc.rate:                   1778.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              31987.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1977.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35558.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.840 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87.048 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 88093.868 ops/s
[info]                  ·gc.alloc.rate:                   1756.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              31374.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23516.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.744 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 87719.524 ops/s
[info]                  ·gc.alloc.rate:                   1752.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              31445.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1974.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35425.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.482 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 88553.679 ops/s
[info]                  ·gc.alloc.rate:                   1773.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              31507.162 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1976.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35114.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.075 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.636 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   88165.309 ±(99.9%) 2279.546 ops/s [Average]
[info]   (min, avg, max) = (87509.024, 88165.309, 88950.448), stdev = 591.991
[info]   CI (99.9%): [85885.762, 90444.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1766.748 ±(99.9%) 44.072 MB/sec [Average]
[info]   (min, avg, max) = (1752.819, 1766.748, 1778.591), stdev = 11.445
[info]   CI (99.9%): [1722.677, 1810.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31537.335 ±(99.9%) 992.879 B/op [Average]
[info]   (min, avg, max) = (31371.688, 31537.335, 31987.593), stdev = 257.848
[info]   CI (99.9%): [30544.456, 32530.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1712.385 ±(99.9%) 1389.782 MB/sec [Average]
[info]   (min, avg, max) = (1316.389, 1712.385, 1977.157), stdev = 360.922
[info]   CI (99.9%): [322.603, 3102.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   30586.006 ±(99.9%) 25215.006 B/op [Average]
[info]   (min, avg, max) = (23313.737, 30586.006, 35558.757), stdev = 6548.257
[info]   CI (99.9%): [5370.999, 55801.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.646 ±(99.9%) 8.480 MB/sec [Average]
[info]   (min, avg, max) = (0.023, 1.646, 4.840), stdev = 2.202
[info]   CI (99.9%): [≈ 0, 10.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   29.465 ±(99.9%) 152.117 B/op [Average]
[info]   (min, avg, max) = (0.414, 29.465, 87.048), stdev = 39.504
[info]   CI (99.9%): [≈ 0, 181.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.000, 14.000), stdev = 3.808
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.94% complete, ETA 00:49:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23158.706 ops/s
[info] # Warmup Iteration   2: 79424.801 ops/s
[info] # Warmup Iteration   3: 94193.453 ops/s
[info] # Warmup Iteration   4: 92971.664 ops/s
[info] # Warmup Iteration   5: 92615.528 ops/s
[info] Iteration   1: 92060.172 ops/s
[info]                  ·gc.alloc.rate:               1179.741 MB/sec
[info]                  ·gc.alloc.rate.norm:          20168.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11297.175 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 92572.236 ops/s
[info]                  ·gc.alloc.rate:                   1216.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              20678.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22487.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.416 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 92875.610 ops/s
[info]                  ·gc.alloc.rate:               1218.949 MB/sec
[info]                  ·gc.alloc.rate.norm:          20655.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1324.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22452.553 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 92941.414 ops/s
[info]                  ·gc.alloc.rate:                   1207.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              20453.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22481.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.973 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.479 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 93386.924 ops/s
[info]                  ·gc.alloc.rate:                   1192.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              20104.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11198.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.119 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.857 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   92767.271 ±(99.9%) 1890.407 ops/s [Average]
[info]   (min, avg, max) = (92060.172, 92767.271, 93386.924), stdev = 490.933
[info]   CI (99.9%): [90876.864, 94657.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1203.139 ±(99.9%) 63.716 MB/sec [Average]
[info]   (min, avg, max) = (1179.741, 1203.139, 1218.949), stdev = 16.547
[info]   CI (99.9%): [1139.423, 1266.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20412.132 ±(99.9%) 1028.531 B/op [Average]
[info]   (min, avg, max) = (20104.731, 20412.132, 20678.046), stdev = 267.106
[info]   CI (99.9%): [19383.601, 21440.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1060.100 ±(99.9%) 1397.150 MB/sec [Average]
[info]   (min, avg, max) = (660.804, 1060.100, 1327.588), stdev = 362.835
[info]   CI (99.9%): [≈ 0, 2457.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17983.327 ±(99.9%) 23676.564 B/op [Average]
[info]   (min, avg, max) = (11198.537, 17983.327, 22487.121), stdev = 6148.729
[info]   CI (99.9%): [≈ 0, 41659.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.435 ±(99.9%) 2.161 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.435, 1.119), stdev = 0.561
[info]   CI (99.9%): [≈ 0, 2.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.350 ±(99.9%) 36.480 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.350, 18.857), stdev = 9.474
[info]   CI (99.9%): [≈ 0, 43.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.18% complete, ETA 00:48:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32664.746 ops/s
[info] # Warmup Iteration   2: 89008.023 ops/s
[info] # Warmup Iteration   3: 93763.822 ops/s
[info] # Warmup Iteration   4: 105054.890 ops/s
[info] # Warmup Iteration   5: 104759.105 ops/s
[info] Iteration   1: 105169.852 ops/s
[info]                  ·gc.alloc.rate:                   1303.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              19499.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19807.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.623 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 103203.849 ops/s
[info]                  ·gc.alloc.rate:                   1261.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              19236.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10102.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 103627.676 ops/s
[info]                  ·gc.alloc.rate:                   1293.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              19651.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20138.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.302 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.151 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 104609.713 ops/s
[info]                  ·gc.alloc.rate:                   1292.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              19438.292 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19943.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.527 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 104926.588 ops/s
[info]                  ·gc.alloc.rate:                   1293.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              19405.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19853.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.498 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   104307.536 ±(99.9%) 3277.834 ops/s [Average]
[info]   (min, avg, max) = (103203.849, 104307.536, 105169.852), stdev = 851.243
[info]   CI (99.9%): [101029.701, 107585.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1288.853 ±(99.9%) 61.100 MB/sec [Average]
[info]   (min, avg, max) = (1261.545, 1288.853, 1303.066), stdev = 15.867
[info]   CI (99.9%): [1227.754, 1349.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   19446.317 ±(99.9%) 579.236 B/op [Average]
[info]   (min, avg, max) = (19236.576, 19446.317, 19651.072), stdev = 150.426
[info]   CI (99.9%): [18867.080, 20025.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1192.264 ±(99.9%) 1140.266 MB/sec [Average]
[info]   (min, avg, max) = (662.546, 1192.264, 1325.997), stdev = 296.124
[info]   CI (99.9%): [51.998, 2332.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   17969.075 ±(99.9%) 16939.829 B/op [Average]
[info]   (min, avg, max) = (10102.779, 17969.075, 20138.268), stdev = 4399.220
[info]   CI (99.9%): [1029.246, 34908.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.870 ±(99.9%) 5.391 MB/sec [Average]
[info]   (min, avg, max) = (0.008, 0.870, 3.302), stdev = 1.400
[info]   CI (99.9%): [≈ 0, 6.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13.184 ±(99.9%) 81.904 B/op [Average]
[info]   (min, avg, max) = (0.119, 13.184, 50.151), stdev = 21.270
[info]   CI (99.9%): [≈ 0, 95.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 9.000), stdev = 2.828
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57.41% complete, ETA 00:48:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2277.016 ops/s
[info] # Warmup Iteration   2: 34289.201 ops/s
[info] # Warmup Iteration   3: 59538.956 ops/s
[info] # Warmup Iteration   4: 55739.533 ops/s
[info] # Warmup Iteration   5: 55468.741 ops/s
[info] Iteration   1: 54882.447 ops/s
[info]                  ·gc.alloc.rate:                   2144.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              61499.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57394.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.057 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 55331.123 ops/s
[info]                  ·gc.alloc.rate:                   2152.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              61224.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57023.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.145 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 54983.507 ops/s
[info]                  ·gc.alloc.rate:                   2129.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              60949.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57460.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.979 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 55108.736 ops/s
[info]                  ·gc.alloc.rate:                   2132.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              60888.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57470.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.594 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 55536.528 ops/s
[info]                  ·gc.alloc.rate:                   2160.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              61230.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57142.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.590 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   55168.468 ±(99.9%) 1021.530 ops/s [Average]
[info]   (min, avg, max) = (54882.447, 55168.468, 55536.528), stdev = 265.288
[info]   CI (99.9%): [54146.938, 56189.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2143.803 ±(99.9%) 51.206 MB/sec [Average]
[info]   (min, avg, max) = (2129.335, 2143.803, 2160.672), stdev = 13.298
[info]   CI (99.9%): [2092.596, 2195.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   61158.477 ±(99.9%) 947.963 B/op [Average]
[info]   (min, avg, max) = (60888.410, 61158.477, 61499.492), stdev = 246.183
[info]   CI (99.9%): [60210.513, 62106.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2008.471 ±(99.9%) 23.057 MB/sec [Average]
[info]   (min, avg, max) = (2001.368, 2008.471, 2016.417), stdev = 5.988
[info]   CI (99.9%): [1985.414, 2031.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   57298.323 ±(99.9%) 781.723 B/op [Average]
[info]   (min, avg, max) = (57023.662, 57298.323, 57470.031), stdev = 203.011
[info]   CI (99.9%): [56516.601, 58080.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.254 ±(99.9%) 1.573 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.254, 0.978), stdev = 0.409
[info]   CI (99.9%): [≈ 0, 1.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.273 ±(99.9%) 45.131 B/op [Average]
[info]   (min, avg, max) = (0.590, 7.273, 28.057), stdev = 11.720
[info]   CI (99.9%): [≈ 0, 52.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57.65% complete, ETA 00:48:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45718.942 ops/s
[info] # Warmup Iteration   2: 150875.563 ops/s
[info] # Warmup Iteration   3: 151525.101 ops/s
[info] # Warmup Iteration   4: 167073.839 ops/s
[info] # Warmup Iteration   5: 165739.982 ops/s
[info] Iteration   1: 166962.960 ops/s
[info]                  ·gc.alloc.rate:               1573.775 MB/sec
[info]                  ·gc.alloc.rate.norm:          14835.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12583.816 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 166021.716 ops/s
[info]                  ·gc.alloc.rate:                   1554.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              14736.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12661.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.508 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 166518.413 ops/s
[info]                  ·gc.alloc.rate:                   1555.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              14701.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12611.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.870 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 166698.297 ops/s
[info]                  ·gc.alloc.rate:                   1581.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              14933.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18842.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.983 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 166554.865 ops/s
[info]                  ·gc.alloc.rate:                   1565.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              14794.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12563.827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.393 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   166551.250 ±(99.9%) 1323.617 ops/s [Average]
[info]   (min, avg, max) = (166021.716, 166551.250, 166962.960), stdev = 343.739
[info]   CI (99.9%): [165227.633, 167874.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1566.297 ±(99.9%) 44.998 MB/sec [Average]
[info]   (min, avg, max) = (1554.570, 1566.297, 1581.665), stdev = 11.686
[info]   CI (99.9%): [1521.298, 1611.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   14800.409 ±(99.9%) 347.873 B/op [Average]
[info]   (min, avg, max) = (14701.904, 14800.409, 14933.147), stdev = 90.341
[info]   CI (99.9%): [14452.537, 15148.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1466.081 ±(99.9%) 1140.090 MB/sec [Average]
[info]   (min, avg, max) = (1329.851, 1466.081, 1995.705), stdev = 296.078
[info]   CI (99.9%): [325.990, 2606.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   13852.515 ±(99.9%) 10741.743 B/op [Average]
[info]   (min, avg, max) = (12563.827, 13852.515, 18842.268), stdev = 2789.597
[info]   CI (99.9%): [3110.772, 24594.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.966 ±(99.9%) 6.348 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.966, 3.851), stdev = 1.649
[info]   CI (99.9%): [≈ 0, 7.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.151 ±(99.9%) 60.185 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.151, 36.508), stdev = 15.630
[info]   CI (99.9%): [≈ 0, 69.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 10.000), stdev = 3.317
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.88% complete, ETA 00:48:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 151928.811 ops/s
[info] # Warmup Iteration   2: 325700.022 ops/s
[info] # Warmup Iteration   3: 393063.252 ops/s
[info] # Warmup Iteration   4: 397007.730 ops/s
[info] # Warmup Iteration   5: 397179.673 ops/s
[info] Iteration   1: 401757.410 ops/s
[info]                  ·gc.alloc.rate:      498.268 MB/sec
[info]                  ·gc.alloc.rate.norm: 1952.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 394957.674 ops/s
[info]                  ·gc.alloc.rate:               512.708 MB/sec
[info]                  ·gc.alloc.rate.norm:          2042.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2642.563 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 400311.922 ops/s
[info]                  ·gc.alloc.rate:                   510.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              2006.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2607.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 403311.694 ops/s
[info]                  ·gc.alloc.rate:               524.298 MB/sec
[info]                  ·gc.alloc.rate.norm:          2045.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2592.989 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 386662.814 ops/s
[info]                  ·gc.alloc.rate:      515.154 MB/sec
[info]                  ·gc.alloc.rate.norm: 2096.899 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   397400.303 ±(99.9%) 26092.664 ops/s [Average]
[info]   (min, avg, max) = (386662.814, 397400.303, 403311.694), stdev = 6776.182
[info]   CI (99.9%): [371307.639, 423492.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   512.172 ±(99.9%) 36.151 MB/sec [Average]
[info]   (min, avg, max) = (498.268, 512.172, 524.298), stdev = 9.388
[info]   CI (99.9%): [476.021, 548.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2028.826 ±(99.9%) 206.556 B/op [Average]
[info]   (min, avg, max) = (1952.001, 2028.826, 2096.899), stdev = 53.642
[info]   CI (99.9%): [1822.270, 2235.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   398.196 ±(99.9%) 1399.716 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 398.196, 664.536), stdev = 363.502
[info]   CI (99.9%): [≈ 0, 1797.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1568.557 ±(99.9%) 5514.136 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1568.557, 2642.563), stdev = 1432.004
[info]   CI (99.9%): [≈ 0, 7082.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.005 ±(99.9%) 0.040 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.159 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.092), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.12% complete, ETA 00:47:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 495856.306 ops/s
[info] # Warmup Iteration   2: 898780.867 ops/s
[info] # Warmup Iteration   3: 978975.161 ops/s
[info] # Warmup Iteration   4: 967646.910 ops/s
[info] # Warmup Iteration   5: 936976.133 ops/s
[info] Iteration   1: 968312.604 ops/s
[info]                  ·gc.alloc.rate:                   1246.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              2025.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2175.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 987812.611 ops/s
[info]                  ·gc.alloc.rate:               1259.437 MB/sec
[info]                  ·gc.alloc.rate.norm:          2006.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2133.433 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 984877.153 ops/s
[info]                  ·gc.alloc.rate:                   1250.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              1997.236 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2141.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 967987.925 ops/s
[info]                  ·gc.alloc.rate:                   1228.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              1997.291 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2179.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.239 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.892 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 980453.820 ops/s
[info]                  ·gc.alloc.rate:                   1243.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              1994.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1072.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.167 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   977888.823 ±(99.9%) 35690.157 ops/s [Average]
[info]   (min, avg, max) = (967987.925, 977888.823, 987812.611), stdev = 9268.620
[info]   CI (99.9%): [942198.666, 1013578.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1245.517 ±(99.9%) 43.760 MB/sec [Average]
[info]   (min, avg, max) = (1228.404, 1245.517, 1259.437), stdev = 11.364
[info]   CI (99.9%): [1201.757, 1289.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2004.227 ±(99.9%) 48.963 B/op [Average]
[info]   (min, avg, max) = (1994.682, 2004.227, 2025.534), stdev = 12.716
[info]   CI (99.9%): [1955.264, 2053.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1205.436 ±(99.9%) 1155.971 MB/sec [Average]
[info]   (min, avg, max) = (668.421, 1205.436, 1340.918), stdev = 300.202
[info]   CI (99.9%): [49.465, 2361.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1940.453 ±(99.9%) 1869.805 B/op [Average]
[info]   (min, avg, max) = (1072.557, 1940.453, 2179.170), stdev = 485.582
[info]   CI (99.9%): [70.648, 3810.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.885 ±(99.9%) 7.220 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.885, 4.239), stdev = 1.875
[info]   CI (99.9%): [≈ 0, 8.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.439 ±(99.9%) 11.741 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.439, 6.892), stdev = 3.049
[info]   CI (99.9%): [≈ 0, 13.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 8.000), stdev = 2.510
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58.35% complete, ETA 00:47:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 397279.333 ops/s
[info] # Warmup Iteration   2: 970414.032 ops/s
[info] # Warmup Iteration   3: 955234.462 ops/s
[info] # Warmup Iteration   4: 940513.365 ops/s
[info] # Warmup Iteration   5: 955652.115 ops/s
[info] Iteration   1: 945670.533 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 953712.400 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 942594.641 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 953625.001 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 948773.066 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   948875.128 ±(99.9%) 18833.237 ops/s [Average]
[info]   (min, avg, max) = (942594.641, 948875.128, 953712.400), stdev = 4890.932
[info]   CI (99.9%): [930041.891, 967708.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58.59% complete, ETA 00:47:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69401.145 ops/s
[info] # Warmup Iteration   2: 172527.960 ops/s
[info] # Warmup Iteration   3: 221065.811 ops/s
[info] # Warmup Iteration   4: 312968.745 ops/s
[info] # Warmup Iteration   5: 310483.467 ops/s
[info] Iteration   1: 311414.780 ops/s
[info]                  ·gc.alloc.rate:               943.702 MB/sec
[info]                  ·gc.alloc.rate.norm:          4768.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3343.199 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 310598.342 ops/s
[info]                  ·gc.alloc.rate:               942.397 MB/sec
[info]                  ·gc.alloc.rate.norm:          4774.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3352.035 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 303871.534 ops/s
[info]                  ·gc.alloc.rate:                   953.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              4939.890 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6855.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.216 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 305262.104 ops/s
[info]                  ·gc.alloc.rate:               921.664 MB/sec
[info]                  ·gc.alloc.rate.norm:          4752.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3413.834 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 312753.655 ops/s
[info]                  ·gc.alloc.rate:                   975.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              4908.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6667.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.911 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   308780.083 ±(99.9%) 15221.859 ops/s [Average]
[info]   (min, avg, max) = (303871.534, 308780.083, 312753.655), stdev = 3953.068
[info]   CI (99.9%): [293558.224, 324001.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   947.470 ±(99.9%) 75.796 MB/sec [Average]
[info]   (min, avg, max) = (921.664, 947.470, 975.833), stdev = 19.684
[info]   CI (99.9%): [871.674, 1023.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4828.755 ±(99.9%) 340.091 B/op [Average]
[info]   (min, avg, max) = (4752.114, 4828.755, 4939.890), stdev = 88.321
[info]   CI (99.9%): [4488.663, 5168.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   926.887 ±(99.9%) 1397.789 MB/sec [Average]
[info]   (min, avg, max) = (661.618, 926.887, 1325.413), stdev = 363.001
[info]   CI (99.9%): [≈ 0, 2324.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4726.421 ±(99.9%) 7159.023 B/op [Average]
[info]   (min, avg, max) = (3343.199, 4726.421, 6855.761), stdev = 1859.176
[info]   CI (99.9%): [≈ 0, 11885.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.840 ±(99.9%) 7.141 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.840, 4.157), stdev = 1.855
[info]   CI (99.9%): [≈ 0, 7.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.225 ±(99.9%) 35.919 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.225, 20.911), stdev = 9.328
[info]   CI (99.9%): [≈ 0, 40.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 9.000), stdev = 2.074
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58.82% complete, ETA 00:47:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12760.220 ops/s
[info] # Warmup Iteration   2: 101658.357 ops/s
[info] # Warmup Iteration   3: 144140.711 ops/s
[info] # Warmup Iteration   4: 144909.204 ops/s
[info] # Warmup Iteration   5: 145720.613 ops/s
[info] Iteration   1: 147912.576 ops/s
[info]                  ·gc.alloc.rate:                   1833.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              19513.467 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14162.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.222 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 150105.675 ops/s
[info]                  ·gc.alloc.rate:                   1889.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              19814.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20855.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.218 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 150752.235 ops/s
[info]                  ·gc.alloc.rate:               1881.924 MB/sec
[info]                  ·gc.alloc.rate.norm:          19645.257 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1987.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20745.634 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 150920.544 ops/s
[info]                  ·gc.alloc.rate:               1862.433 MB/sec
[info]                  ·gc.alloc.rate.norm:          19417.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1326.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13830.780 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 150341.580 ops/s
[info]                  ·gc.alloc.rate:                   1867.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              19545.436 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20861.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.218 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   150006.522 ±(99.9%) 4675.889 ops/s [Average]
[info]   (min, avg, max) = (147912.576, 150006.522, 150920.544), stdev = 1214.314
[info]   CI (99.9%): [145330.633, 154682.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1867.085 ±(99.9%) 83.281 MB/sec [Average]
[info]   (min, avg, max) = (1833.797, 1867.085, 1889.911), stdev = 21.628
[info]   CI (99.9%): [1783.805, 1950.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19587.230 ±(99.9%) 579.865 B/op [Average]
[info]   (min, avg, max) = (19417.881, 19587.230, 19814.110), stdev = 150.589
[info]   CI (99.9%): [19007.364, 20167.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1725.434 ±(99.9%) 1394.521 MB/sec [Average]
[info]   (min, avg, max) = (1326.556, 1725.434, 1993.110), stdev = 362.153
[info]   CI (99.9%): [330.913, 3119.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   18091.195 ±(99.9%) 14401.822 B/op [Average]
[info]   (min, avg, max) = (13830.780, 18091.195, 20861.616), stdev = 3740.107
[info]   CI (99.9%): [3689.374, 32493.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.132 ±(99.9%) 0.462 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.132, 0.222), stdev = 0.120
[info]   CI (99.9%): [≈ 0, 0.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 5.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.06% complete, ETA 00:46:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52246.272 ops/s
[info] # Warmup Iteration   2: 162070.001 ops/s
[info] # Warmup Iteration   3: 194675.782 ops/s
[info] # Warmup Iteration   4: 206949.412 ops/s
[info] # Warmup Iteration   5: 206555.584 ops/s
[info] Iteration   1: 208156.114 ops/s
[info]                  ·gc.alloc.rate:               1166.143 MB/sec
[info]                  ·gc.alloc.rate.norm:          8817.157 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4981.131 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 204847.687 ops/s
[info]                  ·gc.alloc.rate:                   1172.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              9012.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10128.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 191694.005 ops/s
[info]                  ·gc.alloc.rate:                        1087.777 MB/sec
[info]                  ·gc.alloc.rate.norm:                   8931.039 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.022 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0.181 B/op
[info]                  ·gc.churn.Metaspace:                   0.060 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              0.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:               1102.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          9055.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           5.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      41.724 B/op
[info]                  ·gc.count:                             3.000 counts
[info]                  ·gc.time:                              43.000 ms
[info] Iteration   4: 203054.729 ops/s
[info]                  ·gc.alloc.rate:                   1164.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              9023.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10223.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.161 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 208260.489 ops/s
[info]                  ·gc.alloc.rate:                   1186.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              8963.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9947.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.157 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   203202.605 ±(99.9%) 26208.115 ops/s [Average]
[info]   (min, avg, max) = (191694.005, 203202.605, 208260.489), stdev = 6806.164
[info]   CI (99.9%): [176994.489, 229410.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1155.487 ±(99.9%) 149.560 MB/sec [Average]
[info]   (min, avg, max) = (1087.777, 1155.487, 1186.409), stdev = 38.840
[info]   CI (99.9%): [1005.928, 1305.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8949.543 ±(99.9%) 319.134 B/op [Average]
[info]   (min, avg, max) = (8817.157, 8949.543, 9023.639), stdev = 82.878
[info]   CI (99.9%): [8630.409, 9268.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space":
[info]   0.004 ±(99.9%) 0.038 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.022), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm":
[info]   0.036 ±(99.9%) 0.311 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.181), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.Metaspace":
[info]   0.012 ±(99.9%) 0.103 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.060), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.Metaspace.norm":
[info]   0.098 ±(99.9%) 0.848 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.098, 0.492), stdev = 0.220
[info]   CI (99.9%): [≈ 0, 0.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1143.094 ±(99.9%) 1102.425 MB/sec [Average]
[info]   (min, avg, max) = (658.796, 1143.094, 1318.957), stdev = 286.296
[info]   CI (99.9%): [40.669, 2245.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8867.100 ±(99.9%) 8552.778 B/op [Average]
[info]   (min, avg, max) = (4981.131, 8867.100, 10223.360), stdev = 2221.129
[info]   CI (99.9%): [314.322, 17419.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.025 ±(99.9%) 8.732 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.025, 5.082), stdev = 2.268
[info]   CI (99.9%): [≈ 0, 9.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.413 ±(99.9%) 71.707 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.413, 41.724), stdev = 18.622
[info]   CI (99.9%): [≈ 0, 80.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   63.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 12.600, 43.000), stdev = 17.184
[info]   CI (99.9%): [63.000, 63.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.29% complete, ETA 00:46:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 115289.194 ops/s
[info] # Warmup Iteration   2: 484875.227 ops/s
[info] # Warmup Iteration   3: 565765.927 ops/s
[info] # Warmup Iteration   4: 569213.360 ops/s
[info] # Warmup Iteration   5: 568052.330 ops/s
[info] Iteration   1: 567847.629 ops/s
[info]                  ·gc.alloc.rate:                   1136.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              3148.811 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3672.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.173 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 560978.319 ops/s
[info]                  ·gc.alloc.rate:               1114.614 MB/sec
[info]                  ·gc.alloc.rate.norm:          3126.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1861.394 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 547127.438 ops/s
[info]                  ·gc.alloc.rate:               1099.863 MB/sec
[info]                  ·gc.alloc.rate.norm:          3163.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3819.912 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   4: 549501.645 ops/s
[info]                  ·gc.alloc.rate:                   1105.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              3167.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3808.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.063 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 562924.384 ops/s
[info]                  ·gc.alloc.rate:                   1107.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              3096.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1859.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.804 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   557675.883 ±(99.9%) 34441.481 ops/s [Average]
[info]   (min, avg, max) = (547127.438, 557675.883, 567847.629), stdev = 8944.343
[info]   CI (99.9%): [523234.402, 592117.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1112.843 ±(99.9%) 54.851 MB/sec [Average]
[info]   (min, avg, max) = (1099.863, 1112.843, 1136.529), stdev = 14.245
[info]   CI (99.9%): [1057.992, 1167.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3140.522 ±(99.9%) 113.846 B/op [Average]
[info]   (min, avg, max) = (3096.053, 3140.522, 3167.289), stdev = 29.565
[info]   CI (99.9%): [3026.676, 3254.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1062.349 ±(99.9%) 1399.015 MB/sec [Average]
[info]   (min, avg, max) = (663.563, 1062.349, 1329.607), stdev = 363.320
[info]   CI (99.9%): [≈ 0, 2461.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3004.287 ±(99.9%) 4026.651 B/op [Average]
[info]   (min, avg, max) = (1859.676, 3004.287, 3819.912), stdev = 1045.709
[info]   CI (99.9%): [≈ 0, 7030.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.774 ±(99.9%) 5.249 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.774, 3.164), stdev = 1.363
[info]   CI (99.9%): [≈ 0, 6.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.208 ±(99.9%) 15.042 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.208, 9.063), stdev = 3.906
[info]   CI (99.9%): [≈ 0, 17.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 6.400, 9.000), stdev = 3.715
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59.53% complete, ETA 00:46:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3101.614 ops/s
[info] # Warmup Iteration   2: 62581.868 ops/s
[info] # Warmup Iteration   3: 99632.177 ops/s
[info] # Warmup Iteration   4: 100219.490 ops/s
[info] # Warmup Iteration   5: 99287.738 ops/s
[info] Iteration   1: 103876.078 ops/s
[info]                  ·gc.alloc.rate:                   3274.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              49605.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40421.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.523 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 101018.692 ops/s
[info]                  ·gc.alloc.rate:                   3190.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              49691.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3343.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52075.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.973 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 103996.657 ops/s
[info]                  ·gc.alloc.rate:                   3276.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              49584.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3355.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50775.435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.315 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 101046.318 ops/s
[info]                  ·gc.alloc.rate:               3206.453 MB/sec
[info]                  ·gc.alloc.rate.norm:          49942.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2693.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41958.396 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 102763.955 ops/s
[info]                  ·gc.alloc.rate:                   3300.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              50548.230 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3378.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51738.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.638 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   102540.340 ±(99.9%) 5614.079 ops/s [Average]
[info]   (min, avg, max) = (101018.692, 102540.340, 103996.657), stdev = 1457.959
[info]   CI (99.9%): [96926.261, 108154.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3249.704 ±(99.9%) 185.650 MB/sec [Average]
[info]   (min, avg, max) = (3190.483, 3249.704, 3300.520), stdev = 48.213
[info]   CI (99.9%): [3064.054, 3435.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   49874.490 ±(99.9%) 1550.245 B/op [Average]
[info]   (min, avg, max) = (49584.469, 49874.490, 50548.230), stdev = 402.594
[info]   CI (99.9%): [48324.245, 51424.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3087.842 ±(99.9%) 1431.623 MB/sec [Average]
[info]   (min, avg, max) = (2667.989, 3087.842, 3378.215), stdev = 371.788
[info]   CI (99.9%): [1656.219, 4519.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   47393.845 ±(99.9%) 21983.934 B/op [Average]
[info]   (min, avg, max) = (40421.846, 47393.845, 52075.403), stdev = 5709.158
[info]   CI (99.9%): [25409.911, 69377.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.250 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.167), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.890 ±(99.9%) 3.783 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.890, 2.523), stdev = 0.982
[info]   CI (99.9%): [≈ 0, 4.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 1.000
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59.76% complete, ETA 00:46:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48410.282 ops/s
[info] # Warmup Iteration   2: 207036.960 ops/s
[info] # Warmup Iteration   3: 225080.721 ops/s
[info] # Warmup Iteration   4: 242516.767 ops/s
[info] # Warmup Iteration   5: 238801.466 ops/s
[info] Iteration   1: 240735.279 ops/s
[info]                  ·gc.alloc.rate:               1530.550 MB/sec
[info]                  ·gc.alloc.rate.norm:          10006.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1326.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8671.064 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 239654.600 ops/s
[info]                  ·gc.alloc.rate:                   1530.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              10053.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13084.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.027 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 243117.600 ops/s
[info]                  ·gc.alloc.rate:                   1537.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              9950.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8598.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.603 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 237799.644 ops/s
[info]                  ·gc.alloc.rate:                   1495.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              9898.818 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8778.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.551 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 243963.398 ops/s
[info]                  ·gc.alloc.rate:                   1544.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              9962.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8553.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   241054.104 ±(99.9%) 9698.307 ops/s [Average]
[info]   (min, avg, max) = (237799.644, 241054.104, 243963.398), stdev = 2518.619
[info]   CI (99.9%): [231355.798, 250752.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1527.803 ±(99.9%) 72.679 MB/sec [Average]
[info]   (min, avg, max) = (1495.699, 1527.803, 1544.853), stdev = 18.875
[info]   CI (99.9%): [1455.123, 1600.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9974.228 ±(99.9%) 224.647 B/op [Average]
[info]   (min, avg, max) = (9898.818, 9974.228, 10053.063), stdev = 58.340
[info]   CI (99.9%): [9749.581, 10198.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1459.961 ±(99.9%) 1145.957 MB/sec [Average]
[info]   (min, avg, max) = (1326.330, 1459.961, 1992.324), stdev = 297.601
[info]   CI (99.9%): [314.004, 2605.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9537.281 ±(99.9%) 7642.167 B/op [Average]
[info]   (min, avg, max) = (8553.954, 9537.281, 13084.288), stdev = 1984.646
[info]   CI (99.9%): [1895.114, 17179.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.896 ±(99.9%) 5.542 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.896, 3.354), stdev = 1.439
[info]   CI (99.9%): [≈ 0, 6.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.863 ±(99.9%) 36.389 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.863, 22.027), stdev = 9.450
[info]   CI (99.9%): [≈ 0, 42.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 15.000), stdev = 5.413
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.00% complete, ETA 00:45:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 215200.179 ops/s
[info] # Warmup Iteration   2: 656680.557 ops/s
[info] # Warmup Iteration   3: 690945.081 ops/s
[info] # Warmup Iteration   4: 788453.784 ops/s
[info] # Warmup Iteration   5: 786628.276 ops/s
[info] Iteration   1: 780839.181 ops/s
[info]                  ·gc.alloc.rate:                   595.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              1199.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1331.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 778679.917 ops/s
[info]                  ·gc.alloc.rate:               592.902 MB/sec
[info]                  ·gc.alloc.rate.norm:          1198.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1337.700 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 766208.917 ops/s
[info]                  ·gc.alloc.rate:                   583.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              1197.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1359.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 767430.603 ops/s
[info]                  ·gc.alloc.rate:      569.562 MB/sec
[info]                  ·gc.alloc.rate.norm: 1168.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 784853.309 ops/s
[info]                  ·gc.alloc.rate:               600.090 MB/sec
[info]                  ·gc.alloc.rate.norm:          1203.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1329.795 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   775602.385 ±(99.9%) 32072.079 ops/s [Average]
[info]   (min, avg, max) = (766208.917, 775602.385, 784853.309), stdev = 8329.017
[info]   CI (99.9%): [743530.307, 807674.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   588.168 ±(99.9%) 46.570 MB/sec [Average]
[info]   (min, avg, max) = (569.562, 588.168, 600.090), stdev = 12.094
[info]   CI (99.9%): [541.598, 634.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1193.442 ±(99.9%) 55.418 B/op [Average]
[info]   (min, avg, max) = (1168.001, 1193.442, 1203.434), stdev = 14.392
[info]   CI (99.9%): [1138.025, 1248.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   529.455 ±(99.9%) 1139.697 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 529.455, 663.099), stdev = 295.976
[info]   CI (99.9%): [≈ 0, 1669.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1071.656 ±(99.9%) 2307.273 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1071.656, 1359.470), stdev = 599.191
[info]   CI (99.9%): [≈ 0, 3378.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.086), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.24% complete, ETA 00:45:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 768884.659 ops/s
[info] # Warmup Iteration   2: 1222012.259 ops/s
[info] # Warmup Iteration   3: 1352067.179 ops/s
[info] # Warmup Iteration   4: 1407138.911 ops/s
[info] # Warmup Iteration   5: 1395810.881 ops/s
[info] Iteration   1: 1398476.921 ops/s
[info]                  ·gc.alloc.rate:                   1078.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              1213.267 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1506.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1395707.559 ops/s
[info]                  ·gc.alloc.rate:               1053.932 MB/sec
[info]                  ·gc.alloc.rate.norm:          1188.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 754.866 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1393244.027 ops/s
[info]                  ·gc.alloc.rate:                   1068.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              1206.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1513.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1400427.626 ops/s
[info]                  ·gc.alloc.rate:               1066.670 MB/sec
[info]                  ·gc.alloc.rate.norm:          1198.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 753.133 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1411934.733 ops/s
[info]                  ·gc.alloc.rate:                   1085.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              1210.337 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1494.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.449 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1399958.173 ±(99.9%) 27834.055 ops/s [Average]
[info]   (min, avg, max) = (1393244.027, 1399958.173, 1411934.733), stdev = 7228.416
[info]   CI (99.9%): [1372124.119, 1427792.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1070.527 ±(99.9%) 46.609 MB/sec [Average]
[info]   (min, avg, max) = (1053.932, 1070.527, 1085.810), stdev = 12.104
[info]   CI (99.9%): [1023.918, 1117.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1203.484 ±(99.9%) 38.571 B/op [Average]
[info]   (min, avg, max) = (1188.421, 1203.484, 1213.267), stdev = 10.017
[info]   CI (99.9%): [1164.913, 1242.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1071.769 ±(99.9%) 1413.034 MB/sec [Average]
[info]   (min, avg, max) = (669.441, 1071.769, 1340.989), stdev = 366.960
[info]   CI (99.9%): [≈ 0, 2484.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1204.516 ±(99.9%) 1583.834 B/op [Average]
[info]   (min, avg, max) = (753.133, 1204.516, 1513.257), stdev = 411.317
[info]   CI (99.9%): [≈ 0, 2788.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.638 ±(99.9%) 5.287 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.638, 3.094), stdev = 1.373
[info]   CI (99.9%): [≈ 0, 5.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.711 ±(99.9%) 5.893 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.711, 3.449), stdev = 1.530
[info]   CI (99.9%): [≈ 0, 6.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60.47% complete, ETA 00:45:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 790551.796 ops/s
[info] # Warmup Iteration   2: 1294726.067 ops/s
[info] # Warmup Iteration   3: 1505173.162 ops/s
[info] # Warmup Iteration   4: 1502507.304 ops/s
[info] # Warmup Iteration   5: 1491701.177 ops/s
[info] Iteration   1: 1486792.211 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1493812.836 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1494710.797 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1492772.894 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1506531.593 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1494924.066 ±(99.9%) 27685.140 ops/s [Average]
[info]   (min, avg, max) = (1486792.211, 1494924.066, 1506531.593), stdev = 7189.743
[info]   CI (99.9%): [1467238.926, 1522609.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60.71% complete, ETA 00:44:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71928.104 ops/s
[info] # Warmup Iteration   2: 534435.383 ops/s
[info] # Warmup Iteration   3: 574269.960 ops/s
[info] # Warmup Iteration   4: 622523.873 ops/s
[info] # Warmup Iteration   5: 615570.167 ops/s
[info] Iteration   1: 620627.659 ops/s
[info]                  ·gc.alloc.rate:               1514.378 MB/sec
[info]                  ·gc.alloc.rate.norm:          3840.433 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3380.334 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 619552.194 ops/s
[info]                  ·gc.alloc.rate:                   1522.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              3868.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5092.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 621832.744 ops/s
[info]                  ·gc.alloc.rate:                   1520.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              3848.851 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3387.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.072 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.243 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 624346.020 ops/s
[info]                  ·gc.alloc.rate:               1525.176 MB/sec
[info]                  ·gc.alloc.rate.norm:          3844.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3375.277 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 620878.387 ops/s
[info]                  ·gc.alloc.rate:                   1528.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              3875.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3395.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   621447.401 ±(99.9%) 6978.607 ops/s [Average]
[info]   (min, avg, max) = (619552.194, 621447.401, 624346.020), stdev = 1812.322
[info]   CI (99.9%): [614468.794, 628426.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1522.380 ±(99.9%) 20.841 MB/sec [Average]
[info]   (min, avg, max) = (1514.378, 1522.380, 1528.877), stdev = 5.412
[info]   CI (99.9%): [1501.538, 1543.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   3855.646 ±(99.9%) 59.534 B/op [Average]
[info]   (min, avg, max) = (3840.433, 3855.646, 3875.632), stdev = 15.461
[info]   CI (99.9%): [3796.111, 3915.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1470.786 ±(99.9%) 1148.875 MB/sec [Average]
[info]   (min, avg, max) = (1332.949, 1470.786, 2004.487), stdev = 298.359
[info]   CI (99.9%): [321.911, 2619.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3726.005 ±(99.9%) 2940.720 B/op [Average]
[info]   (min, avg, max) = (3375.277, 3726.005, 5092.081), stdev = 763.696
[info]   CI (99.9%): [785.284, 6666.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.431 ±(99.9%) 3.533 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.431, 2.072), stdev = 0.917
[info]   CI (99.9%): [≈ 0, 3.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.091 ±(99.9%) 8.941 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.091, 5.243), stdev = 2.322
[info]   CI (99.9%): [≈ 0, 10.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.673
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 60.94% complete, ETA 00:44:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 172.877 ops/s
[info] # Warmup Iteration   2: 514.841 ops/s
[info] # Warmup Iteration   3: 884.281 ops/s
[info] # Warmup Iteration   4: 948.396 ops/s
[info] # Warmup Iteration   5: 942.142 ops/s
[info] Iteration   1: 951.555 ops/s
[info]                  ·gc.alloc.rate:                   2031.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              3359784.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1976.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3268539.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.420 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 948.410 ops/s
[info]                  ·gc.alloc.rate:                   2029.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              3366279.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1983.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3289921.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.529 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 861.415 ops/s
[info]                  ·gc.alloc.rate:                   2057.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              3758580.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3635347.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1102.404 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 894.441 ops/s
[info]                  ·gc.alloc.rate:                   2050.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              3608078.275 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3517708.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 840.501 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 912.760 ops/s
[info]                  ·gc.alloc.rate:                   1966.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              3390524.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3459841.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71.781 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   913.716 ±(99.9%) 145.910 ops/s [Average]
[info]   (min, avg, max) = (861.415, 913.716, 951.555), stdev = 37.892
[info]   CI (99.9%): [767.806, 1059.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   2027.324 ±(99.9%) 138.769 MB/sec [Average]
[info]   (min, avg, max) = (1966.685, 2027.324, 2057.982), stdev = 36.038
[info]   CI (99.9%): [1888.555, 2166.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3496649.564 ±(99.9%) 688864.374 B/op [Average]
[info]   (min, avg, max) = (3359784.807, 3496649.564, 3758580.510), stdev = 178895.890
[info]   CI (99.9%): [2807785.191, 4185513.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1991.354 ±(99.9%) 46.715 MB/sec [Average]
[info]   (min, avg, max) = (1976.758, 1991.354, 2006.892), stdev = 12.132
[info]   CI (99.9%): [1944.640, 2038.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3434271.550 ±(99.9%) 597629.880 B/op [Average]
[info]   (min, avg, max) = (3268539.160, 3434271.550, 3635347.304), stdev = 155202.582
[info]   CI (99.9%): [2836641.669, 4031901.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.233 ±(99.9%) 1.096 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.233, 0.604), stdev = 0.285
[info]   CI (99.9%): [≈ 0, 1.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   416.727 ±(99.9%) 1983.136 B/op [Average]
[info]   (min, avg, max) = (34.420, 416.727, 1102.404), stdev = 515.014
[info]   CI (99.9%): [≈ 0, 2399.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.18% complete, ETA 00:44:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 175.820 ops/s
[info] # Warmup Iteration   2: 597.854 ops/s
[info] # Warmup Iteration   3: 988.661 ops/s
[info] # Warmup Iteration   4: 984.694 ops/s
[info] # Warmup Iteration   5: 991.093 ops/s
[info] Iteration   1: 991.094 ops/s
[info]                  ·gc.alloc.rate:               2096.016 MB/sec
[info]                  ·gc.alloc.rate.norm:          3327613.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1983.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3149427.613 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 933.472 ops/s
[info]                  ·gc.alloc.rate:                   2056.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              3466670.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3358474.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.076 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1813.996 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 973.123 ops/s
[info]                  ·gc.alloc.rate:                   2112.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              3415988.600 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3229161.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.579 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 936.386 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 965.427 ops/s
[info]                  ·gc.alloc.rate:                   2076.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              3383947.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3266759.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.482 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 784.538 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 973.739 ops/s
[info]                  ·gc.alloc.rate:                   2076.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              3355660.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3248540.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100.928 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   967.371 ±(99.9%) 81.443 ops/s [Average]
[info]   (min, avg, max) = (933.472, 967.371, 991.094), stdev = 21.150
[info]   CI (99.9%): [885.928, 1048.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2083.692 ±(99.9%) 82.501 MB/sec [Average]
[info]   (min, avg, max) = (2056.498, 2083.692, 2112.743), stdev = 21.425
[info]   CI (99.9%): [2001.191, 2166.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3389976.309 ±(99.9%) 207914.164 B/op [Average]
[info]   (min, avg, max) = (3327613.782, 3389976.309, 3466670.895), stdev = 53994.648
[info]   CI (99.9%): [3182062.145, 3597890.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1997.657 ±(99.9%) 39.787 MB/sec [Average]
[info]   (min, avg, max) = (1983.779, 1997.657, 2009.944), stdev = 10.333
[info]   CI (99.9%): [1957.870, 2037.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3250472.672 ±(99.9%) 289424.098 B/op [Average]
[info]   (min, avg, max) = (3149427.613, 3250472.672, 3358474.415), stdev = 75162.519
[info]   CI (99.9%): [2961048.574, 3539896.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.440 ±(99.9%) 1.681 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.440, 1.076), stdev = 0.436
[info]   CI (99.9%): [≈ 0, 2.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   727.170 ±(99.9%) 2822.556 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 727.170, 1813.996), stdev = 733.009
[info]   CI (99.9%): [≈ 0, 3549.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.41% complete, ETA 00:44:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15573.118 ops/s
[info] # Warmup Iteration   2: 42417.361 ops/s
[info] # Warmup Iteration   3: 47715.210 ops/s
[info] # Warmup Iteration   4: 43168.072 ops/s
[info] # Warmup Iteration   5: 46017.255 ops/s
[info] Iteration   1: 45809.374 ops/s
[info]                  ·gc.alloc.rate:               820.750 MB/sec
[info]                  ·gc.alloc.rate.norm:          28199.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:      646.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22222.964 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 45315.827 ops/s
[info]                  ·gc.alloc.rate:                   826.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              28692.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1295.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44936.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.721 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 45194.960 ops/s
[info]                  ·gc.alloc.rate:               804.516 MB/sec
[info]                  ·gc.alloc.rate.norm:          28015.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:      650.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22652.415 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 46115.997 ops/s
[info]                  ·gc.alloc.rate:               823.150 MB/sec
[info]                  ·gc.alloc.rate.norm:          28093.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:      650.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22199.602 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 46052.307 ops/s
[info]                  ·gc.alloc.rate:               826.121 MB/sec
[info]                  ·gc.alloc.rate.norm:          28232.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:      652.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22299.713 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   45697.693 ±(99.9%) 1624.320 ops/s [Average]
[info]   (min, avg, max) = (45194.960, 45697.693, 46115.997), stdev = 421.831
[info]   CI (99.9%): [44073.373, 47322.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   820.297 ±(99.9%) 35.268 MB/sec [Average]
[info]   (min, avg, max) = (804.516, 820.297, 826.948), stdev = 9.159
[info]   CI (99.9%): [785.029, 855.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28246.825 ±(99.9%) 1015.480 B/op [Average]
[info]   (min, avg, max) = (28015.999, 28246.825, 28692.876), stdev = 263.717
[info]   CI (99.9%): [27231.345, 29262.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   779.073 ±(99.9%) 1110.787 MB/sec [Average]
[info]   (min, avg, max) = (646.812, 779.073, 1295.087), stdev = 288.468
[info]   CI (99.9%): [≈ 0, 1889.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   26862.140 ±(99.9%) 38911.671 B/op [Average]
[info]   (min, avg, max) = (22199.602, 26862.140, 44936.004), stdev = 10105.237
[info]   CI (99.9%): [≈ 0, 65773.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.144 ±(99.9%) 1.242 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.144, 0.721), stdev = 0.323
[info]   CI (99.9%): [≈ 0, 1.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 11.000), stdev = 2.608
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61.65% complete, ETA 00:43:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135.752 ops/s
[info] # Warmup Iteration   2: 475.834 ops/s
[info] # Warmup Iteration   3: 850.821 ops/s
[info] # Warmup Iteration   4: 907.688 ops/s
[info] # Warmup Iteration   5: 881.817 ops/s
[info] Iteration   1: 897.091 ops/s
[info]                  ·gc.alloc.rate:                   1972.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              3460012.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2328936.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.490 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 832.530 ops/s
[info]                  ·gc.alloc.rate:                   1826.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              3452408.845 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3775754.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2852.591 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 859.785 ops/s
[info]                  ·gc.alloc.rate:                   1956.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              3580966.409 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3664529.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 495.330 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 906.364 ops/s
[info]                  ·gc.alloc.rate:                   2013.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              3496441.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3481572.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.910 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1580.728 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 941.537 ops/s
[info]                  ·gc.alloc.rate:                   2057.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              3438022.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3361120.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 521.783 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   887.461 ±(99.9%) 162.888 ops/s [Average]
[info]   (min, avg, max) = (832.530, 887.461, 941.537), stdev = 42.302
[info]   CI (99.9%): [724.573, 1050.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1965.355 ±(99.9%) 334.155 MB/sec [Average]
[info]   (min, avg, max) = (1826.725, 1965.355, 2057.078), stdev = 86.779
[info]   CI (99.9%): [1631.199, 2299.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3485570.378 ±(99.9%) 221472.556 B/op [Average]
[info]   (min, avg, max) = (3438022.641, 3485570.378, 3580966.409), stdev = 57515.719
[info]   CI (99.9%): [3264097.822, 3707042.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1868.815 ±(99.9%) 1164.724 MB/sec [Average]
[info]   (min, avg, max) = (1327.800, 1868.815, 2011.065), stdev = 302.475
[info]   CI (99.9%): [704.091, 3033.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3322382.694 ±(99.9%) 2225715.728 B/op [Average]
[info]   (min, avg, max) = (2328936.339, 3322382.694, 3775754.756), stdev = 578011.307
[info]   CI (99.9%): [1096666.965, 5548098.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.605 ±(99.9%) 2.318 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.605, 1.509), stdev = 0.602
[info]   CI (99.9%): [≈ 0, 2.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1097.384 ±(99.9%) 4362.311 B/op [Average]
[info]   (min, avg, max) = (36.490, 1097.384, 2852.591), stdev = 1132.878
[info]   CI (99.9%): [≈ 0, 5459.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61.88% complete, ETA 00:43:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3626.475 ops/s
[info] # Warmup Iteration   2: 11432.241 ops/s
[info] # Warmup Iteration   3: 16295.995 ops/s
[info] # Warmup Iteration   4: 17069.605 ops/s
[info] # Warmup Iteration   5: 17128.406 ops/s
[info] Iteration   1: 17008.888 ops/s
[info]                  ·gc.alloc.rate:                   1279.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              118161.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1306.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120718.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.832 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 16598.060 ops/s
[info]                  ·gc.alloc.rate:               1243.064 MB/sec
[info]                  ·gc.alloc.rate.norm:          117864.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:      656.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62247.554 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 14978.792 ops/s
[info]                  ·gc.alloc.rate:                   1610.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              169191.777 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1973.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     207216.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 421.827 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   4: 15762.834 ops/s
[info]                  ·gc.alloc.rate:                   1654.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              165123.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131163.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.718 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 171.457 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 16583.297 ops/s
[info]                  ·gc.alloc.rate:                   1287.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              122160.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124544.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.534 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 620.071 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   16186.374 ±(99.9%) 3128.991 ops/s [Average]
[info]   (min, avg, max) = (14978.792, 16186.374, 17008.888), stdev = 812.589
[info]   CI (99.9%): [13057.383, 19315.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1415.011 ±(99.9%) 770.392 MB/sec [Average]
[info]   (min, avg, max) = (1243.064, 1415.011, 1654.545), stdev = 200.068
[info]   CI (99.9%): [644.619, 2185.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   138500.404 ±(99.9%) 101098.304 B/op [Average]
[info]   (min, avg, max) = (117864.221, 138500.404, 169191.777), stdev = 26254.908
[info]   CI (99.9%): [37402.101, 239598.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1312.613 ±(99.9%) 1792.396 MB/sec [Average]
[info]   (min, avg, max) = (656.499, 1312.613, 1973.041), stdev = 465.480
[info]   CI (99.9%): [≈ 0, 3105.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   129178.055 ±(99.9%) 198846.309 B/op [Average]
[info]   (min, avg, max) = (62247.554, 129178.055, 207216.424), stdev = 51639.755
[info]   CI (99.9%): [≈ 0, 328024.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2.462 ±(99.9%) 10.800 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.462, 6.534), stdev = 2.805
[info]   CI (99.9%): [≈ 0, 13.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   243.438 ±(99.9%) 1046.656 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 243.438, 620.071), stdev = 271.813
[info]   CI (99.9%): [≈ 0, 1290.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.400, 15.000), stdev = 4.561
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.12% complete, ETA 00:43:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4414.857 ops/s
[info] # Warmup Iteration   2: 15576.542 ops/s
[info] # Warmup Iteration   3: 17771.517 ops/s
[info] # Warmup Iteration   4: 19797.238 ops/s
[info] # Warmup Iteration   5: 19722.697 ops/s
[info] Iteration   1: 19682.330 ops/s
[info]                  ·gc.alloc.rate:                   1124.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              89847.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1313.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104953.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.664 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 18374.754 ops/s
[info]                  ·gc.alloc.rate:               1349.405 MB/sec
[info]                  ·gc.alloc.rate.norm:          115577.475 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1314.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 112571.577 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     14.000 ms
[info] Iteration   3: 17286.800 ops/s
[info]                  ·gc.alloc.rate:                   1301.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              118478.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119685.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 568.601 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 19092.785 ops/s
[info]                  ·gc.alloc.rate:                   1073.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              88474.436 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54142.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.493 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 370.258 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 19110.576 ops/s
[info]                  ·gc.alloc.rate:                   1087.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              89583.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107852.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   18709.449 ±(99.9%) 3545.051 ops/s [Average]
[info]   (min, avg, max) = (17286.800, 18709.449, 19682.330), stdev = 920.638
[info]   CI (99.9%): [15164.399, 22254.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1187.236 ±(99.9%) 495.053 MB/sec [Average]
[info]   (min, avg, max) = (1073.572, 1187.236, 1349.405), stdev = 128.564
[info]   CI (99.9%): [692.183, 1682.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   100392.532 ±(99.9%) 58643.637 B/op [Average]
[info]   (min, avg, max) = (88474.436, 100392.532, 118478.968), stdev = 15229.566
[info]   CI (99.9%): [41748.895, 159036.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1181.712 ±(99.9%) 1129.566 MB/sec [Average]
[info]   (min, avg, max) = (656.973, 1181.712, 1314.579), stdev = 293.345
[info]   CI (99.9%): [52.146, 2311.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   99841.122 ±(99.9%) 100681.684 B/op [Average]
[info]   (min, avg, max) = (54142.016, 99841.122, 119685.641), stdev = 26146.714
[info]   CI (99.9%): [≈ 0, 200522.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2.210 ±(99.9%) 11.366 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.210, 6.245), stdev = 2.952
[info]   CI (99.9%): [≈ 0, 13.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   192.905 ±(99.9%) 1009.492 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 192.905, 568.601), stdev = 262.162
[info]   CI (99.9%): [≈ 0, 1202.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.200, 14.000), stdev = 5.762
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.35% complete, ETA 00:43:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 162087.911 ops/s
[info] # Warmup Iteration   2: 329000.505 ops/s
[info] # Warmup Iteration   3: 342123.429 ops/s
[info] # Warmup Iteration   4: 342367.338 ops/s
[info] # Warmup Iteration   5: 346975.328 ops/s
[info] Iteration   1: 350514.363 ops/s
[info]                  ·gc.alloc.rate:               1255.869 MB/sec
[info]                  ·gc.alloc.rate.norm:          5639.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3000.239 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 314631.352 ops/s
[info]                  ·gc.alloc.rate:               1143.717 MB/sec
[info]                  ·gc.alloc.rate.norm:          5720.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6684.814 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   3: 337547.996 ops/s
[info]                  ·gc.alloc.rate:                   1229.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              5733.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6230.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.340 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 349344.085 ops/s
[info]                  ·gc.alloc.rate:                   1260.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              5677.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6023.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.850 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 343194.769 ops/s
[info]                  ·gc.alloc.rate:                   1236.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              5668.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3051.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.095 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   339046.513 ±(99.9%) 56234.737 ops/s [Average]
[info]   (min, avg, max) = (314631.352, 339046.513, 350514.363), stdev = 14603.983
[info]   CI (99.9%): [282811.776, 395281.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1225.106 ±(99.9%) 181.994 MB/sec [Average]
[info]   (min, avg, max) = (1143.717, 1225.106, 1260.057), stdev = 47.263
[info]   CI (99.9%): [1043.112, 1407.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5687.941 ±(99.9%) 149.652 B/op [Average]
[info]   (min, avg, max) = (5639.079, 5687.941, 5733.765), stdev = 38.864
[info]   CI (99.9%): [5538.289, 5837.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1068.673 ±(99.9%) 1412.550 MB/sec [Average]
[info]   (min, avg, max) = (665.477, 1068.673, 1336.896), stdev = 366.835
[info]   CI (99.9%): [≈ 0, 2481.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4998.219 ±(99.9%) 6993.631 B/op [Average]
[info]   (min, avg, max) = (3000.239, 4998.219, 6684.814), stdev = 1816.224
[info]   CI (99.9%): [≈ 0, 11991.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1.166 ±(99.9%) 9.841 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.166, 5.737), stdev = 2.556
[info]   CI (99.9%): [≈ 0, 11.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.257 ±(99.9%) 44.331 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.257, 25.850), stdev = 11.513
[info]   CI (99.9%): [≈ 0, 49.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 5.800, 9.000), stdev = 3.421
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62.59% complete, ETA 00:42:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 121898.750 ops/s
[info] # Warmup Iteration   2: 350797.827 ops/s
[info] # Warmup Iteration   3: 390376.818 ops/s
[info] # Warmup Iteration   4: 383557.862 ops/s
[info] # Warmup Iteration   5: 383652.985 ops/s
[info] Iteration   1: 382197.397 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 383041.697 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 384118.133 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 389558.717 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 389878.756 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   385758.940 ±(99.9%) 14170.610 ops/s [Average]
[info]   (min, avg, max) = (382197.397, 385758.940, 389878.756), stdev = 3680.062
[info]   CI (99.9%): [371588.330, 399929.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62.82% complete, ETA 00:42:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2055.068 ops/s
[info] # Warmup Iteration   2: 11276.746 ops/s
[info] # Warmup Iteration   3: 13514.355 ops/s
[info] # Warmup Iteration   4: 17993.592 ops/s
[info] # Warmup Iteration   5: 18603.490 ops/s
[info] Iteration   1: 19014.544 ops/s
[info]                  ·gc.alloc.rate:               1160.118 MB/sec
[info]                  ·gc.alloc.rate.norm:          96022.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1301.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 107735.698 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     12.000 ms
[info] Iteration   2: 19069.432 ops/s
[info]                  ·gc.alloc.rate:                   1340.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              110551.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1304.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107589.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.436 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 18250.201 ops/s
[info]                  ·gc.alloc.rate:                   1458.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              125730.296 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1306.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112653.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 572.744 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 17496.202 ops/s
[info]                  ·gc.alloc.rate:                   1490.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              134073.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1303.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117207.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.205 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.463 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 19178.459 ops/s
[info]                  ·gc.alloc.rate:                   1171.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              96111.258 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1301.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106814.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102.295 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   18601.768 ±(99.9%) 2768.411 ops/s [Average]
[info]   (min, avg, max) = (17496.202, 18601.768, 19178.459), stdev = 718.947
[info]   CI (99.9%): [15833.357, 21370.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1324.100 ±(99.9%) 597.262 MB/sec [Average]
[info]   (min, avg, max) = (1160.118, 1324.100, 1490.603), stdev = 155.107
[info]   CI (99.9%): [726.838, 1921.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   112497.608 ±(99.9%) 66258.871 B/op [Average]
[info]   (min, avg, max) = (96022.052, 112497.608, 134073.168), stdev = 17207.218
[info]   CI (99.9%): [46238.738, 178756.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1303.475 ±(99.9%) 7.970 MB/sec [Average]
[info]   (min, avg, max) = (1301.640, 1303.475, 1306.619), stdev = 2.070
[info]   CI (99.9%): [1295.505, 1311.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   110400.182 ±(99.9%) 17141.759 B/op [Average]
[info]   (min, avg, max) = (106814.592, 110400.182, 117207.535), stdev = 4451.660
[info]   CI (99.9%): [93258.423, 127541.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.627 ±(99.9%) 10.974 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.627, 6.643), stdev = 2.850
[info]   CI (99.9%): [≈ 0, 12.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   139.388 ±(99.9%) 946.562 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 139.388, 572.744), stdev = 245.819
[info]   CI (99.9%): [≈ 0, 1085.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 13.000), stdev = 4.336
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.06% complete, ETA 00:42:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 776635.397 ops/s
[info] # Warmup Iteration   2: 1245880.598 ops/s
[info] # Warmup Iteration   3: 1381671.837 ops/s
[info] # Warmup Iteration   4: 1402901.064 ops/s
[info] # Warmup Iteration   5: 1402720.404 ops/s
[info] Iteration   1: 1403489.458 ops/s
[info]                  ·gc.alloc.rate:      57.072 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1402295.766 ops/s
[info]                  ·gc.alloc.rate:      57.024 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1403420.416 ops/s
[info]                  ·gc.alloc.rate:      57.070 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1403692.708 ops/s
[info]                  ·gc.alloc.rate:      57.079 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1402893.257 ops/s
[info]                  ·gc.alloc.rate:      57.050 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   1403158.321 ±(99.9%) 2176.700 ops/s [Average]
[info]   (min, avg, max) = (1402295.766, 1403158.321, 1403692.708), stdev = 565.282
[info]   CI (99.9%): [1400981.621, 1405335.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   57.059 ±(99.9%) 0.087 MB/sec [Average]
[info]   (min, avg, max) = (57.024, 57.059, 57.079), stdev = 0.023
[info]   CI (99.9%): [56.972, 57.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   64.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (64.000, 64.000, 64.000), stdev = 0.001
[info]   CI (99.9%): [64.000, 64.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63.29% complete, ETA 00:41:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4351.133 ops/s
[info] # Warmup Iteration   2: 84200.591 ops/s
[info] # Warmup Iteration   3: 114235.054 ops/s
[info] # Warmup Iteration   4: 116391.872 ops/s
[info] # Warmup Iteration   5: 119766.954 ops/s
[info] Iteration   1: 119794.861 ops/s
[info]                  ·gc.alloc.rate:                   4225.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              55512.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4019.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52800.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.094 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 117079.723 ops/s
[info]                  ·gc.alloc.rate:                   4160.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              55912.736 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4039.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54276.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.280 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 119187.390 ops/s
[info]                  ·gc.alloc.rate:                   4259.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              56244.943 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4054.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53531.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.550 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 121923.536 ops/s
[info]                  ·gc.alloc.rate:               4354.653 MB/sec
[info]                  ·gc.alloc.rate.norm:          56212.153 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4066.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52492.002 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   5: 121932.371 ops/s
[info]                  ·gc.alloc.rate:                   4355.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              56207.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4075.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52590.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.806 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   119983.576 ±(99.9%) 7859.262 ops/s [Average]
[info]   (min, avg, max) = (117079.723, 119983.576, 121932.371), stdev = 2041.025
[info]   CI (99.9%): [112124.314, 127842.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4271.285 ±(99.9%) 324.953 MB/sec [Average]
[info]   (min, avg, max) = (4160.893, 4271.285, 4355.666), stdev = 84.389
[info]   CI (99.9%): [3946.332, 4596.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   56017.802 ±(99.9%) 1205.233 B/op [Average]
[info]   (min, avg, max) = (55512.173, 56017.802, 56244.943), stdev = 312.995
[info]   CI (99.9%): [54812.569, 57223.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4050.859 ±(99.9%) 86.158 MB/sec [Average]
[info]   (min, avg, max) = (4019.085, 4050.859, 4075.373), stdev = 22.375
[info]   CI (99.9%): [3964.701, 4137.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   53138.182 ±(99.9%) 2909.324 B/op [Average]
[info]   (min, avg, max) = (52492.002, 53138.182, 54276.679), stdev = 755.542
[info]   CI (99.9%): [50228.859, 56047.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.546 ±(99.9%) 1.653 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.546, 1.094), stdev = 0.429
[info]   CI (99.9%): [≈ 0, 2.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.53% complete, ETA 00:41:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 509657.649 ops/s
[info] # Warmup Iteration   2: 1916426.752 ops/s
[info] # Warmup Iteration   3: 2225827.475 ops/s
[info] # Warmup Iteration   4: 2232558.633 ops/s
[info] # Warmup Iteration   5: 2230100.322 ops/s
[info] Iteration   1: 2239708.580 ops/s
[info]                  ·gc.alloc.rate:      603.385 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2234104.153 ops/s
[info]                  ·gc.alloc.rate:               615.064 MB/sec
[info]                  ·gc.alloc.rate.norm:          433.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 467.154 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 2229306.627 ops/s
[info]                  ·gc.alloc.rate:               630.154 MB/sec
[info]                  ·gc.alloc.rate.norm:          444.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 468.903 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2229012.911 ops/s
[info]                  ·gc.alloc.rate:                   621.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              438.819 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     468.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2240530.072 ops/s
[info]                  ·gc.alloc.rate:                   618.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              434.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     467.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   2234532.469 ±(99.9%) 21154.178 ops/s [Average]
[info]   (min, avg, max) = (2229012.911, 2234532.469, 2240530.072), stdev = 5493.673
[info]   CI (99.9%): [2213378.291, 2255686.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   617.737 ±(99.9%) 37.638 MB/sec [Average]
[info]   (min, avg, max) = (603.385, 617.737, 630.154), stdev = 9.774
[info]   CI (99.9%): [580.099, 655.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   435.060 ±(99.9%) 29.617 B/op [Average]
[info]   (min, avg, max) = (424.000, 435.060, 444.870), stdev = 7.692
[info]   CI (99.9%): [405.443, 464.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   531.392 ±(99.9%) 1143.865 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.392, 665.246), stdev = 297.058
[info]   CI (99.9%): [≈ 0, 1675.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   374.448 ±(99.9%) 806.036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 374.448, 468.967), stdev = 209.325
[info]   CI (99.9%): [≈ 0, 1180.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.015 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.029), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.76% complete, ETA 00:41:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 986121.685 ops/s
[info] # Warmup Iteration   2: 1895077.873 ops/s
[info] # Warmup Iteration   3: 1947788.198 ops/s
[info] # Warmup Iteration   4: 1854823.675 ops/s
[info] # Warmup Iteration   5: 1947175.140 ops/s
[info] Iteration   1: 1942547.433 ops/s
[info]                  ·gc.alloc.rate:               549.596 MB/sec
[info]                  ·gc.alloc.rate.norm:          445.253 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 541.336 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1948678.100 ops/s
[info]                  ·gc.alloc.rate:               549.731 MB/sec
[info]                  ·gc.alloc.rate.norm:          443.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 539.634 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1909959.565 ops/s
[info]                  ·gc.alloc.rate:      514.630 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1901264.033 ops/s
[info]                  ·gc.alloc.rate:               537.884 MB/sec
[info]                  ·gc.alloc.rate.norm:          445.075 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 553.631 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1946711.098 ops/s
[info]                  ·gc.alloc.rate:               539.784 MB/sec
[info]                  ·gc.alloc.rate.norm:          436.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 540.728 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   1929832.046 ±(99.9%) 86378.194 ops/s [Average]
[info]   (min, avg, max) = (1901264.033, 1929832.046, 1948678.100), stdev = 22432.143
[info]   CI (99.9%): [1843453.852, 2016210.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   538.325 ±(99.9%) 55.164 MB/sec [Average]
[info]   (min, avg, max) = (514.630, 538.325, 549.731), stdev = 14.326
[info]   CI (99.9%): [483.161, 593.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   438.946 ±(99.9%) 35.109 B/op [Average]
[info]   (min, avg, max) = (424.000, 438.946, 445.253), stdev = 9.118
[info]   CI (99.9%): [403.837, 474.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   534.848 ±(99.9%) 1151.301 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.848, 669.076), stdev = 298.989
[info]   CI (99.9%): [≈ 0, 1686.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   435.066 ±(99.9%) 936.769 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 435.066, 553.631), stdev = 243.276
[info]   CI (99.9%): [≈ 0, 1371.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64.00% complete, ETA 00:41:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 994971.300 ops/s
[info] # Warmup Iteration   2: 1830043.377 ops/s
[info] # Warmup Iteration   3: 1948848.651 ops/s
[info] # Warmup Iteration   4: 1955067.590 ops/s
[info] # Warmup Iteration   5: 1955927.871 ops/s
[info] Iteration   1: 1955788.390 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1953668.656 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1954264.276 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1932114.300 ops/s
[info]                  ·gc.alloc.rate:      0.977 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.796 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1955025.360 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1950172.197 ±(99.9%) 38992.061 ops/s [Average]
[info]   (min, avg, max) = (1932114.300, 1950172.197, 1955788.390), stdev = 10126.115
[info]   CI (99.9%): [1911180.135, 1989164.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.196 ±(99.9%) 1.682 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.196, 0.977), stdev = 0.437
[info]   CI (99.9%): [≈ 0, 1.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.159 ±(99.9%) 1.370 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.159, 0.796), stdev = 0.356
[info]   CI (99.9%): [≈ 0, 1.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64.24% complete, ETA 00:40:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5626.675 ops/s
[info] # Warmup Iteration   2: 40071.747 ops/s
[info] # Warmup Iteration   3: 57122.505 ops/s
[info] # Warmup Iteration   4: 53002.091 ops/s
[info] # Warmup Iteration   5: 58757.065 ops/s
[info] Iteration   1: 59537.069 ops/s
[info]                  ·gc.alloc.rate:                   2072.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              54772.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52809.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40.114 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 59444.458 ops/s
[info]                  ·gc.alloc.rate:                   2074.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              54914.995 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52927.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.472 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 59407.452 ops/s
[info]                  ·gc.alloc.rate:                   2060.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              54597.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53013.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.860 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 59357.432 ops/s
[info]                  ·gc.alloc.rate:                   2055.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              54512.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53146.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.656 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 59245.204 ops/s
[info]                  ·gc.alloc.rate:                   2077.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              55189.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53379.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.553 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   59398.323 ±(99.9%) 415.529 ops/s [Average]
[info]   (min, avg, max) = (59245.204, 59398.323, 59537.069), stdev = 107.912
[info]   CI (99.9%): [58982.794, 59813.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2068.237 ±(99.9%) 36.004 MB/sec [Average]
[info]   (min, avg, max) = (2055.832, 2068.237, 2077.524), stdev = 9.350
[info]   CI (99.9%): [2032.233, 2104.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   54797.215 ±(99.9%) 1035.902 B/op [Average]
[info]   (min, avg, max) = (54512.175, 54797.215, 55189.298), stdev = 269.020
[info]   CI (99.9%): [53761.313, 55833.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2002.487 ±(99.9%) 17.390 MB/sec [Average]
[info]   (min, avg, max) = (1998.201, 2002.487, 2009.414), stdev = 4.516
[info]   CI (99.9%): [1985.097, 2019.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   53055.350 ±(99.9%) 844.809 B/op [Average]
[info]   (min, avg, max) = (52809.153, 53055.350, 53379.960), stdev = 219.394
[info]   CI (99.9%): [52210.541, 53900.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.428 ±(99.9%) 2.411 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.428, 1.518), stdev = 0.626
[info]   CI (99.9%): [≈ 0, 2.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11.331 ±(99.9%) 63.704 B/op [Average]
[info]   (min, avg, max) = (0.553, 11.331, 40.114), stdev = 16.544
[info]   CI (99.9%): [≈ 0, 75.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64.47% complete, ETA 00:40:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62814.817 ops/s
[info] # Warmup Iteration   2: 414994.792 ops/s
[info] # Warmup Iteration   3: 1081976.329 ops/s
[info] # Warmup Iteration   4: 1169308.272 ops/s
[info] # Warmup Iteration   5: 1204680.227 ops/s
[info] Iteration   1: 1214522.418 ops/s
[info]                  ·gc.alloc.rate:                   3500.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              4535.892 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3321.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4304.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.162 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1221720.317 ops/s
[info]                  ·gc.alloc.rate:                   3525.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              4538.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3993.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5141.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1224640.919 ops/s
[info]                  ·gc.alloc.rate:                   3554.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              4567.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3347.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4301.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1223953.925 ops/s
[info]                  ·gc.alloc.rate:                   3555.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              4571.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3363.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4325.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1224747.479 ops/s
[info]                  ·gc.alloc.rate:                   3558.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              4572.562 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3375.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4338.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   1221917.011 ±(99.9%) 16595.665 ops/s [Average]
[info]   (min, avg, max) = (1214522.418, 1221917.011, 1224747.479), stdev = 4309.842
[info]   CI (99.9%): [1205321.346, 1238512.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   3538.613 ±(99.9%) 97.532 MB/sec [Average]
[info]   (min, avg, max) = (3500.209, 3538.613, 3558.323), stdev = 25.329
[info]   CI (99.9%): [3441.081, 3636.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4557.265 ±(99.9%) 71.074 B/op [Average]
[info]   (min, avg, max) = (4535.892, 4557.265, 4572.562), stdev = 18.458
[info]   CI (99.9%): [4486.192, 4628.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3480.385 ±(99.9%) 1107.921 MB/sec [Average]
[info]   (min, avg, max) = (3321.428, 3480.385, 3993.787), stdev = 287.724
[info]   CI (99.9%): [2372.464, 4588.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4482.244 ±(99.9%) 1421.193 B/op [Average]
[info]   (min, avg, max) = (4301.639, 4482.244, 5141.919), stdev = 369.079
[info]   CI (99.9%): [3061.051, 5903.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.125), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.054 ±(99.9%) 0.233 B/op [Average]
[info]   (min, avg, max) = (0.027, 0.054, 0.162), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64.71% complete, ETA 00:40:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.547 ops/s
[info] # Warmup Iteration   2: 4367812.021 ops/s
[info] # Warmup Iteration   3: 4940890.218 ops/s
[info] # Warmup Iteration   4: 5321653.365 ops/s
[info] # Warmup Iteration   5: 5136239.183 ops/s
[info] Iteration   1: 5107868.836 ops/s
[info]                  ·gc.alloc.rate:                   325.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              100.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5136555.916 ops/s
[info]                  ·gc.alloc.rate:      313.289 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 5246218.170 ops/s
[info]                  ·gc.alloc.rate:               337.541 MB/sec
[info]                  ·gc.alloc.rate.norm:          101.258 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 198.841 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 5340702.421 ops/s
[info]                  ·gc.alloc.rate:      326.050 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.047 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 5328986.892 ops/s
[info]                  ·gc.alloc.rate:                   337.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              99.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   5232066.447 ±(99.9%) 412679.310 ops/s [Average]
[info]   (min, avg, max) = (5107868.836, 5232066.447, 5340702.421), stdev = 107171.506
[info]   CI (99.9%): [4819387.137, 5644745.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   327.908 ±(99.9%) 38.669 MB/sec [Average]
[info]   (min, avg, max) = (313.289, 327.908, 337.541), stdev = 10.042
[info]   CI (99.9%): [289.238, 366.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   98.635 ±(99.9%) 9.457 B/op [Average]
[info]   (min, avg, max) = (96.000, 98.635, 101.258), stdev = 2.456
[info]   CI (99.9%): [89.179, 108.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   367.460 ±(99.9%) 1313.363 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 367.460, 662.842), stdev = 341.076
[info]   CI (99.9%): [≈ 0, 1680.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   110.450 ±(99.9%) 393.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 110.450, 198.841), stdev = 102.124
[info]   CI (99.9%): [≈ 0, 503.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64.94% complete, ETA 00:40:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36725.048 ops/s
[info] # Warmup Iteration   2: 561528.800 ops/s
[info] # Warmup Iteration   3: 1052147.462 ops/s
[info] # Warmup Iteration   4: 1086643.997 ops/s
[info] # Warmup Iteration   5: 1076530.120 ops/s
[info] Iteration   1: 1081436.666 ops/s
[info]                  ·gc.alloc.rate:                   1194.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              1738.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     967.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1069418.108 ops/s
[info]                  ·gc.alloc.rate:                   1227.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              1806.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1957.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1056362.609 ops/s
[info]                  ·gc.alloc.rate:                   1189.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              1771.684 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1986.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1058390.933 ops/s
[info]                  ·gc.alloc.rate:                   1202.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              1788.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1986.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1093434.237 ops/s
[info]                  ·gc.alloc.rate:                   1209.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              1740.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     962.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.809 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   1071808.510 ±(99.9%) 60416.305 ops/s [Average]
[info]   (min, avg, max) = (1056362.609, 1071808.510, 1093434.237), stdev = 15689.923
[info]   CI (99.9%): [1011392.205, 1132224.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1204.793 ±(99.9%) 57.589 MB/sec [Average]
[info]   (min, avg, max) = (1189.085, 1204.793, 1227.653), stdev = 14.956
[info]   CI (99.9%): [1147.204, 1262.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1769.217 ±(99.9%) 113.929 B/op [Average]
[info]   (min, avg, max) = (1738.696, 1769.217, 1806.295), stdev = 29.587
[info]   CI (99.9%): [1655.288, 1883.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1066.475 ±(99.9%) 1405.743 MB/sec [Average]
[info]   (min, avg, max) = (664.587, 1066.475, 1335.603), stdev = 365.067
[info]   CI (99.9%): [≈ 0, 2472.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1571.852 ±(99.9%) 2134.962 B/op [Average]
[info]   (min, avg, max) = (962.166, 1571.852, 1986.093), stdev = 554.443
[info]   CI (99.9%): [≈ 0, 3706.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.133 ±(99.9%) 0.924 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.133, 0.562), stdev = 0.240
[info]   CI (99.9%): [≈ 0, 1.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.192 ±(99.9%) 1.328 B/op [Average]
[info]   (min, avg, max) = (0.031, 0.192, 0.809), stdev = 0.345
[info]   CI (99.9%): [≈ 0, 1.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 3.200, 6.000), stdev = 1.924
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65.18% complete, ETA 00:39:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3050824.748 ops/s
[info] # Warmup Iteration   2: 9460150.023 ops/s
[info] # Warmup Iteration   3: 10225171.957 ops/s
[info] # Warmup Iteration   4: 10264499.717 ops/s
[info] # Warmup Iteration   5: 8550773.899 ops/s
[info] Iteration   1: 9235660.544 ops/s
[info]                  ·gc.alloc.rate:               439.434 MB/sec
[info]                  ·gc.alloc.rate.norm:          74.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 87.186 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 10347562.528 ops/s
[info]                  ·gc.alloc.rate:                   487.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              74.178 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 10390016.665 ops/s
[info]                  ·gc.alloc.rate:      475.415 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 10349150.425 ops/s
[info]                  ·gc.alloc.rate:               488.842 MB/sec
[info]                  ·gc.alloc.rate.norm:          74.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 101.814 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 10352165.151 ops/s
[info]                  ·gc.alloc.rate:                   496.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              75.427 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   10134911.063 ±(99.9%) 1936886.194 ops/s [Average]
[info]   (min, avg, max) = (9235660.544, 10134911.063, 10390016.665), stdev = 503003.194
[info]   CI (99.9%): [8198024.869, 12071797.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   477.534 ±(99.9%) 86.896 MB/sec [Average]
[info]   (min, avg, max) = (439.434, 477.534, 496.184), stdev = 22.567
[info]   CI (99.9%): [390.637, 564.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   74.168 ±(99.9%) 5.008 B/op [Average]
[info]   (min, avg, max) = (72.014, 74.168, 75.427), stdev = 1.301
[info]   CI (99.9%): [69.159, 79.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.204 ±(99.9%) 1116.924 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.204, 670.241), stdev = 290.062
[info]   CI (99.9%): [≈ 0, 1621.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   78.542 ±(99.9%) 170.825 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 78.542, 101.886), stdev = 44.363
[info]   CI (99.9%): [≈ 0, 249.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65.41% complete, ETA 00:39:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2818.019 ops/s
[info] # Warmup Iteration   2: 311077.411 ops/s
[info] # Warmup Iteration   3: 752049.036 ops/s
[info] # Warmup Iteration   4: 792085.715 ops/s
[info] # Warmup Iteration   5: 788354.512 ops/s
[info] Iteration   1: 799970.957 ops/s
[info]                  ·gc.alloc.rate:                   2942.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              5788.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3341.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6575.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.188 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 804148.714 ops/s
[info]                  ·gc.alloc.rate:                   2940.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              5754.210 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5232.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 803334.826 ops/s
[info]                  ·gc.alloc.rate:               2950.488 MB/sec
[info]                  ·gc.alloc.rate.norm:          5780.404 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2679.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5249.719 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 801855.975 ops/s
[info]                  ·gc.alloc.rate:               2999.203 MB/sec
[info]                  ·gc.alloc.rate.norm:          5887.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3360.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6596.471 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 803794.351 ops/s
[info]                  ·gc.alloc.rate:               2980.200 MB/sec
[info]                  ·gc.alloc.rate.norm:          5834.541 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2697.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5281.056 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   802620.964 ±(99.9%) 6621.596 ops/s [Average]
[info]   (min, avg, max) = (799970.957, 802620.964, 804148.714), stdev = 1719.607
[info]   CI (99.9%): [795999.368, 809242.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2962.405 ±(99.9%) 100.510 MB/sec [Average]
[info]   (min, avg, max) = (2940.125, 2962.405, 2999.203), stdev = 26.102
[info]   CI (99.9%): [2861.895, 3062.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   5808.907 ±(99.9%) 201.951 B/op [Average]
[info]   (min, avg, max) = (5754.210, 5808.907, 5887.107), stdev = 52.446
[info]   CI (99.9%): [5606.956, 6010.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2950.659 ±(99.9%) 1408.865 MB/sec [Average]
[info]   (min, avg, max) = (2673.641, 2950.659, 3360.590), stdev = 365.878
[info]   CI (99.9%): [1541.794, 4359.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5787.017 ±(99.9%) 2808.860 B/op [Average]
[info]   (min, avg, max) = (5232.665, 5787.017, 6596.471), stdev = 729.452
[info]   CI (99.9%): [2978.158, 8595.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 1.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.125, 0.604), stdev = 0.268
[info]   CI (99.9%): [≈ 0, 1.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.246 ±(99.9%) 2.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.246, 1.188), stdev = 0.527
[info]   CI (99.9%): [≈ 0, 2.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 9.000), stdev = 1.414
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65.65% complete, ETA 00:39:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 434.794 ops/s
[info] # Warmup Iteration   2: 2972.258 ops/s
[info] # Warmup Iteration   3: 4756.985 ops/s
[info] # Warmup Iteration   4: 5334.570 ops/s
[info] # Warmup Iteration   5: 5258.072 ops/s
[info] Iteration   1: 5303.269 ops/s
[info]                  ·gc.alloc.rate:                   2612.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              775409.562 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2663.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     790434.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1020.488 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 5374.612 ops/s
[info]                  ·gc.alloc.rate:                   2652.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              776797.303 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2661.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     779265.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.368 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 107.874 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 5392.756 ops/s
[info]                  ·gc.alloc.rate:                   2662.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              776657.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     583481.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.374 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5189.117 ops/s
[info]                  ·gc.alloc.rate:                   2611.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              792006.818 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     810373.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.509 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 5330.592 ops/s
[info]                  ·gc.alloc.rate:                   2664.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              786734.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     791741.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.164 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   5318.069 ±(99.9%) 309.131 ops/s [Average]
[info]   (min, avg, max) = (5189.117, 5318.069, 5392.756), stdev = 80.280
[info]   CI (99.9%): [5008.938, 5627.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   2640.853 ±(99.9%) 101.943 MB/sec [Average]
[info]   (min, avg, max) = (2611.507, 2640.853, 2664.641), stdev = 26.474
[info]   CI (99.9%): [2538.910, 2742.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   781521.129 ±(99.9%) 28585.888 B/op [Average]
[info]   (min, avg, max) = (775409.562, 781521.129, 792006.818), stdev = 7423.664
[info]   CI (99.9%): [752935.241, 810107.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2535.740 ±(99.9%) 1153.618 MB/sec [Average]
[info]   (min, avg, max) = (2000.004, 2535.740, 2681.602), stdev = 299.591
[info]   CI (99.9%): [1382.121, 3689.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   751059.387 ±(99.9%) 363276.377 B/op [Average]
[info]   (min, avg, max) = (583481.806, 751059.387, 810373.475), stdev = 94341.721
[info]   CI (99.9%): [387783.010, 1114335.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.849 ±(99.9%) 5.588 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.849, 3.439), stdev = 1.451
[info]   CI (99.9%): [≈ 0, 6.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   251.682 ±(99.9%) 1658.689 B/op [Average]
[info]   (min, avg, max) = (30.374, 251.682, 1020.488), stdev = 430.756
[info]   CI (99.9%): [≈ 0, 1910.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 65.88% complete, ETA 00:39:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 531.605 ops/s
[info] # Warmup Iteration   2: 5380.129 ops/s
[info] # Warmup Iteration   3: 7426.356 ops/s
[info] # Warmup Iteration   4: 7751.040 ops/s
[info] # Warmup Iteration   5: 7772.041 ops/s
[info] Iteration   1: 7821.474 ops/s
[info]                  ·gc.alloc.rate:                   3180.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              640126.321 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3337.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     671662.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87.962 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 7796.939 ops/s
[info]                  ·gc.alloc.rate:                   3178.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              641470.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     539951.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.403 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 7841.140 ops/s
[info]                  ·gc.alloc.rate:               3234.456 MB/sec
[info]                  ·gc.alloc.rate.norm:          649154.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3355.054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 673358.794 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 7836.917 ops/s
[info]                  ·gc.alloc.rate:                   3241.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              650838.193 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3367.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     676243.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.180 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 7853.974 ops/s
[info]                  ·gc.alloc.rate:                   3221.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              645516.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     541506.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.342 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   7830.089 ±(99.9%) 84.196 ops/s [Average]
[info]   (min, avg, max) = (7796.939, 7830.089, 7853.974), stdev = 21.865
[info]   CI (99.9%): [7745.893, 7914.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3211.182 ±(99.9%) 114.958 MB/sec [Average]
[info]   (min, avg, max) = (3178.042, 3211.182, 3241.253), stdev = 29.854
[info]   CI (99.9%): [3096.224, 3326.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   645421.262 ±(99.9%) 17951.849 B/op [Average]
[info]   (min, avg, max) = (640126.321, 645421.262, 650838.193), stdev = 4662.038
[info]   CI (99.9%): [627469.413, 663373.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   3087.549 ±(99.9%) 1403.217 MB/sec [Average]
[info]   (min, avg, max) = (2675.086, 3087.549, 3367.777), stdev = 364.411
[info]   CI (99.9%): [1684.332, 4490.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   620544.533 ±(99.9%) 280642.329 B/op [Average]
[info]   (min, avg, max) = (539951.432, 620544.533, 676243.905), stdev = 72881.922
[info]   CI (99.9%): [339902.205, 901186.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.711 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.108, 0.437), stdev = 0.185
[info]   CI (99.9%): [≈ 0, 0.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21.778 ±(99.9%) 143.093 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.778, 87.962), stdev = 37.161
[info]   CI (99.9%): [≈ 0, 164.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.400, 9.000), stdev = 1.342
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66.12% complete, ETA 00:38:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26737.257 ops/s
[info] # Warmup Iteration   2: 51374.552 ops/s
[info] # Warmup Iteration   3: 56364.833 ops/s
[info] # Warmup Iteration   4: 54566.072 ops/s
[info] # Warmup Iteration   5: 57104.443 ops/s
[info] Iteration   1: 56498.782 ops/s
[info]                  ·gc.alloc.rate:                   933.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              26007.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18621.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.580 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 57800.630 ops/s
[info]                  ·gc.alloc.rate:               971.540 MB/sec
[info]                  ·gc.alloc.rate.norm:          26449.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36441.766 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 49709.252 ops/s
[info]                  ·gc.alloc.rate:                   827.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              26202.758 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21197.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.318 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 56092.189 ops/s
[info]                  ·gc.alloc.rate:               929.037 MB/sec
[info]                  ·gc.alloc.rate.norm:          26066.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18785.320 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 57610.139 ops/s
[info]                  ·gc.alloc.rate:                   966.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              26410.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36595.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.706 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   55542.198 ±(99.9%) 12860.473 ops/s [Average]
[info]   (min, avg, max) = (49709.252, 55542.198, 57800.630), stdev = 3339.824
[info]   CI (99.9%): [42681.726, 68402.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   925.745 ±(99.9%) 223.561 MB/sec [Average]
[info]   (min, avg, max) = (827.627, 925.745, 971.540), stdev = 58.058
[info]   CI (99.9%): [702.184, 1149.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26227.306 ±(99.9%) 764.126 B/op [Average]
[info]   (min, avg, max) = (26007.729, 26227.306, 26449.317), stdev = 198.441
[info]   CI (99.9%): [25463.180, 26991.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.171 ±(99.9%) 1412.861 MB/sec [Average]
[info]   (min, avg, max) = (668.572, 937.171, 1339.628), stdev = 366.915
[info]   CI (99.9%): [≈ 0, 2350.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   26328.471 ±(99.9%) 36035.601 B/op [Average]
[info]   (min, avg, max) = (18621.846, 26328.471, 36595.796), stdev = 9358.331
[info]   CI (99.9%): [≈ 0, 62364.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.721 ±(99.9%) 2.974 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.721, 1.706), stdev = 0.772
[info]   CI (99.9%): [≈ 0, 3.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.949
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66.35% complete, ETA 00:38:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 587.586 ops/s
[info] # Warmup Iteration   2: 4344.154 ops/s
[info] # Warmup Iteration   3: 5007.837 ops/s
[info] # Warmup Iteration   4: 5486.358 ops/s
[info] # Warmup Iteration   5: 5485.173 ops/s
[info] Iteration   1: 5420.310 ops/s
[info]                  ·gc.alloc.rate:               955.879 MB/sec
[info]                  ·gc.alloc.rate.norm:          277419.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 191458.916 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 5433.191 ops/s
[info]                  ·gc.alloc.rate:               966.539 MB/sec
[info]                  ·gc.alloc.rate.norm:          279967.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 191000.964 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 5273.286 ops/s
[info]                  ·gc.alloc.rate:                   951.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              283837.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     393588.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.212 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5411.323 ops/s
[info]                  ·gc.alloc.rate:                   965.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              280859.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     191777.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.375 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5478.279 ops/s
[info]                  ·gc.alloc.rate:                   992.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              285219.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     379439.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.959 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   5403.278 ±(99.9%) 296.854 ops/s [Average]
[info]   (min, avg, max) = (5273.286, 5403.278, 5478.279), stdev = 77.092
[info]   CI (99.9%): [5106.424, 5700.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   966.418 ±(99.9%) 62.112 MB/sec [Average]
[info]   (min, avg, max) = (951.150, 966.418, 992.801), stdev = 16.130
[info]   CI (99.9%): [904.306, 1028.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   281460.747 ±(99.9%) 11977.572 B/op [Average]
[info]   (min, avg, max) = (277419.618, 281460.747, 285219.745), stdev = 3110.537
[info]   CI (99.9%): [269483.175, 293438.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   923.640 ±(99.9%) 1392.723 MB/sec [Average]
[info]   (min, avg, max) = (659.398, 923.640, 1320.762), stdev = 361.686
[info]   CI (99.9%): [≈ 0, 2316.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   269452.987 ±(99.9%) 411937.640 B/op [Average]
[info]   (min, avg, max) = (191000.964, 269452.987, 393588.717), stdev = 106978.897
[info]   CI (99.9%): [≈ 0, 681390.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.146), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   12.109 ±(99.9%) 67.909 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.109, 42.375), stdev = 17.636
[info]   CI (99.9%): [≈ 0, 80.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.140
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66.59% complete, ETA 00:38:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 581.731 ops/s
[info] # Warmup Iteration   2: 4167.752 ops/s
[info] # Warmup Iteration   3: 5173.566 ops/s
[info] # Warmup Iteration   4: 5371.687 ops/s
[info] # Warmup Iteration   5: 5470.503 ops/s
[info] Iteration   1: 5462.748 ops/s
[info]                  ·gc.alloc.rate:                   588.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              169616.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     190466.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.994 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5464.175 ops/s
[info]                  ·gc.alloc.rate:               589.679 MB/sec
[info]                  ·gc.alloc.rate.norm:          169809.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 190780.979 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 5464.290 ops/s
[info]                  ·gc.alloc.rate:                   593.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              171006.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     190780.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.995 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5460.293 ops/s
[info]                  ·gc.alloc.rate:               599.753 MB/sec
[info]                  ·gc.alloc.rate.norm:          172856.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 191304.647 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 5437.747 ops/s
[info]                  ·gc.alloc.rate:               596.842 MB/sec
[info]                  ·gc.alloc.rate.norm:          172745.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 192113.621 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   5457.851 ±(99.9%) 43.717 ops/s [Average]
[info]   (min, avg, max) = (5437.747, 5457.851, 5464.290), stdev = 11.353
[info]   CI (99.9%): [5414.134, 5501.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   593.810 ±(99.9%) 17.948 MB/sec [Average]
[info]   (min, avg, max) = (588.781, 593.810, 599.753), stdev = 4.661
[info]   CI (99.9%): [575.861, 611.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   171206.900 ±(99.9%) 5968.844 B/op [Average]
[info]   (min, avg, max) = (169616.309, 171206.900, 172856.653), stdev = 1550.090
[info]   CI (99.9%): [165238.056, 177175.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   662.773 ±(99.9%) 4.146 MB/sec [Average]
[info]   (min, avg, max) = (661.159, 662.773, 663.761), stdev = 1.077
[info]   CI (99.9%): [658.627, 666.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   191089.445 ±(99.9%) 2490.291 B/op [Average]
[info]   (min, avg, max) = (190466.999, 191089.445, 192113.621), stdev = 646.721
[info]   CI (99.9%): [188599.154, 193579.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.598 ±(99.9%) 20.654 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.598, 11.994), stdev = 5.364
[info]   CI (99.9%): [≈ 0, 24.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66.82% complete, ETA 00:37:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3376.083 ops/s
[info] # Warmup Iteration   2: 6051.963 ops/s
[info] # Warmup Iteration   3: 6906.445 ops/s
[info] # Warmup Iteration   4: 6555.478 ops/s
[info] # Warmup Iteration   5: 6937.314 ops/s
[info] Iteration   1: 6973.442 ops/s
[info]                  ·gc.alloc.rate:      224.974 MB/sec
[info]                  ·gc.alloc.rate.norm: 50752.084 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6944.311 ops/s
[info]                  ·gc.alloc.rate:               237.486 MB/sec
[info]                  ·gc.alloc.rate.norm:          53820.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115938.147 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 6945.932 ops/s
[info]                  ·gc.alloc.rate:      224.097 MB/sec
[info]                  ·gc.alloc.rate.norm: 50752.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6956.487 ops/s
[info]                  ·gc.alloc.rate:                   237.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              53677.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115738.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.128 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 6988.437 ops/s
[info]                  ·gc.alloc.rate:      225.390 MB/sec
[info]                  ·gc.alloc.rate.norm: 50752.078 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   6961.722 ±(99.9%) 72.830 ops/s [Average]
[info]   (min, avg, max) = (6944.311, 6961.722, 6988.437), stdev = 18.914
[info]   CI (99.9%): [6888.892, 7034.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   229.844 ±(99.9%) 26.553 MB/sec [Average]
[info]   (min, avg, max) = (224.097, 229.844, 237.486), stdev = 6.896
[info]   CI (99.9%): [203.291, 256.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   51950.729 ±(99.9%) 6323.165 B/op [Average]
[info]   (min, avg, max) = (50752.062, 51950.729, 53820.331), stdev = 1642.106
[info]   CI (99.9%): [45627.564, 58273.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.639 ±(99.9%) 1079.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.639, 511.612), stdev = 280.214
[info]   CI (99.9%): [≈ 0, 1283.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   46335.269 ±(99.9%) 244312.648 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46335.269, 115938.147), stdev = 63447.219
[info]   CI (99.9%): [≈ 0, 290647.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.826 ±(99.9%) 24.330 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.826, 14.128), stdev = 6.318
[info]   CI (99.9%): [≈ 0, 27.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 2.490
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 67.06% complete, ETA 00:37:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2440.524 ops/s
[info] # Warmup Iteration   2: 6102.880 ops/s
[info] # Warmup Iteration   3: 6723.935 ops/s
[info] # Warmup Iteration   4: 6989.754 ops/s
[info] # Warmup Iteration   5: 7002.849 ops/s
[info] Iteration   1: 6969.727 ops/s
[info]                  ·gc.alloc.rate:                   183.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              41332.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115522.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.947 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7003.760 ops/s
[info]                  ·gc.alloc.rate:      174.769 MB/sec
[info]                  ·gc.alloc.rate.norm: 39265.179 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7006.016 ops/s
[info]                  ·gc.alloc.rate:      174.753 MB/sec
[info]                  ·gc.alloc.rate.norm: 39248.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6966.251 ops/s
[info]                  ·gc.alloc.rate:               185.577 MB/sec
[info]                  ·gc.alloc.rate.norm:          41914.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115572.096 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 6927.466 ops/s
[info]                  ·gc.alloc.rate:      187.088 MB/sec
[info]                  ·gc.alloc.rate.norm: 42502.337 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   6974.644 ±(99.9%) 124.065 ops/s [Average]
[info]   (min, avg, max) = (6927.466, 6974.644, 7006.016), stdev = 32.219
[info]   CI (99.9%): [6850.579, 7098.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   181.061 ±(99.9%) 22.806 MB/sec [Average]
[info]   (min, avg, max) = (174.753, 181.061, 187.088), stdev = 5.923
[info]   CI (99.9%): [158.254, 203.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   40852.600 ±(99.9%) 5831.711 B/op [Average]
[info]   (min, avg, max) = (39248.062, 40852.600, 42502.337), stdev = 1514.477
[info]   CI (99.9%): [35020.889, 46684.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   204.698 ±(99.9%) 1079.314 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.698, 511.794), stdev = 280.295
[info]   CI (99.9%): [≈ 0, 1284.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   46218.891 ±(99.9%) 243698.882 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46218.891, 115572.096), stdev = 63287.826
[info]   CI (99.9%): [≈ 0, 289917.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.084 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.048), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   2.189 ±(99.9%) 18.852 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.189, 10.947), stdev = 4.896
[info]   CI (99.9%): [≈ 0, 21.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 2.191
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67.29% complete, ETA 00:37:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 887.400 ops/s
[info] # Warmup Iteration   2: 4266.333 ops/s
[info] # Warmup Iteration   3: 7255.537 ops/s
[info] # Warmup Iteration   4: 8621.120 ops/s
[info] # Warmup Iteration   5: 8749.618 ops/s
[info] Iteration   1: 8710.295 ops/s
[info]                  ·gc.alloc.rate:                   2023.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              365664.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1966.429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     355302.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 624.792 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   2: 8771.636 ops/s
[info]                  ·gc.alloc.rate:                   2012.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              361169.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1966.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     352832.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 220.371 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 8824.065 ops/s
[info]                  ·gc.alloc.rate:                   2033.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              362669.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1965.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     350594.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 851.395 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 8283.953 ops/s
[info]                  ·gc.alloc.rate:                   2213.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              420325.775 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1962.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     372683.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.955 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 8583.836 ops/s
[info]                  ·gc.alloc.rate:                   1981.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              363336.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1963.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     360028.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.960 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 542.679 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   8634.757 ±(99.9%) 830.203 ops/s [Average]
[info]   (min, avg, max) = (8283.953, 8634.757, 8824.065), stdev = 215.601
[info]   CI (99.9%): [7804.554, 9464.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   2052.970 ±(99.9%) 352.658 MB/sec [Average]
[info]   (min, avg, max) = (1981.775, 2052.970, 2213.072), stdev = 91.584
[info]   CI (99.9%): [1700.312, 2405.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   374633.139 ±(99.9%) 98554.467 B/op [Average]
[info]   (min, avg, max) = (361169.205, 374633.139, 420325.775), stdev = 25594.282
[info]   CI (99.9%): [276078.671, 473187.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1964.890 ±(99.9%) 7.083 MB/sec [Average]
[info]   (min, avg, max) = (1962.229, 1964.890, 1966.429), stdev = 1.839
[info]   CI (99.9%): [1957.807, 1971.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   358288.225 ±(99.9%) 33796.353 B/op [Average]
[info]   (min, avg, max) = (350594.581, 358288.225, 372683.601), stdev = 8776.805
[info]   CI (99.9%): [324491.872, 392084.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2.488 ±(99.9%) 7.220 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 2.488, 4.774), stdev = 1.875
[info]   CI (99.9%): [≈ 0, 9.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   448.638 ±(99.9%) 1294.320 B/op [Average]
[info]   (min, avg, max) = (3.955, 448.638, 851.395), stdev = 336.131
[info]   CI (99.9%): [≈ 0, 1742.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 11.200, 22.000), stdev = 6.723
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 67.53% complete, ETA 00:37:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.789 ops/s
[info] # Warmup Iteration   2: 13753.362 ops/s
[info] # Warmup Iteration   3: 17306.484 ops/s
[info] # Warmup Iteration   4: 17862.191 ops/s
[info] # Warmup Iteration   5: 17763.912 ops/s
[info] Iteration   1: 17479.124 ops/s
[info]                  ·gc.alloc.rate:      431.277 MB/sec
[info]                  ·gc.alloc.rate.norm: 38832.027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 17781.055 ops/s
[info]                  ·gc.alloc.rate:                   544.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              48228.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58578.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 17104.487 ops/s
[info]                  ·gc.alloc.rate:               507.871 MB/sec
[info]                  ·gc.alloc.rate.norm:          46728.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60954.456 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 17407.289 ops/s
[info]                  ·gc.alloc.rate:                   449.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              40597.818 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59897.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.537 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.530 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 17307.106 ops/s
[info]                  ·gc.alloc.rate:      427.026 MB/sec
[info]                  ·gc.alloc.rate.norm: 38832.025 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   17415.812 ±(99.9%) 955.363 ops/s [Average]
[info]   (min, avg, max) = (17104.487, 17415.812, 17781.055), stdev = 248.105
[info]   CI (99.9%): [16460.449, 18371.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   472.030 ±(99.9%) 200.152 MB/sec [Average]
[info]   (min, avg, max) = (427.026, 472.030, 544.897), stdev = 51.979
[info]   CI (99.9%): [271.879, 672.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   42643.760 ±(99.9%) 17340.443 B/op [Average]
[info]   (min, avg, max) = (38832.025, 42643.760, 48228.149), stdev = 4503.258
[info]   CI (99.9%): [25303.318, 59984.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   397.376 ±(99.9%) 1396.835 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 397.376, 662.560), stdev = 362.753
[info]   CI (99.9%): [≈ 0, 1794.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   35886.017 ±(99.9%) 126186.039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35886.017, 60954.456), stdev = 32770.114
[info]   CI (99.9%): [≈ 0, 162072.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.924 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.108, 0.537), stdev = 0.240
[info]   CI (99.9%): [≈ 0, 1.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   9.719 ±(99.9%) 83.544 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.719, 48.530), stdev = 21.696
[info]   CI (99.9%): [≈ 0, 93.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67.76% complete, ETA 00:36:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2129.050 ops/s
[info] # Warmup Iteration   2: 10161.491 ops/s
[info] # Warmup Iteration   3: 15049.263 ops/s
[info] # Warmup Iteration   4: 14948.119 ops/s
[info] # Warmup Iteration   5: 14947.989 ops/s
[info] Iteration   1: 14987.726 ops/s
[info]                  ·gc.alloc.rate:                   412.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              43283.462 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69392.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.186 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 14972.113 ops/s
[info]                  ·gc.alloc.rate:      397.733 MB/sec
[info]                  ·gc.alloc.rate.norm: 41806.373 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 14603.468 ops/s
[info]                  ·gc.alloc.rate:               457.164 MB/sec
[info]                  ·gc.alloc.rate.norm:          49260.563 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71221.321 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 14644.022 ops/s
[info]                  ·gc.alloc.rate:               479.793 MB/sec
[info]                  ·gc.alloc.rate.norm:          51563.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71124.480 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 14600.513 ops/s
[info]                  ·gc.alloc.rate:      387.565 MB/sec
[info]                  ·gc.alloc.rate.norm: 41776.030 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   14761.568 ±(99.9%) 770.678 ops/s [Average]
[info]   (min, avg, max) = (14600.513, 14761.568, 14987.726), stdev = 200.143
[info]   CI (99.9%): [13990.890, 15532.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   426.890 ±(99.9%) 153.154 MB/sec [Average]
[info]   (min, avg, max) = (387.565, 426.890, 479.793), stdev = 39.774
[info]   CI (99.9%): [273.736, 580.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   45537.947 ±(99.9%) 17574.532 B/op [Average]
[info]   (min, avg, max) = (41776.030, 45537.947, 51563.307), stdev = 4564.050
[info]   CI (99.9%): [27963.415, 63112.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   396.722 ±(99.9%) 1394.534 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 396.722, 661.808), stdev = 362.156
[info]   CI (99.9%): [≈ 0, 1791.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   42347.578 ±(99.9%) 148884.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42347.578, 71221.321), stdev = 38664.723
[info]   CI (99.9%): [≈ 0, 191231.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.437 ±(99.9%) 3.764 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.437, 2.186), stdev = 0.978
[info]   CI (99.9%): [≈ 0, 4.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 68.00% complete, ETA 00:36:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10225.483 ops/s
[info] # Warmup Iteration   2: 16935.866 ops/s
[info] # Warmup Iteration   3: 23941.236 ops/s
[info] # Warmup Iteration   4: 22943.781 ops/s
[info] # Warmup Iteration   5: 23085.356 ops/s
[info] Iteration   1: 21910.064 ops/s
[info]                  ·gc.alloc.rate:               547.736 MB/sec
[info]                  ·gc.alloc.rate.norm:          39346.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48017.067 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 23934.120 ops/s
[info]                  ·gc.alloc.rate:                   451.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              29662.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43814.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.175 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.196 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 23620.007 ops/s
[info]                  ·gc.alloc.rate:      434.419 MB/sec
[info]                  ·gc.alloc.rate.norm: 28932.180 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 23674.544 ops/s
[info]                  ·gc.alloc.rate:                   455.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              30296.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44461.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 23773.977 ops/s
[info]                  ·gc.alloc.rate:      437.037 MB/sec
[info]                  ·gc.alloc.rate.norm: 28932.150 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   23382.542 ±(99.9%) 3202.816 ops/s [Average]
[info]   (min, avg, max) = (21910.064, 23382.542, 23934.120), stdev = 831.761
[info]   CI (99.9%): [20179.726, 26585.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   465.299 ±(99.9%) 180.901 MB/sec [Average]
[info]   (min, avg, max) = (434.419, 465.299, 547.736), stdev = 46.979
[info]   CI (99.9%): [284.398, 646.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   31434.001 ±(99.9%) 17173.687 B/op [Average]
[info]   (min, avg, max) = (28932.150, 31434.001, 39346.885), stdev = 4459.952
[info]   CI (99.9%): [14260.314, 48607.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   400.852 ±(99.9%) 1409.055 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 400.852, 668.827), stdev = 365.927
[info]   CI (99.9%): [≈ 0, 1809.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   27258.681 ±(99.9%) 96015.978 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27258.681, 48017.067), stdev = 24935.045
[info]   CI (99.9%): [≈ 0, 123274.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.247 ±(99.9%) 2.000 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.247, 1.175), stdev = 0.519
[info]   CI (99.9%): [≈ 0, 2.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16.243 ±(99.9%) 131.376 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.243, 77.196), stdev = 34.118
[info]   CI (99.9%): [≈ 0, 147.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 68.24% complete, ETA 00:36:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50.966 ops/s
[info] # Warmup Iteration   2: 1997.452 ops/s
[info] # Warmup Iteration   3: 5450.809 ops/s
[info] # Warmup Iteration   4: 6172.949 ops/s
[info] # Warmup Iteration   5: 6223.648 ops/s
[info] Iteration   1: 6101.841 ops/s
[info]                  ·gc.alloc.rate:                   2477.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              639061.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     688455.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.217 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 571.818 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 6127.054 ops/s
[info]                  ·gc.alloc.rate:                   2488.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              639188.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     685706.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 160.392 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 6168.031 ops/s
[info]                  ·gc.alloc.rate:                   2503.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              638889.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     511624.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.312 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 6178.397 ops/s
[info]                  ·gc.alloc.rate:                   2533.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              645281.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     682337.926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.302 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 6267.425 ops/s
[info]                  ·gc.alloc.rate:                   2583.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              648684.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     674574.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.227 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   6168.549 ±(99.9%) 243.883 ops/s [Average]
[info]   (min, avg, max) = (6101.841, 6168.549, 6267.425), stdev = 63.336
[info]   CI (99.9%): [5924.667, 6412.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2517.311 ±(99.9%) 163.289 MB/sec [Average]
[info]   (min, avg, max) = (2477.649, 2517.311, 2583.329), stdev = 42.406
[info]   CI (99.9%): [2354.022, 2680.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   642221.118 ±(99.9%) 17372.860 B/op [Average]
[info]   (min, avg, max) = (638889.751, 642221.118, 648684.334), stdev = 4511.677
[info]   CI (99.9%): [624848.258, 659593.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2541.795 ±(99.9%) 1155.563 MB/sec [Average]
[info]   (min, avg, max) = (2005.118, 2541.795, 2686.434), stdev = 300.096
[info]   CI (99.9%): [1386.231, 3697.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   648539.761 ±(99.9%) 295399.940 B/op [Average]
[info]   (min, avg, max) = (511624.860, 648539.761, 688455.519), stdev = 76714.426
[info]   CI (99.9%): [353139.821, 943939.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.581 ±(99.9%) 3.663 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.581, 2.217), stdev = 0.951
[info]   CI (99.9%): [≈ 0, 4.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   149.610 ±(99.9%) 944.918 B/op [Average]
[info]   (min, avg, max) = (5.227, 149.610, 571.818), stdev = 245.392
[info]   CI (99.9%): [≈ 0, 1094.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.200, 11.000), stdev = 2.280
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68.47% complete, ETA 00:36:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 818.408 ops/s
[info] # Warmup Iteration   2: 8813.572 ops/s
[info] # Warmup Iteration   3: 11806.231 ops/s
[info] # Warmup Iteration   4: 12184.094 ops/s
[info] # Warmup Iteration   5: 11646.713 ops/s
[info] Iteration   1: 12308.927 ops/s
[info]                  ·gc.alloc.rate:                   2321.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              296807.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1981.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     253329.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63.875 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 11399.194 ops/s
[info]                  ·gc.alloc.rate:                   2324.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              320790.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1981.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     273479.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 198.025 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 12074.283 ops/s
[info]                  ·gc.alloc.rate:                   2310.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              301117.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2644.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     344778.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.140 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 12104.399 ops/s
[info]                  ·gc.alloc.rate:                   2291.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              297861.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     258744.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.413 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 11640.438 ops/s
[info]                  ·gc.alloc.rate:               2532.602 MB/sec
[info]                  ·gc.alloc.rate.norm:          342289.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2664.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 360152.489 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   11905.448 ±(99.9%) 1437.438 ops/s [Average]
[info]   (min, avg, max) = (11399.194, 11905.448, 12308.927), stdev = 373.298
[info]   CI (99.9%): [10468.010, 13342.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   2355.952 ±(99.9%) 383.511 MB/sec [Average]
[info]   (min, avg, max) = (2291.356, 2355.952, 2532.602), stdev = 99.597
[info]   CI (99.9%): [1972.441, 2739.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   311773.434 ±(99.9%) 75644.097 B/op [Average]
[info]   (min, avg, max) = (296807.801, 311773.434, 342289.982), stdev = 19644.532
[info]   CI (99.9%): [236129.337, 387417.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2252.621 ±(99.9%) 1414.331 MB/sec [Average]
[info]   (min, avg, max) = (1981.285, 2252.621, 2664.767), stdev = 367.297
[info]   CI (99.9%): [838.290, 3666.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   298096.965 ±(99.9%) 194341.878 B/op [Average]
[info]   (min, avg, max) = (253329.216, 298096.965, 360152.489), stdev = 50469.969
[info]   CI (99.9%): [103755.087, 492438.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.408 ±(99.9%) 2.345 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.408, 1.435), stdev = 0.609
[info]   CI (99.9%): [≈ 0, 2.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   55.091 ±(99.9%) 323.400 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 55.091, 198.025), stdev = 83.986
[info]   CI (99.9%): [≈ 0, 378.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68.71% complete, ETA 00:35:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.771 ops/s
[info] # Warmup Iteration   2: 54189.995 ops/s
[info] # Warmup Iteration   3: 65791.838 ops/s
[info] # Warmup Iteration   4: 66711.224 ops/s
[info] # Warmup Iteration   5: 70421.303 ops/s
[info] Iteration   1: 70446.226 ops/s
[info]                  ·gc.alloc.rate:                   676.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              15113.962 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14778.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.071 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 68433.343 ops/s
[info]                  ·gc.alloc.rate:               661.812 MB/sec
[info]                  ·gc.alloc.rate.norm:          15219.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15228.060 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 64120.026 ops/s
[info]                  ·gc.alloc.rate:                   617.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              15138.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16252.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.277 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 68159.854 ops/s
[info]                  ·gc.alloc.rate:               691.525 MB/sec
[info]                  ·gc.alloc.rate.norm:          15966.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15303.974 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 69195.857 ops/s
[info]                  ·gc.alloc.rate:                   660.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              15033.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15075.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.947 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   68071.061 ±(99.9%) 9164.287 ops/s [Average]
[info]   (min, avg, max) = (64120.026, 68071.061, 70446.226), stdev = 2379.936
[info]   CI (99.9%): [58906.774, 77235.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   661.590 ±(99.9%) 107.299 MB/sec [Average]
[info]   (min, avg, max) = (617.050, 661.590, 691.525), stdev = 27.865
[info]   CI (99.9%): [554.292, 768.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   15294.484 ±(99.9%) 1469.764 B/op [Average]
[info]   (min, avg, max) = (15033.320, 15294.484, 15966.844), stdev = 381.693
[info]   CI (99.9%): [13824.720, 16764.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   662.365 ±(99.9%) 1.976 MB/sec [Average]
[info]   (min, avg, max) = (661.581, 662.365, 662.816), stdev = 0.513
[info]   CI (99.9%): [660.389, 664.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   15327.621 ±(99.9%) 2136.265 B/op [Average]
[info]   (min, avg, max) = (14778.318, 15327.621, 16252.429), stdev = 554.781
[info]   CI (99.9%): [13191.357, 17463.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.028 ±(99.9%) 0.101 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.052), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.659 ±(99.9%) 2.361 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.659, 1.277), stdev = 0.613
[info]   CI (99.9%): [≈ 0, 3.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68.94% complete, ETA 00:35:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5932.382 ops/s
[info] # Warmup Iteration   2: 38676.833 ops/s
[info] # Warmup Iteration   3: 44955.463 ops/s
[info] # Warmup Iteration   4: 42945.647 ops/s
[info] # Warmup Iteration   5: 46514.231 ops/s
[info] Iteration   1: 46295.250 ops/s
[info]                  ·gc.alloc.rate:               712.354 MB/sec
[info]                  ·gc.alloc.rate.norm:          24206.296 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22465.765 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 46532.761 ops/s
[info]                  ·gc.alloc.rate:                   714.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              24161.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22350.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.408 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 46503.537 ops/s
[info]                  ·gc.alloc.rate:               719.099 MB/sec
[info]                  ·gc.alloc.rate.norm:          24332.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22421.657 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 46446.151 ops/s
[info]                  ·gc.alloc.rate:                   725.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              24587.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22449.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.433 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 45283.310 ops/s
[info]                  ·gc.alloc.rate:               700.255 MB/sec
[info]                  ·gc.alloc.rate.norm:          24326.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23070.432 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   46212.202 ±(99.9%) 2030.374 ops/s [Average]
[info]   (min, avg, max) = (45283.310, 46212.202, 46532.761), stdev = 527.282
[info]   CI (99.9%): [44181.828, 48242.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   714.431 ±(99.9%) 36.431 MB/sec [Average]
[info]   (min, avg, max) = (700.255, 714.431, 725.875), stdev = 9.461
[info]   CI (99.9%): [678.000, 750.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   24322.814 ±(99.9%) 638.095 B/op [Average]
[info]   (min, avg, max) = (24161.064, 24322.814, 24587.370), stdev = 165.711
[info]   CI (99.9%): [23684.720, 24960.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   662.327 ±(99.9%) 4.899 MB/sec [Average]
[info]   (min, avg, max) = (661.036, 662.327, 664.092), stdev = 1.272
[info]   CI (99.9%): [657.428, 667.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   22551.580 ±(99.9%) 1129.594 B/op [Average]
[info]   (min, avg, max) = (22350.875, 22551.580, 23070.432), stdev = 293.352
[info]   CI (99.9%): [21421.986, 23681.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.368 ±(99.9%) 2.352 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.368, 1.408), stdev = 0.611
[info]   CI (99.9%): [≈ 0, 2.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 69.18% complete, ETA 00:35:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38591.435 ops/s
[info] # Warmup Iteration   2: 94437.165 ops/s
[info] # Warmup Iteration   3: 102430.914 ops/s
[info] # Warmup Iteration   4: 104985.258 ops/s
[info] # Warmup Iteration   5: 102168.052 ops/s
[info] Iteration   1: 102299.598 ops/s
[info]                  ·gc.alloc.rate:               781.889 MB/sec
[info]                  ·gc.alloc.rate.norm:          12023.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10263.780 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 104480.619 ops/s
[info]                  ·gc.alloc.rate:                   804.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              12107.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10049.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.314 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 102416.861 ops/s
[info]                  ·gc.alloc.rate:               790.398 MB/sec
[info]                  ·gc.alloc.rate.norm:          12141.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10257.275 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 102042.230 ops/s
[info]                  ·gc.alloc.rate:                   831.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              12824.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20598.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.321 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 104972.404 ops/s
[info]                  ·gc.alloc.rate:               816.070 MB/sec
[info]                  ·gc.alloc.rate.norm:          12235.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10017.256 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   103242.342 ±(99.9%) 5285.666 ops/s [Average]
[info]   (min, avg, max) = (102042.230, 103242.342, 104972.404), stdev = 1372.671
[info]   CI (99.9%): [97956.677, 108528.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   804.866 ±(99.9%) 76.869 MB/sec [Average]
[info]   (min, avg, max) = (781.889, 804.866, 831.895), stdev = 19.963
[info]   CI (99.9%): [727.997, 881.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   12266.493 ±(99.9%) 1236.782 B/op [Average]
[info]   (min, avg, max) = (12023.971, 12266.493, 12824.817), stdev = 321.188
[info]   CI (99.9%): [11029.711, 13503.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   801.380 ±(99.9%) 1151.161 MB/sec [Average]
[info]   (min, avg, max) = (667.428, 801.380, 1336.162), stdev = 298.953
[info]   CI (99.9%): [≈ 0, 1952.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   12237.332 ±(99.9%) 18004.035 B/op [Average]
[info]   (min, avg, max) = (10017.256, 12237.332, 20598.790), stdev = 4675.591
[info]   CI (99.9%): [≈ 0, 30241.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.127 ±(99.9%) 0.669 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.127, 0.321), stdev = 0.174
[info]   CI (99.9%): [≈ 0, 0.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 9.000), stdev = 2.236
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69.41% complete, ETA 00:34:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54642.228 ops/s
[info] # Warmup Iteration   2: 116069.843 ops/s
[info] # Warmup Iteration   3: 115611.622 ops/s
[info] # Warmup Iteration   4: 137402.153 ops/s
[info] # Warmup Iteration   5: 138338.882 ops/s
[info] Iteration   1: 137560.928 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 137635.545 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 137735.213 ops/s
[info]                  ·gc.alloc.rate:      2.968 MB/sec
[info]                  ·gc.alloc.rate.norm: 33.908 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 138215.952 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 137823.098 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   137794.147 ±(99.9%) 985.075 ops/s [Average]
[info]   (min, avg, max) = (137560.928, 137794.147, 138215.952), stdev = 255.821
[info]   CI (99.9%): [136809.072, 138779.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.594 ±(99.9%) 5.110 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.594, 2.968), stdev = 1.327
[info]   CI (99.9%): [≈ 0, 5.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   6.784 ±(99.9%) 58.386 B/op [Average]
[info]   (min, avg, max) = (0.003, 6.784, 33.908), stdev = 15.163
[info]   CI (99.9%): [≈ 0, 65.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69.65% complete, ETA 00:34:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 543.638 ops/s
[info] # Warmup Iteration   2: 6038.545 ops/s
[info] # Warmup Iteration   3: 8664.281 ops/s
[info] # Warmup Iteration   4: 8947.569 ops/s
[info] # Warmup Iteration   5: 9122.041 ops/s
[info] Iteration   1: 9174.698 ops/s
[info]                  ·gc.alloc.rate:                   2394.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              410357.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     458117.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.933 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 331.278 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 9241.297 ops/s
[info]                  ·gc.alloc.rate:                   2415.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              411352.512 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     342037.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95.720 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 9343.696 ops/s
[info]                  ·gc.alloc.rate:                   2441.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              411289.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     451361.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.506 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 9327.417 ops/s
[info]                  ·gc.alloc.rate:                   2438.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              411238.681 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     339840.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.512 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 9179.166 ops/s
[info]                  ·gc.alloc.rate:                   2440.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              418329.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2691.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     461414.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.569 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   9253.255 ±(99.9%) 307.346 ops/s [Average]
[info]   (min, avg, max) = (9174.698, 9253.255, 9343.696), stdev = 79.817
[info]   CI (99.9%): [8945.909, 9560.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2425.929 ±(99.9%) 79.795 MB/sec [Average]
[info]   (min, avg, max) = (2394.182, 2425.929, 2441.907), stdev = 20.722
[info]   CI (99.9%): [2346.134, 2505.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   412513.600 ±(99.9%) 12617.453 B/op [Average]
[info]   (min, avg, max) = (410357.846, 412513.600, 418329.738), stdev = 3276.712
[info]   CI (99.9%): [399896.147, 425131.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2413.441 ±(99.9%) 1412.742 MB/sec [Average]
[info]   (min, avg, max) = (2008.467, 2413.441, 2691.327), stdev = 366.884
[info]   CI (99.9%): [1000.699, 3826.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   410554.362 ±(99.9%) 245123.321 B/op [Average]
[info]   (min, avg, max) = (339840.233, 410554.362, 461414.556), stdev = 63657.748
[info]   CI (99.9%): [165431.041, 655677.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.511 ±(99.9%) 3.190 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.511, 1.933), stdev = 0.828
[info]   CI (99.9%): [≈ 0, 3.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   87.517 ±(99.9%) 546.766 B/op [Average]
[info]   (min, avg, max) = (3.506, 87.517, 331.278), stdev = 141.993
[info]   CI (99.9%): [≈ 0, 634.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 10.000), stdev = 2.074
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69.88% complete, ETA 00:34:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 706109.769 ops/s
[info] # Warmup Iteration   2: 10724895.572 ops/s
[info] # Warmup Iteration   3: 10946722.302 ops/s
[info] # Warmup Iteration   4: 13467533.758 ops/s
[info] # Warmup Iteration   5: 13373511.711 ops/s
[info] Iteration   1: 13318479.751 ops/s
[info]                  ·gc.alloc.rate:                   5898.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              697.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5364.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     633.926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 12938104.189 ops/s
[info]                  ·gc.alloc.rate:                   5734.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              697.504 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5397.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     656.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 13373317.496 ops/s
[info]                  ·gc.alloc.rate:                   5863.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              690.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          6100.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     717.910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   4: 13412529.965 ops/s
[info]                  ·gc.alloc.rate:                   5942.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              697.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5437.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     637.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 13572242.430 ops/s
[info]                  ·gc.alloc.rate:                   6041.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              700.355 B/op
[info]                  ·gc.churn.PS_Eden_Space:          6126.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     710.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   13322934.766 ±(99.9%) 904767.055 ops/s [Average]
[info]   (min, avg, max) = (12938104.189, 13322934.766, 13572242.430), stdev = 234965.131
[info]   CI (99.9%): [12418167.712, 14227701.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   5896.202 ±(99.9%) 432.541 MB/sec [Average]
[info]   (min, avg, max) = (5734.585, 5896.202, 6041.436), stdev = 112.330
[info]   CI (99.9%): [5463.661, 6328.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   696.448 ±(99.9%) 14.755 B/op [Average]
[info]   (min, avg, max) = (690.024, 696.448, 700.355), stdev = 3.832
[info]   CI (99.9%): [681.693, 711.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   5685.181 ±(99.9%) 1509.374 MB/sec [Average]
[info]   (min, avg, max) = (5364.102, 5685.181, 6126.654), stdev = 391.980
[info]   CI (99.9%): [4175.807, 7194.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   671.301 ±(99.9%) 154.219 B/op [Average]
[info]   (min, avg, max) = (633.926, 671.301, 717.910), stdev = 40.050
[info]   CI (99.9%): [517.082, 825.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.006, 0.010), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   42.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   62.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 12.400, 18.000), stdev = 3.209
[info]   CI (99.9%): [62.000, 62.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 70.12% complete, ETA 00:34:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.499 ops/s
[info] # Warmup Iteration   2: 40377450.180 ops/s
[info] # Warmup Iteration   3: 43331397.058 ops/s
[info] # Warmup Iteration   4: 40037118.018 ops/s
[info] # Warmup Iteration   5: 42912225.170 ops/s
[info] Iteration   1: 42837374.808 ops/s
[info]                  ·gc.alloc.rate:      0.258 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 39745164.041 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 39735571.013 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 39743665.081 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 39785356.356 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   40369426.260 ±(99.9%) 5312967.922 ops/s [Average]
[info]   (min, avg, max) = (39735571.013, 40369426.260, 42837374.808), stdev = 1379760.897
[info]   CI (99.9%): [35056458.338, 45682394.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   0.052 ±(99.9%) 0.443 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.052, 0.258), stdev = 0.115
[info]   CI (99.9%): [≈ 0, 0.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.002, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70.35% complete, ETA 00:33:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 140413.428 ops/s
[info] # Warmup Iteration   2: 19077130.771 ops/s
[info] # Warmup Iteration   3: 25322270.428 ops/s
[info] # Warmup Iteration   4: 25228627.778 ops/s
[info] # Warmup Iteration   5: 25256659.404 ops/s
[info] Iteration   1: 25231502.332 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 25179332.976 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 25177185.022 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 25020712.757 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 25090582.248 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   25139863.067 ±(99.9%) 322018.098 ops/s [Average]
[info]   (min, avg, max) = (25020712.757, 25139863.067, 25231502.332), stdev = 83627.077
[info]   CI (99.9%): [24817844.969, 25461881.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70.59% complete, ETA 00:33:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12009210.687 ops/s
[info] # Warmup Iteration   2: 45100333.875 ops/s
[info] # Warmup Iteration   3: 48417499.903 ops/s
[info] # Warmup Iteration   4: 48380388.045 ops/s
[info] # Warmup Iteration   5: 48413899.530 ops/s
[info] Iteration   1: 48416641.078 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 48398955.757 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 48452134.337 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 48410878.875 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 48302946.277 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   48396311.265 ±(99.9%) 214962.403 ops/s [Average]
[info]   (min, avg, max) = (48302946.277, 48396311.265, 48452134.337), stdev = 55825.053
[info]   CI (99.9%): [48181348.862, 48611273.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70.82% complete, ETA 00:33:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8734630.087 ops/s
[info] # Warmup Iteration   2: 28354038.151 ops/s
[info] # Warmup Iteration   3: 30094595.858 ops/s
[info] # Warmup Iteration   4: 31555813.829 ops/s
[info] # Warmup Iteration   5: 31601515.525 ops/s
[info] Iteration   1: 31078351.192 ops/s
[info]                  ·gc.alloc.rate:                   837.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              42.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 31633276.411 ops/s
[info]                  ·gc.alloc.rate:               829.089 MB/sec
[info]                  ·gc.alloc.rate.norm:          41.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.343 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 31627732.870 ops/s
[info]                  ·gc.alloc.rate:                   825.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              41.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 31623651.428 ops/s
[info]                  ·gc.alloc.rate:               821.921 MB/sec
[info]                  ·gc.alloc.rate.norm:          40.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.369 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 31473671.945 ops/s
[info]                  ·gc.alloc.rate:                   833.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              41.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   31487336.769 ±(99.9%) 917405.430 ops/s [Average]
[info]   (min, avg, max) = (31078351.192, 31487336.769, 31633276.411), stdev = 238247.277
[info]   CI (99.9%): [30569931.339, 32404742.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   829.371 ±(99.9%) 23.293 MB/sec [Average]
[info]   (min, avg, max) = (821.921, 829.371, 837.010), stdev = 6.049
[info]   CI (99.9%): [806.077, 852.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   41.446 ±(99.9%) 2.277 B/op [Average]
[info]   (min, avg, max) = (40.903, 41.446, 42.388), stdev = 0.591
[info]   CI (99.9%): [39.169, 43.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   937.895 ±(99.9%) 1410.208 MB/sec [Average]
[info]   (min, avg, max) = (670.256, 937.895, 1339.613), stdev = 366.227
[info]   CI (99.9%): [≈ 0, 2348.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   46.954 ±(99.9%) 71.697 B/op [Average]
[info]   (min, avg, max) = (33.343, 46.954, 67.841), stdev = 18.620
[info]   CI (99.9%): [≈ 0, 118.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.817
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 71.06% complete, ETA 00:33:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 655676.405 ops/s
[info] # Warmup Iteration   2: 20150912.526 ops/s
[info] # Warmup Iteration   3: 25528445.068 ops/s
[info] # Warmup Iteration   4: 25506861.238 ops/s
[info] # Warmup Iteration   5: 25529051.048 ops/s
[info] Iteration   1: 23685938.580 ops/s
[info]                  ·gc.alloc.rate:      65.223 MB/sec
[info]                  ·gc.alloc.rate.norm: 4.333 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 25591696.713 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 25594829.122 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 25582589.407 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 25527966.766 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   25196604.118 ±(99.9%) 3253496.495 ops/s [Average]
[info]   (min, avg, max) = (23685938.580, 25196604.118, 25594829.122), stdev = 844922.708
[info]   CI (99.9%): [21943107.623, 28450100.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   13.045 ±(99.9%) 112.318 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 13.045, 65.223), stdev = 29.169
[info]   CI (99.9%): [≈ 0, 125.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   0.867 ±(99.9%) 7.461 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.867, 4.333), stdev = 1.938
[info]   CI (99.9%): [≈ 0, 8.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71.29% complete, ETA 00:32:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1807959.523 ops/s
[info] # Warmup Iteration   2: 20000183.771 ops/s
[info] # Warmup Iteration   3: 21466589.804 ops/s
[info] # Warmup Iteration   4: 22205020.339 ops/s
[info] # Warmup Iteration   5: 21899852.146 ops/s
[info] Iteration   1: 21413226.221 ops/s
[info]                  ·gc.alloc.rate:                   1674.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              123.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 22127791.122 ops/s
[info]                  ·gc.alloc.rate:                   1746.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              124.218 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.287 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 22321969.010 ops/s
[info]                  ·gc.alloc.rate:               1729.914 MB/sec
[info]                  ·gc.alloc.rate.norm:          121.970 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 94.214 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 22129241.089 ops/s
[info]                  ·gc.alloc.rate:                   1740.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              123.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 22354057.731 ops/s
[info]                  ·gc.alloc.rate:                   1744.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              122.815 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   22069257.035 ±(99.9%) 1469281.216 ops/s [Average]
[info]   (min, avg, max) = (21413226.221, 22069257.035, 22354057.731), stdev = 381567.666
[info]   CI (99.9%): [20599975.819, 23538538.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   1727.141 ±(99.9%) 116.151 MB/sec [Average]
[info]   (min, avg, max) = (1674.399, 1727.141, 1746.487), stdev = 30.164
[info]   CI (99.9%): [1610.989, 1843.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   123.166 ±(99.9%) 3.350 B/op [Average]
[info]   (min, avg, max) = (121.970, 123.166, 124.218), stdev = 0.870
[info]   CI (99.9%): [119.816, 126.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1604.163 ±(99.9%) 1411.924 MB/sec [Average]
[info]   (min, avg, max) = (1334.896, 1604.163, 2008.767), stdev = 366.672
[info]   CI (99.9%): [192.239, 3016.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   114.366 ±(99.9%) 99.624 B/op [Average]
[info]   (min, avg, max) = (93.988, 114.366, 142.872), stdev = 25.872
[info]   CI (99.9%): [14.742, 213.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.837 ±(99.9%) 6.893 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.837, 4.039), stdev = 1.790
[info]   CI (99.9%): [≈ 0, 7.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.060 ±(99.9%) 0.490 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.060, 0.287), stdev = 0.127
[info]   CI (99.9%): [≈ 0, 0.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 3.050
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71.53% complete, ETA 00:32:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.557 ops/s
[info] # Warmup Iteration   2: 57316862.634 ops/s
[info] # Warmup Iteration   3: 58184888.356 ops/s
[info] # Warmup Iteration   4: 61724495.214 ops/s
[info] # Warmup Iteration   5: 61746411.706 ops/s
[info] Iteration   1: 61535496.692 ops/s
[info]                  ·gc.alloc.rate:               1294.094 MB/sec
[info]                  ·gc.alloc.rate.norm:          33.096 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34.009 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 61774075.508 ops/s
[info]                  ·gc.alloc.rate:                   1300.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 62192633.901 ops/s
[info]                  ·gc.alloc.rate:               1278.266 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16.840 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 61719012.431 ops/s
[info]                  ·gc.alloc.rate:                   1295.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.179 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 61823081.606 ops/s
[info]                  ·gc.alloc.rate:                   1284.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   61808860.028 ±(99.9%) 926347.423 ops/s [Average]
[info]   (min, avg, max) = (61535496.692, 61808860.028, 62192633.901), stdev = 240569.484
[info]   CI (99.9%): [60882512.605, 62735207.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1290.503 ±(99.9%) 34.451 MB/sec [Average]
[info]   (min, avg, max) = (1278.266, 1290.503, 1300.061), stdev = 8.947
[info]   CI (99.9%): [1256.051, 1324.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   32.850 ±(99.9%) 1.255 B/op [Average]
[info]   (min, avg, max) = (32.346, 32.850, 33.096), stdev = 0.326
[info]   CI (99.9%): [31.596, 34.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1197.388 ±(99.9%) 1144.952 MB/sec [Average]
[info]   (min, avg, max) = (665.496, 1197.388, 1332.337), stdev = 297.340
[info]   CI (99.9%): [52.436, 2342.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   30.499 ±(99.9%) 29.404 B/op [Average]
[info]   (min, avg, max) = (16.840, 30.499, 34.009), stdev = 7.636
[info]   CI (99.9%): [1.095, 59.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   1.048 ±(99.9%) 8.891 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.048, 5.179), stdev = 2.309
[info]   CI (99.9%): [≈ 0, 9.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.027 ±(99.9%) 0.227 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.132), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 8.000), stdev = 2.683
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71.76% complete, ETA 00:32:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 622679.814 ops/s
[info] # Warmup Iteration   2: 22674582.754 ops/s
[info] # Warmup Iteration   3: 27126259.748 ops/s
[info] # Warmup Iteration   4: 27734153.888 ops/s
[info] # Warmup Iteration   5: 28119328.810 ops/s
[info] Iteration   1: 28141558.917 ops/s
[info]                  ·gc.alloc.rate:                   591.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 28051770.928 ops/s
[info]                  ·gc.alloc.rate:               585.871 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.867 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37.131 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 28133756.570 ops/s
[info]                  ·gc.alloc.rate:                   591.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 27936403.616 ops/s
[info]                  ·gc.alloc.rate:               583.688 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.884 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37.358 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 28056197.717 ops/s
[info]                  ·gc.alloc.rate:               590.267 MB/sec
[info]                  ·gc.alloc.rate.norm:          33.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37.294 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   28063937.550 ±(99.9%) 318538.152 ops/s [Average]
[info]   (min, avg, max) = (27936403.616, 28063937.550, 28141558.917), stdev = 82723.347
[info]   CI (99.9%): [27745399.397, 28382475.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   588.680 ±(99.9%) 14.230 MB/sec [Average]
[info]   (min, avg, max) = (583.688, 588.680, 591.831), stdev = 3.696
[info]   CI (99.9%): [574.450, 602.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   33.012 ±(99.9%) 0.483 B/op [Average]
[info]   (min, avg, max) = (32.867, 33.012, 33.114), stdev = 0.125
[info]   CI (99.9%): [32.529, 33.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   662.961 ±(99.9%) 4.652 MB/sec [Average]
[info]   (min, avg, max) = (661.814, 662.961, 664.775), stdev = 1.208
[info]   CI (99.9%): [658.309, 667.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   37.179 ±(99.9%) 0.552 B/op [Average]
[info]   (min, avg, max) = (37.012, 37.179, 37.358), stdev = 0.143
[info]   CI (99.9%): [36.627, 37.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 72.00% complete, ETA 00:32:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7364981.069 ops/s
[info] # Warmup Iteration   2: 46979458.295 ops/s
[info] # Warmup Iteration   3: 51522989.359 ops/s
[info] # Warmup Iteration   4: 51749805.809 ops/s
[info] # Warmup Iteration   5: 51080282.091 ops/s
[info] Iteration   1: 52412871.795 ops/s
[info]                  ·gc.alloc.rate:                   1091.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 52221205.541 ops/s
[info]                  ·gc.alloc.rate:                   1103.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 52135150.639 ops/s
[info]                  ·gc.alloc.rate:               1092.941 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40.422 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 51955507.947 ops/s
[info]                  ·gc.alloc.rate:                   1078.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.665 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 51673727.305 ops/s
[info]                  ·gc.alloc.rate:                   1083.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.121 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   52079692.645 ±(99.9%) 1079450.832 ops/s [Average]
[info]   (min, avg, max) = (51673727.305, 52079692.645, 52412871.795), stdev = 280329.953
[info]   CI (99.9%): [51000241.813, 53159143.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1090.021 ±(99.9%) 36.236 MB/sec [Average]
[info]   (min, avg, max) = (1078.759, 1090.021, 1103.447), stdev = 9.410
[info]   CI (99.9%): [1053.785, 1126.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.938 ±(99.9%) 0.889 B/op [Average]
[info]   (min, avg, max) = (32.665, 32.938, 33.254), stdev = 0.231
[info]   CI (99.9%): [32.048, 33.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1071.028 ±(99.9%) 1412.343 MB/sec [Average]
[info]   (min, avg, max) = (668.427, 1071.028, 1339.915), stdev = 366.781
[info]   CI (99.9%): [≈ 0, 2483.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   32.382 ±(99.9%) 42.895 B/op [Average]
[info]   (min, avg, max) = (20.072, 32.382, 40.811), stdev = 11.140
[info]   CI (99.9%): [≈ 0, 75.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.816 ±(99.9%) 6.808 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.816, 3.979), stdev = 1.768
[info]   CI (99.9%): [≈ 0, 7.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.207 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.121), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 2.049
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 72.24% complete, ETA 00:31:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8939480.584 ops/s
[info] # Warmup Iteration   2: 61657815.155 ops/s
[info] # Warmup Iteration   3: 65653900.902 ops/s
[info] # Warmup Iteration   4: 65516883.306 ops/s
[info] # Warmup Iteration   5: 64475096.091 ops/s
[info] Iteration   1: 64705841.760 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 64952225.261 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 65020632.651 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 65084001.048 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 64882723.552 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   64929084.854 ±(99.9%) 561000.479 ops/s [Average]
[info]   (min, avg, max) = (64705841.760, 64929084.854, 65084001.048), stdev = 145690.043
[info]   CI (99.9%): [64368084.375, 65490085.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72.47% complete, ETA 00:31:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6947407.485 ops/s
[info] # Warmup Iteration   2: 24674441.977 ops/s
[info] # Warmup Iteration   3: 26739882.069 ops/s
[info] # Warmup Iteration   4: 26649368.647 ops/s
[info] # Warmup Iteration   5: 25946854.243 ops/s
[info] Iteration   1: 26555311.837 ops/s
[info]                  ·gc.alloc.rate:                   2098.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              124.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 26772722.938 ops/s
[info]                  ·gc.alloc.rate:                   2093.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              122.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 26778126.396 ops/s
[info]                  ·gc.alloc.rate:                   2094.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              123.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 26816433.075 ops/s
[info]                  ·gc.alloc.rate:                   2124.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              124.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 25940595.058 ops/s
[info]                  ·gc.alloc.rate:               2083.630 MB/sec
[info]                  ·gc.alloc.rate.norm:          126.357 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 122.295 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   26572637.861 ±(99.9%) 1416746.541 ops/s [Average]
[info]   (min, avg, max) = (25940595.058, 26572637.861, 26816433.075), stdev = 367924.578
[info]   CI (99.9%): [25155891.320, 27989384.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2098.835 ±(99.9%) 59.318 MB/sec [Average]
[info]   (min, avg, max) = (2083.630, 2098.835, 2124.621), stdev = 15.405
[info]   CI (99.9%): [2039.517, 2158.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   124.296 ±(99.9%) 5.317 B/op [Average]
[info]   (min, avg, max) = (122.996, 124.296, 126.357), stdev = 1.381
[info]   CI (99.9%): [118.980, 129.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   2015.114 ±(99.9%) 9.209 MB/sec [Average]
[info]   (min, avg, max) = (2012.807, 2015.114, 2018.392), stdev = 2.392
[info]   CI (99.9%): [2005.905, 2024.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   119.345 ±(99.9%) 6.749 B/op [Average]
[info]   (min, avg, max) = (118.144, 119.345, 122.295), stdev = 1.753
[info]   CI (99.9%): [112.596, 126.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.635 ±(99.9%) 5.337 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.635, 3.115), stdev = 1.386
[info]   CI (99.9%): [≈ 0, 5.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.316 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.185), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 7.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72.71% complete, ETA 00:31:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 347784.743 ops/s
[info] # Warmup Iteration   2: 2041971.472 ops/s
[info] # Warmup Iteration   3: 3652470.929 ops/s
[info] # Warmup Iteration   4: 3696179.881 ops/s
[info] # Warmup Iteration   5: 3691081.230 ops/s
[info] Iteration   1: 3723816.612 ops/s
[info]                  ·gc.alloc.rate:                   1530.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              646.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     561.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 3668494.575 ops/s
[info]                  ·gc.alloc.rate:               1519.903 MB/sec
[info]                  ·gc.alloc.rate.norm:          652.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 570.711 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   3: 3635106.903 ops/s
[info]                  ·gc.alloc.rate:                   1503.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              650.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     864.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.871 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 3718153.011 ops/s
[info]                  ·gc.alloc.rate:                   1521.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              643.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     562.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.088 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3752700.151 ops/s
[info]                  ·gc.alloc.rate:                   1546.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     557.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   3699654.251 ±(99.9%) 181401.469 ops/s [Average]
[info]   (min, avg, max) = (3635106.903, 3699654.251, 3752700.151), stdev = 47109.385
[info]   CI (99.9%): [3518252.781, 3881055.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1524.237 ±(99.9%) 60.351 MB/sec [Average]
[info]   (min, avg, max) = (1503.342, 1524.237, 1546.162), stdev = 15.673
[info]   CI (99.9%): [1463.886, 1584.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   648.413 ±(99.9%) 12.693 B/op [Average]
[info]   (min, avg, max) = (643.798, 648.413, 652.088), stdev = 3.296
[info]   CI (99.9%): [635.720, 661.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1462.770 ±(99.9%) 1150.130 MB/sec [Average]
[info]   (min, avg, max) = (1328.318, 1462.770, 1997.073), stdev = 298.685
[info]   CI (99.9%): [312.641, 2612.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   623.333 ±(99.9%) 519.832 B/op [Average]
[info]   (min, avg, max) = (557.086, 623.333, 864.666), stdev = 134.999
[info]   CI (99.9%): [103.501, 1143.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.919 ±(99.9%) 7.333 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.919, 4.322), stdev = 1.904
[info]   CI (99.9%): [≈ 0, 8.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.397 ±(99.9%) 3.176 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.397, 1.871), stdev = 0.825
[info]   CI (99.9%): [≈ 0, 3.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 10.000), stdev = 3.362
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72.94% complete, ETA 00:30:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46824.803 ops/s
[info] # Warmup Iteration   2: 143274.306 ops/s
[info] # Warmup Iteration   3: 168075.246 ops/s
[info] # Warmup Iteration   4: 178245.866 ops/s
[info] # Warmup Iteration   5: 182524.261 ops/s
[info] Iteration   1: 182431.775 ops/s
[info]                  ·gc.alloc.rate:                   3439.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              29672.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3335.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28774.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 181695.025 ops/s
[info]                  ·gc.alloc.rate:                   3453.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              29908.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3347.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28991.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 178306.282 ops/s
[info]                  ·gc.alloc.rate:               3393.146 MB/sec
[info]                  ·gc.alloc.rate.norm:          29932.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3356.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29612.715 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 183267.360 ops/s
[info]                  ·gc.alloc.rate:                   3484.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              29912.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3370.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28928.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.179 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 183488.424 ops/s
[info]                  ·gc.alloc.rate:                   3473.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              29793.628 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2705.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23209.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.179 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   181837.773 ±(99.9%) 8080.165 ops/s [Average]
[info]   (min, avg, max) = (178306.282, 181837.773, 183488.424), stdev = 2098.393
[info]   CI (99.9%): [173757.608, 189917.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3448.854 ±(99.9%) 137.515 MB/sec [Average]
[info]   (min, avg, max) = (3393.146, 3448.854, 3484.970), stdev = 35.712
[info]   CI (99.9%): [3311.339, 3586.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29844.218 ±(99.9%) 424.722 B/op [Average]
[info]   (min, avg, max) = (29672.895, 29844.218, 29932.984), stdev = 110.299
[info]   CI (99.9%): [29419.496, 30268.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   3223.133 ±(99.9%) 1114.980 MB/sec [Average]
[info]   (min, avg, max) = (2705.659, 3223.133, 3370.317), stdev = 289.557
[info]   CI (99.9%): [2108.153, 4338.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   27903.302 ±(99.9%) 10178.295 B/op [Average]
[info]   (min, avg, max) = (23209.506, 27903.302, 29612.715), stdev = 2643.271
[info]   CI (99.9%): [17725.007, 38081.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.143 ±(99.9%) 0.309 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.143, 0.180), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 7.000), stdev = 1.304
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73.18% complete, ETA 00:30:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1650.467 ops/s
[info] # Warmup Iteration   2: 18022.771 ops/s
[info] # Warmup Iteration   3: 44523.038 ops/s
[info] # Warmup Iteration   4: 44839.774 ops/s
[info] # Warmup Iteration   5: 43865.251 ops/s
[info] Iteration   1: 44231.747 ops/s
[info]                  ·gc.alloc.rate:                   2857.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              101664.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95094.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.999 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 45037.733 ops/s
[info]                  ·gc.alloc.rate:                   2877.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              100524.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93453.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.910 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 44553.960 ops/s
[info]                  ·gc.alloc.rate:                   2867.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              101280.154 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3351.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118397.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.206 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 44919.322 ops/s
[info]                  ·gc.alloc.rate:               2889.266 MB/sec
[info]                  ·gc.alloc.rate.norm:          101227.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2690.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 94262.151 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 44495.526 ops/s
[info]                  ·gc.alloc.rate:                   2895.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              102430.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2698.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95449.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.736 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   44647.658 ±(99.9%) 1263.788 ops/s [Average]
[info]   (min, avg, max) = (44231.747, 44647.658, 45037.733), stdev = 328.202
[info]   CI (99.9%): [43383.869, 45911.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2877.416 ±(99.9%) 60.381 MB/sec [Average]
[info]   (min, avg, max) = (2857.430, 2877.416, 2895.853), stdev = 15.681
[info]   CI (99.9%): [2817.035, 2937.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   101425.545 ±(99.9%) 2681.096 B/op [Average]
[info]   (min, avg, max) = (100524.624, 101425.545, 102430.571), stdev = 696.272
[info]   CI (99.9%): [98744.449, 104106.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2817.684 ±(99.9%) 1150.508 MB/sec [Average]
[info]   (min, avg, max) = (2672.768, 2817.684, 3351.819), stdev = 298.783
[info]   CI (99.9%): [1667.177, 3968.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   99331.348 ±(99.9%) 41149.085 B/op [Average]
[info]   (min, avg, max) = (93453.254, 99331.348, 118397.481), stdev = 10686.287
[info]   CI (99.9%): [58182.264, 140480.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.146 ±(99.9%) 0.905 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.146, 0.562), stdev = 0.235
[info]   CI (99.9%): [≈ 0, 1.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.170 ±(99.9%) 32.227 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.170, 19.999), stdev = 8.369
[info]   CI (99.9%): [≈ 0, 37.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.41% complete, ETA 00:30:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17000.880 ops/s
[info] # Warmup Iteration   2: 154702.916 ops/s
[info] # Warmup Iteration   3: 205809.755 ops/s
[info] # Warmup Iteration   4: 224805.683 ops/s
[info] # Warmup Iteration   5: 225550.107 ops/s
[info] Iteration   1: 232283.160 ops/s
[info]                  ·gc.alloc.rate:                   860.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              5828.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8973.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 232866.286 ops/s
[info]                  ·gc.alloc.rate:               844.490 MB/sec
[info]                  ·gc.alloc.rate.norm:          5706.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4486.520 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 229230.823 ops/s
[info]                  ·gc.alloc.rate:                   833.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              5722.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4557.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.143 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 226240.421 ops/s
[info]                  ·gc.alloc.rate:               828.766 MB/sec
[info]                  ·gc.alloc.rate.norm:          5765.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4627.127 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 230486.055 ops/s
[info]                  ·gc.alloc.rate:                   853.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              5826.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9093.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.142 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   230221.349 ±(99.9%) 10214.328 ops/s [Average]
[info]   (min, avg, max) = (226240.421, 230221.349, 232866.286), stdev = 2652.629
[info]   CI (99.9%): [220007.021, 240435.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   844.107 ±(99.9%) 50.558 MB/sec [Average]
[info]   (min, avg, max) = (828.766, 844.107, 860.280), stdev = 13.130
[info]   CI (99.9%): [793.549, 894.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5769.954 ±(99.9%) 219.186 B/op [Average]
[info]   (min, avg, max) = (5706.508, 5769.954, 5828.624), stdev = 56.922
[info]   CI (99.9%): [5550.767, 5989.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   929.816 ±(99.9%) 1399.684 MB/sec [Average]
[info]   (min, avg, max) = (663.947, 929.816, 1331.599), stdev = 363.493
[info]   CI (99.9%): [≈ 0, 2329.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6347.476 ±(99.9%) 9443.630 B/op [Average]
[info]   (min, avg, max) = (4486.520, 6347.476, 9093.093), stdev = 2452.481
[info]   CI (99.9%): [≈ 0, 15791.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.085 ±(99.9%) 0.300 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.085, 0.143), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.140
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.65% complete, ETA 00:30:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 197942.719 ops/s
[info] # Warmup Iteration   2: 393995.582 ops/s
[info] # Warmup Iteration   3: 544306.911 ops/s
[info] # Warmup Iteration   4: 539924.285 ops/s
[info] # Warmup Iteration   5: 524755.890 ops/s
[info] Iteration   1: 545461.660 ops/s
[info]                  ·gc.alloc.rate:                   989.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              2854.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1929.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 536824.935 ops/s
[info]                  ·gc.alloc.rate:                   1001.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              2935.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3922.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 523758.214 ops/s
[info]                  ·gc.alloc.rate:               959.364 MB/sec
[info]                  ·gc.alloc.rate.norm:          2882.775 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2010.730 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 526266.124 ops/s
[info]                  ·gc.alloc.rate:               996.177 MB/sec
[info]                  ·gc.alloc.rate.norm:          2979.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4004.008 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   5: 539618.577 ops/s
[info]                  ·gc.alloc.rate:                   985.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              2873.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1952.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.928 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.538 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   534385.902 ±(99.9%) 35232.904 ops/s [Average]
[info]   (min, avg, max) = (523758.214, 534385.902, 545461.660), stdev = 9149.873
[info]   CI (99.9%): [499152.998, 569618.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   986.347 ±(99.9%) 62.528 MB/sec [Average]
[info]   (min, avg, max) = (959.364, 986.347, 1001.144), stdev = 16.238
[info]   CI (99.9%): [923.819, 1048.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2905.168 ±(99.9%) 196.022 B/op [Average]
[info]   (min, avg, max) = (2854.914, 2905.168, 2979.137), stdev = 50.906
[info]   CI (99.9%): [2709.146, 3101.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   936.891 ±(99.9%) 1411.459 MB/sec [Average]
[info]   (min, avg, max) = (668.881, 936.891, 1338.878), stdev = 366.551
[info]   CI (99.9%): [≈ 0, 2348.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2763.933 ±(99.9%) 4218.861 B/op [Average]
[info]   (min, avg, max) = (1929.748, 2763.933, 4004.008), stdev = 1095.625
[info]   CI (99.9%): [≈ 0, 6982.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.590 ±(99.9%) 5.033 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.590, 2.928), stdev = 1.307
[info]   CI (99.9%): [≈ 0, 5.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.720 ±(99.9%) 14.677 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.720, 8.538), stdev = 3.812
[info]   CI (99.9%): [≈ 0, 16.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 9.000), stdev = 2.408
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73.88% complete, ETA 00:29:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 149582.142 ops/s
[info] # Warmup Iteration   2: 499934.745 ops/s
[info] # Warmup Iteration   3: 576692.897 ops/s
[info] # Warmup Iteration   4: 565307.498 ops/s
[info] # Warmup Iteration   5: 567164.935 ops/s
[info] Iteration   1: 575554.266 ops/s
[info]                  ·gc.alloc.rate:      397.870 MB/sec
[info]                  ·gc.alloc.rate.norm: 1088.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 573481.946 ops/s
[info]                  ·gc.alloc.rate:               412.913 MB/sec
[info]                  ·gc.alloc.rate.norm:          1133.204 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1831.826 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 563869.506 ops/s
[info]                  ·gc.alloc.rate:      401.029 MB/sec
[info]                  ·gc.alloc.rate.norm: 1119.319 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 572343.929 ops/s
[info]                  ·gc.alloc.rate:                   414.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              1139.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1835.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 563299.959 ops/s
[info]                  ·gc.alloc.rate:                   405.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              1131.958 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1864.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   569709.921 ±(99.9%) 21995.958 ops/s [Average]
[info]   (min, avg, max) = (563299.959, 569709.921, 575554.266), stdev = 5712.280
[info]   CI (99.9%): [547713.963, 591705.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   406.265 ±(99.9%) 27.663 MB/sec [Average]
[info]   (min, avg, max) = (397.870, 406.265, 414.228), stdev = 7.184
[info]   CI (99.9%): [378.602, 433.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1122.321 ±(99.9%) 78.925 B/op [Average]
[info]   (min, avg, max) = (1088.001, 1122.321, 1139.121), stdev = 20.497
[info]   CI (99.9%): [1043.396, 1201.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   400.529 ±(99.9%) 1407.917 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 400.529, 667.734), stdev = 365.632
[info]   CI (99.9%): [≈ 0, 1808.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   1106.447 ±(99.9%) 3889.633 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1106.447, 1864.966), stdev = 1010.125
[info]   CI (99.9%): [≈ 0, 4996.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.017 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74.12% complete, ETA 00:29:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6436.602 ops/s
[info] # Warmup Iteration   2: 48342.551 ops/s
[info] # Warmup Iteration   3: 72750.051 ops/s
[info] # Warmup Iteration   4: 75656.298 ops/s
[info] # Warmup Iteration   5: 84902.300 ops/s
[info] Iteration   1: 88839.838 ops/s
[info]                  ·gc.alloc.rate:                   1459.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              25848.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23655.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.369 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 87974.180 ops/s
[info]                  ·gc.alloc.rate:                   1472.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              26337.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35833.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.427 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 89242.666 ops/s
[info]                  ·gc.alloc.rate:                   1461.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              25770.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23566.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.748 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 89346.378 ops/s
[info]                  ·gc.alloc.rate:                   1463.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              25782.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23539.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.501 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 89403.257 ops/s
[info]                  ·gc.alloc.rate:                   1459.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              25689.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23524.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.466 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   88961.264 ±(99.9%) 2287.763 ops/s [Average]
[info]   (min, avg, max) = (87974.180, 88961.264, 89403.257), stdev = 594.125
[info]   CI (99.9%): [86673.501, 91249.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1463.160 ±(99.9%) 21.176 MB/sec [Average]
[info]   (min, avg, max) = (1459.011, 1463.160, 1472.466), stdev = 5.499
[info]   CI (99.9%): [1441.984, 1484.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   25885.717 ±(99.9%) 995.943 B/op [Average]
[info]   (min, avg, max) = (25689.223, 25885.717, 26337.120), stdev = 258.643
[info]   CI (99.9%): [24889.774, 26881.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1469.520 ±(99.9%) 1149.159 MB/sec [Average]
[info]   (min, avg, max) = (1335.209, 1469.520, 2003.373), stdev = 298.433
[info]   CI (99.9%): [320.361, 2618.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   26023.829 ±(99.9%) 21116.158 B/op [Average]
[info]   (min, avg, max) = (23524.766, 26023.829, 35833.126), stdev = 5483.799
[info]   CI (99.9%): [4907.670, 47139.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.512 ±(99.9%) 2.295 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.512, 1.477), stdev = 0.596
[info]   CI (99.9%): [≈ 0, 2.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9.102 ±(99.9%) 41.055 B/op [Average]
[info]   (min, avg, max) = (0.369, 9.102, 26.427), stdev = 10.662
[info]   CI (99.9%): [≈ 0, 50.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 8.000), stdev = 2.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74.35% complete, ETA 00:29:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53364.408 ops/s
[info] # Warmup Iteration   2: 343643.668 ops/s
[info] # Warmup Iteration   3: 359726.646 ops/s
[info] # Warmup Iteration   4: 372040.571 ops/s
[info] # Warmup Iteration   5: 372645.362 ops/s
[info] Iteration   1: 375042.794 ops/s
[info]                  ·gc.alloc.rate:                   2696.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              11313.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2654.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11139.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.572 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 372704.104 ops/s
[info]                  ·gc.alloc.rate:                   2698.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              11396.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2653.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11206.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.854 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 372487.057 ops/s
[info]                  ·gc.alloc.rate:               2688.481 MB/sec
[info]                  ·gc.alloc.rate.norm:          11359.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2655.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11220.579 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 373967.970 ops/s
[info]                  ·gc.alloc.rate:                   2738.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              11525.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2663.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11207.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.088 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 371987.635 ops/s
[info]                  ·gc.alloc.rate:                   2726.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              11532.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11312.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.088 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   373237.912 ±(99.9%) 4794.982 ops/s [Average]
[info]   (min, avg, max) = (371987.635, 373237.912, 375042.794), stdev = 1245.242
[info]   CI (99.9%): [368442.930, 378032.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2709.715 ±(99.9%) 83.487 MB/sec [Average]
[info]   (min, avg, max) = (2688.481, 2709.715, 2738.730), stdev = 21.681
[info]   CI (99.9%): [2626.227, 2793.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   11425.558 ±(99.9%) 380.950 B/op [Average]
[info]   (min, avg, max) = (11313.977, 11425.558, 11532.748), stdev = 98.931
[info]   CI (99.9%): [11044.609, 11806.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2660.379 ±(99.9%) 33.694 MB/sec [Average]
[info]   (min, avg, max) = (2653.883, 2660.379, 2674.500), stdev = 8.750
[info]   CI (99.9%): [2626.686, 2694.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11217.574 ±(99.9%) 238.309 B/op [Average]
[info]   (min, avg, max) = (11139.867, 11217.574, 11312.770), stdev = 61.888
[info]   CI (99.9%): [10979.265, 11455.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.408 ±(99.9%) 2.684 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.408, 1.623), stdev = 0.697
[info]   CI (99.9%): [≈ 0, 3.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.720 ±(99.9%) 11.335 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.720, 6.854), stdev = 2.944
[info]   CI (99.9%): [≈ 0, 13.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 10.000), stdev = 2.191
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.59% complete, ETA 00:29:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69404.463 ops/s
[info] # Warmup Iteration   2: 570723.146 ops/s
[info] # Warmup Iteration   3: 719962.935 ops/s
[info] # Warmup Iteration   4: 837933.076 ops/s
[info] # Warmup Iteration   5: 822440.824 ops/s
[info] Iteration   1: 818972.080 ops/s
[info]                  ·gc.alloc.rate:                   1791.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              3442.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2553.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 826040.219 ops/s
[info]                  ·gc.alloc.rate:                   1811.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              3452.159 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3808.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.469 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.893 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 832384.819 ops/s
[info]                  ·gc.alloc.rate:                   1832.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              3463.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3789.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.197 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 846908.122 ops/s
[info]                  ·gc.alloc.rate:               1835.029 MB/sec
[info]                  ·gc.alloc.rate.norm:          3410.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2489.483 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 833265.659 ops/s
[info]                  ·gc.alloc.rate:               1833.476 MB/sec
[info]                  ·gc.alloc.rate.norm:          3463.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3804.271 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   831514.180 ±(99.9%) 39834.519 ops/s [Average]
[info]   (min, avg, max) = (818972.080, 831514.180, 846908.122), stdev = 10344.898
[info]   CI (99.9%): [791679.661, 871348.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1820.910 ±(99.9%) 73.212 MB/sec [Average]
[info]   (min, avg, max) = (1791.479, 1820.910, 1835.029), stdev = 19.013
[info]   CI (99.9%): [1747.698, 1894.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3446.440 ±(99.9%) 84.863 B/op [Average]
[info]   (min, avg, max) = (3410.190, 3446.440, 3463.932), stdev = 22.039
[info]   CI (99.9%): [3361.576, 3531.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1737.279 ±(99.9%) 1416.869 MB/sec [Average]
[info]   (min, avg, max) = (1328.941, 1737.279, 2014.111), stdev = 367.956
[info]   CI (99.9%): [320.410, 3154.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3289.101 ±(99.9%) 2699.051 B/op [Average]
[info]   (min, avg, max) = (2489.483, 3289.101, 3808.386), stdev = 700.935
[info]   CI (99.9%): [590.050, 5988.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.119 ±(99.9%) 0.771 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.119, 0.469), stdev = 0.200
[info]   CI (99.9%): [≈ 0, 0.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.226 ±(99.9%) 1.470 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.226, 0.893), stdev = 0.382
[info]   CI (99.9%): [≈ 0, 1.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.82% complete, ETA 00:28:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 525644.318 ops/s
[info] # Warmup Iteration   2: 1477069.418 ops/s
[info] # Warmup Iteration   3: 1630359.265 ops/s
[info] # Warmup Iteration   4: 1559239.735 ops/s
[info] # Warmup Iteration   5: 1645280.611 ops/s
[info] Iteration   1: 1672708.980 ops/s
[info]                  ·gc.alloc.rate:               3357.219 MB/sec
[info]                  ·gc.alloc.rate.norm:          3158.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3342.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3145.471 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 1677917.936 ops/s
[info]                  ·gc.alloc.rate:                   3408.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              3196.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3351.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3143.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1678768.001 ops/s
[info]                  ·gc.alloc.rate:                   3410.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              3197.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3363.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3153.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1666834.589 ops/s
[info]                  ·gc.alloc.rate:                   3389.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              3199.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3376.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3186.917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1667805.856 ops/s
[info]                  ·gc.alloc.rate:               3390.411 MB/sec
[info]                  ·gc.alloc.rate.norm:          3199.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3384.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3194.239 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   1672807.073 ±(99.9%) 21296.005 ops/s [Average]
[info]   (min, avg, max) = (1666834.589, 1672807.073, 1678768.001), stdev = 5530.505
[info]   CI (99.9%): [1651511.068, 1694103.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3391.255 ±(99.9%) 82.507 MB/sec [Average]
[info]   (min, avg, max) = (3357.219, 3391.255, 3410.842), stdev = 21.427
[info]   CI (99.9%): [3308.748, 3473.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3190.362 ±(99.9%) 67.829 B/op [Average]
[info]   (min, avg, max) = (3158.904, 3190.362, 3199.389), stdev = 17.615
[info]   CI (99.9%): [3122.533, 3258.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   3363.878 ±(99.9%) 66.983 MB/sec [Average]
[info]   (min, avg, max) = (3342.942, 3363.878, 3384.954), stdev = 17.395
[info]   CI (99.9%): [3296.895, 3430.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3164.658 ±(99.9%) 92.817 B/op [Average]
[info]   (min, avg, max) = (3143.217, 3164.658, 3194.239), stdev = 24.104
[info]   CI (99.9%): [3071.841, 3257.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.039), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.400, 11.000), stdev = 2.074
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75.06% complete, ETA 00:28:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9456.794 ops/s
[info] # Warmup Iteration   2: 127623.293 ops/s
[info] # Warmup Iteration   3: 172788.525 ops/s
[info] # Warmup Iteration   4: 189040.665 ops/s
[info] # Warmup Iteration   5: 193300.096 ops/s
[info] Iteration   1: 185126.427 ops/s
[info]                  ·gc.alloc.rate:                        4800.779 MB/sec
[info]                  ·gc.alloc.rate.norm:                   40814.692 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.018 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0.150 B/op
[info]                  ·gc.churn.Metaspace:                   0.050 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              0.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:               4667.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          39685.049 B/op
[info]                  ·gc.churn.PS_Old_Gen:                  5.521 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:             46.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      2.301 B/op
[info]                  ·gc.count:                             9.000 counts
[info]                  ·gc.time:                              49.000 ms
[info] Iteration   2: 191366.671 ops/s
[info]                  ·gc.alloc.rate:                   4973.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              40900.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4688.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38561.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.514 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 192971.878 ops/s
[info]                  ·gc.alloc.rate:                   5016.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              40909.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4718.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38480.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.340 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 189748.160 ops/s
[info]                  ·gc.alloc.rate:                   4935.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              40941.822 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4738.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39304.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.518 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 186083.668 ops/s
[info]                  ·gc.alloc.rate:                   4877.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              41246.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4742.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40097.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.422 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   189059.361 ±(99.9%) 12976.819 ops/s [Average]
[info]   (min, avg, max) = (185126.427, 189059.361, 192971.878), stdev = 3370.039
[info]   CI (99.9%): [176082.542, 202036.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4920.937 ±(99.9%) 324.752 MB/sec [Average]
[info]   (min, avg, max) = (4800.779, 4920.937, 5016.898), stdev = 84.337
[info]   CI (99.9%): [4596.185, 5245.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   40962.689 ±(99.9%) 636.384 B/op [Average]
[info]   (min, avg, max) = (40814.692, 40962.689, 41246.085), stdev = 165.267
[info]   CI (99.9%): [40326.305, 41599.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space":
[info]   0.004 ±(99.9%) 0.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space.norm":
[info]   0.030 ±(99.9%) 0.259 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.150), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.Metaspace":
[info]   0.010 ±(99.9%) 0.087 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.050), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.Metaspace.norm":
[info]   0.086 ±(99.9%) 0.737 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.086, 0.428), stdev = 0.191
[info]   CI (99.9%): [≈ 0, 0.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4711.216 ±(99.9%) 123.920 MB/sec [Average]
[info]   (min, avg, max) = (4667.906, 4711.216, 4742.063), stdev = 32.182
[info]   CI (99.9%): [4587.296, 4835.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   39225.609 ±(99.9%) 2705.704 B/op [Average]
[info]   (min, avg, max) = (38480.078, 39225.609, 40097.550), stdev = 702.663
[info]   CI (99.9%): [36519.905, 41931.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Old_Gen":
[info]   1.104 ±(99.9%) 9.507 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.104, 5.521), stdev = 2.469
[info]   CI (99.9%): [≈ 0, 10.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Old_Gen.norm":
[info]   9.387 ±(99.9%) 80.827 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.387, 46.936), stdev = 20.990
[info]   CI (99.9%): [≈ 0, 90.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.097 ±(99.9%) 0.374 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.097, 0.271), stdev = 0.097
[info]   CI (99.9%): [≈ 0, 0.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.819 ±(99.9%) 3.203 B/op [Average]
[info]   (min, avg, max) = (0.340, 0.819, 2.301), stdev = 0.832
[info]   CI (99.9%): [≈ 0, 4.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 9.000), stdev = 0.894
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   91.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 18.200, 49.000), stdev = 17.341
[info]   CI (99.9%): [91.000, 91.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 75.29% complete, ETA 00:28:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68388.189 ops/s
[info] # Warmup Iteration   2: 409546.385 ops/s
[info] # Warmup Iteration   3: 432028.430 ops/s
[info] # Warmup Iteration   4: 473832.967 ops/s
[info] # Warmup Iteration   5: 476841.005 ops/s
[info] Iteration   1: 476742.115 ops/s
[info]                  ·gc.alloc.rate:                   1565.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              5169.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4402.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.206 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 465942.564 ops/s
[info]                  ·gc.alloc.rate:                   1546.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              5222.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6764.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.209 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 468854.305 ops/s
[info]                  ·gc.alloc.rate:                   1522.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              5112.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4477.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.586 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 478177.552 ops/s
[info]                  ·gc.alloc.rate:                   1564.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              5148.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4382.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 476917.676 ops/s
[info]                  ·gc.alloc.rate:                   1559.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              5147.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4391.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   473326.843 ±(99.9%) 21319.732 ops/s [Average]
[info]   (min, avg, max) = (465942.564, 473326.843, 478177.552), stdev = 5536.667
[info]   CI (99.9%): [452007.111, 494646.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1551.888 ±(99.9%) 68.641 MB/sec [Average]
[info]   (min, avg, max) = (1522.993, 1551.888, 1565.847), stdev = 17.826
[info]   CI (99.9%): [1483.246, 1620.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5160.023 ±(99.9%) 155.972 B/op [Average]
[info]   (min, avg, max) = (5112.293, 5160.023, 5222.487), stdev = 40.506
[info]   CI (99.9%): [5004.051, 5315.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1466.634 ±(99.9%) 1155.419 MB/sec [Average]
[info]   (min, avg, max) = (1330.647, 1466.634, 2003.390), stdev = 300.059
[info]   CI (99.9%): [311.215, 2622.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4883.883 ±(99.9%) 4051.697 B/op [Average]
[info]   (min, avg, max) = (4382.751, 4883.883, 6764.927), stdev = 1052.213
[info]   CI (99.9%): [832.186, 8935.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.898 ±(99.9%) 5.977 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.898, 3.615), stdev = 1.552
[info]   CI (99.9%): [≈ 0, 6.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.028 ±(99.9%) 20.189 B/op [Average]
[info]   (min, avg, max) = (0.069, 3.028, 12.209), stdev = 5.243
[info]   CI (99.9%): [≈ 0, 23.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 13.000), stdev = 4.472
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.53% complete, ETA 00:27:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 343089.771 ops/s
[info] # Warmup Iteration   2: 1089653.525 ops/s
[info] # Warmup Iteration   3: 982459.296 ops/s
[info] # Warmup Iteration   4: 1019136.558 ops/s
[info] # Warmup Iteration   5: 1020607.864 ops/s
[info] Iteration   1: 1018055.936 ops/s
[info]                  ·gc.alloc.rate:               491.185 MB/sec
[info]                  ·gc.alloc.rate.norm:          759.103 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1021.592 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 1016426.462 ops/s
[info]                  ·gc.alloc.rate:      470.148 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 978727.128 ops/s
[info]                  ·gc.alloc.rate:               470.489 MB/sec
[info]                  ·gc.alloc.rate.norm:          756.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1061.532 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 1022205.962 ops/s
[info]                  ·gc.alloc.rate:                   488.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              751.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1016.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1022919.531 ops/s
[info]                  ·gc.alloc.rate:      473.318 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   1011667.004 ±(99.9%) 71682.902 ops/s [Average]
[info]   (min, avg, max) = (978727.128, 1011667.004, 1022919.531), stdev = 18615.822
[info]   CI (99.9%): [939984.102, 1083349.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   478.681 ±(99.9%) 39.309 MB/sec [Average]
[info]   (min, avg, max) = (470.148, 478.681, 491.185), stdev = 10.209
[info]   CI (99.9%): [439.371, 517.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   744.633 ±(99.9%) 59.333 B/op [Average]
[info]   (min, avg, max) = (728.000, 744.633, 759.103), stdev = 15.409
[info]   CI (99.9%): [685.301, 803.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   396.315 ±(99.9%) 1393.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 396.315, 661.031), stdev = 361.785
[info]   CI (99.9%): [≈ 0, 1789.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   619.914 ±(99.9%) 2180.122 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 619.914, 1061.532), stdev = 566.171
[info]   CI (99.9%): [≈ 0, 2800.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.76% complete, ETA 00:27:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1235480.661 ops/s
[info] # Warmup Iteration   2: 2559541.217 ops/s
[info] # Warmup Iteration   3: 2754888.403 ops/s
[info] # Warmup Iteration   4: 2772359.382 ops/s
[info] # Warmup Iteration   5: 2763687.612 ops/s
[info] Iteration   1: 2772126.823 ops/s
[info]                  ·gc.alloc.rate:               1320.025 MB/sec
[info]                  ·gc.alloc.rate.norm:          749.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 760.005 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 2737581.015 ops/s
[info]                  ·gc.alloc.rate:                   1295.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     770.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 2665324.424 ops/s
[info]                  ·gc.alloc.rate:                   1273.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              752.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     791.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.931 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 2693538.147 ops/s
[info]                  ·gc.alloc.rate:                   1271.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              743.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     391.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.414 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2737804.354 ops/s
[info]                  ·gc.alloc.rate:                   1293.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              743.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     768.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2721274.953 ±(99.9%) 161369.244 ops/s [Average]
[info]   (min, avg, max) = (2665324.424, 2721274.953, 2772126.823), stdev = 41907.080
[info]   CI (99.9%): [2559905.709, 2882644.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1290.896 ±(99.9%) 75.368 MB/sec [Average]
[info]   (min, avg, max) = (1271.778, 1290.896, 1320.025), stdev = 19.573
[info]   CI (99.9%): [1215.528, 1366.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   746.597 ±(99.9%) 15.286 B/op [Average]
[info]   (min, avg, max) = (743.139, 746.597, 752.098), stdev = 3.970
[info]   CI (99.9%): [731.311, 761.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1205.414 ±(99.9%) 1151.555 MB/sec [Average]
[info]   (min, avg, max) = (670.452, 1205.414, 1340.775), stdev = 299.055
[info]   CI (99.9%): [53.859, 2356.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   696.501 ±(99.9%) 657.489 B/op [Average]
[info]   (min, avg, max) = (391.766, 696.501, 791.629), stdev = 170.748
[info]   CI (99.9%): [39.012, 1353.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.822 ±(99.9%) 5.390 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.822, 3.271), stdev = 1.400
[info]   CI (99.9%): [≈ 0, 6.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.484 ±(99.9%) 3.184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.484, 1.931), stdev = 0.827
[info]   CI (99.9%): [≈ 0, 3.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 8.000), stdev = 3.033
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 76.00% complete, ETA 00:27:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 825284.071 ops/s
[info] # Warmup Iteration   2: 2719631.100 ops/s
[info] # Warmup Iteration   3: 2945889.560 ops/s
[info] # Warmup Iteration   4: 2956455.409 ops/s
[info] # Warmup Iteration   5: 2956328.597 ops/s
[info] Iteration   1: 2956814.681 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2955542.316 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2946028.276 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2947214.504 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2949888.907 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2951097.737 ±(99.9%) 18733.881 ops/s [Average]
[info]   (min, avg, max) = (2946028.276, 2951097.737, 2956814.681), stdev = 4865.129
[info]   CI (99.9%): [2932363.856, 2969831.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76.24% complete, ETA 00:27:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51938.783 ops/s
[info] # Warmup Iteration   2: 523956.495 ops/s
[info] # Warmup Iteration   3: 524224.771 ops/s
[info] # Warmup Iteration   4: 603515.453 ops/s
[info] # Warmup Iteration   5: 692980.728 ops/s
[info] Iteration   1: 676995.259 ops/s
[info]                  ·gc.alloc.rate:                   933.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              2171.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1534.738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 670173.689 ops/s
[info]                  ·gc.alloc.rate:               943.533 MB/sec
[info]                  ·gc.alloc.rate.norm:          2214.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1322.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3105.365 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     12.000 ms
[info] Iteration   3: 676039.033 ops/s
[info]                  ·gc.alloc.rate:                   941.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              2191.691 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1542.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 680230.647 ops/s
[info]                  ·gc.alloc.rate:               940.979 MB/sec
[info]                  ·gc.alloc.rate.norm:          2176.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1532.753 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 681939.782 ops/s
[info]                  ·gc.alloc.rate:                   959.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              2215.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3061.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.648 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   677075.682 ±(99.9%) 17469.778 ops/s [Average]
[info]   (min, avg, max) = (670173.689, 677075.682, 681939.782), stdev = 4536.846
[info]   CI (99.9%): [659605.904, 694545.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   943.926 ±(99.9%) 36.809 MB/sec [Average]
[info]   (min, avg, max) = (933.954, 943.926, 959.764), stdev = 9.559
[info]   CI (99.9%): [907.117, 980.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2193.936 ±(99.9%) 79.392 B/op [Average]
[info]   (min, avg, max) = (2171.163, 2193.936, 2215.216), stdev = 20.618
[info]   CI (99.9%): [2114.544, 2273.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   926.883 ±(99.9%) 1398.027 MB/sec [Average]
[info]   (min, avg, max) = (660.187, 926.883, 1326.229), stdev = 363.063
[info]   CI (99.9%): [≈ 0, 2324.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2155.250 ±(99.9%) 3262.485 B/op [Average]
[info]   (min, avg, max) = (1532.753, 2155.250, 3105.365), stdev = 847.257
[info]   CI (99.9%): [≈ 0, 5417.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.935 ±(99.9%) 7.918 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.935, 4.613), stdev = 2.056
[info]   CI (99.9%): [≈ 0, 8.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.159 ±(99.9%) 18.275 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.159, 10.648), stdev = 4.746
[info]   CI (99.9%): [≈ 0, 20.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.400, 12.000), stdev = 2.191
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76.47% complete, ETA 00:26:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8595.820 ops/s
[info] # Warmup Iteration   2: 55034.516 ops/s
[info] # Warmup Iteration   3: 73718.217 ops/s
[info] # Warmup Iteration   4: 76647.036 ops/s
[info] # Warmup Iteration   5: 77607.243 ops/s
[info] Iteration   1: 79605.163 ops/s
[info]                  ·gc.alloc.rate:                   2329.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              46053.671 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52814.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85.866 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 80167.383 ops/s
[info]                  ·gc.alloc.rate:                   2310.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              45360.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39194.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.678 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 79648.635 ops/s
[info]                  ·gc.alloc.rate:                   2294.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              45333.566 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39449.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.411 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 80218.426 ops/s
[info]                  ·gc.alloc.rate:               2349.629 MB/sec
[info]                  ·gc.alloc.rate.norm:          46099.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2667.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52329.473 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 80274.099 ops/s
[info]                  ·gc.alloc.rate:                   2351.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              46091.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39342.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.816 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   79982.741 ±(99.9%) 1260.641 ops/s [Average]
[info]   (min, avg, max) = (79605.163, 79982.741, 80274.099), stdev = 327.385
[info]   CI (99.9%): [78722.100, 81243.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2327.036 ±(99.9%) 95.381 MB/sec [Average]
[info]   (min, avg, max) = (2294.269, 2327.036, 2351.404), stdev = 24.770
[info]   CI (99.9%): [2231.655, 2422.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   45787.781 ±(99.9%) 1550.576 B/op [Average]
[info]   (min, avg, max) = (45333.566, 45787.781, 46099.318), stdev = 402.680
[info]   CI (99.9%): [44237.205, 47338.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2267.685 ±(99.9%) 1411.504 MB/sec [Average]
[info]   (min, avg, max) = (1996.450, 2267.685, 2671.236), stdev = 366.563
[info]   CI (99.9%): [856.181, 3679.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   44625.876 ±(99.9%) 27940.859 B/op [Average]
[info]   (min, avg, max) = (39194.092, 44625.876, 52814.040), stdev = 7256.152
[info]   CI (99.9%): [16685.018, 72566.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.919 ±(99.9%) 7.377 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.919, 4.343), stdev = 1.916
[info]   CI (99.9%): [≈ 0, 8.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   18.154 ±(99.9%) 145.861 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.154, 85.866), stdev = 37.880
[info]   CI (99.9%): [≈ 0, 164.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 11.000), stdev = 2.950
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.71% complete, ETA 00:26:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14843.900 ops/s
[info] # Warmup Iteration   2: 65944.430 ops/s
[info] # Warmup Iteration   3: 98251.401 ops/s
[info] # Warmup Iteration   4: 105254.593 ops/s
[info] # Warmup Iteration   5: 103329.298 ops/s
[info] Iteration   1: 104478.928 ops/s
[info]                  ·gc.alloc.rate:                   1901.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              28638.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30039.738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.740 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 106760.594 ops/s
[info]                  ·gc.alloc.rate:                   1934.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              28509.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29455.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.972 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.799 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 107270.512 ops/s
[info]                  ·gc.alloc.rate:                   1937.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              28428.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29291.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.054 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 108178.744 ops/s
[info]                  ·gc.alloc.rate:                   1965.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              28586.757 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29064.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.303 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 107645.706 ops/s
[info]                  ·gc.alloc.rate:               1955.518 MB/sec
[info]                  ·gc.alloc.rate.norm:          28591.989 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19498.878 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   106866.897 ±(99.9%) 5514.656 ops/s [Average]
[info]   (min, avg, max) = (104478.928, 106866.897, 108178.744), stdev = 1432.139
[info]   CI (99.9%): [101352.240, 112381.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1938.944 ±(99.9%) 95.162 MB/sec [Average]
[info]   (min, avg, max) = (1901.110, 1938.944, 1965.727), stdev = 24.713
[info]   CI (99.9%): [1843.782, 2034.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28551.063 ±(99.9%) 318.149 B/op [Average]
[info]   (min, avg, max) = (28428.852, 28551.063, 28638.596), stdev = 82.622
[info]   CI (99.9%): [28232.913, 28869.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1864.346 ±(99.9%) 1142.485 MB/sec [Average]
[info]   (min, avg, max) = (1333.604, 1864.346, 1998.959), stdev = 296.700
[info]   CI (99.9%): [721.860, 3006.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   27470.143 ±(99.9%) 17214.893 B/op [Average]
[info]   (min, avg, max) = (19498.878, 27470.143, 30039.738), stdev = 4470.653
[info]   CI (99.9%): [10255.251, 44685.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.650 ±(99.9%) 5.009 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.650, 2.972), stdev = 1.301
[info]   CI (99.9%): [≈ 0, 5.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9.579 ±(99.9%) 73.805 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.579, 43.799), stdev = 19.167
[info]   CI (99.9%): [≈ 0, 83.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 2.280
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.94% complete, ETA 00:26:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19229.814 ops/s
[info] # Warmup Iteration   2: 144998.615 ops/s
[info] # Warmup Iteration   3: 158205.777 ops/s
[info] # Warmup Iteration   4: 159644.442 ops/s
[info] # Warmup Iteration   5: 161818.732 ops/s
[info] Iteration   1: 160634.660 ops/s
[info]                  ·gc.alloc.rate:                   2517.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              24664.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2657.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26042.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.040 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 158551.371 ops/s
[info]                  ·gc.alloc.rate:                   2492.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              24739.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2657.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26378.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.207 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 161768.541 ops/s
[info]                  ·gc.alloc.rate:               2527.218 MB/sec
[info]                  ·gc.alloc.rate.norm:          24587.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1996.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19427.316 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 162819.125 ops/s
[info]                  ·gc.alloc.rate:                   2583.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              24968.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25821.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.604 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 163036.159 ops/s
[info]                  ·gc.alloc.rate:                   2600.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              25099.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25889.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.402 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   161361.971 ±(99.9%) 7079.311 ops/s [Average]
[info]   (min, avg, max) = (158551.371, 161361.971, 163036.159), stdev = 1838.475
[info]   CI (99.9%): [154282.660, 168441.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2544.098 ±(99.9%) 175.704 MB/sec [Average]
[info]   (min, avg, max) = (2492.720, 2544.098, 2600.211), stdev = 45.630
[info]   CI (99.9%): [2368.394, 2719.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24812.029 ±(99.9%) 827.768 B/op [Average]
[info]   (min, avg, max) = (24587.244, 24812.029, 25099.762), stdev = 214.969
[info]   CI (99.9%): [23984.261, 25639.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2533.164 ±(99.9%) 1155.122 MB/sec [Average]
[info]   (min, avg, max) = (1996.851, 2533.164, 2682.040), stdev = 299.981
[info]   CI (99.9%): [1378.042, 3688.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   24711.714 ±(99.9%) 11405.081 B/op [Average]
[info]   (min, avg, max) = (19427.316, 24711.714, 26378.064), stdev = 2961.863
[info]   CI (99.9%): [13306.633, 36116.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.318 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.208), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.650 ±(99.9%) 3.113 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.650, 2.040), stdev = 0.808
[info]   CI (99.9%): [≈ 0, 3.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77.18% complete, ETA 00:26:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 958.519 ops/s
[info] # Warmup Iteration   2: 18706.710 ops/s
[info] # Warmup Iteration   3: 43820.893 ops/s
[info] # Warmup Iteration   4: 43701.115 ops/s
[info] # Warmup Iteration   5: 43371.701 ops/s
[info] Iteration   1: 45376.960 ops/s
[info]                  ·gc.alloc.rate:                   2565.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              88973.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92614.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96.750 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 44920.724 ops/s
[info]                  ·gc.alloc.rate:                   2504.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              87719.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70157.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.105 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 45759.317 ops/s
[info]                  ·gc.alloc.rate:                   2559.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              87988.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91919.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.432 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 45041.253 ops/s
[info]                  ·gc.alloc.rate:                   2543.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              88880.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93636.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.727 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 44865.448 ops/s
[info]                  ·gc.alloc.rate:                   2549.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              89389.275 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2688.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94284.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.730 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   45192.740 ±(99.9%) 1439.501 ops/s [Average]
[info]   (min, avg, max) = (44865.448, 45192.740, 45759.317), stdev = 373.834
[info]   CI (99.9%): [43753.239, 46632.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2544.273 ±(99.9%) 92.187 MB/sec [Average]
[info]   (min, avg, max) = (2504.126, 2544.273, 2565.174), stdev = 23.941
[info]   CI (99.9%): [2452.086, 2636.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   88590.164 ±(99.9%) 2715.770 B/op [Average]
[info]   (min, avg, max) = (87719.816, 88590.164, 89389.275), stdev = 705.277
[info]   CI (99.9%): [85874.394, 91305.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2543.010 ±(99.9%) 1163.236 MB/sec [Average]
[info]   (min, avg, max) = (2002.766, 2543.010, 2688.741), stdev = 302.089
[info]   CI (99.9%): [1379.774, 3706.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   88522.416 ±(99.9%) 39687.943 B/op [Average]
[info]   (min, avg, max) = (70157.128, 88522.416, 94284.215), stdev = 10306.833
[info]   CI (99.9%): [48834.474, 128210.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.604 ±(99.9%) 4.709 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.604, 2.789), stdev = 1.223
[info]   CI (99.9%): [≈ 0, 5.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   20.949 ±(99.9%) 163.318 B/op [Average]
[info]   (min, avg, max) = (0.727, 20.949, 96.750), stdev = 42.413
[info]   CI (99.9%): [≈ 0, 184.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 8.000), stdev = 1.095
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.41% complete, ETA 00:25:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30524.486 ops/s
[info] # Warmup Iteration   2: 178090.300 ops/s
[info] # Warmup Iteration   3: 214491.165 ops/s
[info] # Warmup Iteration   4: 230905.577 ops/s
[info] # Warmup Iteration   5: 234677.135 ops/s
[info] Iteration   1: 234873.645 ops/s
[info]                  ·gc.alloc.rate:               1061.343 MB/sec
[info]                  ·gc.alloc.rate.norm:          7111.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4443.516 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 234963.733 ops/s
[info]                  ·gc.alloc.rate:                   1074.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              7195.951 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8901.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.279 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 234942.562 ops/s
[info]                  ·gc.alloc.rate:               1057.364 MB/sec
[info]                  ·gc.alloc.rate.norm:          7083.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4460.307 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 235193.197 ops/s
[info]                  ·gc.alloc.rate:               1072.292 MB/sec
[info]                  ·gc.alloc.rate.norm:          7175.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8920.049 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 235990.311 ops/s
[info]                  ·gc.alloc.rate:               1057.344 MB/sec
[info]                  ·gc.alloc.rate.norm:          7050.225 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4449.350 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   235192.690 ±(99.9%) 1778.162 ops/s [Average]
[info]   (min, avg, max) = (234873.645, 235192.690, 235990.311), stdev = 461.783
[info]   CI (99.9%): [233414.528, 236970.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1064.533 ±(99.9%) 31.592 MB/sec [Average]
[info]   (min, avg, max) = (1057.344, 1064.533, 1074.320), stdev = 8.204
[info]   CI (99.9%): [1032.941, 1096.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   7123.411 ±(99.9%) 236.639 B/op [Average]
[info]   (min, avg, max) = (7050.225, 7123.411, 7195.951), stdev = 61.454
[info]   CI (99.9%): [6886.772, 7360.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   931.635 ±(99.9%) 1403.741 MB/sec [Average]
[info]   (min, avg, max) = (663.133, 931.635, 1332.942), stdev = 364.547
[info]   CI (99.9%): [≈ 0, 2335.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6235.008 ±(99.9%) 9406.315 B/op [Average]
[info]   (min, avg, max) = (4443.516, 6235.008, 8920.049), stdev = 2442.790
[info]   CI (99.9%): [≈ 0, 15641.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.056 ±(99.9%) 0.480 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.056, 0.279), stdev = 0.125
[info]   CI (99.9%): [≈ 0, 0.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.140
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.65% complete, ETA 00:25:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 188284.942 ops/s
[info] # Warmup Iteration   2: 397310.853 ops/s
[info] # Warmup Iteration   3: 509918.266 ops/s
[info] # Warmup Iteration   4: 581585.113 ops/s
[info] # Warmup Iteration   5: 576862.798 ops/s
[info] Iteration   1: 577523.981 ops/s
[info]                  ·gc.alloc.rate:                   653.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              1780.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1818.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.113 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 570806.846 ops/s
[info]                  ·gc.alloc.rate:               661.244 MB/sec
[info]                  ·gc.alloc.rate.norm:          1822.860 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1840.448 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 580646.558 ops/s
[info]                  ·gc.alloc.rate:               655.158 MB/sec
[info]                  ·gc.alloc.rate.norm:          1775.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1809.206 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 581937.705 ops/s
[info]                  ·gc.alloc.rate:                   665.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              1799.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1806.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 576572.484 ops/s
[info]                  ·gc.alloc.rate:               662.459 MB/sec
[info]                  ·gc.alloc.rate.norm:          1808.230 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1823.803 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   577497.515 ±(99.9%) 16701.898 ops/s [Average]
[info]   (min, avg, max) = (570806.846, 577497.515, 581937.705), stdev = 4337.430
[info]   CI (99.9%): [560795.617, 594199.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   659.592 ±(99.9%) 19.456 MB/sec [Average]
[info]   (min, avg, max) = (653.570, 659.592, 665.528), stdev = 5.053
[info]   CI (99.9%): [640.136, 679.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1797.540 ±(99.9%) 74.866 B/op [Average]
[info]   (min, avg, max) = (1775.806, 1797.540, 1822.860), stdev = 19.443
[info]   CI (99.9%): [1722.674, 1872.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   667.723 ±(99.9%) 1.563 MB/sec [Average]
[info]   (min, avg, max) = (667.232, 667.723, 668.164), stdev = 0.406
[info]   CI (99.9%): [666.160, 669.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1819.697 ±(99.9%) 51.755 B/op [Average]
[info]   (min, avg, max) = (1806.952, 1819.697, 1840.448), stdev = 13.440
[info]   CI (99.9%): [1767.943, 1871.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.013 ±(99.9%) 0.073 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.035 ±(99.9%) 0.199 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.113), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77.88% complete, ETA 00:25:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 124566.085 ops/s
[info] # Warmup Iteration   2: 462386.527 ops/s
[info] # Warmup Iteration   3: 602850.428 ops/s
[info] # Warmup Iteration   4: 607245.084 ops/s
[info] # Warmup Iteration   5: 607042.573 ops/s
[info] Iteration   1: 608899.225 ops/s
[info]                  ·gc.alloc.rate:      6.190 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 608715.507 ops/s
[info]                  ·gc.alloc.rate:      7.036 MB/sec
[info]                  ·gc.alloc.rate.norm: 18.191 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 608987.960 ops/s
[info]                  ·gc.alloc.rate:      6.451 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.671 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 609993.264 ops/s
[info]                  ·gc.alloc.rate:      6.203 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 615830.659 ops/s
[info]                  ·gc.alloc.rate:      6.261 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   610485.323 ±(99.9%) 11664.462 ops/s [Average]
[info]   (min, avg, max) = (608715.507, 610485.323, 615830.659), stdev = 3029.224
[info]   CI (99.9%): [598820.861, 622149.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   6.428 ±(99.9%) 1.369 MB/sec [Average]
[info]   (min, avg, max) = (6.190, 6.428, 7.036), stdev = 0.355
[info]   CI (99.9%): [5.059, 7.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.573 ±(99.9%) 3.658 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.573, 18.191), stdev = 0.950
[info]   CI (99.9%): [12.914, 20.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 78.12% complete, ETA 00:25:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4601.182 ops/s
[info] # Warmup Iteration   2: 52243.128 ops/s
[info] # Warmup Iteration   3: 80110.310 ops/s
[info] # Warmup Iteration   4: 87817.289 ops/s
[info] # Warmup Iteration   5: 91944.717 ops/s
[info] Iteration   1: 94297.978 ops/s
[info]                  ·gc.alloc.rate:               1486.804 MB/sec
[info]                  ·gc.alloc.rate.norm:          24814.172 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1326.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22136.963 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 94139.420 ops/s
[info]                  ·gc.alloc.rate:                   1483.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              24803.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22196.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.348 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 92079.481 ops/s
[info]                  ·gc.alloc.rate:                   1462.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              24984.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22727.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.914 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 93087.930 ops/s
[info]                  ·gc.alloc.rate:                   1479.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              25015.258 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33782.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.279 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 93674.229 ops/s
[info]                  ·gc.alloc.rate:                   1480.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              24871.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22407.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.148 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   93455.808 ±(99.9%) 3473.001 ops/s [Average]
[info]   (min, avg, max) = (92079.481, 93455.808, 94297.978), stdev = 901.927
[info]   CI (99.9%): [89982.807, 96928.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1478.509 ±(99.9%) 37.071 MB/sec [Average]
[info]   (min, avg, max) = (1462.066, 1478.509, 1486.804), stdev = 9.627
[info]   CI (99.9%): [1441.438, 1515.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   24897.804 ±(99.9%) 374.843 B/op [Average]
[info]   (min, avg, max) = (24803.251, 24897.804, 25015.258), stdev = 97.345
[info]   CI (99.9%): [24522.961, 25272.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1463.190 ±(99.9%) 1151.286 MB/sec [Average]
[info]   (min, avg, max) = (1326.393, 1463.190, 1998.008), stdev = 298.985
[info]   CI (99.9%): [311.903, 2614.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   24650.153 ±(99.9%) 19677.844 B/op [Average]
[info]   (min, avg, max) = (22136.963, 24650.153, 33782.343), stdev = 5110.274
[info]   CI (99.9%): [4972.309, 44327.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.150 ±(99.9%) 0.521 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.150, 0.312), stdev = 0.135
[info]   CI (99.9%): [≈ 0, 0.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.538 ±(99.9%) 8.827 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.538, 5.279), stdev = 2.292
[info]   CI (99.9%): [≈ 0, 11.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 78.35% complete, ETA 00:24:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 186309.768 ops/s
[info] # Warmup Iteration   2: 2381150.090 ops/s
[info] # Warmup Iteration   3: 7917356.256 ops/s
[info] # Warmup Iteration   4: 8381044.329 ops/s
[info] # Warmup Iteration   5: 8411580.575 ops/s
[info] Iteration   1: 8342217.463 ops/s
[info]                  ·gc.alloc.rate:                   7387.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              1393.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          7426.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1401.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 8406585.386 ops/s
[info]                  ·gc.alloc.rate:                   7408.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              1386.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:          6786.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1270.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 8417246.304 ops/s
[info]                  ·gc.alloc.rate:                   7442.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              1391.521 B/op
[info]                  ·gc.churn.PS_Eden_Space:          7483.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1399.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   4: 8432859.871 ops/s
[info]                  ·gc.alloc.rate:                   7430.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              1386.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:          6808.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1270.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 8441903.654 ops/s
[info]                  ·gc.alloc.rate:                   7465.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              1391.747 B/op
[info]                  ·gc.churn.PS_Eden_Space:          7496.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1397.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   8408162.536 ±(99.9%) 151381.937 ops/s [Average]
[info]   (min, avg, max) = (8342217.463, 8408162.536, 8441903.654), stdev = 39313.408
[info]   CI (99.9%): [8256780.599, 8559544.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   7426.818 ±(99.9%) 115.611 MB/sec [Average]
[info]   (min, avg, max) = (7387.431, 7426.818, 7465.144), stdev = 30.024
[info]   CI (99.9%): [7311.206, 7542.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1390.157 ±(99.9%) 11.992 B/op [Average]
[info]   (min, avg, max) = (1386.816, 1390.157, 1393.754), stdev = 3.114
[info]   CI (99.9%): [1378.166, 1402.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   7200.484 ±(99.9%) 1419.106 MB/sec [Average]
[info]   (min, avg, max) = (6786.839, 7200.484, 7496.248), stdev = 368.537
[info]   CI (99.9%): [5781.378, 8619.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1347.862 ±(99.9%) 271.418 B/op [Average]
[info]   (min, avg, max) = (1270.555, 1347.862, 1401.199), stdev = 70.487
[info]   CI (99.9%): [1076.444, 1619.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.167), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.041 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.012, 0.031), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   53.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.600, 11.000), stdev = 0.548
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   72.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (13.000, 14.400, 17.000), stdev = 1.673
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 78.59% complete, ETA 00:24:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.681 ops/s
[info] # Warmup Iteration   2: 781357.365 ops/s
[info] # Warmup Iteration   3: 897305.203 ops/s
[info] # Warmup Iteration   4: 1001103.319 ops/s
[info] # Warmup Iteration   5: 1002306.146 ops/s
[info] Iteration   1: 969562.654 ops/s
[info]                  ·gc.alloc.rate:               611.427 MB/sec
[info]                  ·gc.alloc.rate.norm:          992.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1074.309 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1004199.270 ops/s
[info]                  ·gc.alloc.rate:               635.395 MB/sec
[info]                  ·gc.alloc.rate.norm:          995.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1038.292 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 968279.350 ops/s
[info]                  ·gc.alloc.rate:                   625.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1076.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.017 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 966825.747 ops/s
[info]                  ·gc.alloc.rate:                   604.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              984.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1079.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 953195.339 ops/s
[info]                  ·gc.alloc.rate:               608.816 MB/sec
[info]                  ·gc.alloc.rate.norm:          1005.228 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1094.907 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   972412.472 ±(99.9%) 72962.193 ops/s [Average]
[info]   (min, avg, max) = (953195.339, 972412.472, 1004199.270), stdev = 18948.050
[info]   CI (99.9%): [899450.279, 1045374.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   617.182 ±(99.9%) 49.690 MB/sec [Average]
[info]   (min, avg, max) = (604.580, 617.182, 635.395), stdev = 12.904
[info]   CI (99.9%): [567.492, 666.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   998.939 ±(99.9%) 48.554 B/op [Average]
[info]   (min, avg, max) = (984.133, 998.939, 1016.996), stdev = 12.609
[info]   CI (99.9%): [950.385, 1047.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   662.621 ±(99.9%) 2.131 MB/sec [Average]
[info]   (min, avg, max) = (661.829, 662.621, 663.171), stdev = 0.553
[info]   CI (99.9%): [660.491, 664.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1072.766 ±(99.9%) 80.379 B/op [Average]
[info]   (min, avg, max) = (1038.292, 1072.766, 1094.907), stdev = 20.874
[info]   CI (99.9%): [992.388, 1153.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.040 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.034), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78.82% complete, ETA 00:24:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21995.450 ops/s
[info] # Warmup Iteration   2: 156020.907 ops/s
[info] # Warmup Iteration   3: 335367.739 ops/s
[info] # Warmup Iteration   4: 460928.919 ops/s
[info] # Warmup Iteration   5: 457493.716 ops/s
[info] Iteration   1: 452931.240 ops/s
[info]                  ·gc.alloc.rate:               1012.779 MB/sec
[info]                  ·gc.alloc.rate.norm:          3519.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2306.651 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 460057.360 ops/s
[info]                  ·gc.alloc.rate:                   1052.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              3600.234 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4546.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 455082.597 ops/s
[info]                  ·gc.alloc.rate:               1012.917 MB/sec
[info]                  ·gc.alloc.rate.norm:          3502.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2302.636 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 447239.678 ops/s
[info]                  ·gc.alloc.rate:                   1001.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              3524.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4690.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 449026.264 ops/s
[info]                  ·gc.alloc.rate:                   981.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              3440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2338.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   452867.428 ±(99.9%) 19542.946 ops/s [Average]
[info]   (min, avg, max) = (447239.678, 452867.428, 460057.360), stdev = 5075.241
[info]   CI (99.9%): [433324.481, 472410.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1012.290 ±(99.9%) 99.450 MB/sec [Average]
[info]   (min, avg, max) = (981.474, 1012.290, 1052.407), stdev = 25.827
[info]   CI (99.9%): [912.840, 1111.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3517.402 ±(99.9%) 220.558 B/op [Average]
[info]   (min, avg, max) = (3440.001, 3517.402, 3600.234), stdev = 57.278
[info]   CI (99.9%): [3296.844, 3737.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   931.828 ±(99.9%) 1403.642 MB/sec [Average]
[info]   (min, avg, max) = (663.856, 931.828, 1333.252), stdev = 364.521
[info]   CI (99.9%): [≈ 0, 2335.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3236.989 ±(99.9%) 4861.019 B/op [Average]
[info]   (min, avg, max) = (2302.636, 3236.989, 4690.802), stdev = 1262.391
[info]   CI (99.9%): [≈ 0, 8098.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.043 ±(99.9%) 0.153 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.073), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 5.000), stdev = 1.414
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 79.06% complete, ETA 00:23:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 227219.705 ops/s
[info] # Warmup Iteration   2: 635842.905 ops/s
[info] # Warmup Iteration   3: 760929.055 ops/s
[info] # Warmup Iteration   4: 729763.961 ops/s
[info] # Warmup Iteration   5: 759125.456 ops/s
[info] Iteration   1: 759999.683 ops/s
[info]                  ·gc.alloc.rate:               693.375 MB/sec
[info]                  ·gc.alloc.rate.norm:          1435.888 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1385.713 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 745277.591 ops/s
[info]                  ·gc.alloc.rate:                   666.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408.405 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1414.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 717281.849 ops/s
[info]                  ·gc.alloc.rate:               688.663 MB/sec
[info]                  ·gc.alloc.rate.norm:          1510.866 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1469.703 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 834939.071 ops/s
[info]                  ·gc.alloc.rate:                   759.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1263.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 835375.978 ops/s
[info]                  ·gc.alloc.rate:               760.700 MB/sec
[info]                  ·gc.alloc.rate.norm:          1432.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1262.554 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   778574.834 ±(99.9%) 207487.453 ops/s [Average]
[info]   (min, avg, max) = (717281.849, 778574.834, 835375.978), stdev = 53883.833
[info]   CI (99.9%): [571087.381, 986062.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   713.917 ±(99.9%) 167.529 MB/sec [Average]
[info]   (min, avg, max) = (666.935, 713.917, 760.700), stdev = 43.507
[info]   CI (99.9%): [546.388, 881.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1444.066 ±(99.9%) 149.935 B/op [Average]
[info]   (min, avg, max) = (1408.405, 1444.066, 1510.866), stdev = 38.938
[info]   CI (99.9%): [1294.130, 1594.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   669.869 ±(99.9%) 1.735 MB/sec [Average]
[info]   (min, avg, max) = (669.147, 669.869, 670.350), stdev = 0.451
[info]   CI (99.9%): [668.134, 671.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1359.135 ±(99.9%) 357.820 B/op [Average]
[info]   (min, avg, max) = (1262.554, 1359.135, 1469.703), stdev = 92.925
[info]   CI (99.9%): [1001.314, 1716.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.044), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 79.29% complete, ETA 00:23:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 569230.334 ops/s
[info] # Warmup Iteration   2: 4030829.347 ops/s
[info] # Warmup Iteration   3: 4376517.124 ops/s
[info] # Warmup Iteration   4: 4400127.539 ops/s
[info] # Warmup Iteration   5: 4438748.482 ops/s
[info] Iteration   1: 4381540.999 ops/s
[info]                  ·gc.alloc.rate:                   2652.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     962.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4432150.870 ops/s
[info]                  ·gc.alloc.rate:                   2657.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              943.337 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     950.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4388955.739 ops/s
[info]                  ·gc.alloc.rate:                   2636.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              945.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     721.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 8453173.983 ops/s
[info]                  ·gc.alloc.rate:                   4931.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              918.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5382.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1002.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 8427930.998 ops/s
[info]                  ·gc.alloc.rate:                   4874.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              910.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4731.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     883.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   6016750.518 ±(99.9%) 8520399.764 ops/s [Average]
[info]   (min, avg, max) = (4381540.999, 6016750.518, 8453173.983), stdev = 2212720.761
[info]   CI (99.9%): [≈ 0, 14537150.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   3550.383 ±(99.9%) 4754.355 MB/sec [Average]
[info]   (min, avg, max) = (2636.935, 3550.383, 4931.383), stdev = 1234.691
[info]   CI (99.9%): [≈ 0, 8304.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   933.928 ±(99.9%) 71.668 B/op [Average]
[info]   (min, avg, max) = (910.203, 933.928, 952.706), stdev = 18.612
[info]   CI (99.9%): [862.260, 1005.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   3496.767 ±(99.9%) 5653.991 MB/sec [Average]
[info]   (min, avg, max) = (2011.765, 3496.767, 5382.788), stdev = 1468.324
[info]   CI (99.9%): [≈ 0, 9150.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   904.041 ±(99.9%) 426.491 B/op [Average]
[info]   (min, avg, max) = (721.208, 904.041, 1002.102), stdev = 110.758
[info]   CI (99.9%): [477.550, 1330.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.011, 0.019), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 11.000), stdev = 2.915
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 79.53% complete, ETA 00:23:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2113668.381 ops/s
[info] # Warmup Iteration   2: 7655084.082 ops/s
[info] # Warmup Iteration   3: 30094494.214 ops/s
[info] # Warmup Iteration   4: 30376555.710 ops/s
[info] # Warmup Iteration   5: 30046350.763 ops/s
[info] Iteration   1: 30128346.562 ops/s
[info]                  ·gc.alloc.rate:                   2655.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              138.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.191 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 30632097.311 ops/s
[info]                  ·gc.alloc.rate:                   2739.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              140.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 30235697.589 ops/s
[info]                  ·gc.alloc.rate:               2719.026 MB/sec
[info]                  ·gc.alloc.rate.norm:          141.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2678.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 139.377 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 30646465.854 ops/s
[info]                  ·gc.alloc.rate:                   2755.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              141.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 30210355.695 ops/s
[info]                  ·gc.alloc.rate:                   2717.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              141.584 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   30370592.602 ±(99.9%) 956957.530 ops/s [Average]
[info]   (min, avg, max) = (30128346.562, 30370592.602, 30646465.854), stdev = 248518.832
[info]   CI (99.9%): [29413635.072, 31327550.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   2717.292 ±(99.9%) 145.938 MB/sec [Average]
[info]   (min, avg, max) = (2655.416, 2717.292, 2755.178), stdev = 37.900
[info]   CI (99.9%): [2571.353, 2863.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   140.805 ±(99.9%) 4.694 B/op [Average]
[info]   (min, avg, max) = (138.715, 140.805, 141.584), stdev = 1.219
[info]   CI (99.9%): [136.111, 145.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   2548.330 ±(99.9%) 1152.359 MB/sec [Average]
[info]   (min, avg, max) = (2013.078, 2548.330, 2690.506), stdev = 299.264
[info]   CI (99.9%): [1395.971, 3700.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   132.005 ±(99.9%) 57.940 B/op [Average]
[info]   (min, avg, max) = (105.160, 132.005, 140.168), stdev = 15.047
[info]   CI (99.9%): [74.065, 189.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0.745 ±(99.9%) 6.282 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 3.664), stdev = 1.632
[info]   CI (99.9%): [≈ 0, 7.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0.039 ±(99.9%) 0.328 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.191), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 79.76% complete, ETA 00:23:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1590.372 ops/s
[info] # Warmup Iteration   2: 44060.519 ops/s
[info] # Warmup Iteration   3: 273123.588 ops/s
[info] # Warmup Iteration   4: 346149.872 ops/s
[info] # Warmup Iteration   5: 401320.566 ops/s
[info] Iteration   1: 394820.713 ops/s
[info]                  ·gc.alloc.rate:                   2723.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              10858.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10653.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.199 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 391969.328 ops/s
[info]                  ·gc.alloc.rate:                   2669.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              10718.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10714.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.254 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 396473.908 ops/s
[info]                  ·gc.alloc.rate:                   2736.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              10861.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10598.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.083 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 397067.964 ops/s
[info]                  ·gc.alloc.rate:                   2741.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              10860.294 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10608.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.083 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 397863.340 ops/s
[info]                  ·gc.alloc.rate:                   2772.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              10965.890 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10622.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   395639.051 ±(99.9%) 8994.115 ops/s [Average]
[info]   (min, avg, max) = (391969.328, 395639.051, 397863.340), stdev = 2335.743
[info]   CI (99.9%): [386644.935, 404633.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2728.607 ±(99.9%) 143.780 MB/sec [Average]
[info]   (min, avg, max) = (2669.908, 2728.607, 2772.190), stdev = 37.339
[info]   CI (99.9%): [2584.827, 2872.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10852.755 ±(99.9%) 339.235 B/op [Average]
[info]   (min, avg, max) = (10718.260, 10852.755, 10965.890), stdev = 88.098
[info]   CI (99.9%): [10513.521, 11191.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2674.887 ±(99.9%) 25.747 MB/sec [Average]
[info]   (min, avg, max) = (2669.072, 2674.887, 2685.287), stdev = 6.686
[info]   CI (99.9%): [2649.140, 2700.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10639.666 ±(99.9%) 180.690 B/op [Average]
[info]   (min, avg, max) = (10598.622, 10639.666, 10714.903), stdev = 46.925
[info]   CI (99.9%): [10458.976, 10820.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.687 ±(99.9%) 5.131 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.687, 3.060), stdev = 1.333
[info]   CI (99.9%): [≈ 0, 5.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.740 ±(99.9%) 20.454 B/op [Average]
[info]   (min, avg, max) = (0.082, 2.740, 12.199), stdev = 5.312
[info]   CI (99.9%): [≈ 0, 23.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 10.000), stdev = 1.924
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.00% complete, ETA 00:22:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 725190.595 ops/s
[info] # Warmup Iteration   2: 1231190.762 ops/s
[info] # Warmup Iteration   3: 1456812.852 ops/s
[info] # Warmup Iteration   4: 1396923.876 ops/s
[info] # Warmup Iteration   5: 1470181.363 ops/s
[info] Iteration   1: 1472495.872 ops/s
[info]                  ·gc.alloc.rate:      44.921 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1470448.242 ops/s
[info]                  ·gc.alloc.rate:      44.918 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.077 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1462166.419 ops/s
[info]                  ·gc.alloc.rate:      45.433 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.903 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1474165.917 ops/s
[info]                  ·gc.alloc.rate:      44.973 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1464686.684 ops/s
[info]                  ·gc.alloc.rate:      44.670 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   1468792.627 ±(99.9%) 19831.073 ops/s [Average]
[info]   (min, avg, max) = (1462166.419, 1468792.627, 1474165.917), stdev = 5150.067
[info]   CI (99.9%): [1448961.554, 1488623.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   44.983 ±(99.9%) 1.070 MB/sec [Average]
[info]   (min, avg, max) = (44.670, 44.983, 45.433), stdev = 0.278
[info]   CI (99.9%): [43.914, 46.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.196 ±(99.9%) 1.528 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.196, 48.903), stdev = 0.397
[info]   CI (99.9%): [46.669, 49.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.24% complete, ETA 00:22:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2394.094 ops/s
[info] # Warmup Iteration   2: 74259.797 ops/s
[info] # Warmup Iteration   3: 109614.273 ops/s
[info] # Warmup Iteration   4: 120059.648 ops/s
[info] # Warmup Iteration   5: 120838.880 ops/s
[info] Iteration   1: 119300.288 ops/s
[info]                  ·gc.alloc.rate:                   4372.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              57687.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4021.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53049.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.549 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 118698.536 ops/s
[info]                  ·gc.alloc.rate:                   4432.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              58777.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4714.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62514.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.552 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 120315.522 ops/s
[info]                  ·gc.alloc.rate:                   4465.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              58406.409 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4059.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53086.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.272 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 120576.874 ops/s
[info]                  ·gc.alloc.rate:               4474.955 MB/sec
[info]                  ·gc.alloc.rate.norm:          58412.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4068.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53109.185 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   5: 120656.992 ops/s
[info]                  ·gc.alloc.rate:                   4507.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              58793.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4756.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62041.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.543 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   119909.643 ±(99.9%) 3338.399 ops/s [Average]
[info]   (min, avg, max) = (118698.536, 119909.643, 120656.992), stdev = 866.972
[info]   CI (99.9%): [116571.244, 123248.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4450.722 ±(99.9%) 196.620 MB/sec [Average]
[info]   (min, avg, max) = (4372.621, 4450.722, 4507.268), stdev = 51.062
[info]   CI (99.9%): [4254.102, 4647.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   58415.416 ±(99.9%) 1726.939 B/op [Average]
[info]   (min, avg, max) = (57687.123, 58415.416, 58793.619), stdev = 448.481
[info]   CI (99.9%): [56688.477, 60142.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4323.978 ±(99.9%) 1449.343 MB/sec [Average]
[info]   (min, avg, max) = (4021.108, 4323.978, 4756.243), stdev = 376.390
[info]   CI (99.9%): [2874.635, 5773.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   56760.297 ±(99.9%) 19406.197 B/op [Average]
[info]   (min, avg, max) = (53049.683, 56760.297, 62514.608), stdev = 5039.728
[info]   CI (99.9%): [37354.100, 76166.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.383 ±(99.9%) 0.945 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.383, 0.552), stdev = 0.245
[info]   CI (99.9%): [≈ 0, 1.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 11.000), stdev = 1.095
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.47% complete, ETA 00:22:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 606062.325 ops/s
[info] # Warmup Iteration   2: 2127382.421 ops/s
[info] # Warmup Iteration   3: 2043241.373 ops/s
[info] # Warmup Iteration   4: 2092614.473 ops/s
[info] # Warmup Iteration   5: 2153190.073 ops/s
[info] Iteration   1: 2153016.930 ops/s
[info]                  ·gc.alloc.rate:               600.144 MB/sec
[info]                  ·gc.alloc.rate.norm:          438.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 484.264 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 2138620.397 ops/s
[info]                  ·gc.alloc.rate:               598.131 MB/sec
[info]                  ·gc.alloc.rate.norm:          440.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 487.537 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 2111280.330 ops/s
[info]                  ·gc.alloc.rate:               587.216 MB/sec
[info]                  ·gc.alloc.rate.norm:          437.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 494.841 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2142829.787 ops/s
[info]                  ·gc.alloc.rate:                   596.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              438.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     487.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2144043.420 ops/s
[info]                  ·gc.alloc.rate:               603.267 MB/sec
[info]                  ·gc.alloc.rate.norm:          442.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 488.014 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   2137958.173 ±(99.9%) 60874.127 ops/s [Average]
[info]   (min, avg, max) = (2111280.330, 2137958.173, 2153016.930), stdev = 15808.817
[info]   CI (99.9%): [2077084.046, 2198832.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   597.089 ±(99.9%) 23.281 MB/sec [Average]
[info]   (min, avg, max) = (587.216, 597.089, 603.267), stdev = 6.046
[info]   CI (99.9%): [573.807, 620.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   439.546 ±(99.9%) 7.906 B/op [Average]
[info]   (min, avg, max) = (437.738, 439.546, 442.838), stdev = 2.053
[info]   CI (99.9%): [431.640, 447.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   663.475 ±(99.9%) 3.868 MB/sec [Average]
[info]   (min, avg, max) = (662.461, 663.475, 664.808), stdev = 1.004
[info]   CI (99.9%): [659.607, 667.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   488.444 ±(99.9%) 14.936 B/op [Average]
[info]   (min, avg, max) = (484.264, 488.444, 494.841), stdev = 3.879
[info]   CI (99.9%): [473.509, 503.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.71% complete, ETA 00:22:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 882669.478 ops/s
[info] # Warmup Iteration   2: 1862703.459 ops/s
[info] # Warmup Iteration   3: 1981862.550 ops/s
[info] # Warmup Iteration   4: 1981820.975 ops/s
[info] # Warmup Iteration   5: 1977789.799 ops/s
[info] Iteration   1: 1992372.550 ops/s
[info]                  ·gc.alloc.rate:      536.866 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1991848.453 ops/s
[info]                  ·gc.alloc.rate:                   556.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              439.803 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     527.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.280 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1991731.056 ops/s
[info]                  ·gc.alloc.rate:                   560.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              442.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     527.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1984613.025 ops/s
[info]                  ·gc.alloc.rate:               556.569 MB/sec
[info]                  ·gc.alloc.rate.norm:          441.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 528.274 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1984974.134 ops/s
[info]                  ·gc.alloc.rate:                   550.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              436.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     528.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   1989107.844 ±(99.9%) 15201.687 ops/s [Average]
[info]   (min, avg, max) = (1984613.025, 1989107.844, 1992372.550), stdev = 3947.830
[info]   CI (99.9%): [1973906.157, 2004309.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   552.122 ±(99.9%) 35.522 MB/sec [Average]
[info]   (min, avg, max) = (536.866, 552.122, 560.123), stdev = 9.225
[info]   CI (99.9%): [516.600, 587.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   436.778 ±(99.9%) 28.853 B/op [Average]
[info]   (min, avg, max) = (424.000, 436.778, 442.421), stdev = 7.493
[info]   CI (99.9%): [407.925, 465.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   533.552 ±(99.9%) 1148.514 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.552, 667.765), stdev = 298.265
[info]   CI (99.9%): [≈ 0, 1682.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   422.260 ±(99.9%) 908.948 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 422.260, 528.274), stdev = 236.051
[info]   CI (99.9%): [≈ 0, 1331.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.593 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.354), stdev = 0.154
[info]   CI (99.9%): [≈ 0, 0.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.063 ±(99.9%) 0.468 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.063, 0.280), stdev = 0.122
[info]   CI (99.9%): [≈ 0, 0.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80.94% complete, ETA 00:21:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1003715.459 ops/s
[info] # Warmup Iteration   2: 1828106.147 ops/s
[info] # Warmup Iteration   3: 2013019.980 ops/s
[info] # Warmup Iteration   4: 2007863.806 ops/s
[info] # Warmup Iteration   5: 2008631.206 ops/s
[info] Iteration   1: 2004737.156 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1996303.353 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2001267.206 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2014766.953 ops/s
[info]                  ·gc.alloc.rate:      0.849 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.663 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2008894.168 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   2005193.767 ±(99.9%) 27228.484 ops/s [Average]
[info]   (min, avg, max) = (1996303.353, 2005193.767, 2014766.953), stdev = 7071.151
[info]   CI (99.9%): [1977965.283, 2032422.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.170 ±(99.9%) 1.461 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.170, 0.849), stdev = 0.379
[info]   CI (99.9%): [≈ 0, 1.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.133 ±(99.9%) 1.141 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.133, 0.663), stdev = 0.296
[info]   CI (99.9%): [≈ 0, 1.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.18% complete, ETA 00:21:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6160.618 ops/s
[info] # Warmup Iteration   2: 45700.824 ops/s
[info] # Warmup Iteration   3: 54884.549 ops/s
[info] # Warmup Iteration   4: 53703.169 ops/s
[info] # Warmup Iteration   5: 57223.168 ops/s
[info] Iteration   1: 57150.512 ops/s
[info]                  ·gc.alloc.rate:                   1993.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              54888.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55164.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.321 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 55918.237 ops/s
[info]                  ·gc.alloc.rate:                   1956.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              55061.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56452.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.132 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 57205.468 ops/s
[info]                  ·gc.alloc.rate:                   1999.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              54994.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55221.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.436 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 57570.805 ops/s
[info]                  ·gc.alloc.rate:                   1982.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              54192.401 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36630.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.707 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 56363.654 ops/s
[info]                  ·gc.alloc.rate:               1954.977 MB/sec
[info]                  ·gc.alloc.rate.norm:          54565.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56200.951 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   56841.735 ±(99.9%) 2612.058 ops/s [Average]
[info]   (min, avg, max) = (55918.237, 56841.735, 57570.805), stdev = 678.343
[info]   CI (99.9%): [54229.678, 59453.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1977.481 ±(99.9%) 79.768 MB/sec [Average]
[info]   (min, avg, max) = (1954.977, 1977.481, 1999.587), stdev = 20.715
[info]   CI (99.9%): [1897.713, 2057.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   54740.668 ±(99.9%) 1389.243 B/op [Average]
[info]   (min, avg, max) = (54192.401, 54740.668, 55061.897), stdev = 360.782
[info]   CI (99.9%): [53351.426, 56129.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1874.260 ±(99.9%) 1150.321 MB/sec [Average]
[info]   (min, avg, max) = (1339.906, 1874.260, 2013.555), stdev = 298.735
[info]   CI (99.9%): [723.939, 3024.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   51934.044 ±(99.9%) 33015.134 B/op [Average]
[info]   (min, avg, max) = (36630.959, 51934.044, 56452.266), stdev = 8573.925
[info]   CI (99.9%): [18918.910, 84949.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.366 ±(99.9%) 1.983 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.366, 1.247), stdev = 0.515
[info]   CI (99.9%): [≈ 0, 2.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10.119 ±(99.9%) 54.612 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.119, 34.321), stdev = 14.183
[info]   CI (99.9%): [≈ 0, 64.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 7.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.41% complete, ETA 00:21:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 117155.159 ops/s
[info] # Warmup Iteration   2: 261494.487 ops/s
[info] # Warmup Iteration   3: 264476.342 ops/s
[info] # Warmup Iteration   4: 272560.903 ops/s
[info] # Warmup Iteration   5: 272971.931 ops/s
[info] Iteration   1: 275338.492 ops/s
[info]                  ·gc.alloc.rate:               1098.081 MB/sec
[info]                  ·gc.alloc.rate.norm:          6275.462 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3830.533 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 274488.663 ops/s
[info]                  ·gc.alloc.rate:                   1109.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              6362.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7684.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 271286.865 ops/s
[info]                  ·gc.alloc.rate:                   1084.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              6289.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3887.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.166 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 269812.819 ops/s
[info]                  ·gc.alloc.rate:               1095.783 MB/sec
[info]                  ·gc.alloc.rate.norm:          6391.850 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7825.513 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 271415.571 ops/s
[info]                  ·gc.alloc.rate:                   1117.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              6479.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7779.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.865 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.407 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   272468.482 ±(99.9%) 9004.966 ops/s [Average]
[info]   (min, avg, max) = (269812.819, 272468.482, 275338.492), stdev = 2338.561
[info]   CI (99.9%): [263463.516, 281473.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1101.066 ±(99.9%) 49.775 MB/sec [Average]
[info]   (min, avg, max) = (1084.194, 1101.066, 1117.565), stdev = 12.926
[info]   CI (99.9%): [1051.291, 1150.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6359.905 ±(99.9%) 318.419 B/op [Average]
[info]   (min, avg, max) = (6275.462, 6359.905, 6479.437), stdev = 82.692
[info]   CI (99.9%): [6041.486, 6678.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1072.815 ±(99.9%) 1415.228 MB/sec [Average]
[info]   (min, avg, max) = (670.147, 1072.815, 1341.829), stdev = 367.530
[info]   CI (99.9%): [≈ 0, 2488.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6201.691 ±(99.9%) 8236.973 B/op [Average]
[info]   (min, avg, max) = (3830.533, 6201.691, 7825.513), stdev = 2139.116
[info]   CI (99.9%): [≈ 0, 14438.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.783 ±(99.9%) 6.634 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 3.865), stdev = 1.723
[info]   CI (99.9%): [≈ 0, 7.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.539 ±(99.9%) 38.465 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.539, 22.407), stdev = 9.989
[info]   CI (99.9%): [≈ 0, 43.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.280
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.65% complete, ETA 00:20:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1830.343 ops/s
[info] # Warmup Iteration   2: 25626.984 ops/s
[info] # Warmup Iteration   3: 52834.366 ops/s
[info] # Warmup Iteration   4: 50480.149 ops/s
[info] # Warmup Iteration   5: 54156.377 ops/s
[info] Iteration   1: 53823.047 ops/s
[info]                  ·gc.alloc.rate:                   2173.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              63563.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58476.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.524 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 54180.567 ops/s
[info]                  ·gc.alloc.rate:                   2160.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              62719.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58111.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.490 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 53272.887 ops/s
[info]                  ·gc.alloc.rate:                   2117.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              62552.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59169.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.615 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 53505.297 ops/s
[info]                  ·gc.alloc.rate:                   2150.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              63265.405 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58987.911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.225 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 54401.655 ops/s
[info]                  ·gc.alloc.rate:               2186.020 MB/sec
[info]                  ·gc.alloc.rate.norm:          63236.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58172.851 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   53836.691 ±(99.9%) 1790.983 ops/s [Average]
[info]   (min, avg, max) = (53272.887, 53836.691, 54401.655), stdev = 465.112
[info]   CI (99.9%): [52045.708, 55627.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2157.584 ±(99.9%) 100.742 MB/sec [Average]
[info]   (min, avg, max) = (2117.370, 2157.584, 2186.020), stdev = 26.162
[info]   CI (99.9%): [2056.843, 2258.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63067.483 ±(99.9%) 1610.218 B/op [Average]
[info]   (min, avg, max) = (62552.554, 63067.483, 63563.152), stdev = 418.169
[info]   CI (99.9%): [61457.264, 64677.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2004.051 ±(99.9%) 16.885 MB/sec [Average]
[info]   (min, avg, max) = (1999.707, 2004.051, 2010.975), stdev = 4.385
[info]   CI (99.9%): [1987.166, 2020.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   58583.487 ±(99.9%) 1836.630 B/op [Average]
[info]   (min, avg, max) = (58111.239, 58583.487, 59169.365), stdev = 476.967
[info]   CI (99.9%): [56746.857, 60420.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.437 ±(99.9%) 2.848 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.437, 1.728), stdev = 0.740
[info]   CI (99.9%): [≈ 0, 3.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   12.771 ±(99.9%) 83.282 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.771, 50.524), stdev = 21.628
[info]   CI (99.9%): [≈ 0, 96.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.88% complete, ETA 00:20:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29397.639 ops/s
[info] # Warmup Iteration   2: 153992.665 ops/s
[info] # Warmup Iteration   3: 173097.959 ops/s
[info] # Warmup Iteration   4: 163703.662 ops/s
[info] # Warmup Iteration   5: 162301.080 ops/s
[info] Iteration   1: 163834.860 ops/s
[info]                  ·gc.alloc.rate:               1649.028 MB/sec
[info]                  ·gc.alloc.rate.norm:          15836.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12769.797 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 161180.452 ops/s
[info]                  ·gc.alloc.rate:                   1611.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              15731.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13003.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 162787.015 ops/s
[info]                  ·gc.alloc.rate:                   1635.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              15814.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19357.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.441 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 162148.722 ops/s
[info]                  ·gc.alloc.rate:                   1624.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              15765.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12976.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.606 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 163067.587 ops/s
[info]                  ·gc.alloc.rate:                   1633.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              15767.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19393.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.201 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   162603.727 ±(99.9%) 3849.291 ops/s [Average]
[info]   (min, avg, max) = (161180.452, 162603.727, 163834.860), stdev = 999.649
[info]   CI (99.9%): [158754.437, 166453.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1630.770 ±(99.9%) 54.200 MB/sec [Average]
[info]   (min, avg, max) = (1611.137, 1630.770, 1649.028), stdev = 14.076
[info]   CI (99.9%): [1576.569, 1684.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15782.888 ±(99.9%) 161.862 B/op [Average]
[info]   (min, avg, max) = (15731.270, 15782.888, 15836.460), stdev = 42.035
[info]   CI (99.9%): [15621.026, 15944.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1602.012 ±(99.9%) 1419.328 MB/sec [Average]
[info]   (min, avg, max) = (1329.701, 1602.012, 2009.349), stdev = 368.595
[info]   CI (99.9%): [182.684, 3021.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   15500.245 ±(99.9%) 13626.874 B/op [Average]
[info]   (min, avg, max) = (12769.797, 15500.245, 19393.905), stdev = 3538.856
[info]   CI (99.9%): [1873.372, 29127.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.154 ±(99.9%) 1.106 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.154, 0.666), stdev = 0.287
[info]   CI (99.9%): [≈ 0, 1.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.490 ±(99.9%) 10.690 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.490, 6.441), stdev = 2.776
[info]   CI (99.9%): [≈ 0, 12.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.12% complete, ETA 00:20:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 173405.702 ops/s
[info] # Warmup Iteration   2: 432937.314 ops/s
[info] # Warmup Iteration   3: 531378.962 ops/s
[info] # Warmup Iteration   4: 534907.539 ops/s
[info] # Warmup Iteration   5: 535179.061 ops/s
[info] Iteration   1: 520680.669 ops/s
[info]                  ·gc.alloc.rate:               726.863 MB/sec
[info]                  ·gc.alloc.rate.norm:          2197.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2019.660 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 537635.056 ops/s
[info]                  ·gc.alloc.rate:               732.972 MB/sec
[info]                  ·gc.alloc.rate.norm:          2145.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1957.827 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 498353.848 ops/s
[info]                  ·gc.alloc.rate:                   683.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              2157.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2112.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 507094.202 ops/s
[info]                  ·gc.alloc.rate:                   702.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              2180.267 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2076.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 536566.957 ops/s
[info]                  ·gc.alloc.rate:               738.698 MB/sec
[info]                  ·gc.alloc.rate.norm:          2166.665 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1962.729 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   520066.147 ±(99.9%) 67276.608 ops/s [Average]
[info]   (min, avg, max) = (498353.848, 520066.147, 537635.056), stdev = 17471.521
[info]   CI (99.9%): [452789.539, 587342.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   716.821 ±(99.9%) 89.957 MB/sec [Average]
[info]   (min, avg, max) = (683.108, 716.821, 738.698), stdev = 23.362
[info]   CI (99.9%): [626.863, 806.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2169.346 ±(99.9%) 77.186 B/op [Average]
[info]   (min, avg, max) = (2145.664, 2169.346, 2197.076), stdev = 20.045
[info]   CI (99.9%): [2092.160, 2246.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   668.833 ±(99.9%) 1.545 MB/sec [Average]
[info]   (min, avg, max) = (668.169, 668.833, 669.168), stdev = 0.401
[info]   CI (99.9%): [667.288, 670.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2025.839 ±(99.9%) 263.277 B/op [Average]
[info]   (min, avg, max) = (1957.827, 2025.839, 2112.186), stdev = 68.372
[info]   CI (99.9%): [1762.562, 2289.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.017 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.033), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82.35% complete, ETA 00:20:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 209309.679 ops/s
[info] # Warmup Iteration   2: 505320.469 ops/s
[info] # Warmup Iteration   3: 568183.094 ops/s
[info] # Warmup Iteration   4: 590470.050 ops/s
[info] # Warmup Iteration   5: 515205.580 ops/s
[info] Iteration   1: 589120.957 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 589147.427 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 589461.221 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 588828.132 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 589208.230 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   589153.194 ±(99.9%) 870.976 ops/s [Average]
[info]   (min, avg, max) = (588828.132, 589153.194, 589461.221), stdev = 226.190
[info]   CI (99.9%): [588282.217, 590024.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82.59% complete, ETA 00:19:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3259.645 ops/s
[info] # Warmup Iteration   2: 42162.058 ops/s
[info] # Warmup Iteration   3: 71234.110 ops/s
[info] # Warmup Iteration   4: 76441.067 ops/s
[info] # Warmup Iteration   5: 88000.604 ops/s
[info] Iteration   1: 87660.769 ops/s
[info]                  ·gc.alloc.rate:               1624.642 MB/sec
[info]                  ·gc.alloc.rate.norm:          29161.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1993.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35784.964 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 88422.175 ops/s
[info]                  ·gc.alloc.rate:                   1631.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              29046.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23679.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.608 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 87943.577 ops/s
[info]                  ·gc.alloc.rate:                   1642.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              29394.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35729.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.059 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 87303.226 ops/s
[info]                  ·gc.alloc.rate:                   1605.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              28950.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23994.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.503 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 86591.784 ops/s
[info]                  ·gc.alloc.rate:                   1594.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              28974.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24203.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.135 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   87584.306 ±(99.9%) 2654.609 ops/s [Average]
[info]   (min, avg, max) = (86591.784, 87584.306, 88422.175), stdev = 689.393
[info]   CI (99.9%): [84929.697, 90238.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1619.802 ±(99.9%) 75.558 MB/sec [Average]
[info]   (min, avg, max) = (1594.111, 1619.802, 1642.468), stdev = 19.622
[info]   CI (99.9%): [1544.244, 1695.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   29105.297 ±(99.9%) 697.575 B/op [Average]
[info]   (min, avg, max) = (28950.003, 29105.297, 29394.214), stdev = 181.158
[info]   CI (99.9%): [28407.722, 29802.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1596.621 ±(99.9%) 1400.645 MB/sec [Average]
[info]   (min, avg, max) = (1330.374, 1596.621, 1996.485), stdev = 363.743
[info]   CI (99.9%): [195.976, 2997.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   28678.324 ±(99.9%) 24894.453 B/op [Average]
[info]   (min, avg, max) = (23679.014, 28678.324, 35784.964), stdev = 6465.010
[info]   CI (99.9%): [3783.872, 53572.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.541 ±(99.9%) 2.903 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.541, 1.832), stdev = 0.754
[info]   CI (99.9%): [≈ 0, 3.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9.661 ±(99.9%) 51.638 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.661, 32.608), stdev = 13.410
[info]   CI (99.9%): [≈ 0, 61.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.302
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 82.82% complete, ETA 00:19:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6113.627 ops/s
[info] # Warmup Iteration   2: 72023.899 ops/s
[info] # Warmup Iteration   3: 99044.494 ops/s
[info] # Warmup Iteration   4: 101695.709 ops/s
[info] # Warmup Iteration   5: 104681.243 ops/s
[info] Iteration   1: 103212.105 ops/s
[info]                  ·gc.alloc.rate:                   1646.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              25101.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30596.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.833 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 97165.237 ops/s
[info]                  ·gc.alloc.rate:                   1516.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              24570.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21672.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.987 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 99479.007 ops/s
[info]                  ·gc.alloc.rate:                   1548.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              24495.240 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21147.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.174 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 99723.109 ops/s
[info]                  ·gc.alloc.rate:                   1551.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              24480.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21047.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.300 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 100496.637 ops/s
[info]                  ·gc.alloc.rate:                   1587.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              24858.541 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31297.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.326 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   100015.219 ±(99.9%) 8380.592 ops/s [Average]
[info]   (min, avg, max) = (97165.237, 100015.219, 103212.105), stdev = 2176.413
[info]   CI (99.9%): [91634.628, 108395.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1569.941 ±(99.9%) 189.977 MB/sec [Average]
[info]   (min, avg, max) = (1516.911, 1569.941, 1646.096), stdev = 49.336
[info]   CI (99.9%): [1379.964, 1759.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   24701.493 ±(99.9%) 1042.788 B/op [Average]
[info]   (min, avg, max) = (24480.804, 24701.493, 25101.977), stdev = 270.809
[info]   CI (99.9%): [23658.705, 25744.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1602.605 ±(99.9%) 1405.442 MB/sec [Average]
[info]   (min, avg, max) = (1333.585, 1602.605, 2006.399), stdev = 364.989
[info]   CI (99.9%): [197.163, 3008.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   25152.102 ±(99.9%) 20412.247 B/op [Average]
[info]   (min, avg, max) = (21047.003, 25152.102, 31297.351), stdev = 5300.996
[info]   CI (99.9%): [4739.855, 45564.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.914 ±(99.9%) 5.749 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.914, 3.518), stdev = 1.493
[info]   CI (99.9%): [≈ 0, 6.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   14.724 ±(99.9%) 93.197 B/op [Average]
[info]   (min, avg, max) = (0.326, 14.724, 56.987), stdev = 24.203
[info]   CI (99.9%): [≈ 0, 107.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 15.000), stdev = 5.263
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.06% complete, ETA 00:19:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10684.340 ops/s
[info] # Warmup Iteration   2: 72661.091 ops/s
[info] # Warmup Iteration   3: 135310.391 ops/s
[info] # Warmup Iteration   4: 150545.295 ops/s
[info] # Warmup Iteration   5: 149820.676 ops/s
[info] Iteration   1: 153974.373 ops/s
[info]                  ·gc.alloc.rate:                   730.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              7462.521 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6761.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.110 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 150504.113 ops/s
[info]                  ·gc.alloc.rate:                   711.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              7444.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6928.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.323 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 152607.155 ops/s
[info]                  ·gc.alloc.rate:               727.987 MB/sec
[info]                  ·gc.alloc.rate.norm:          7507.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6832.446 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 154931.949 ops/s
[info]                  ·gc.alloc.rate:               730.712 MB/sec
[info]                  ·gc.alloc.rate.norm:          7422.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6736.346 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 152885.355 ops/s
[info]                  ·gc.alloc.rate:               722.846 MB/sec
[info]                  ·gc.alloc.rate.norm:          7439.628 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6826.926 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   152980.589 ±(99.9%) 6407.842 ops/s [Average]
[info]   (min, avg, max) = (150504.113, 152980.589, 154931.949), stdev = 1664.096
[info]   CI (99.9%): [146572.747, 159388.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   724.727 ±(99.9%) 29.953 MB/sec [Average]
[info]   (min, avg, max) = (711.964, 724.727, 730.712), stdev = 7.779
[info]   CI (99.9%): [694.774, 754.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7455.441 ±(99.9%) 124.367 B/op [Average]
[info]   (min, avg, max) = (7422.973, 7455.441, 7507.421), stdev = 32.298
[info]   CI (99.9%): [7331.074, 7579.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   662.611 ±(99.9%) 2.691 MB/sec [Average]
[info]   (min, avg, max) = (661.520, 662.611, 663.315), stdev = 0.699
[info]   CI (99.9%): [659.920, 665.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6817.024 ±(99.9%) 287.404 B/op [Average]
[info]   (min, avg, max) = (6736.346, 6817.024, 6928.088), stdev = 74.638
[info]   CI (99.9%): [6529.620, 7104.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.031), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.087 ±(99.9%) 0.541 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.323), stdev = 0.140
[info]   CI (99.9%): [≈ 0, 0.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.29% complete, ETA 00:19:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23915.352 ops/s
[info] # Warmup Iteration   2: 250779.934 ops/s
[info] # Warmup Iteration   3: 321550.108 ops/s
[info] # Warmup Iteration   4: 347195.726 ops/s
[info] # Warmup Iteration   5: 339763.529 ops/s
[info] Iteration   1: 346671.079 ops/s
[info]                  ·gc.alloc.rate:               1466.682 MB/sec
[info]                  ·gc.alloc.rate.norm:          6657.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6077.400 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 344758.225 ops/s
[info]                  ·gc.alloc.rate:               1454.885 MB/sec
[info]                  ·gc.alloc.rate.norm:          6641.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6112.798 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 346244.042 ops/s
[info]                  ·gc.alloc.rate:                   1466.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              6663.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6089.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.906 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.755 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 349161.655 ops/s
[info]                  ·gc.alloc.rate:                   1465.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              6607.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6032.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.064 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 348618.345 ops/s
[info]                  ·gc.alloc.rate:                   1514.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              6838.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9037.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.188 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   347090.669 ±(99.9%) 6930.065 ops/s [Average]
[info]   (min, avg, max) = (344758.225, 347090.669, 349161.655), stdev = 1799.716
[info]   CI (99.9%): [340160.604, 354020.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1473.662 ±(99.9%) 90.459 MB/sec [Average]
[info]   (min, avg, max) = (1454.885, 1473.662, 1514.754), stdev = 23.492
[info]   CI (99.9%): [1383.202, 1564.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6681.630 ±(99.9%) 347.696 B/op [Average]
[info]   (min, avg, max) = (6607.750, 6681.630, 6838.452), stdev = 90.296
[info]   CI (99.9%): [6333.933, 7029.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1471.584 ±(99.9%) 1141.231 MB/sec [Average]
[info]   (min, avg, max) = (1338.322, 1471.584, 2001.753), stdev = 296.374
[info]   CI (99.9%): [330.353, 2612.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6669.868 ±(99.9%) 5096.751 B/op [Average]
[info]   (min, avg, max) = (6032.529, 6669.868, 9037.037), stdev = 1323.610
[info]   CI (99.9%): [1573.117, 11766.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.881 ±(99.9%) 6.554 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.881, 3.906), stdev = 1.702
[info]   CI (99.9%): [≈ 0, 7.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.001 ±(99.9%) 29.794 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.001, 17.755), stdev = 7.737
[info]   CI (99.9%): [≈ 0, 33.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 10.000), stdev = 3.114
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.53% complete, ETA 00:18:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1089.509 ops/s
[info] # Warmup Iteration   2: 21008.238 ops/s
[info] # Warmup Iteration   3: 51960.155 ops/s
[info] # Warmup Iteration   4: 50507.964 ops/s
[info] # Warmup Iteration   5: 51943.679 ops/s
[info] Iteration   1: 52742.753 ops/s
[info]                  ·gc.alloc.rate:                   2258.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              67400.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59853.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.680 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 52429.276 ops/s
[info]                  ·gc.alloc.rate:                   2228.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              66870.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60191.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.873 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 52136.825 ops/s
[info]                  ·gc.alloc.rate:                   2224.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              67142.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80699.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.514 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 52700.887 ops/s
[info]                  ·gc.alloc.rate:                   2260.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              67507.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59967.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.243 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 53675.262 ops/s
[info]                  ·gc.alloc.rate:                   2299.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              67418.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58976.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.610 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   52737.001 ±(99.9%) 2225.872 ops/s [Average]
[info]   (min, avg, max) = (52136.825, 52737.001, 53675.262), stdev = 578.052
[info]   CI (99.9%): [50511.128, 54962.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2254.263 ±(99.9%) 117.325 MB/sec [Average]
[info]   (min, avg, max) = (2224.277, 2254.263, 2299.775), stdev = 30.469
[info]   CI (99.9%): [2136.938, 2371.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67267.862 ±(99.9%) 1002.867 B/op [Average]
[info]   (min, avg, max) = (66870.476, 67267.862, 67507.846), stdev = 260.441
[info]   CI (99.9%): [66264.995, 68270.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2140.910 ±(99.9%) 1146.265 MB/sec [Average]
[info]   (min, avg, max) = (2005.564, 2140.910, 2673.400), stdev = 297.681
[info]   CI (99.9%): [994.646, 3287.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   63937.818 ±(99.9%) 36125.339 B/op [Average]
[info]   (min, avg, max) = (58976.907, 63937.818, 80699.912), stdev = 9381.636
[info]   CI (99.9%): [27812.480, 100063.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.629 ±(99.9%) 3.984 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.629, 2.436), stdev = 1.035
[info]   CI (99.9%): [≈ 0, 4.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   18.784 ±(99.9%) 118.858 B/op [Average]
[info]   (min, avg, max) = (0.610, 18.784, 72.680), stdev = 30.867
[info]   CI (99.9%): [≈ 0, 137.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.76% complete, ETA 00:18:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29799.491 ops/s
[info] # Warmup Iteration   2: 181513.290 ops/s
[info] # Warmup Iteration   3: 234967.885 ops/s
[info] # Warmup Iteration   4: 258435.802 ops/s
[info] # Warmup Iteration   5: 258389.745 ops/s
[info] Iteration   1: 258405.964 ops/s
[info]                  ·gc.alloc.rate:               915.534 MB/sec
[info]                  ·gc.alloc.rate.norm:          5576.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4034.857 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 256982.841 ops/s
[info]                  ·gc.alloc.rate:               909.022 MB/sec
[info]                  ·gc.alloc.rate.norm:          5567.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4057.290 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 256403.803 ops/s
[info]                  ·gc.alloc.rate:                   921.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8149.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.128 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 255995.081 ops/s
[info]                  ·gc.alloc.rate:                   903.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              5553.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4085.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.128 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 256375.347 ops/s
[info]                  ·gc.alloc.rate:               902.368 MB/sec
[info]                  ·gc.alloc.rate.norm:          5539.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4079.084 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   256832.607 ±(99.9%) 3649.200 ops/s [Average]
[info]   (min, avg, max) = (255995.081, 256832.607, 258405.964), stdev = 947.686
[info]   CI (99.9%): [253183.407, 260481.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   910.339 ±(99.9%) 31.529 MB/sec [Average]
[info]   (min, avg, max) = (902.368, 910.339, 921.537), stdev = 8.188
[info]   CI (99.9%): [878.810, 941.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5578.616 ±(99.9%) 175.837 B/op [Average]
[info]   (min, avg, max) = (5539.796, 5578.616, 5656.452), stdev = 45.664
[info]   CI (99.9%): [5402.778, 5754.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   796.296 ±(99.9%) 1143.805 MB/sec [Average]
[info]   (min, avg, max) = (662.452, 796.296, 1327.659), stdev = 297.043
[info]   CI (99.9%): [≈ 0, 1940.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4881.144 ±(99.9%) 7035.275 B/op [Average]
[info]   (min, avg, max) = (4034.857, 4881.144, 8149.258), stdev = 1827.038
[info]   CI (99.9%): [≈ 0, 11916.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.051 ±(99.9%) 0.270 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.128), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.00% complete, ETA 00:18:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 163791.761 ops/s
[info] # Warmup Iteration   2: 601799.853 ops/s
[info] # Warmup Iteration   3: 649494.671 ops/s
[info] # Warmup Iteration   4: 648233.881 ops/s
[info] # Warmup Iteration   5: 658494.146 ops/s
[info] Iteration   1: 677530.303 ops/s
[info]                  ·gc.alloc.rate:               761.098 MB/sec
[info]                  ·gc.alloc.rate.norm:          1767.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1551.217 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 667063.381 ops/s
[info]                  ·gc.alloc.rate:               751.512 MB/sec
[info]                  ·gc.alloc.rate.norm:          1772.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1576.366 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 654922.075 ops/s
[info]                  ·gc.alloc.rate:                   729.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              1753.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1605.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.150 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 670000.099 ops/s
[info]                  ·gc.alloc.rate:               751.388 MB/sec
[info]                  ·gc.alloc.rate.norm:          1765.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1571.057 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 664151.578 ops/s
[info]                  ·gc.alloc.rate:                   759.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              1799.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1584.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.148 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   666733.487 ±(99.9%) 31842.202 ops/s [Average]
[info]   (min, avg, max) = (654922.075, 666733.487, 677530.303), stdev = 8269.319
[info]   CI (99.9%): [634891.285, 698575.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   750.529 ±(99.9%) 48.329 MB/sec [Average]
[info]   (min, avg, max) = (729.497, 750.529, 761.098), stdev = 12.551
[info]   CI (99.9%): [702.201, 798.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1771.526 ±(99.9%) 65.464 B/op [Average]
[info]   (min, avg, max) = (1753.050, 1771.526, 1799.043), stdev = 17.001
[info]   CI (99.9%): [1706.062, 1836.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   668.375 ±(99.9%) 1.551 MB/sec [Average]
[info]   (min, avg, max) = (667.877, 668.375, 668.798), stdev = 0.403
[info]   CI (99.9%): [666.824, 669.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1577.831 ±(99.9%) 76.514 B/op [Average]
[info]   (min, avg, max) = (1551.217, 1577.831, 1605.640), stdev = 19.870
[info]   CI (99.9%): [1501.317, 1654.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.060 ±(99.9%) 0.314 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.060, 0.150), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84.24% complete, ETA 00:18:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 167529.089 ops/s
[info] # Warmup Iteration   2: 653181.873 ops/s
[info] # Warmup Iteration   3: 753855.852 ops/s
[info] # Warmup Iteration   4: 724910.922 ops/s
[info] # Warmup Iteration   5: 756396.710 ops/s
[info] Iteration   1: 753001.113 ops/s
[info]                  ·gc.alloc.rate:      0.939 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.962 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 756241.645 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 725217.566 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 737339.492 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 758329.286 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   746025.820 ±(99.9%) 54891.222 ops/s [Average]
[info]   (min, avg, max) = (725217.566, 746025.820, 758329.286), stdev = 14255.076
[info]   CI (99.9%): [691134.598, 800917.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.188 ±(99.9%) 1.616 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.188, 0.939), stdev = 0.420
[info]   CI (99.9%): [≈ 0, 1.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.393 ±(99.9%) 3.378 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.393, 1.962), stdev = 0.877
[info]   CI (99.9%): [≈ 0, 3.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 84.47% complete, ETA 00:17:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3376.807 ops/s
[info] # Warmup Iteration   2: 56735.556 ops/s
[info] # Warmup Iteration   3: 71628.236 ops/s
[info] # Warmup Iteration   4: 87042.936 ops/s
[info] # Warmup Iteration   5: 85967.787 ops/s
[info] Iteration   1: 86711.060 ops/s
[info]                  ·gc.alloc.rate:                   1780.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              32315.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1979.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35923.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.567 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.288 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 95573.938 ops/s
[info]                  ·gc.alloc.rate:                   1496.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              24638.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21671.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.865 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80.114 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 95993.841 ops/s
[info]                  ·gc.alloc.rate:                   1506.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              24697.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21570.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.683 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 96096.780 ops/s
[info]                  ·gc.alloc.rate:                   1535.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              25146.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1978.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32397.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.160 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 96253.159 ops/s
[info]                  ·gc.alloc.rate:                   1527.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              24981.704 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21621.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.317 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   94125.756 ±(99.9%) 15990.083 ops/s [Average]
[info]   (min, avg, max) = (86711.060, 94125.756, 96253.159), stdev = 4152.574
[info]   CI (99.9%): [78135.672, 110115.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1569.293 ±(99.9%) 459.015 MB/sec [Average]
[info]   (min, avg, max) = (1496.255, 1569.293, 1780.660), stdev = 119.205
[info]   CI (99.9%): [1110.278, 2028.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   26356.029 ±(99.9%) 12853.032 B/op [Average]
[info]   (min, avg, max) = (24638.882, 26356.029, 32315.516), stdev = 3337.892
[info]   CI (99.9%): [13502.997, 39209.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1582.300 ±(99.9%) 1393.627 MB/sec [Average]
[info]   (min, avg, max) = (1315.660, 1582.300, 1979.467), stdev = 361.920
[info]   CI (99.9%): [188.673, 2975.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   26636.732 ±(99.9%) 26879.363 B/op [Average]
[info]   (min, avg, max) = (21570.469, 26636.732, 35923.471), stdev = 6980.485
[info]   CI (99.9%): [≈ 0, 53516.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.370 ±(99.9%) 7.625 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.370, 4.865), stdev = 1.980
[info]   CI (99.9%): [≈ 0, 8.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   22.712 ±(99.9%) 125.238 B/op [Average]
[info]   (min, avg, max) = (0.683, 22.712, 80.114), stdev = 32.524
[info]   CI (99.9%): [≈ 0, 147.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 11.000, 19.000), stdev = 4.743
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84.71% complete, ETA 00:17:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10486.584 ops/s
[info] # Warmup Iteration   2: 86269.267 ops/s
[info] # Warmup Iteration   3: 116551.169 ops/s
[info] # Warmup Iteration   4: 114858.209 ops/s
[info] # Warmup Iteration   5: 121274.272 ops/s
[info] Iteration   1: 123946.658 ops/s
[info]                  ·gc.alloc.rate:                   2017.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              25620.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25426.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.281 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 122373.129 ops/s
[info]                  ·gc.alloc.rate:                   1988.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              25571.326 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25660.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.016 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 123557.786 ops/s
[info]                  ·gc.alloc.rate:                   1994.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              25400.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25379.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.447 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 125970.839 ops/s
[info]                  ·gc.alloc.rate:                   2041.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              25510.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24901.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 116510.126 ops/s
[info]                  ·gc.alloc.rate:               2260.401 MB/sec
[info]                  ·gc.alloc.rate.norm:          30535.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2663.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35986.989 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   122471.707 ±(99.9%) 13769.638 ops/s [Average]
[info]   (min, avg, max) = (116510.126, 122471.707, 125970.839), stdev = 3575.931
[info]   CI (99.9%): [108702.069, 136241.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2060.551 ±(99.9%) 437.787 MB/sec [Average]
[info]   (min, avg, max) = (1988.265, 2060.551, 2260.401), stdev = 113.692
[info]   CI (99.9%): [1622.764, 2498.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   26527.764 ±(99.9%) 8632.033 B/op [Average]
[info]   (min, avg, max) = (25400.871, 26527.764, 30535.168), stdev = 2241.711
[info]   CI (99.9%): [17895.731, 35159.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2129.512 ±(99.9%) 1150.575 MB/sec [Average]
[info]   (min, avg, max) = (1992.925, 2129.512, 2663.978), stdev = 298.801
[info]   CI (99.9%): [978.937, 3280.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   27471.063 ±(99.9%) 18361.872 B/op [Average]
[info]   (min, avg, max) = (24901.693, 27471.063, 35986.989), stdev = 4768.520
[info]   CI (99.9%): [9109.190, 45832.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.941 ±(99.9%) 6.686 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.941, 4.038), stdev = 1.736
[info]   CI (99.9%): [≈ 0, 7.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   11.957 ±(99.9%) 84.888 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.957, 51.281), stdev = 22.045
[info]   CI (99.9%): [≈ 0, 96.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 12.000), stdev = 3.271
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.94% complete, ETA 00:17:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18811.456 ops/s
[info] # Warmup Iteration   2: 136292.972 ops/s
[info] # Warmup Iteration   3: 189789.388 ops/s
[info] # Warmup Iteration   4: 199981.997 ops/s
[info] # Warmup Iteration   5: 200834.014 ops/s
[info] Iteration   1: 207464.495 ops/s
[info]                  ·gc.alloc.rate:                   878.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              6666.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5015.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.158 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 207116.819 ops/s
[info]                  ·gc.alloc.rate:                   892.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              6785.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10068.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.158 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 207359.415 ops/s
[info]                  ·gc.alloc.rate:               876.115 MB/sec
[info]                  ·gc.alloc.rate.norm:          6649.704 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5038.338 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 207526.469 ops/s
[info]                  ·gc.alloc.rate:                   881.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              6685.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5034.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.474 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 206065.930 ops/s
[info]                  ·gc.alloc.rate:               872.154 MB/sec
[info]                  ·gc.alloc.rate.norm:          6660.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5079.999 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   207106.626 ±(99.9%) 2319.508 ops/s [Average]
[info]   (min, avg, max) = (206065.930, 207106.626, 207526.469), stdev = 602.369
[info]   CI (99.9%): [204787.118, 209426.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   880.384 ±(99.9%) 30.345 MB/sec [Average]
[info]   (min, avg, max) = (872.154, 880.384, 892.941), stdev = 7.881
[info]   CI (99.9%): [850.038, 910.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6689.541 ±(99.9%) 212.313 B/op [Average]
[info]   (min, avg, max) = (6649.704, 6689.541, 6785.445), stdev = 55.137
[info]   CI (99.9%): [6477.228, 6901.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   795.840 ±(99.9%) 1138.956 MB/sec [Average]
[info]   (min, avg, max) = (661.144, 795.840, 1324.947), stdev = 295.783
[info]   CI (99.9%): [≈ 0, 1934.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6047.275 ±(99.9%) 8655.926 B/op [Average]
[info]   (min, avg, max) = (5015.550, 6047.275, 10068.249), stdev = 2247.916
[info]   CI (99.9%): [≈ 0, 14703.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.158 ±(99.9%) 0.745 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.158, 0.474), stdev = 0.193
[info]   CI (99.9%): [≈ 0, 0.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.18% complete, ETA 00:16:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49289.211 ops/s
[info] # Warmup Iteration   2: 200337.324 ops/s
[info] # Warmup Iteration   3: 265607.597 ops/s
[info] # Warmup Iteration   4: 290457.785 ops/s
[info] # Warmup Iteration   5: 293280.350 ops/s
[info] Iteration   1: 292277.148 ops/s
[info]                  ·gc.alloc.rate:                   1084.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              5839.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7163.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.112 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 292610.538 ops/s
[info]                  ·gc.alloc.rate:               1074.419 MB/sec
[info]                  ·gc.alloc.rate.norm:          5778.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3575.896 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 292854.134 ops/s
[info]                  ·gc.alloc.rate:               1078.510 MB/sec
[info]                  ·gc.alloc.rate.norm:          5794.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7145.664 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 292849.462 ops/s
[info]                  ·gc.alloc.rate:                   1084.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              5829.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7153.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.112 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 291322.994 ops/s
[info]                  ·gc.alloc.rate:               1054.986 MB/sec
[info]                  ·gc.alloc.rate.norm:          5699.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3600.466 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   292382.855 ±(99.9%) 2455.177 ops/s [Average]
[info]   (min, avg, max) = (291322.994, 292382.855, 292854.134), stdev = 637.602
[info]   CI (99.9%): [289927.678, 294838.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1075.409 ±(99.9%) 46.977 MB/sec [Average]
[info]   (min, avg, max) = (1054.986, 1075.409, 1084.680), stdev = 12.200
[info]   CI (99.9%): [1028.431, 1122.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5788.383 ±(99.9%) 213.828 B/op [Average]
[info]   (min, avg, max) = (5699.501, 5788.383, 5839.607), stdev = 55.530
[info]   CI (99.9%): [5574.555, 6002.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1064.518 ±(99.9%) 1402.104 MB/sec [Average]
[info]   (min, avg, max) = (664.834, 1064.518, 1330.968), stdev = 364.122
[info]   CI (99.9%): [≈ 0, 2466.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5727.749 ±(99.9%) 7520.995 B/op [Average]
[info]   (min, avg, max) = (3575.896, 5727.749, 7163.674), stdev = 1953.179
[info]   CI (99.9%): [≈ 0, 13248.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.045 ±(99.9%) 0.236 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.045, 0.112), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85.41% complete, ETA 00:16:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2869.550 ops/s
[info] # Warmup Iteration   2: 49825.132 ops/s
[info] # Warmup Iteration   3: 99235.462 ops/s
[info] # Warmup Iteration   4: 88450.653 ops/s
[info] # Warmup Iteration   5: 103213.657 ops/s
[info] Iteration   1: 103342.306 ops/s
[info]                  ·gc.alloc.rate:                   3345.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              50957.267 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3331.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50735.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.243 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 103236.812 ops/s
[info]                  ·gc.alloc.rate:                   3319.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              50600.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3339.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50914.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.635 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 102689.057 ops/s
[info]                  ·gc.alloc.rate:               3352.821 MB/sec
[info]                  ·gc.alloc.rate.norm:          51385.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3353.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51389.474 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 101676.299 ops/s
[info]                  ·gc.alloc.rate:                   3336.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              51623.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3368.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52117.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.644 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 103265.538 ops/s
[info]                  ·gc.alloc.rate:                   3385.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              51589.891 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3379.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51487.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.317 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   102842.002 ±(99.9%) 2700.821 ops/s [Average]
[info]   (min, avg, max) = (101676.299, 102842.002, 103342.306), stdev = 701.395
[info]   CI (99.9%): [100141.182, 105542.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3348.029 ±(99.9%) 95.037 MB/sec [Average]
[info]   (min, avg, max) = (3319.159, 3348.029, 3385.960), stdev = 24.681
[info]   CI (99.9%): [3252.993, 3443.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   51231.285 ±(99.9%) 1699.438 B/op [Average]
[info]   (min, avg, max) = (50600.434, 51231.285, 51623.287), stdev = 441.339
[info]   CI (99.9%): [49531.847, 52930.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3354.324 ±(99.9%) 76.077 MB/sec [Average]
[info]   (min, avg, max) = (3331.280, 3354.324, 3379.252), stdev = 19.757
[info]   CI (99.9%): [3278.247, 3430.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   51328.754 ±(99.9%) 2087.236 B/op [Average]
[info]   (min, avg, max) = (50735.094, 51328.754, 52117.405), stdev = 542.048
[info]   CI (99.9%): [49241.518, 53415.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.129 ±(99.9%) 0.890 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.129, 0.541), stdev = 0.231
[info]   CI (99.9%): [≈ 0, 1.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.968 ±(99.9%) 13.546 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.968, 8.243), stdev = 3.518
[info]   CI (99.9%): [≈ 0, 15.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 0.837
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85.65% complete, ETA 00:16:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52653.326 ops/s
[info] # Warmup Iteration   2: 219511.181 ops/s
[info] # Warmup Iteration   3: 229460.800 ops/s
[info] # Warmup Iteration   4: 257169.332 ops/s
[info] # Warmup Iteration   5: 257845.570 ops/s
[info] Iteration   1: 251109.454 ops/s
[info]                  ·gc.alloc.rate:                   1739.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              10902.656 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12571.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.391 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 261155.581 ops/s
[info]                  ·gc.alloc.rate:                   1761.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              10611.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8061.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.281 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.797 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 260816.862 ops/s
[info]                  ·gc.alloc.rate:                   1769.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              10679.775 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12067.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.502 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 260431.963 ops/s
[info]                  ·gc.alloc.rate:                   1778.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              10747.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12068.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.377 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 260472.060 ops/s
[info]                  ·gc.alloc.rate:               1765.041 MB/sec
[info]                  ·gc.alloc.rate.norm:          10665.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8049.993 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   258797.184 ±(99.9%) 16586.852 ops/s [Average]
[info]   (min, avg, max) = (251109.454, 258797.184, 261155.581), stdev = 4307.553
[info]   CI (99.9%): [242210.332, 275384.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1762.871 ±(99.9%) 55.339 MB/sec [Average]
[info]   (min, avg, max) = (1739.916, 1762.871, 1778.472), stdev = 14.371
[info]   CI (99.9%): [1707.532, 1818.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10721.382 ±(99.9%) 432.474 B/op [Average]
[info]   (min, avg, max) = (10611.806, 10721.382, 10902.656), stdev = 112.312
[info]   CI (99.9%): [10288.907, 11153.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1734.636 ±(99.9%) 1404.648 MB/sec [Average]
[info]   (min, avg, max) = (1332.252, 1734.636, 2006.244), stdev = 364.783
[info]   CI (99.9%): [329.988, 3139.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10563.787 ±(99.9%) 8851.716 B/op [Average]
[info]   (min, avg, max) = (8049.993, 10563.787, 12571.522), stdev = 2298.763
[info]   CI (99.9%): [1712.071, 19415.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.898 ±(99.9%) 7.284 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.898, 4.281), stdev = 1.892
[info]   CI (99.9%): [≈ 0, 8.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.414 ±(99.9%) 43.883 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.414, 25.797), stdev = 11.396
[info]   CI (99.9%): [≈ 0, 49.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 14.000), stdev = 4.393
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.88% complete, ETA 00:16:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 147336.767 ops/s
[info] # Warmup Iteration   2: 734568.323 ops/s
[info] # Warmup Iteration   3: 855264.560 ops/s
[info] # Warmup Iteration   4: 858923.062 ops/s
[info] # Warmup Iteration   5: 861629.731 ops/s
[info] Iteration   1: 860214.485 ops/s
[info]                  ·gc.alloc.rate:               471.800 MB/sec
[info]                  ·gc.alloc.rate.norm:          863.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:      656.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1201.071 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 856440.372 ops/s
[info]                  ·gc.alloc.rate:                   465.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              855.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1206.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.148 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 858391.789 ops/s
[info]                  ·gc.alloc.rate:                   468.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              859.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1205.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 838261.486 ops/s
[info]                  ·gc.alloc.rate:      443.133 MB/sec
[info]                  ·gc.alloc.rate.norm: 832.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 860070.022 ops/s
[info]                  ·gc.alloc.rate:               475.462 MB/sec
[info]                  ·gc.alloc.rate.norm:          870.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:      657.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1203.165 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   854675.631 ±(99.9%) 35819.613 ops/s [Average]
[info]   (min, avg, max) = (838261.486, 854675.631, 860214.485), stdev = 9302.240
[info]   CI (99.9%): [818856.018, 890495.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   464.927 ±(99.9%) 49.030 MB/sec [Average]
[info]   (min, avg, max) = (443.133, 464.927, 475.462), stdev = 12.733
[info]   CI (99.9%): [415.897, 513.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   856.037 ±(99.9%) 55.819 B/op [Average]
[info]   (min, avg, max) = (832.001, 856.037, 870.124), stdev = 14.496
[info]   CI (99.9%): [800.218, 911.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   525.581 ±(99.9%) 1131.354 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 525.581, 657.487), stdev = 293.809
[info]   CI (99.9%): [≈ 0, 1656.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   963.231 ±(99.9%) 2073.443 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 963.231, 1206.450), stdev = 538.467
[info]   CI (99.9%): [≈ 0, 3036.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.129 ±(99.9%) 1.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.129, 0.625), stdev = 0.277
[info]   CI (99.9%): [≈ 0, 1.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.237 ±(99.9%) 1.961 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.237, 1.148), stdev = 0.509
[info]   CI (99.9%): [≈ 0, 2.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.12% complete, ETA 00:15:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 348086.387 ops/s
[info] # Warmup Iteration   2: 763093.001 ops/s
[info] # Warmup Iteration   3: 886450.301 ops/s
[info] # Warmup Iteration   4: 881192.825 ops/s
[info] # Warmup Iteration   5: 859002.599 ops/s
[info] Iteration   1: 883276.748 ops/s
[info]                  ·gc.alloc.rate:                   482.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              858.511 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     911.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 848885.522 ops/s
[info]                  ·gc.alloc.rate:               528.904 MB/sec
[info]                  ·gc.alloc.rate.norm:          980.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1238.729 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 870936.770 ops/s
[info]                  ·gc.alloc.rate:                   474.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              857.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1207.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 859152.915 ops/s
[info]                  ·gc.alloc.rate:      454.175 MB/sec
[info]                  ·gc.alloc.rate.norm: 832.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 857184.723 ops/s
[info]                  ·gc.alloc.rate:               474.434 MB/sec
[info]                  ·gc.alloc.rate.norm:          871.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1227.957 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   863887.336 ±(99.9%) 51591.372 ops/s [Average]
[info]   (min, avg, max) = (848885.522, 863887.336, 883276.748), stdev = 13398.116
[info]   CI (99.9%): [812295.963, 915478.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   482.804 ±(99.9%) 106.932 MB/sec [Average]
[info]   (min, avg, max) = (454.175, 482.804, 528.904), stdev = 27.770
[info]   CI (99.9%): [375.872, 589.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   879.911 ±(99.9%) 223.458 B/op [Average]
[info]   (min, avg, max) = (832.001, 879.911, 980.577), stdev = 58.031
[info]   CI (99.9%): [656.453, 1103.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   503.392 ±(99.9%) 1114.590 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503.392, 668.858), stdev = 289.455
[info]   CI (99.9%): [≈ 0, 1617.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   917.136 ±(99.9%) 2042.528 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 917.136, 1238.729), stdev = 530.438
[info]   CI (99.9%): [≈ 0, 2959.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.037), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86.35% complete, ETA 00:15:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 209290.926 ops/s
[info] # Warmup Iteration   2: 870488.718 ops/s
[info] # Warmup Iteration   3: 912227.003 ops/s
[info] # Warmup Iteration   4: 910988.298 ops/s
[info] # Warmup Iteration   5: 911839.144 ops/s
[info] Iteration   1: 905226.349 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 904888.047 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 907897.472 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 906914.989 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 912205.169 ops/s
[info]                  ·gc.alloc.rate:      3.497 MB/sec
[info]                  ·gc.alloc.rate.norm: 6.033 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   907426.405 ±(99.9%) 11325.663 ops/s [Average]
[info]   (min, avg, max) = (904888.047, 907426.405, 912205.169), stdev = 2941.239
[info]   CI (99.9%): [896100.742, 918752.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.700 ±(99.9%) 6.021 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.700, 3.497), stdev = 1.564
[info]   CI (99.9%): [≈ 0, 6.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.207 ±(99.9%) 10.389 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 1.207, 6.033), stdev = 2.698
[info]   CI (99.9%): [≈ 0, 11.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86.59% complete, ETA 00:15:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6152.594 ops/s
[info] # Warmup Iteration   2: 24168.625 ops/s
[info] # Warmup Iteration   3: 38559.745 ops/s
[info] # Warmup Iteration   4: 38319.851 ops/s
[info] # Warmup Iteration   5: 36427.938 ops/s
[info] Iteration   1: 37585.938 ops/s
[info]                  ·gc.alloc.rate:                   1901.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              79606.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1985.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83153.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.891 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 204.804 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 39759.771 ops/s
[info]                  ·gc.alloc.rate:                   1882.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              74403.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1979.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78266.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40.230 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 39867.110 ops/s
[info]                  ·gc.alloc.rate:                   1860.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              73443.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52173.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.574 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 39550.082 ops/s
[info]                  ·gc.alloc.rate:                   1861.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              74083.328 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1984.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78954.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.313 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 40066.055 ops/s
[info]                  ·gc.alloc.rate:                   1876.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              73681.693 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78040.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.541 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   39365.791 ±(99.9%) 3897.886 ops/s [Average]
[info]   (min, avg, max) = (37585.938, 39365.791, 40066.055), stdev = 1012.269
[info]   CI (99.9%): [35467.905, 43263.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1876.308 ±(99.9%) 64.443 MB/sec [Average]
[info]   (min, avg, max) = (1860.471, 1876.308, 1901.284), stdev = 16.736
[info]   CI (99.9%): [1811.865, 1940.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   75043.778 ±(99.9%) 9924.331 B/op [Average]
[info]   (min, avg, max) = (73443.730, 75043.778, 79606.899), stdev = 2577.317
[info]   CI (99.9%): [65119.447, 84968.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1851.705 ±(99.9%) 1141.011 MB/sec [Average]
[info]   (min, avg, max) = (1321.661, 1851.705, 1987.051), stdev = 296.317
[info]   CI (99.9%): [710.694, 2992.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   74117.531 ±(99.9%) 47907.860 B/op [Average]
[info]   (min, avg, max) = (52173.717, 74117.531, 83153.017), stdev = 12441.519
[info]   CI (99.9%): [26209.671, 122025.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.265 ±(99.9%) 7.943 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 1.265, 4.891), stdev = 2.063
[info]   CI (99.9%): [≈ 0, 9.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   52.293 ±(99.9%) 333.407 B/op [Average]
[info]   (min, avg, max) = (3.313, 52.293, 204.804), stdev = 86.585
[info]   CI (99.9%): [≈ 0, 385.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.600, 20.000), stdev = 5.983
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 86.82% complete, ETA 00:15:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47795.269 ops/s
[info] # Warmup Iteration   2: 316265.265 ops/s
[info] # Warmup Iteration   3: 1035543.311 ops/s
[info] # Warmup Iteration   4: 1058452.416 ops/s
[info] # Warmup Iteration   5: 1071945.477 ops/s
[info] Iteration   1: 1076511.808 ops/s
[info]                  ·gc.alloc.rate:                   2458.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              3593.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3896.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.821 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 1097470.222 ops/s
[info]                  ·gc.alloc.rate:                   2522.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              3618.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2657.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3810.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.269 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1091330.489 ops/s
[info]                  ·gc.alloc.rate:               2495.378 MB/sec
[info]                  ·gc.alloc.rate.norm:          3598.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1992.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2872.949 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1113451.851 ops/s
[info]                  ·gc.alloc.rate:                   2571.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              3635.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2663.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3764.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1107423.523 ops/s
[info]                  ·gc.alloc.rate:               2572.475 MB/sec
[info]                  ·gc.alloc.rate.norm:          3655.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2674.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3800.214 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   1097237.579 ±(99.9%) 55506.785 ops/s [Average]
[info]   (min, avg, max) = (1076511.808, 1097237.579, 1113451.851), stdev = 14414.936
[info]   CI (99.9%): [1041730.794, 1152744.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2524.245 ±(99.9%) 189.944 MB/sec [Average]
[info]   (min, avg, max) = (2458.592, 2524.245, 2572.475), stdev = 49.328
[info]   CI (99.9%): [2334.300, 2714.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3620.194 ±(99.9%) 99.145 B/op [Average]
[info]   (min, avg, max) = (3593.997, 3620.194, 3655.430), stdev = 25.748
[info]   CI (99.9%): [3521.048, 3719.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2530.456 ±(99.9%) 1158.303 MB/sec [Average]
[info]   (min, avg, max) = (1992.470, 2530.456, 2674.366), stdev = 300.808
[info]   CI (99.9%): [1372.153, 3688.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3628.817 ±(99.9%) 1637.655 B/op [Average]
[info]   (min, avg, max) = (2872.949, 3628.817, 3896.092), stdev = 425.294
[info]   CI (99.9%): [1991.162, 5266.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.979 ±(99.9%) 7.942 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.979, 4.666), stdev = 2.063
[info]   CI (99.9%): [≈ 0, 8.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.430 ±(99.9%) 11.613 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.430, 6.821), stdev = 3.016
[info]   CI (99.9%): [≈ 0, 13.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 14.000), stdev = 4.207
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87.06% complete, ETA 00:14:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8357.109 ops/s
[info] # Warmup Iteration   2: 1229551.841 ops/s
[info] # Warmup Iteration   3: 1730905.106 ops/s
[info] # Warmup Iteration   4: 2017400.237 ops/s
[info] # Warmup Iteration   5: 2020894.080 ops/s
[info] Iteration   1: 2023553.731 ops/s
[info]                  ·gc.alloc.rate:               1269.911 MB/sec
[info]                  ·gc.alloc.rate.norm:          987.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1035.227 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 2017784.697 ops/s
[info]                  ·gc.alloc.rate:                   1264.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              986.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1039.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2057580.007 ops/s
[info]                  ·gc.alloc.rate:               1278.727 MB/sec
[info]                  ·gc.alloc.rate.norm:          978.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1020.665 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2056947.851 ops/s
[info]                  ·gc.alloc.rate:               1260.435 MB/sec
[info]                  ·gc.alloc.rate.norm:          964.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 511.460 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 2055699.013 ops/s
[info]                  ·gc.alloc.rate:                   1271.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              973.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1024.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.036 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   2042313.060 ±(99.9%) 76529.879 ops/s [Average]
[info]   (min, avg, max) = (2017784.697, 2042313.060, 2057580.007), stdev = 19874.566
[info]   CI (99.9%): [1965783.181, 2118842.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1269.205 ±(99.9%) 26.804 MB/sec [Average]
[info]   (min, avg, max) = (1260.435, 1269.205, 1278.727), stdev = 6.961
[info]   CI (99.9%): [1242.401, 1296.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   978.055 ±(99.9%) 36.950 B/op [Average]
[info]   (min, avg, max) = (964.444, 978.055, 987.687), stdev = 9.596
[info]   CI (99.9%): [941.104, 1015.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1201.082 ±(99.9%) 1146.622 MB/sec [Average]
[info]   (min, avg, max) = (668.428, 1201.082, 1338.248), stdev = 297.774
[info]   CI (99.9%): [54.460, 2347.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   926.284 ±(99.9%) 893.441 B/op [Average]
[info]   (min, avg, max) = (511.460, 926.284, 1039.730), stdev = 232.024
[info]   CI (99.9%): [32.843, 1819.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.279 ±(99.9%) 2.314 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.279, 1.353), stdev = 0.601
[info]   CI (99.9%): [≈ 0, 2.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.214 ±(99.9%) 1.771 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.214, 1.036), stdev = 0.460
[info]   CI (99.9%): [≈ 0, 1.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87.29% complete, ETA 00:14:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2357996.258 ops/s
[info] # Warmup Iteration   2: 8341674.541 ops/s
[info] # Warmup Iteration   3: 9116998.000 ops/s
[info] # Warmup Iteration   4: 9425356.362 ops/s
[info] # Warmup Iteration   5: 9379530.095 ops/s
[info] Iteration   1: 9444488.571 ops/s
[info]                  ·gc.alloc.rate:      289.145 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.168 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 9390447.862 ops/s
[info]                  ·gc.alloc.rate:               297.744 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 85.747 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 9378037.259 ops/s
[info]                  ·gc.alloc.rate:               301.333 MB/sec
[info]                  ·gc.alloc.rate.norm:          50.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 85.858 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 9432782.542 ops/s
[info]                  ·gc.alloc.rate:      287.676 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 9409609.139 ops/s
[info]                  ·gc.alloc.rate:      286.960 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   9411073.075 ±(99.9%) 107314.965 ops/s [Average]
[info]   (min, avg, max) = (9378037.259, 9411073.075, 9444488.571), stdev = 27869.356
[info]   CI (99.9%): [9303758.109, 9518388.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   292.571 ±(99.9%) 25.155 MB/sec [Average]
[info]   (min, avg, max) = (286.960, 292.571, 301.333), stdev = 6.533
[info]   CI (99.9%): [267.416, 317.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.927 ±(99.9%) 4.691 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.927, 50.571), stdev = 1.218
[info]   CI (99.9%): [44.236, 53.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.656 ±(99.9%) 1079.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.656, 511.687), stdev = 280.236
[info]   CI (99.9%): [≈ 0, 1283.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   34.321 ±(99.9%) 180.965 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.321, 85.858), stdev = 46.996
[info]   CI (99.9%): [≈ 0, 215.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 2.191
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87.53% complete, ETA 00:14:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 793.698 ops/s
[info] # Warmup Iteration   2: 119782.421 ops/s
[info] # Warmup Iteration   3: 471701.988 ops/s
[info] # Warmup Iteration   4: 491521.232 ops/s
[info] # Warmup Iteration   5: 495428.468 ops/s
[info] Iteration   1: 502741.312 ops/s
[info]                  ·gc.alloc.rate:                   2270.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              7108.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8364.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.777 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 496414.916 ops/s
[info]                  ·gc.alloc.rate:                   2237.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              7093.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6359.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.914 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 499289.371 ops/s
[info]                  ·gc.alloc.rate:                   2237.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              7052.851 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6318.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 508180.440 ops/s
[info]                  ·gc.alloc.rate:               2290.562 MB/sec
[info]                  ·gc.alloc.rate.norm:          7094.226 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2676.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8289.432 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 496996.857 ops/s
[info]                  ·gc.alloc.rate:                   2254.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              7137.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6371.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   500724.579 ±(99.9%) 18685.148 ops/s [Average]
[info]   (min, avg, max) = (496414.916, 500724.579, 508180.440), stdev = 4852.474
[info]   CI (99.9%): [482039.431, 519409.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2258.191 ±(99.9%) 87.632 MB/sec [Average]
[info]   (min, avg, max) = (2237.469, 2258.191, 2290.562), stdev = 22.758
[info]   CI (99.9%): [2170.559, 2345.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7097.331 ±(99.9%) 117.985 B/op [Average]
[info]   (min, avg, max) = (7052.851, 7097.331, 7137.683), stdev = 30.640
[info]   CI (99.9%): [6979.346, 7215.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2274.331 ±(99.9%) 1405.829 MB/sec [Average]
[info]   (min, avg, max) = (2004.544, 2274.331, 2676.467), stdev = 365.089
[info]   CI (99.9%): [868.502, 3680.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7140.711 ±(99.9%) 4171.586 B/op [Average]
[info]   (min, avg, max) = (6318.633, 7140.711, 8364.384), stdev = 1083.348
[info]   CI (99.9%): [2969.125, 11312.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.562 ±(99.9%) 3.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.562, 2.165), stdev = 0.932
[info]   CI (99.9%): [≈ 0, 4.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.765 ±(99.9%) 11.232 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.765, 6.777), stdev = 2.917
[info]   CI (99.9%): [≈ 0, 12.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 12.000), stdev = 3.209
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 87.76% complete, ETA 00:13:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24340.944 ops/s
[info] # Warmup Iteration   2: 1041060.979 ops/s
[info] # Warmup Iteration   3: 1500933.105 ops/s
[info] # Warmup Iteration   4: 1962587.492 ops/s
[info] # Warmup Iteration   5: 1901060.639 ops/s
[info] Iteration   1: 1969495.842 ops/s
[info]                  ·gc.alloc.rate:                   2014.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              1609.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1955.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1562.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 1919616.639 ops/s
[info]                  ·gc.alloc.rate:                   1956.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              1603.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1963.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1609.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.918 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 1983522.756 ops/s
[info]                  ·gc.alloc.rate:                   2027.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1961.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1555.868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.642 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.269 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 1983509.598 ops/s
[info]                  ·gc.alloc.rate:                   2027.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              1609.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1947.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1545.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1930540.968 ops/s
[info]                  ·gc.alloc.rate:                   1987.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              1620.454 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1945.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1585.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   1957337.160 ±(99.9%) 116468.280 ops/s [Average]
[info]   (min, avg, max) = (1919616.639, 1957337.160, 1983522.756), stdev = 30246.442
[info]   CI (99.9%): [1840868.881, 2073805.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   2002.968 ±(99.9%) 117.357 MB/sec [Average]
[info]   (min, avg, max) = (1956.971, 2002.968, 2027.946), stdev = 30.477
[info]   CI (99.9%): [1885.611, 2120.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1610.401 ±(99.9%) 23.555 B/op [Average]
[info]   (min, avg, max) = (1603.788, 1610.401, 1620.454), stdev = 6.117
[info]   CI (99.9%): [1586.845, 1633.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1954.487 ±(99.9%) 31.816 MB/sec [Average]
[info]   (min, avg, max) = (1945.103, 1954.487, 1963.697), stdev = 8.262
[info]   CI (99.9%): [1922.671, 1986.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1571.716 ±(99.9%) 99.203 B/op [Average]
[info]   (min, avg, max) = (1545.004, 1571.716, 1609.299), stdev = 25.763
[info]   CI (99.9%): [1472.513, 1670.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2.055 ±(99.9%) 11.500 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 2.055, 6.642), stdev = 2.986
[info]   CI (99.9%): [≈ 0, 13.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.649 ±(99.9%) 9.169 B/op [Average]
[info]   (min, avg, max) = (0.017, 1.649, 5.269), stdev = 2.381
[info]   CI (99.9%): [≈ 0, 10.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 10.600, 17.000), stdev = 5.639
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88.00% complete, ETA 00:13:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 158822.381 ops/s
[info] # Warmup Iteration   2: 2278481.384 ops/s
[info] # Warmup Iteration   3: 3284695.280 ops/s
[info] # Warmup Iteration   4: 3314345.385 ops/s
[info] # Warmup Iteration   5: 3297160.546 ops/s
[info] Iteration   1: 3333729.689 ops/s
[info]                  ·gc.alloc.rate:                   1286.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              607.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     312.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3303242.138 ops/s
[info]                  ·gc.alloc.rate:               1313.935 MB/sec
[info]                  ·gc.alloc.rate.norm:          625.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 632.548 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 3224171.815 ops/s
[info]                  ·gc.alloc.rate:                   1260.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              615.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     649.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3317732.433 ops/s
[info]                  ·gc.alloc.rate:               1293.832 MB/sec
[info]                  ·gc.alloc.rate.norm:          613.787 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 632.316 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 3319512.966 ops/s
[info]                  ·gc.alloc.rate:                   1293.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              613.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     633.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.686 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   3299677.808 ±(99.9%) 167766.075 ops/s [Average]
[info]   (min, avg, max) = (3224171.815, 3299677.808, 3333729.689), stdev = 43568.317
[info]   CI (99.9%): [3131911.734, 3467443.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1289.638 ±(99.9%) 74.620 MB/sec [Average]
[info]   (min, avg, max) = (1260.131, 1289.638, 1313.935), stdev = 19.378
[info]   CI (99.9%): [1215.018, 1364.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   615.018 ±(99.9%) 25.975 B/op [Average]
[info]   (min, avg, max) = (607.302, 615.018, 625.855), stdev = 6.746
[info]   CI (99.9%): [589.042, 640.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1198.015 ±(99.9%) 1152.387 MB/sec [Average]
[info]   (min, avg, max) = (662.688, 1198.015, 1335.952), stdev = 299.271
[info]   CI (99.9%): [45.627, 2350.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   572.050 ±(99.9%) 558.824 B/op [Average]
[info]   (min, avg, max) = (312.765, 572.050, 649.374), stdev = 145.125
[info]   CI (99.9%): [13.226, 1130.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.302 ±(99.9%) 2.467 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.302, 1.447), stdev = 0.641
[info]   CI (99.9%): [≈ 0, 2.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.143 ±(99.9%) 1.169 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.143, 0.686), stdev = 0.304
[info]   CI (99.9%): [≈ 0, 1.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88.24% complete, ETA 00:13:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 866695.030 ops/s
[info] # Warmup Iteration   2: 7455406.375 ops/s
[info] # Warmup Iteration   3: 9213877.606 ops/s
[info] # Warmup Iteration   4: 9081837.017 ops/s
[info] # Warmup Iteration   5: 8881726.883 ops/s
[info] Iteration   1: 9172608.559 ops/s
[info]                  ·gc.alloc.rate:                   771.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              132.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 9150468.093 ops/s
[info]                  ·gc.alloc.rate:               769.462 MB/sec
[info]                  ·gc.alloc.rate.norm:          132.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115.040 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 9143930.704 ops/s
[info]                  ·gc.alloc.rate:                   759.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              130.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9185090.849 ops/s
[info]                  ·gc.alloc.rate:               770.943 MB/sec
[info]                  ·gc.alloc.rate.norm:          132.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114.661 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 9187581.736 ops/s
[info]                  ·gc.alloc.rate:                   767.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              131.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   9167935.988 ±(99.9%) 76613.751 ops/s [Average]
[info]   (min, avg, max) = (9143930.704, 9167935.988, 9187581.736), stdev = 19896.348
[info]   CI (99.9%): [9091322.238, 9244549.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   767.705 ±(99.9%) 18.632 MB/sec [Average]
[info]   (min, avg, max) = (759.407, 767.705, 771.054), stdev = 4.839
[info]   CI (99.9%): [749.073, 786.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   131.773 ±(99.9%) 2.701 B/op [Average]
[info]   (min, avg, max) = (130.690, 131.773, 132.340), stdev = 0.702
[info]   CI (99.9%): [129.072, 134.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   668.934 ±(99.9%) 1.821 MB/sec [Average]
[info]   (min, avg, max) = (668.182, 668.934, 669.402), stdev = 0.473
[info]   CI (99.9%): [667.113, 670.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   114.820 ±(99.9%) 0.926 B/op [Average]
[info]   (min, avg, max) = (114.629, 114.820, 115.122), stdev = 0.241
[info]   CI (99.9%): [113.894, 115.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88.47% complete, ETA 00:13:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 823813.399 ops/s
[info] # Warmup Iteration   2: 8120149.139 ops/s
[info] # Warmup Iteration   3: 8947755.395 ops/s
[info] # Warmup Iteration   4: 9062461.762 ops/s
[info] # Warmup Iteration   5: 9009585.341 ops/s
[info] Iteration   1: 9044185.698 ops/s
[info]                  ·gc.alloc.rate:      275.829 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 8989637.906 ops/s
[info]                  ·gc.alloc.rate:               289.391 MB/sec
[info]                  ·gc.alloc.rate.norm:          50.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89.569 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 8989450.630 ops/s
[info]                  ·gc.alloc.rate:               291.568 MB/sec
[info]                  ·gc.alloc.rate.norm:          51.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89.573 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 9061395.829 ops/s
[info]                  ·gc.alloc.rate:      276.583 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.018 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 9036492.300 ops/s
[info]                  ·gc.alloc.rate:      275.637 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   9024232.472 ±(99.9%) 126780.810 ops/s [Average]
[info]   (min, avg, max) = (8989450.630, 9024232.472, 9061395.829), stdev = 32924.574
[info]   CI (99.9%): [8897451.663, 9151013.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   281.802 ±(99.9%) 30.678 MB/sec [Average]
[info]   (min, avg, max) = (275.637, 281.802, 291.568), stdev = 7.967
[info]   CI (99.9%): [251.123, 312.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   49.146 ±(99.9%) 6.032 B/op [Average]
[info]   (min, avg, max) = (48.000, 49.146, 51.046), stdev = 1.567
[info]   CI (99.9%): [43.114, 55.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   204.645 ±(99.9%) 1079.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.645, 511.632), stdev = 280.221
[info]   CI (99.9%): [≈ 0, 1283.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   35.828 ±(99.9%) 188.912 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.828, 89.573), stdev = 49.060
[info]   CI (99.9%): [≈ 0, 224.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 2.191
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.71% complete, ETA 00:12:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9662.968 ops/s
[info] # Warmup Iteration   2: 305404.831 ops/s
[info] # Warmup Iteration   3: 468951.809 ops/s
[info] # Warmup Iteration   4: 493903.027 ops/s
[info] # Warmup Iteration   5: 497710.558 ops/s
[info] Iteration   1: 505621.099 ops/s
[info]                  ·gc.alloc.rate:                   2562.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              7977.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8334.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.674 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 494406.497 ops/s
[info]                  ·gc.alloc.rate:                   2527.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              8046.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8527.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.729 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 496469.300 ops/s
[info]                  ·gc.alloc.rate:                   2537.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              8043.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8504.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 508320.962 ops/s
[info]                  ·gc.alloc.rate:               2596.702 MB/sec
[info]                  ·gc.alloc.rate.norm:          8039.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6243.009 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 502981.593 ops/s
[info]                  ·gc.alloc.rate:                   2597.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              8128.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2694.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8431.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   501559.890 ±(99.9%) 22887.204 ops/s [Average]
[info]   (min, avg, max) = (494406.497, 501559.890, 508320.962), stdev = 5943.734
[info]   CI (99.9%): [478672.686, 524447.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2564.573 ±(99.9%) 124.660 MB/sec [Average]
[info]   (min, avg, max) = (2527.978, 2564.573, 2597.718), stdev = 32.374
[info]   CI (99.9%): [2439.914, 2689.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8047.226 ±(99.9%) 206.468 B/op [Average]
[info]   (min, avg, max) = (7977.244, 8047.226, 8128.089), stdev = 53.619
[info]   CI (99.9%): [7840.758, 8253.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2550.081 ±(99.9%) 1149.230 MB/sec [Average]
[info]   (min, avg, max) = (2016.333, 2550.081, 2694.708), stdev = 298.451
[info]   CI (99.9%): [1400.851, 3699.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8008.129 ±(99.9%) 3810.555 B/op [Average]
[info]   (min, avg, max) = (6243.009, 8008.129, 8527.267), stdev = 989.589
[info]   CI (99.9%): [4197.574, 11818.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.491 ±(99.9%) 3.574 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.491, 2.144), stdev = 0.928
[info]   CI (99.9%): [≈ 0, 4.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.533 ±(99.9%) 11.120 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.533, 6.674), stdev = 2.888
[info]   CI (99.9%): [≈ 0, 12.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 1.924
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 88.94% complete, ETA 00:12:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8448.084 ops/s
[info] # Warmup Iteration   2: 61886.312 ops/s
[info] # Warmup Iteration   3: 95186.025 ops/s
[info] # Warmup Iteration   4: 88836.785 ops/s
[info] # Warmup Iteration   5: 90525.257 ops/s
[info] Iteration   1: 92878.098 ops/s
[info]                  ·gc.alloc.rate:                   2569.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              43545.258 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2530.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42879.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.213 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.611 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         33.000 ms
[info] Iteration   2: 93515.393 ops/s
[info]                  ·gc.alloc.rate:                   2585.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              43510.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2559.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43073.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.647 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.211 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         31.000 ms
[info] Iteration   3: 94561.816 ops/s
[info]                  ·gc.alloc.rate:                   2607.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              43392.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2571.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42790.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.412 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   4: 96437.899 ops/s
[info]                  ·gc.alloc.rate:                   2667.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              43528.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2565.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41876.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71.703 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 94622.036 ops/s
[info]                  ·gc.alloc.rate:               2619.534 MB/sec
[info]                  ·gc.alloc.rate.norm:          43572.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2563.673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42643.103 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   94403.048 ±(99.9%) 5211.610 ops/s [Average]
[info]   (min, avg, max) = (92878.098, 94403.048, 96437.899), stdev = 1353.439
[info]   CI (99.9%): [89191.438, 99614.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2609.875 ±(99.9%) 144.010 MB/sec [Average]
[info]   (min, avg, max) = (2569.661, 2609.875, 2667.150), stdev = 37.399
[info]   CI (99.9%): [2465.865, 2753.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   43509.742 ±(99.9%) 267.623 B/op [Average]
[info]   (min, avg, max) = (43392.205, 43509.742, 43572.265), stdev = 69.501
[info]   CI (99.9%): [43242.119, 43777.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2558.178 ±(99.9%) 62.132 MB/sec [Average]
[info]   (min, avg, max) = (2530.390, 2558.178, 2571.486), stdev = 16.135
[info]   CI (99.9%): [2496.046, 2620.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   42652.652 ±(99.9%) 1774.999 B/op [Average]
[info]   (min, avg, max) = (41876.507, 42652.652, 43073.121), stdev = 460.962
[info]   CI (99.9%): [40877.653, 44427.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2.589 ±(99.9%) 8.834 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.589, 4.647), stdev = 2.294
[info]   CI (99.9%): [≈ 0, 11.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   42.987 ±(99.9%) 146.668 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.987, 78.211), stdev = 38.089
[info]   CI (99.9%): [≈ 0, 189.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   96.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 19.200, 33.000), stdev = 12.617
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.18% complete, ETA 00:12:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10486.183 ops/s
[info] # Warmup Iteration   2: 80795.473 ops/s
[info] # Warmup Iteration   3: 139384.317 ops/s
[info] # Warmup Iteration   4: 143622.605 ops/s
[info] # Warmup Iteration   5: 143249.184 ops/s
[info] Iteration   1: 143530.252 ops/s
[info]                  ·gc.alloc.rate:                   2239.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              24554.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21939.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.990 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 143800.492 ops/s
[info]                  ·gc.alloc.rate:                   2246.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              24586.728 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21949.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.190 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 141803.727 ops/s
[info]                  ·gc.alloc.rate:                   2263.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              25121.995 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29758.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.621 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 140017.346 ops/s
[info]                  ·gc.alloc.rate:                   2185.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              24559.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22664.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.234 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 140886.918 ops/s
[info]                  ·gc.alloc.rate:                   2224.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              24845.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22569.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.233 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   142007.747 ±(99.9%) 6324.773 ops/s [Average]
[info]   (min, avg, max) = (140017.346, 142007.747, 143800.492), stdev = 1642.523
[info]   CI (99.9%): [135682.974, 148332.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2231.871 ±(99.9%) 114.040 MB/sec [Average]
[info]   (min, avg, max) = (2185.374, 2231.871, 2263.628), stdev = 29.616
[info]   CI (99.9%): [2117.831, 2345.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24733.588 ±(99.9%) 957.276 B/op [Average]
[info]   (min, avg, max) = (24554.575, 24733.588, 25121.995), stdev = 248.602
[info]   CI (99.9%): [23776.312, 25690.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2145.070 ±(99.9%) 1154.968 MB/sec [Average]
[info]   (min, avg, max) = (2000.830, 2145.070, 2681.433), stdev = 299.942
[info]   CI (99.9%): [990.102, 3300.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23776.422 ±(99.9%) 12943.168 B/op [Average]
[info]   (min, avg, max) = (21939.686, 23776.422, 29758.845), stdev = 3361.300
[info]   CI (99.9%): [10833.254, 36719.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.296 ±(99.9%) 1.144 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.296, 0.729), stdev = 0.297
[info]   CI (99.9%): [≈ 0, 1.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.253 ±(99.9%) 12.559 B/op [Average]
[info]   (min, avg, max) = (0.233, 3.253, 7.990), stdev = 3.261
[info]   CI (99.9%): [≈ 0, 15.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.41% complete, ETA 00:12:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22400.911 ops/s
[info] # Warmup Iteration   2: 119123.399 ops/s
[info] # Warmup Iteration   3: 165238.420 ops/s
[info] # Warmup Iteration   4: 173915.601 ops/s
[info] # Warmup Iteration   5: 176812.293 ops/s
[info] Iteration   1: 179593.244 ops/s
[info]                  ·gc.alloc.rate:                   2697.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              23636.154 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2655.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23268.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.284 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 179894.598 ops/s
[info]                  ·gc.alloc.rate:                   2711.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              23710.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2655.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23218.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.969 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.476 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 180857.145 ops/s
[info]                  ·gc.alloc.rate:                   2722.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              23689.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2656.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23118.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.181 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 180315.052 ops/s
[info]                  ·gc.alloc.rate:                   2754.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              24046.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23270.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.182 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 172071.075 ops/s
[info]                  ·gc.alloc.rate:                   2729.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              24965.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24474.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.777 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.395 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   178546.223 ±(99.9%) 14057.622 ops/s [Average]
[info]   (min, avg, max) = (172071.075, 178546.223, 180857.145), stdev = 3650.720
[info]   CI (99.9%): [164488.600, 192603.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2722.980 ±(99.9%) 83.042 MB/sec [Average]
[info]   (min, avg, max) = (2697.100, 2722.980, 2754.758), stdev = 21.566
[info]   CI (99.9%): [2639.938, 2806.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24009.543 ±(99.9%) 2149.112 B/op [Average]
[info]   (min, avg, max) = (23636.154, 24009.543, 24965.300), stdev = 558.118
[info]   CI (99.9%): [21860.431, 26158.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2661.679 ±(99.9%) 35.041 MB/sec [Average]
[info]   (min, avg, max) = (2655.015, 2661.679, 2675.834), stdev = 9.100
[info]   CI (99.9%): [2626.638, 2696.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   23469.849 ±(99.9%) 2175.211 B/op [Average]
[info]   (min, avg, max) = (23118.120, 23469.849, 24474.328), stdev = 564.895
[info]   CI (99.9%): [21294.637, 25645.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.832 ±(99.9%) 4.443 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.832, 2.777), stdev = 1.154
[info]   CI (99.9%): [≈ 0, 5.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.504 ±(99.9%) 40.665 B/op [Average]
[info]   (min, avg, max) = (0.181, 7.504, 25.395), stdev = 10.560
[info]   CI (99.9%): [≈ 0, 48.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 1.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89.65% complete, ETA 00:11:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2677.091 ops/s
[info] # Warmup Iteration   2: 55191.025 ops/s
[info] # Warmup Iteration   3: 79297.130 ops/s
[info] # Warmup Iteration   4: 81974.752 ops/s
[info] # Warmup Iteration   5: 84452.646 ops/s
[info] Iteration   1: 85406.945 ops/s
[info]                  ·gc.alloc.rate:                   3633.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              66957.314 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4010.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73903.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.302 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 85465.418 ops/s
[info]                  ·gc.alloc.rate:                   3621.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              66683.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3356.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61796.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.383 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 85103.599 ops/s
[info]                  ·gc.alloc.rate:                   3622.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              66985.842 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3369.698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62316.831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.385 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 85826.702 ops/s
[info]                  ·gc.alloc.rate:                   3705.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              67954.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4056.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74391.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.145 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 85561.535 ops/s
[info]                  ·gc.alloc.rate:                   3675.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              67612.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3388.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62337.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.383 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   85472.840 ±(99.9%) 1007.482 ops/s [Average]
[info]   (min, avg, max) = (85103.599, 85472.840, 85826.702), stdev = 261.640
[info]   CI (99.9%): [84465.358, 86480.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3651.824 ±(99.9%) 144.214 MB/sec [Average]
[info]   (min, avg, max) = (3621.570, 3651.824, 3705.816), stdev = 37.452
[info]   CI (99.9%): [3507.610, 3796.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67238.841 ±(99.9%) 2023.482 B/op [Average]
[info]   (min, avg, max) = (66683.284, 67238.841, 67954.933), stdev = 525.492
[info]   CI (99.9%): [65215.359, 69262.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3636.489 ±(99.9%) 1398.696 MB/sec [Average]
[info]   (min, avg, max) = (3356.183, 3636.489, 4056.816), stdev = 363.237
[info]   CI (99.9%): [2237.793, 5035.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66949.223 ±(99.9%) 25325.969 B/op [Average]
[info]   (min, avg, max) = (61796.759, 66949.223, 74391.350), stdev = 6577.074
[info]   CI (99.9%): [41623.255, 92275.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.125), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.920 ±(99.9%) 3.235 B/op [Average]
[info]   (min, avg, max) = (0.383, 0.920, 2.302), stdev = 0.840
[info]   CI (99.9%): [≈ 0, 4.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 10.000), stdev = 1.304
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89.88% complete, ETA 00:11:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38585.395 ops/s
[info] # Warmup Iteration   2: 231614.808 ops/s
[info] # Warmup Iteration   3: 240505.726 ops/s
[info] # Warmup Iteration   4: 252749.064 ops/s
[info] # Warmup Iteration   5: 258447.495 ops/s
[info] Iteration   1: 251359.763 ops/s
[info]                  ·gc.alloc.rate:                   1740.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              10896.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12549.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.309 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 250293.160 ops/s
[info]                  ·gc.alloc.rate:                   1714.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              10783.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8411.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.131 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 253672.543 ops/s
[info]                  ·gc.alloc.rate:                   1748.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              10846.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12407.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.517 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 252626.788 ops/s
[info]                  ·gc.alloc.rate:                   1752.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              10916.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12450.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.778 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 254289.949 ops/s
[info]                  ·gc.alloc.rate:               1736.996 MB/sec
[info]                  ·gc.alloc.rate.norm:          10750.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8245.758 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   252448.440 ±(99.9%) 6313.130 ops/s [Average]
[info]   (min, avg, max) = (250293.160, 252448.440, 254289.949), stdev = 1639.500
[info]   CI (99.9%): [246135.310, 258761.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1738.588 ±(99.9%) 56.309 MB/sec [Average]
[info]   (min, avg, max) = (1714.890, 1738.588, 1752.303), stdev = 14.623
[info]   CI (99.9%): [1682.279, 1794.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10838.753 ±(99.9%) 273.840 B/op [Average]
[info]   (min, avg, max) = (10750.944, 10838.753, 10916.869), stdev = 71.115
[info]   CI (99.9%): [10564.912, 11112.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1734.556 ±(99.9%) 1404.735 MB/sec [Average]
[info]   (min, avg, max) = (1332.241, 1734.556, 2004.266), stdev = 364.805
[info]   CI (99.9%): [329.821, 3139.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10812.854 ±(99.9%) 8738.177 B/op [Average]
[info]   (min, avg, max) = (8245.758, 10812.854, 12549.979), stdev = 2269.277
[info]   CI (99.9%): [2074.677, 19551.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.883 ±(99.9%) 7.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.883, 4.156), stdev = 1.830
[info]   CI (99.9%): [≈ 0, 7.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.547 ±(99.9%) 44.322 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.547, 26.131), stdev = 11.510
[info]   CI (99.9%): [≈ 0, 49.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 13.000), stdev = 4.183
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.12% complete, ETA 00:11:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 150822.715 ops/s
[info] # Warmup Iteration   2: 736706.038 ops/s
[info] # Warmup Iteration   3: 817339.247 ops/s
[info] # Warmup Iteration   4: 820111.348 ops/s
[info] # Warmup Iteration   5: 818080.532 ops/s
[info] Iteration   1: 818182.413 ops/s
[info]                  ·gc.alloc.rate:      474.105 MB/sec
[info]                  ·gc.alloc.rate.norm: 912.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 814321.492 ops/s
[info]                  ·gc.alloc.rate:               503.298 MB/sec
[info]                  ·gc.alloc.rate.norm:          972.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1275.280 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 816932.767 ops/s
[info]                  ·gc.alloc.rate:                   497.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              958.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1271.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 815093.679 ops/s
[info]                  ·gc.alloc.rate:               489.482 MB/sec
[info]                  ·gc.alloc.rate.norm:          945.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1277.868 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 818901.802 ops/s
[info]                  ·gc.alloc.rate:      474.537 MB/sec
[info]                  ·gc.alloc.rate.norm: 912.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   816686.431 ±(99.9%) 7539.867 ops/s [Average]
[info]   (min, avg, max) = (814321.492, 816686.431, 818901.802), stdev = 1958.080
[info]   CI (99.9%): [809146.564, 824226.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   487.789 ±(99.9%) 50.977 MB/sec [Average]
[info]   (min, avg, max) = (474.105, 487.789, 503.298), stdev = 13.239
[info]   CI (99.9%): [436.812, 538.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   939.992 ±(99.9%) 105.276 B/op [Average]
[info]   (min, avg, max) = (912.001, 939.992, 972.605), stdev = 27.340
[info]   CI (99.9%): [834.716, 1045.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   396.346 ±(99.9%) 1393.214 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 396.346, 661.818), stdev = 361.813
[info]   CI (99.9%): [≈ 0, 1789.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   764.858 ±(99.9%) 2688.600 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 764.858, 1277.868), stdev = 698.221
[info]   CI (99.9%): [≈ 0, 3453.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.080), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.35% complete, ETA 00:11:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 187608.789 ops/s
[info] # Warmup Iteration   2: 655444.323 ops/s
[info] # Warmup Iteration   3: 785757.517 ops/s
[info] # Warmup Iteration   4: 824993.899 ops/s
[info] # Warmup Iteration   5: 823875.542 ops/s
[info] Iteration   1: 826116.463 ops/s
[info]                  ·gc.alloc.rate:               460.524 MB/sec
[info]                  ·gc.alloc.rate.norm:          877.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1266.562 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 831121.806 ops/s
[info]                  ·gc.alloc.rate:      447.827 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 826317.930 ops/s
[info]                  ·gc.alloc.rate:                   465.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              885.962 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1266.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 800403.926 ops/s
[info]                  ·gc.alloc.rate:               471.858 MB/sec
[info]                  ·gc.alloc.rate.norm:          927.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1308.554 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 795394.742 ops/s
[info]                  ·gc.alloc.rate:      428.565 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   815870.973 ±(99.9%) 64006.531 ops/s [Average]
[info]   (min, avg, max) = (795394.742, 815870.973, 831121.806), stdev = 16622.293
[info]   CI (99.9%): [751864.442, 879877.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   454.794 ±(99.9%) 65.821 MB/sec [Average]
[info]   (min, avg, max) = (428.565, 454.794, 471.858), stdev = 17.093
[info]   CI (99.9%): [388.973, 520.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   877.413 ±(99.9%) 126.975 B/op [Average]
[info]   (min, avg, max) = (848.001, 877.413, 927.872), stdev = 32.975
[info]   CI (99.9%): [750.439, 1004.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   399.047 ±(99.9%) 1402.707 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.047, 665.449), stdev = 364.279
[info]   CI (99.9%): [≈ 0, 1801.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   768.273 ±(99.9%) 2701.399 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 768.273, 1308.554), stdev = 701.545
[info]   CI (99.9%): [≈ 0, 3469.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 5.000), stdev = 2.588
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90.59% complete, ETA 00:10:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 347333.244 ops/s
[info] # Warmup Iteration   2: 631069.932 ops/s
[info] # Warmup Iteration   3: 832759.300 ops/s
[info] # Warmup Iteration   4: 837490.060 ops/s
[info] # Warmup Iteration   5: 837226.033 ops/s
[info] Iteration   1: 836906.811 ops/s
[info]                  ·gc.alloc.rate:      8.512 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 837184.478 ops/s
[info]                  ·gc.alloc.rate:      8.895 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.719 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 838230.670 ops/s
[info]                  ·gc.alloc.rate:      8.522 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 835365.204 ops/s
[info]                  ·gc.alloc.rate:      8.492 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 837292.064 ops/s
[info]                  ·gc.alloc.rate:      8.512 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   836995.845 ±(99.9%) 3999.408 ops/s [Average]
[info]   (min, avg, max) = (835365.204, 836995.845, 838230.670), stdev = 1038.634
[info]   CI (99.9%): [832996.438, 840995.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   8.587 ±(99.9%) 0.665 MB/sec [Average]
[info]   (min, avg, max) = (8.492, 8.587, 8.895), stdev = 0.173
[info]   CI (99.9%): [7.922, 9.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.144 ±(99.9%) 1.238 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.144, 16.719), stdev = 0.322
[info]   CI (99.9%): [14.906, 17.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90.82% complete, ETA 00:10:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3532.632 ops/s
[info] # Warmup Iteration   2: 25943.512 ops/s
[info] # Warmup Iteration   3: 34601.200 ops/s
[info] # Warmup Iteration   4: 38254.308 ops/s
[info] # Warmup Iteration   5: 37577.471 ops/s
[info] Iteration   1: 38417.801 ops/s
[info]                  ·gc.alloc.rate:                   2004.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              82115.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1981.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81172.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.255 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 133.303 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 39510.260 ops/s
[info]                  ·gc.alloc.rate:                   1785.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              71112.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52593.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.422 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.648 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 39402.546 ops/s
[info]                  ·gc.alloc.rate:                   1803.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              72017.556 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1976.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78946.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.810 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 38918.556 ops/s
[info]                  ·gc.alloc.rate:               1785.861 MB/sec
[info]                  ·gc.alloc.rate.norm:          72205.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1978.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79977.962 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 39351.831 ops/s
[info]                  ·gc.alloc.rate:                   1771.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              70866.132 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52828.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.498 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   39120.199 ±(99.9%) 1742.968 ops/s [Average]
[info]   (min, avg, max) = (38417.801, 39120.199, 39510.260), stdev = 452.643
[info]   CI (99.9%): [37377.231, 40863.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1830.301 ±(99.9%) 378.238 MB/sec [Average]
[info]   (min, avg, max) = (1771.885, 1830.301, 2004.866), stdev = 98.227
[info]   CI (99.9%): [1452.062, 2208.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   73663.348 ±(99.9%) 18326.150 B/op [Average]
[info]   (min, avg, max) = (70866.132, 73663.348, 82115.322), stdev = 4759.243
[info]   CI (99.9%): [55337.198, 91989.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1715.658 ±(99.9%) 1388.447 MB/sec [Average]
[info]   (min, avg, max) = (1320.463, 1715.658, 1981.858), stdev = 360.575
[info]   CI (99.9%): [327.211, 3104.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   69103.834 ±(99.9%) 57704.292 B/op [Average]
[info]   (min, avg, max) = (52593.320, 69103.834, 81172.947), stdev = 14985.621
[info]   CI (99.9%): [11399.543, 126808.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.002 ±(99.9%) 5.333 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.002, 3.255), stdev = 1.385
[info]   CI (99.9%): [≈ 0, 6.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   40.652 ±(99.9%) 218.157 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.652, 133.303), stdev = 56.655
[info]   CI (99.9%): [≈ 0, 258.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 14.000), stdev = 4.658
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91.06% complete, ETA 00:10:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 880843.963 ops/s
[info] # Warmup Iteration   2: 3504976.540 ops/s
[info] # Warmup Iteration   3: 4252498.915 ops/s
[info] # Warmup Iteration   4: 4153082.607 ops/s
[info] # Warmup Iteration   5: 4258498.328 ops/s
[info] Iteration   1: 4231425.676 ops/s
[info]                  ·gc.alloc.rate:                   3257.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              1211.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3332.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1239.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4289504.184 ops/s
[info]                  ·gc.alloc.rate:                   3359.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3341.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1225.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4275944.491 ops/s
[info]                  ·gc.alloc.rate:               3323.612 MB/sec
[info]                  ·gc.alloc.rate.norm:          1223.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2683.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 987.623 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 4293311.683 ops/s
[info]                  ·gc.alloc.rate:                   3363.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              1233.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3367.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1234.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 4291759.446 ops/s
[info]                  ·gc.alloc.rate:                   3363.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              1233.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3377.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1238.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   4276389.096 ±(99.9%) 100348.511 ops/s [Average]
[info]   (min, avg, max) = (4231425.676, 4276389.096, 4293311.683), stdev = 26060.190
[info]   CI (99.9%): [4176040.585, 4376737.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3333.505 ±(99.9%) 176.768 MB/sec [Average]
[info]   (min, avg, max) = (3257.101, 3333.505, 3363.953), stdev = 45.906
[info]   CI (99.9%): [3156.737, 3510.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1226.761 ±(99.9%) 36.921 B/op [Average]
[info]   (min, avg, max) = (1211.368, 1226.761, 1233.369), stdev = 9.588
[info]   CI (99.9%): [1189.840, 1263.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3220.411 ±(99.9%) 1158.338 MB/sec [Average]
[info]   (min, avg, max) = (2683.299, 3220.411, 3377.776), stdev = 300.817
[info]   CI (99.9%): [2062.073, 4378.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1185.193 ±(99.9%) 425.790 B/op [Average]
[info]   (min, avg, max) = (987.623, 1185.193, 1239.493), stdev = 110.576
[info]   CI (99.9%): [759.403, 1610.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.015), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91.29% complete, ETA 00:09:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.741 ops/s
[info] # Warmup Iteration   2: 5503276.815 ops/s
[info] # Warmup Iteration   3: 6281308.063 ops/s
[info] # Warmup Iteration   4: 6629610.842 ops/s
[info] # Warmup Iteration   5: 6567247.041 ops/s
[info] Iteration   1: 6443807.269 ops/s
[info]                  ·gc.alloc.rate:                   1249.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.180 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     324.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 6619042.605 ops/s
[info]                  ·gc.alloc.rate:                   1288.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              306.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     316.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 6465853.676 ops/s
[info]                  ·gc.alloc.rate:                   1250.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     324.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 6510678.805 ops/s
[info]                  ·gc.alloc.rate:                   1261.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     322.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.258 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 6655554.138 ops/s
[info]                  ·gc.alloc.rate:                   1265.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              299.201 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   6538987.298 ±(99.9%) 361252.259 ops/s [Average]
[info]   (min, avg, max) = (6443807.269, 6538987.298, 6655554.138), stdev = 93816.064
[info]   CI (99.9%): [6177735.040, 6900239.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1263.027 ±(99.9%) 59.826 MB/sec [Average]
[info]   (min, avg, max) = (1249.735, 1263.027, 1288.121), stdev = 15.537
[info]   CI (99.9%): [1203.201, 1322.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   303.968 ±(99.9%) 10.575 B/op [Average]
[info]   (min, avg, max) = (299.201, 303.968, 306.206), stdev = 2.746
[info]   CI (99.9%): [293.393, 314.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1199.797 ±(99.9%) 1145.118 MB/sec [Average]
[info]   (min, avg, max) = (667.829, 1199.797, 1334.515), stdev = 297.384
[info]   CI (99.9%): [54.679, 2344.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   289.344 ±(99.9%) 283.186 B/op [Average]
[info]   (min, avg, max) = (157.919, 289.344, 324.909), stdev = 73.542
[info]   CI (99.9%): [6.158, 572.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.871 ±(99.9%) 7.291 MB/sec [Average]
[info]   (min, avg, max) = (0.015, 0.871, 4.258), stdev = 1.894
[info]   CI (99.9%): [≈ 0, 8.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.210 ±(99.9%) 1.763 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.210, 1.029), stdev = 0.458
[info]   CI (99.9%): [≈ 0, 1.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 7.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.53% complete, ETA 00:09:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 843016.631 ops/s
[info] # Warmup Iteration   2: 4648126.027 ops/s
[info] # Warmup Iteration   3: 5208227.809 ops/s
[info] # Warmup Iteration   4: 5240754.589 ops/s
[info] # Warmup Iteration   5: 5268671.147 ops/s
[info] Iteration   1: 5240916.096 ops/s
[info]                  ·gc.alloc.rate:                   1081.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              324.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     399.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 5175414.428 ops/s
[info]                  ·gc.alloc.rate:               1102.303 MB/sec
[info]                  ·gc.alloc.rate.norm:          335.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 404.763 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   3: 5212831.253 ops/s
[info]                  ·gc.alloc.rate:                   1055.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              318.657 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     201.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5134622.534 ops/s
[info]                  ·gc.alloc.rate:               1060.606 MB/sec
[info]                  ·gc.alloc.rate.norm:          325.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 408.592 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 5233281.897 ops/s
[info]                  ·gc.alloc.rate:                   1053.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              316.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     200.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.206 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   5199413.242 ±(99.9%) 170294.641 ops/s [Average]
[info]   (min, avg, max) = (5134622.534, 5199413.242, 5240916.096), stdev = 44224.977
[info]   CI (99.9%): [5029118.601, 5369707.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1070.685 ±(99.9%) 80.681 MB/sec [Average]
[info]   (min, avg, max) = (1053.046, 1070.685, 1102.303), stdev = 20.953
[info]   CI (99.9%): [990.003, 1151.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   324.090 ±(99.9%) 27.861 B/op [Average]
[info]   (min, avg, max) = (316.692, 324.090, 335.209), stdev = 7.235
[info]   CI (99.9%): [296.229, 351.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1065.401 ±(99.9%) 1401.835 MB/sec [Average]
[info]   (min, avg, max) = (666.044, 1065.401, 1333.035), stdev = 364.052
[info]   CI (99.9%): [≈ 0, 2467.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   322.861 ±(99.9%) 429.130 B/op [Average]
[info]   (min, avg, max) = (200.642, 322.861, 408.592), stdev = 111.444
[info]   CI (99.9%): [≈ 0, 751.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.814 ±(99.9%) 6.879 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.814, 4.010), stdev = 1.786
[info]   CI (99.9%): [≈ 0, 7.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.245 ±(99.9%) 2.069 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.245, 1.206), stdev = 0.537
[info]   CI (99.9%): [≈ 0, 2.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 9.000), stdev = 2.408
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.76% complete, ETA 00:09:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3528605.552 ops/s
[info] # Warmup Iteration   2: 5704319.526 ops/s
[info] # Warmup Iteration   3: 6686402.083 ops/s
[info] # Warmup Iteration   4: 6684593.797 ops/s
[info] # Warmup Iteration   5: 6706767.999 ops/s
[info] Iteration   1: 6725023.584 ops/s
[info]                  ·gc.alloc.rate:                   1302.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     311.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6689476.129 ops/s
[info]                  ·gc.alloc.rate:               1290.865 MB/sec
[info]                  ·gc.alloc.rate.norm:          303.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 312.904 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 6538040.051 ops/s
[info]                  ·gc.alloc.rate:                   1269.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     320.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6577270.080 ops/s
[info]                  ·gc.alloc.rate:                   1276.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     318.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6594459.616 ops/s
[info]                  ·gc.alloc.rate:               1292.393 MB/sec
[info]                  ·gc.alloc.rate.norm:          308.465 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 318.757 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   6624853.892 ±(99.9%) 304022.147 ops/s [Average]
[info]   (min, avg, max) = (6538040.051, 6624853.892, 6725023.584), stdev = 78953.586
[info]   CI (99.9%): [6320831.745, 6928876.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1286.471 ±(99.9%) 50.274 MB/sec [Average]
[info]   (min, avg, max) = (1269.953, 1286.471, 1302.522), stdev = 13.056
[info]   CI (99.9%): [1236.197, 1336.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   305.579 ±(99.9%) 6.939 B/op [Average]
[info]   (min, avg, max) = (303.574, 305.579, 308.465), stdev = 1.802
[info]   CI (99.9%): [298.640, 312.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1332.059 ±(99.9%) 8.657 MB/sec [Average]
[info]   (min, avg, max) = (1329.856, 1332.059, 1335.515), stdev = 2.248
[info]   CI (99.9%): [1323.403, 1340.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   316.438 ±(99.9%) 15.811 B/op [Average]
[info]   (min, avg, max) = (311.181, 316.438, 320.380), stdev = 4.106
[info]   CI (99.9%): [300.627, 332.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.005), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92.00% complete, ETA 00:09:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1357157.792 ops/s
[info] # Warmup Iteration   2: 5548757.319 ops/s
[info] # Warmup Iteration   3: 5481000.781 ops/s
[info] # Warmup Iteration   4: 5498412.624 ops/s
[info] # Warmup Iteration   5: 5416352.622 ops/s
[info] Iteration   1: 5329701.992 ops/s
[info]                  ·gc.alloc.rate:                   1042.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              307.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     394.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 5369931.181 ops/s
[info]                  ·gc.alloc.rate:               1033.427 MB/sec
[info]                  ·gc.alloc.rate.norm:          302.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 195.733 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 5474669.839 ops/s
[info]                  ·gc.alloc.rate:                   1063.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.573 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     384.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 5528861.081 ops/s
[info]                  ·gc.alloc.rate:               1055.689 MB/sec
[info]                  ·gc.alloc.rate.norm:          300.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 190.188 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 5462316.970 ops/s
[info]                  ·gc.alloc.rate:                   1057.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.525 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     385.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.056 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   5433096.213 ±(99.9%) 313025.113 ops/s [Average]
[info]   (min, avg, max) = (5329701.992, 5433096.213, 5528861.081), stdev = 81291.628
[info]   CI (99.9%): [5120071.100, 5746121.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1050.270 ±(99.9%) 46.816 MB/sec [Average]
[info]   (min, avg, max) = (1033.427, 1050.270, 1063.096), stdev = 12.158
[info]   CI (99.9%): [1003.454, 1097.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   304.217 ±(99.9%) 10.559 B/op [Average]
[info]   (min, avg, max) = (300.514, 304.217, 307.721), stdev = 2.742
[info]   CI (99.9%): [293.658, 314.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1069.032 ±(99.9%) 1409.255 MB/sec [Average]
[info]   (min, avg, max) = (668.118, 1069.032, 1337.857), stdev = 365.979
[info]   CI (99.9%): [≈ 0, 2478.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   309.918 ±(99.9%) 411.465 B/op [Average]
[info]   (min, avg, max) = (190.188, 309.918, 394.195), stdev = 106.856
[info]   CI (99.9%): [≈ 0, 721.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.746 ±(99.9%) 6.282 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.746, 3.664), stdev = 1.631
[info]   CI (99.9%): [≈ 0, 7.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.215 ±(99.9%) 1.810 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.215, 1.056), stdev = 0.470
[info]   CI (99.9%): [≈ 0, 2.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 2.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92.24% complete, ETA 00:08:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1174494.856 ops/s
[info] # Warmup Iteration   2: 2955901.025 ops/s
[info] # Warmup Iteration   3: 3610589.861 ops/s
[info] # Warmup Iteration   4: 3636657.031 ops/s
[info] # Warmup Iteration   5: 3631888.052 ops/s
[info] Iteration   1: 3669701.565 ops/s
[info]                  ·gc.alloc.rate:                   2000.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              858.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     861.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.586 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 3670900.628 ops/s
[info]                  ·gc.alloc.rate:                   1999.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              857.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     572.911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.214 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3666936.805 ops/s
[info]                  ·gc.alloc.rate:                   2023.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              868.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     858.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3677190.265 ops/s
[info]                  ·gc.alloc.rate:               2016.430 MB/sec
[info]                  ·gc.alloc.rate.norm:          862.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 856.459 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 3690552.442 ops/s
[info]                  ·gc.alloc.rate:               2050.254 MB/sec
[info]                  ·gc.alloc.rate.norm:          874.271 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 854.801 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   3675056.341 ±(99.9%) 36355.117 ops/s [Average]
[info]   (min, avg, max) = (3666936.805, 3675056.341, 3690552.442), stdev = 9441.309
[info]   CI (99.9%): [3638701.224, 3711411.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2018.093 ±(99.9%) 79.457 MB/sec [Average]
[info]   (min, avg, max) = (1999.554, 2018.093, 2050.254), stdev = 20.635
[info]   CI (99.9%): [1938.635, 2097.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   864.172 ±(99.9%) 27.610 B/op [Average]
[info]   (min, avg, max) = (857.278, 864.172, 874.271), stdev = 7.170
[info]   CI (99.9%): [836.562, 891.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1870.220 ±(99.9%) 1149.395 MB/sec [Average]
[info]   (min, avg, max) = (1336.283, 1870.220, 2008.069), stdev = 298.494
[info]   CI (99.9%): [720.825, 3019.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   800.795 ±(99.9%) 490.625 B/op [Average]
[info]   (min, avg, max) = (572.911, 800.795, 861.211), stdev = 127.414
[info]   CI (99.9%): [310.170, 1291.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.852 ±(99.9%) 6.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.852, 3.698), stdev = 1.604
[info]   CI (99.9%): [≈ 0, 7.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.365 ±(99.9%) 2.650 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.365, 1.586), stdev = 0.688
[info]   CI (99.9%): [≈ 0, 3.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 10.000), stdev = 2.915
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92.47% complete, ETA 00:08:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.603 ops/s
[info] # Warmup Iteration   2: 6467704.372 ops/s
[info] # Warmup Iteration   3: 6692138.079 ops/s
[info] # Warmup Iteration   4: 6947407.781 ops/s
[info] # Warmup Iteration   5: 6967086.204 ops/s
[info] Iteration   1: 6840768.969 ops/s
[info]                  ·gc.alloc.rate:               684.057 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 152.498 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 6942922.169 ops/s
[info]                  ·gc.alloc.rate:                   692.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              157.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     150.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6913955.071 ops/s
[info]                  ·gc.alloc.rate:               691.135 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.323 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 151.030 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 6949760.701 ops/s
[info]                  ·gc.alloc.rate:                   688.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              155.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     150.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 6868627.967 ops/s
[info]                  ·gc.alloc.rate:               689.107 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 152.184 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   6903206.975 ±(99.9%) 182187.553 ops/s [Average]
[info]   (min, avg, max) = (6840768.969, 6903206.975, 6949760.701), stdev = 47313.529
[info]   CI (99.9%): [6721019.422, 7085394.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   689.174 ±(99.9%) 12.894 MB/sec [Average]
[info]   (min, avg, max) = (684.057, 689.174, 692.978), stdev = 3.348
[info]   CI (99.9%): [676.280, 702.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   157.109 ±(99.9%) 2.828 B/op [Average]
[info]   (min, avg, max) = (155.905, 157.109, 157.874), stdev = 0.734
[info]   CI (99.9%): [154.280, 159.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   663.695 ±(99.9%) 2.338 MB/sec [Average]
[info]   (min, avg, max) = (662.832, 663.695, 664.283), stdev = 0.607
[info]   CI (99.9%): [661.357, 666.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   151.303 ±(99.9%) 3.805 B/op [Average]
[info]   (min, avg, max) = (150.401, 151.303, 152.498), stdev = 0.988
[info]   CI (99.9%): [147.498, 155.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.095 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.057), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.71% complete, ETA 00:08:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2010157.391 ops/s
[info] # Warmup Iteration   2: 6059799.958 ops/s
[info] # Warmup Iteration   3: 6245433.341 ops/s
[info] # Warmup Iteration   4: 6292756.770 ops/s
[info] # Warmup Iteration   5: 6446477.558 ops/s
[info] Iteration   1: 6437508.932 ops/s
[info]                  ·gc.alloc.rate:                   646.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              157.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 6448044.403 ops/s
[info]                  ·gc.alloc.rate:               647.590 MB/sec
[info]                  ·gc.alloc.rate.norm:          158.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 162.353 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 6462573.232 ops/s
[info]                  ·gc.alloc.rate:      624.130 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6394014.928 ops/s
[info]                  ·gc.alloc.rate:               677.190 MB/sec
[info]                  ·gc.alloc.rate.norm:          166.659 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 163.724 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 6389836.262 ops/s
[info]                  ·gc.alloc.rate:               640.571 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 163.993 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   6426395.551 ±(99.9%) 126047.448 ops/s [Average]
[info]   (min, avg, max) = (6389836.262, 6426395.551, 6462573.232), stdev = 32734.122
[info]   CI (99.9%): [6300348.103, 6552443.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   647.116 ±(99.9%) 73.991 MB/sec [Average]
[info]   (min, avg, max) = (624.130, 647.116, 677.190), stdev = 19.215
[info]   CI (99.9%): [573.126, 721.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   158.487 ±(99.9%) 20.180 B/op [Average]
[info]   (min, avg, max) = (152.000, 158.487, 166.659), stdev = 5.241
[info]   CI (99.9%): [138.307, 178.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   532.032 ±(99.9%) 1145.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.032, 665.880), stdev = 297.416
[info]   CI (99.9%): [≈ 0, 1677.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   130.472 ±(99.9%) 280.867 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 130.472, 163.993), stdev = 72.940
[info]   CI (99.9%): [≈ 0, 411.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.94% complete, ETA 00:08:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3594995.982 ops/s
[info] # Warmup Iteration   2: 6865456.066 ops/s
[info] # Warmup Iteration   3: 6905201.890 ops/s
[info] # Warmup Iteration   4: 7033164.460 ops/s
[info] # Warmup Iteration   5: 7137415.799 ops/s
[info] Iteration   1: 7063383.438 ops/s
[info]                  ·gc.alloc.rate:                   726.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              161.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7125074.465 ops/s
[info]                  ·gc.alloc.rate:               708.459 MB/sec
[info]                  ·gc.alloc.rate.norm:          156.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 147.803 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 7134923.972 ops/s
[info]                  ·gc.alloc.rate:               715.436 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.818 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 147.608 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 7143146.318 ops/s
[info]                  ·gc.alloc.rate:                   714.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              157.380 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 7137042.922 ops/s
[info]                  ·gc.alloc.rate:               710.521 MB/sec
[info]                  ·gc.alloc.rate.norm:          156.684 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 147.630 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   7120714.223 ±(99.9%) 125922.134 ops/s [Average]
[info]   (min, avg, max) = (7063383.438, 7120714.223, 7143146.318), stdev = 32701.578
[info]   CI (99.9%): [6994792.089, 7246636.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   715.105 ±(99.9%) 27.496 MB/sec [Average]
[info]   (min, avg, max) = (708.459, 715.105, 726.850), stdev = 7.141
[info]   CI (99.9%): [687.609, 742.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   158.061 ±(99.9%) 8.582 B/op [Average]
[info]   (min, avg, max) = (156.493, 158.061, 161.933), stdev = 2.229
[info]   CI (99.9%): [149.480, 166.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   669.216 ±(99.9%) 0.912 MB/sec [Average]
[info]   (min, avg, max) = (668.904, 669.216, 669.466), stdev = 0.237
[info]   CI (99.9%): [668.304, 670.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   147.914 ±(99.9%) 2.423 B/op [Average]
[info]   (min, avg, max) = (147.505, 147.914, 149.023), stdev = 0.629
[info]   CI (99.9%): [145.491, 150.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.069 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93.18% complete, ETA 00:07:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3702524.468 ops/s
[info] # Warmup Iteration   2: 6781814.680 ops/s
[info] # Warmup Iteration   3: 7385226.471 ops/s
[info] # Warmup Iteration   4: 7190315.831 ops/s
[info] # Warmup Iteration   5: 7394480.308 ops/s
[info] Iteration   1: 7340784.289 ops/s
[info]                  ·gc.alloc.rate:      22.024 MB/sec
[info]                  ·gc.alloc.rate.norm: 4.722 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7393042.184 ops/s
[info]                  ·gc.alloc.rate:      0.093 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7388279.008 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7377789.321 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7392448.272 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   7378468.615 ±(99.9%) 84465.114 ops/s [Average]
[info]   (min, avg, max) = (7340784.289, 7378468.615, 7393042.184), stdev = 21935.322
[info]   CI (99.9%): [7294003.501, 7462933.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   4.424 ±(99.9%) 37.887 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 4.424, 22.024), stdev = 9.839
[info]   CI (99.9%): [≈ 0, 42.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.948 ±(99.9%) 8.123 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.948, 4.722), stdev = 2.109
[info]   CI (99.9%): [≈ 0, 9.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93.41% complete, ETA 00:07:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1050671.064 ops/s
[info] # Warmup Iteration   2: 4086418.774 ops/s
[info] # Warmup Iteration   3: 6367215.567 ops/s
[info] # Warmup Iteration   4: 6344280.656 ops/s
[info] # Warmup Iteration   5: 6187634.720 ops/s
[info] Iteration   1: 6336179.436 ops/s
[info]                  ·gc.alloc.rate:               631.901 MB/sec
[info]                  ·gc.alloc.rate.norm:          156.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 165.549 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 6310727.552 ops/s
[info]                  ·gc.alloc.rate:                   631.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              157.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 6313987.694 ops/s
[info]                  ·gc.alloc.rate:               624.649 MB/sec
[info]                  ·gc.alloc.rate.norm:          155.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 166.213 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 6242006.615 ops/s
[info]                  ·gc.alloc.rate:                   625.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              157.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     168.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 6266258.699 ops/s
[info]                  ·gc.alloc.rate:      605.155 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   6293831.999 ±(99.9%) 148276.974 ops/s [Average]
[info]   (min, avg, max) = (6242006.615, 6293831.999, 6336179.436), stdev = 38507.059
[info]   CI (99.9%): [6145555.025, 6442108.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   623.856 ±(99.9%) 42.279 MB/sec [Average]
[info]   (min, avg, max) = (605.155, 623.856, 631.901), stdev = 10.980
[info]   CI (99.9%): [581.577, 666.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   155.966 ±(99.9%) 9.087 B/op [Average]
[info]   (min, avg, max) = (152.000, 155.966, 157.711), stdev = 2.360
[info]   CI (99.9%): [146.880, 165.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   533.472 ±(99.9%) 1148.339 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.472, 667.112), stdev = 298.220
[info]   CI (99.9%): [≈ 0, 1681.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   133.222 ±(99.9%) 286.794 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 133.222, 168.136), stdev = 74.479
[info]   CI (99.9%): [≈ 0, 420.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93.65% complete, ETA 00:07:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 335597.315 ops/s
[info] # Warmup Iteration   2: 1293798.887 ops/s
[info] # Warmup Iteration   3: 1767558.138 ops/s
[info] # Warmup Iteration   4: 1739437.948 ops/s
[info] # Warmup Iteration   5: 1732018.820 ops/s
[info] Iteration   1: 1779879.485 ops/s
[info]                  ·gc.alloc.rate:                   2286.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              2021.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1775.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.884 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1761238.478 ops/s
[info]                  ·gc.alloc.rate:                   2277.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              2035.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1788.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.112 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1762921.231 ops/s
[info]                  ·gc.alloc.rate:                   2268.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              2024.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2381.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1738604.755 ops/s
[info]                  ·gc.alloc.rate:                   2311.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              2092.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1813.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.803 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.632 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1784154.327 ops/s
[info]                  ·gc.alloc.rate:               2311.267 MB/sec
[info]                  ·gc.alloc.rate.norm:          2038.842 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2678.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2362.593 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1765359.655 ±(99.9%) 69493.717 ops/s [Average]
[info]   (min, avg, max) = (1738604.755, 1765359.655, 1784154.327), stdev = 18047.298
[info]   CI (99.9%): [1695865.938, 1834853.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2291.040 ±(99.9%) 76.063 MB/sec [Average]
[info]   (min, avg, max) = (2268.292, 2291.040, 2311.774), stdev = 19.753
[info]   CI (99.9%): [2214.977, 2367.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2042.528 ±(99.9%) 111.616 B/op [Average]
[info]   (min, avg, max) = (2021.345, 2042.528, 2092.724), stdev = 28.986
[info]   CI (99.9%): [1930.912, 2154.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2271.972 ±(99.9%) 1410.250 MB/sec [Average]
[info]   (min, avg, max) = (2001.762, 2271.972, 2678.276), stdev = 366.237
[info]   CI (99.9%): [861.722, 3682.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2024.367 ±(99.9%) 1222.986 B/op [Average]
[info]   (min, avg, max) = (1775.955, 2024.367, 2381.211), stdev = 317.606
[info]   CI (99.9%): [801.381, 3247.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.272 ±(99.9%) 7.324 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.272, 4.393), stdev = 1.902
[info]   CI (99.9%): [≈ 0, 8.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.133 ±(99.9%) 6.485 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.133, 3.884), stdev = 1.684
[info]   CI (99.9%): [≈ 0, 7.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 7.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 93.88% complete, ETA 00:06:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.678 ops/s
[info] # Warmup Iteration   2: 2173823.236 ops/s
[info] # Warmup Iteration   3: 2719259.515 ops/s
[info] # Warmup Iteration   4: 2953964.720 ops/s
[info] # Warmup Iteration   5: 2895791.469 ops/s
[info] Iteration   1: 2937960.654 ops/s
[info]                  ·gc.alloc.rate:               566.403 MB/sec
[info]                  ·gc.alloc.rate.norm:          303.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 356.141 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2924576.890 ops/s
[info]                  ·gc.alloc.rate:                   569.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              306.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     357.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2927025.090 ops/s
[info]                  ·gc.alloc.rate:                   573.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              308.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     357.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2952898.366 ops/s
[info]                  ·gc.alloc.rate:               573.465 MB/sec
[info]                  ·gc.alloc.rate.norm:          305.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 354.533 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2964702.142 ops/s
[info]                  ·gc.alloc.rate:      557.986 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.243 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2941432.628 ±(99.9%) 66043.907 ops/s [Average]
[info]   (min, avg, max) = (2924576.890, 2941432.628, 2964702.142), stdev = 17151.393
[info]   CI (99.9%): [2875388.721, 3007476.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   568.077 ±(99.9%) 24.440 MB/sec [Average]
[info]   (min, avg, max) = (557.986, 568.077, 573.465), stdev = 6.347
[info]   CI (99.9%): [543.637, 592.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   303.971 ±(99.9%) 17.863 B/op [Average]
[info]   (min, avg, max) = (296.243, 303.971, 308.134), stdev = 4.639
[info]   CI (99.9%): [286.107, 321.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   532.010 ±(99.9%) 1145.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.010, 665.258), stdev = 297.403
[info]   CI (99.9%): [≈ 0, 1677.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   285.216 ±(99.9%) 613.970 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 285.216, 357.758), stdev = 159.446
[info]   CI (99.9%): [≈ 0, 899.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.009 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.040), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.022), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.12% complete, ETA 00:06:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 147679.549 ops/s
[info] # Warmup Iteration   2: 1464311.592 ops/s
[info] # Warmup Iteration   3: 1974844.923 ops/s
[info] # Warmup Iteration   4: 1961121.115 ops/s
[info] # Warmup Iteration   5: 1962605.168 ops/s
[info] Iteration   1: 1963723.986 ops/s
[info]                  ·gc.alloc.rate:                   419.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              336.153 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     410.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1971352.060 ops/s
[info]                  ·gc.alloc.rate:      411.018 MB/sec
[info]                  ·gc.alloc.rate.norm: 328.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1961215.881 ops/s
[info]                  ·gc.alloc.rate:               425.832 MB/sec
[info]                  ·gc.alloc.rate.norm:          341.736 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 532.990 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1891697.853 ops/s
[info]                  ·gc.alloc.rate:                        394.230 MB/sec
[info]                  ·gc.alloc.rate.norm:                   328.000 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.025 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0.021 B/op
[info]                  ·gc.churn.Metaspace:                   0.069 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              0.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:               361.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          301.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           4.944 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      4.113 B/op
[info]                  ·gc.count:                             2.000 counts
[info]                  ·gc.time:                              42.000 ms
[info] Iteration   5: 1951545.165 ops/s
[info]                  ·gc.alloc.rate:               420.045 MB/sec
[info]                  ·gc.alloc.rate.norm:          338.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 536.145 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1947906.989 ±(99.9%) 124025.389 ops/s [Average]
[info]   (min, avg, max) = (1891697.853, 1947906.989, 1971352.060), stdev = 32209.000
[info]   CI (99.9%): [1823881.601, 2071932.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   414.107 ±(99.9%) 47.377 MB/sec [Average]
[info]   (min, avg, max) = (394.230, 414.107, 425.832), stdev = 12.304
[info]   CI (99.9%): [366.730, 461.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   334.529 ±(99.9%) 24.179 B/op [Average]
[info]   (min, avg, max) = (328.000, 334.529, 341.736), stdev = 6.279
[info]   CI (99.9%): [310.351, 358.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space":
[info]   0.005 ±(99.9%) 0.043 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm":
[info]   0.004 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.Metaspace":
[info]   0.014 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.069), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.Metaspace.norm":
[info]   0.012 ±(99.9%) 0.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.058), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   440.491 ±(99.9%) 1064.340 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 440.491, 664.794), stdev = 276.406
[info]   CI (99.9%): [≈ 0, 1504.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   356.057 ±(99.9%) 853.348 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 356.057, 536.145), stdev = 221.612
[info]   CI (99.9%): [≈ 0, 1209.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.991 ±(99.9%) 8.509 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.991, 4.944), stdev = 2.210
[info]   CI (99.9%): [≈ 0, 9.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.824 ±(99.9%) 7.080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.824, 4.113), stdev = 1.839
[info]   CI (99.9%): [≈ 0, 7.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 10.400, 42.000), stdev = 17.785
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.35% complete, ETA 00:06:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 901209.533 ops/s
[info] # Warmup Iteration   2: 2164343.459 ops/s
[info] # Warmup Iteration   3: 2301991.680 ops/s
[info] # Warmup Iteration   4: 2310714.023 ops/s
[info] # Warmup Iteration   5: 2309964.689 ops/s
[info] Iteration   1: 2243679.176 ops/s
[info]                  ·gc.alloc.rate:                   434.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.946 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     358.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2320301.937 ops/s
[info]                  ·gc.alloc.rate:      436.392 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2312313.900 ops/s
[info]                  ·gc.alloc.rate:               451.064 MB/sec
[info]                  ·gc.alloc.rate.norm:          306.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 455.448 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2309087.509 ops/s
[info]                  ·gc.alloc.rate:               450.791 MB/sec
[info]                  ·gc.alloc.rate.norm:          307.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 456.093 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2320313.750 ops/s
[info]                  ·gc.alloc.rate:      436.562 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2301139.254 ±(99.9%) 125139.674 ops/s [Average]
[info]   (min, avg, max) = (2243679.176, 2301139.254, 2320313.750), stdev = 32498.376
[info]   CI (99.9%): [2175999.580, 2426278.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   441.905 ±(99.9%) 31.838 MB/sec [Average]
[info]   (min, avg, max) = (434.718, 441.905, 451.064), stdev = 8.268
[info]   CI (99.9%): [410.068, 473.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   302.244 ±(99.9%) 22.221 B/op [Average]
[info]   (min, avg, max) = (296.000, 302.244, 307.279), stdev = 5.771
[info]   CI (99.9%): [280.023, 324.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   369.974 ±(99.9%) 1323.887 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.974, 669.181), stdev = 343.809
[info]   CI (99.9%): [≈ 0, 1693.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   254.081 ±(99.9%) 906.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 254.081, 456.093), stdev = 235.293
[info]   CI (99.9%): [≈ 0, 1160.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94.59% complete, ETA 00:06:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 256542.966 ops/s
[info] # Warmup Iteration   2: 1593720.666 ops/s
[info] # Warmup Iteration   3: 1889601.766 ops/s
[info] # Warmup Iteration   4: 1881894.971 ops/s
[info] # Warmup Iteration   5: 1886165.987 ops/s
[info] Iteration   1: 1894697.753 ops/s
[info]                  ·gc.alloc.rate:      356.332 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1876419.648 ops/s
[info]                  ·gc.alloc.rate:               366.362 MB/sec
[info]                  ·gc.alloc.rate.norm:          307.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 429.111 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 1875329.151 ops/s
[info]                  ·gc.alloc.rate:               368.105 MB/sec
[info]                  ·gc.alloc.rate.norm:          308.915 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 558.763 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1896649.467 ops/s
[info]                  ·gc.alloc.rate:      356.755 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1888144.227 ops/s
[info]                  ·gc.alloc.rate:               379.843 MB/sec
[info]                  ·gc.alloc.rate.norm:          316.631 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 554.982 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1886248.049 ±(99.9%) 38458.387 ops/s [Average]
[info]   (min, avg, max) = (1875329.151, 1886248.049, 1896649.467), stdev = 9987.521
[info]   CI (99.9%): [1847789.662, 1924706.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   365.479 ±(99.9%) 37.222 MB/sec [Average]
[info]   (min, avg, max) = (356.332, 365.479, 379.843), stdev = 9.667
[info]   CI (99.9%): [328.257, 402.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   304.965 ±(99.9%) 34.321 B/op [Average]
[info]   (min, avg, max) = (296.000, 304.965, 316.631), stdev = 8.913
[info]   CI (99.9%): [270.644, 339.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   368.645 ±(99.9%) 1318.311 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368.645, 665.826), stdev = 342.361
[info]   CI (99.9%): [≈ 0, 1686.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   308.571 ±(99.9%) 1103.121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 308.571, 558.763), stdev = 286.477
[info]   CI (99.9%): [≈ 0, 1411.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 5.000), stdev = 2.588
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 94.82% complete, ETA 00:05:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 437243.049 ops/s
[info] # Warmup Iteration   2: 2320167.747 ops/s
[info] # Warmup Iteration   3: 2498349.779 ops/s
[info] # Warmup Iteration   4: 2496791.518 ops/s
[info] # Warmup Iteration   5: 2510997.832 ops/s
[info] Iteration   1: 2499633.064 ops/s
[info]                  ·gc.alloc.rate:               1805.069 MB/sec
[info]                  ·gc.alloc.rate.norm:          1136.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1264.162 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     12.000 ms
[info] Iteration   2: 2514736.269 ops/s
[info]                  ·gc.alloc.rate:                   1790.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     838.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.568 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2516384.619 ops/s
[info]                  ·gc.alloc.rate:                   1830.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              1144.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1253.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2524205.543 ops/s
[info]                  ·gc.alloc.rate:                   1809.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              1128.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1247.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2514770.120 ops/s
[info]                  ·gc.alloc.rate:               1804.492 MB/sec
[info]                  ·gc.alloc.rate.norm:          1129.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 835.456 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   2513945.923 ±(99.9%) 34299.324 ops/s [Average]
[info]   (min, avg, max) = (2499633.064, 2513945.923, 2524205.543), stdev = 8907.426
[info]   CI (99.9%): [2479646.599, 2548245.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1807.996 ±(99.9%) 54.948 MB/sec [Average]
[info]   (min, avg, max) = (1790.511, 1807.996, 1830.003), stdev = 14.270
[info]   CI (99.9%): [1753.048, 1862.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1131.883 ±(99.9%) 34.697 B/op [Average]
[info]   (min, avg, max) = (1120.596, 1131.883, 1144.442), stdev = 9.011
[info]   CI (99.9%): [1097.187, 1166.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1737.476 ±(99.9%) 1406.500 MB/sec [Average]
[info]   (min, avg, max) = (1335.062, 1737.476, 2007.738), stdev = 365.264
[info]   CI (99.9%): [330.976, 3143.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1087.805 ±(99.9%) 882.116 B/op [Average]
[info]   (min, avg, max) = (835.456, 1087.805, 1264.162), stdev = 229.083
[info]   CI (99.9%): [205.690, 1969.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.829 ±(99.9%) 7.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.829, 4.104), stdev = 1.831
[info]   CI (99.9%): [≈ 0, 7.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.519 ±(99.9%) 4.412 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.519, 2.568), stdev = 1.146
[info]   CI (99.9%): [≈ 0, 4.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 12.000), stdev = 3.782
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95.06% complete, ETA 00:05:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.698 ops/s
[info] # Warmup Iteration   2: 3330405.157 ops/s
[info] # Warmup Iteration   3: 3551877.010 ops/s
[info] # Warmup Iteration   4: 3561336.247 ops/s
[info] # Warmup Iteration   5: 3586509.827 ops/s
[info] Iteration   1: 3645609.092 ops/s
[info]                  ·gc.alloc.rate:               968.003 MB/sec
[info]                  ·gc.alloc.rate.norm:          417.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 287.020 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 3647434.043 ops/s
[info]                  ·gc.alloc.rate:                   993.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              428.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     574.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3678642.560 ops/s
[info]                  ·gc.alloc.rate:               973.043 MB/sec
[info]                  ·gc.alloc.rate.norm:          416.297 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 285.011 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 3631692.378 ops/s
[info]                  ·gc.alloc.rate:               957.360 MB/sec
[info]                  ·gc.alloc.rate.norm:          414.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 288.687 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 3565165.554 ops/s
[info]                  ·gc.alloc.rate:               974.135 MB/sec
[info]                  ·gc.alloc.rate.norm:          429.937 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 588.454 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   3633708.725 ±(99.9%) 161672.996 ops/s [Average]
[info]   (min, avg, max) = (3565165.554, 3633708.725, 3678642.560), stdev = 41985.964
[info]   CI (99.9%): [3472035.729, 3795381.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   973.149 ±(99.9%) 50.165 MB/sec [Average]
[info]   (min, avg, max) = (957.360, 973.149, 993.202), stdev = 13.028
[info]   CI (99.9%): [922.984, 1023.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   421.509 ±(99.9%) 27.551 B/op [Average]
[info]   (min, avg, max) = (414.879, 421.509, 429.937), stdev = 7.155
[info]   CI (99.9%): [393.958, 449.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   932.320 ±(99.9%) 1405.634 MB/sec [Average]
[info]   (min, avg, max) = (664.861, 932.320, 1333.298), stdev = 365.039
[info]   CI (99.9%): [≈ 0, 2337.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   404.702 ±(99.9%) 621.423 B/op [Average]
[info]   (min, avg, max) = (285.011, 404.702, 588.454), stdev = 161.382
[info]   CI (99.9%): [≈ 0, 1026.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.064 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.037), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.29% complete, ETA 00:05:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 525700.355 ops/s
[info] # Warmup Iteration   2: 2878759.688 ops/s
[info] # Warmup Iteration   3: 3365488.918 ops/s
[info] # Warmup Iteration   4: 3386649.248 ops/s
[info] # Warmup Iteration   5: 3373405.466 ops/s
[info] Iteration   1: 3372028.922 ops/s
[info]                  ·gc.alloc.rate:               895.924 MB/sec
[info]                  ·gc.alloc.rate.norm:          417.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 310.917 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 3385958.894 ops/s
[info]                  ·gc.alloc.rate:                   921.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              428.236 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     619.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 3381938.698 ops/s
[info]                  ·gc.alloc.rate:               892.425 MB/sec
[info]                  ·gc.alloc.rate.norm:          415.305 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 310.317 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 3359899.174 ops/s
[info]                  ·gc.alloc.rate:                   890.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     312.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3236450.485 ops/s
[info]                  ·gc.alloc.rate:                   880.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              428.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     649.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   3347255.234 ±(99.9%) 241642.965 ops/s [Average]
[info]   (min, avg, max) = (3236450.485, 3347255.234, 3385958.894), stdev = 62753.911
[info]   CI (99.9%): [3105612.269, 3588898.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   896.127 ±(99.9%) 58.697 MB/sec [Average]
[info]   (min, avg, max) = (880.661, 896.127, 921.447), stdev = 15.243
[info]   CI (99.9%): [837.430, 954.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   421.351 ±(99.9%) 24.528 B/op [Average]
[info]   (min, avg, max) = (415.305, 421.351, 428.263), stdev = 6.370
[info]   CI (99.9%): [396.823, 445.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   933.714 ±(99.9%) 1407.352 MB/sec [Average]
[info]   (min, avg, max) = (666.411, 933.714, 1335.008), stdev = 365.485
[info]   CI (99.9%): [≈ 0, 2341.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   440.504 ±(99.9%) 682.746 B/op [Average]
[info]   (min, avg, max) = (310.317, 440.504, 649.210), stdev = 177.307
[info]   CI (99.9%): [≈ 0, 1123.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.022 ±(99.9%) 0.090 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.042 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.024), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.949
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.53% complete, ETA 00:05:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1331863.680 ops/s
[info] # Warmup Iteration   2: 3410949.459 ops/s
[info] # Warmup Iteration   3: 3581730.379 ops/s
[info] # Warmup Iteration   4: 3649022.183 ops/s
[info] # Warmup Iteration   5: 3632867.857 ops/s
[info] Iteration   1: 3597577.967 ops/s
[info]                  ·gc.alloc.rate:               982.449 MB/sec
[info]                  ·gc.alloc.rate.norm:          429.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 585.211 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 3637969.990 ops/s
[info]                  ·gc.alloc.rate:               962.657 MB/sec
[info]                  ·gc.alloc.rate.norm:          416.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 289.642 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 3612930.111 ops/s
[info]                  ·gc.alloc.rate:                   983.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              428.271 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     583.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 3641695.807 ops/s
[info]                  ·gc.alloc.rate:                   959.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              414.549 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     289.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3644049.203 ops/s
[info]                  ·gc.alloc.rate:               959.287 MB/sec
[info]                  ·gc.alloc.rate.norm:          414.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 289.440 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   3626844.616 ±(99.9%) 79160.469 ops/s [Average]
[info]   (min, avg, max) = (3597577.967, 3626844.616, 3644049.203), stdev = 20557.722
[info]   CI (99.9%): [3547684.147, 3706005.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   969.419 ±(99.9%) 47.884 MB/sec [Average]
[info]   (min, avg, max) = (959.249, 969.419, 983.454), stdev = 12.435
[info]   CI (99.9%): [921.535, 1017.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   420.666 ±(99.9%) 29.634 B/op [Average]
[info]   (min, avg, max) = (414.280, 420.666, 429.782), stdev = 7.696
[info]   CI (99.9%): [391.032, 450.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.432 ±(99.9%) 1410.777 MB/sec [Average]
[info]   (min, avg, max) = (669.534, 937.432, 1339.802), stdev = 366.374
[info]   CI (99.9%): [≈ 0, 2348.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   407.447 ±(99.9%) 621.778 B/op [Average]
[info]   (min, avg, max) = (289.440, 407.447, 585.211), stdev = 161.474
[info]   CI (99.9%): [≈ 0, 1029.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95.76% complete, ETA 00:04:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1251718.539 ops/s
[info] # Warmup Iteration   2: 3466559.842 ops/s
[info] # Warmup Iteration   3: 3895069.769 ops/s
[info] # Warmup Iteration   4: 3894839.920 ops/s
[info] # Warmup Iteration   5: 3895687.412 ops/s
[info] Iteration   1: 3784546.580 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3895653.657 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3893943.262 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3893232.165 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3893308.882 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3872136.909 ±(99.9%) 188582.141 ops/s [Average]
[info]   (min, avg, max) = (3784546.580, 3872136.909, 3895653.657), stdev = 48974.183
[info]   CI (99.9%): [3683554.768, 4060719.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96.00% complete, ETA 00:04:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 547743.105 ops/s
[info] # Warmup Iteration   2: 2849024.394 ops/s
[info] # Warmup Iteration   3: 3311228.559 ops/s
[info] # Warmup Iteration   4: 3385160.744 ops/s
[info] # Warmup Iteration   5: 3415153.956 ops/s
[info] Iteration   1: 3349569.080 ops/s
[info]                  ·gc.alloc.rate:               996.686 MB/sec
[info]                  ·gc.alloc.rate.norm:          468.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 627.600 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 3414631.299 ops/s
[info]                  ·gc.alloc.rate:                   909.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              419.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     308.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.260 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3413351.466 ops/s
[info]                  ·gc.alloc.rate:               897.802 MB/sec
[info]                  ·gc.alloc.rate.norm:          413.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 308.245 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 3411164.175 ops/s
[info]                  ·gc.alloc.rate:                   901.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              415.736 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     308.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3382395.375 ops/s
[info]                  ·gc.alloc.rate:                   921.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              428.556 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     622.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   3394222.279 ±(99.9%) 108968.215 ops/s [Average]
[info]   (min, avg, max) = (3349569.080, 3394222.279, 3414631.299), stdev = 28298.699
[info]   CI (99.9%): [3285254.064, 3503190.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   925.301 ±(99.9%) 157.599 MB/sec [Average]
[info]   (min, avg, max) = (897.802, 925.301, 996.686), stdev = 40.928
[info]   CI (99.9%): [767.701, 1082.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   429.143 ±(99.9%) 87.061 B/op [Average]
[info]   (min, avg, max) = (413.949, 429.143, 468.312), stdev = 22.610
[info]   CI (99.9%): [342.082, 516.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   936.089 ±(99.9%) 1409.963 MB/sec [Average]
[info]   (min, avg, max) = (668.543, 936.089, 1338.705), stdev = 366.163
[info]   CI (99.9%): [≈ 0, 2346.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   435.054 ±(99.9%) 668.267 B/op [Average]
[info]   (min, avg, max) = (308.131, 435.054, 627.600), stdev = 173.547
[info]   CI (99.9%): [≈ 0, 1103.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.056 ±(99.9%) 0.440 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.056, 0.260), stdev = 0.114
[info]   CI (99.9%): [≈ 0, 0.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.203 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.120), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 1.817
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.24% complete, ETA 00:04:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1858.068 ops/s
[info] # Warmup Iteration   2: 5674.985 ops/s
[info] # Warmup Iteration   3: 10965.952 ops/s
[info] # Warmup Iteration   4: 12225.849 ops/s
[info] # Warmup Iteration   5: 12172.726 ops/s
[info] Iteration   1: 12226.423 ops/s
[info]                  ·gc.alloc.rate:                   1531.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              197173.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171247.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.672 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 11813.313 ops/s
[info]                  ·gc.alloc.rate:                   1707.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              227460.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177410.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      ≈ 10⁻⁵ MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 12440.033 ops/s
[info]                  ·gc.alloc.rate:                   1583.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              200272.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     252325.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.161 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 905.631 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 12546.770 ops/s
[info]                  ·gc.alloc.rate:                   1580.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              198170.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166281.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.723 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 12137.869 ops/s
[info]                  ·gc.alloc.rate:                   1656.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              214799.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171710.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.888 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   12232.882 ±(99.9%) 1100.207 ops/s [Average]
[info]   (min, avg, max) = (11813.313, 12232.882, 12546.770), stdev = 285.720
[info]   CI (99.9%): [11132.675, 13333.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1612.011 ±(99.9%) 267.625 MB/sec [Average]
[info]   (min, avg, max) = (1531.750, 1612.011, 1707.353), stdev = 69.501
[info]   CI (99.9%): [1344.386, 1879.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   207575.522 ±(99.9%) 50851.999 B/op [Average]
[info]   (min, avg, max) = (197173.361, 207575.522, 227460.992), stdev = 13206.103
[info]   CI (99.9%): [156723.523, 258427.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1461.572 ±(99.9%) 1148.696 MB/sec [Average]
[info]   (min, avg, max) = (1324.376, 1461.572, 1995.184), stdev = 298.313
[info]   CI (99.9%): [312.876, 2610.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   187795.209 ±(99.9%) 139733.820 B/op [Average]
[info]   (min, avg, max) = (166281.476, 187795.209, 252325.715), stdev = 36288.429
[info]   CI (99.9%): [48061.389, 327529.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.485 ±(99.9%) 12.223 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 1.485, 7.161), stdev = 3.174
[info]   CI (99.9%): [≈ 0, 13.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   187.783 ±(99.9%) 1545.891 B/op [Average]
[info]   (min, avg, max) = (0.003, 187.783, 905.631), stdev = 401.463
[info]   CI (99.9%): [≈ 0, 1733.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 12.000), stdev = 4.159
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.47% complete, ETA 00:04:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1640.366 ops/s
[info] # Warmup Iteration   2: 15752.827 ops/s
[info] # Warmup Iteration   3: 22861.204 ops/s
[info] # Warmup Iteration   4: 22860.463 ops/s
[info] # Warmup Iteration   5: 22906.356 ops/s
[info] Iteration   1: 22471.293 ops/s
[info]                  ·gc.alloc.rate:      392.285 MB/sec
[info]                  ·gc.alloc.rate.norm: 27463.648 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 21246.934 ops/s
[info]                  ·gc.alloc.rate:               451.264 MB/sec
[info]                  ·gc.alloc.rate.norm:          33411.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48923.020 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 22698.441 ops/s
[info]                  ·gc.alloc.rate:      415.201 MB/sec
[info]                  ·gc.alloc.rate.norm: 28785.900 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 22608.118 ops/s
[info]                  ·gc.alloc.rate:                   340.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              23716.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45978.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.783 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 22698.186 ops/s
[info]                  ·gc.alloc.rate:      323.460 MB/sec
[info]                  ·gc.alloc.rate.norm: 22424.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   22344.595 ±(99.9%) 2389.719 ops/s [Average]
[info]   (min, avg, max) = (21246.934, 22344.595, 22698.441), stdev = 620.603
[info]   CI (99.9%): [19954.875, 24734.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   384.582 ±(99.9%) 202.891 MB/sec [Average]
[info]   (min, avg, max) = (323.460, 384.582, 451.264), stdev = 52.690
[info]   CI (99.9%): [181.691, 587.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   27160.285 ±(99.9%) 16796.887 B/op [Average]
[info]   (min, avg, max) = (22424.019, 27160.285, 33411.830), stdev = 4362.098
[info]   CI (99.9%): [10363.398, 43957.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   264.255 ±(99.9%) 1393.341 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 264.255, 660.760), stdev = 361.846
[info]   CI (99.9%): [≈ 0, 1657.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18980.280 ±(99.9%) 100157.797 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18980.280, 48923.020), stdev = 26010.662
[info]   CI (99.9%): [≈ 0, 119138.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.209 ±(99.9%) 1.801 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.209, 1.046), stdev = 0.468
[info]   CI (99.9%): [≈ 0, 2.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14.557 ±(99.9%) 125.336 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.557, 72.783), stdev = 32.549
[info]   CI (99.9%): [≈ 0, 139.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.71% complete, ETA 00:03:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10308.296 ops/s
[info] # Warmup Iteration   2: 18440.857 ops/s
[info] # Warmup Iteration   3: 21044.641 ops/s
[info] # Warmup Iteration   4: 20898.725 ops/s
[info] # Warmup Iteration   5: 21085.793 ops/s
[info] Iteration   1: 20426.149 ops/s
[info]                  ·gc.alloc.rate:               391.235 MB/sec
[info]                  ·gc.alloc.rate.norm:          30138.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39419.764 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 21192.381 ops/s
[info]                  ·gc.alloc.rate:      227.843 MB/sec
[info]                  ·gc.alloc.rate.norm: 16918.523 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 20998.189 ops/s
[info]                  ·gc.alloc.rate:                   237.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              17790.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38346.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.944 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.752 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 21179.508 ops/s
[info]                  ·gc.alloc.rate:      227.615 MB/sec
[info]                  ·gc.alloc.rate.norm: 16912.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 21176.744 ops/s
[info]                  ·gc.alloc.rate:      227.554 MB/sec
[info]                  ·gc.alloc.rate.norm: 16912.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   20994.594 ±(99.9%) 1261.981 ops/s [Average]
[info]   (min, avg, max) = (20426.149, 20994.594, 21192.381), stdev = 327.732
[info]   CI (99.9%): [19732.614, 22256.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   262.322 ±(99.9%) 277.964 MB/sec [Average]
[info]   (min, avg, max) = (227.554, 262.322, 391.235), stdev = 72.186
[info]   CI (99.9%): [≈ 0, 540.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   19734.290 ±(99.9%) 22442.984 B/op [Average]
[info]   (min, avg, max) = (16912.020, 19734.290, 30138.272), stdev = 5828.372
[info]   CI (99.9%): [≈ 0, 42177.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.668 ±(99.9%) 1079.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.668, 511.721), stdev = 280.253
[info]   CI (99.9%): [≈ 0, 1283.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15553.172 ±(99.9%) 82020.413 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15553.172, 39419.764), stdev = 21300.441
[info]   CI (99.9%): [≈ 0, 97573.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.189 ±(99.9%) 1.626 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.189, 0.944), stdev = 0.422
[info]   CI (99.9%): [≈ 0, 1.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14.150 ±(99.9%) 121.839 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.150, 70.752), stdev = 31.641
[info]   CI (99.9%): [≈ 0, 135.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96.94% complete, ETA 00:03:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 188.702 ops/s
[info] # Warmup Iteration   2: 1410.365 ops/s
[info] # Warmup Iteration   3: 5537.561 ops/s
[info] # Warmup Iteration   4: 8033.712 ops/s
[info] # Warmup Iteration   5: 8219.781 ops/s
[info] Iteration   1: 8233.031 ops/s
[info]                  ·gc.alloc.rate:                   1847.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              353056.235 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     380466.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.967 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 8288.758 ops/s
[info]                  ·gc.alloc.rate:                   1847.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              350695.606 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     252594.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 446.657 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 8288.364 ops/s
[info]                  ·gc.alloc.rate:                   1853.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              351865.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     379081.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 158.109 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 8313.978 ops/s
[info]                  ·gc.alloc.rate:                   1867.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              353498.858 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     377895.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.225 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 8255.627 ops/s
[info]                  ·gc.alloc.rate:                   1867.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              356064.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     380867.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.968 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   8275.952 ±(99.9%) 122.061 ops/s [Average]
[info]   (min, avg, max) = (8233.031, 8275.952, 8313.978), stdev = 31.699
[info]   CI (99.9%): [8153.890, 8398.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1856.597 ±(99.9%) 40.152 MB/sec [Average]
[info]   (min, avg, max) = (1847.068, 1856.597, 1867.855), stdev = 10.427
[info]   CI (99.9%): [1816.445, 1896.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   353036.120 ±(99.9%) 7758.193 B/op [Average]
[info]   (min, avg, max) = (350695.606, 353036.120, 356064.872), stdev = 2014.778
[info]   CI (99.9%): [345277.927, 360794.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1862.413 ±(99.9%) 1145.292 MB/sec [Average]
[info]   (min, avg, max) = (1330.381, 1862.413, 1997.965), stdev = 297.429
[info]   CI (99.9%): [717.121, 3007.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   354181.128 ±(99.9%) 218720.291 B/op [Average]
[info]   (min, avg, max) = (252594.243, 354181.128, 380867.488), stdev = 56800.965
[info]   CI (99.9%): [135460.837, 572901.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.702 ±(99.9%) 3.773 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.702, 2.352), stdev = 0.980
[info]   CI (99.9%): [≈ 0, 4.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   133.185 ±(99.9%) 716.480 B/op [Average]
[info]   (min, avg, max) = (3.968, 133.185, 446.657), stdev = 186.068
[info]   CI (99.9%): [≈ 0, 849.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.600, 13.000), stdev = 3.435
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97.18% complete, ETA 00:03:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11886.291 ops/s
[info] # Warmup Iteration   2: 56876.645 ops/s
[info] # Warmup Iteration   3: 62535.297 ops/s
[info] # Warmup Iteration   4: 66036.069 ops/s
[info] # Warmup Iteration   5: 65303.264 ops/s
[info] Iteration   1: 65099.354 ops/s
[info]                  ·gc.alloc.rate:                   863.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              20868.927 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32000.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.503 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 65150.464 ops/s
[info]                  ·gc.alloc.rate:               856.798 MB/sec
[info]                  ·gc.alloc.rate.norm:          20689.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16003.819 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 65022.361 ops/s
[info]                  ·gc.alloc.rate:               869.782 MB/sec
[info]                  ·gc.alloc.rate.norm:          21047.204 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16067.319 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 62551.678 ops/s
[info]                  ·gc.alloc.rate:                   992.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              24965.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33446.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.986 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.812 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 65523.850 ops/s
[info]                  ·gc.alloc.rate:               857.843 MB/sec
[info]                  ·gc.alloc.rate.norm:          20601.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15984.244 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   64669.542 ±(99.9%) 4619.045 ops/s [Average]
[info]   (min, avg, max) = (62551.678, 64669.542, 65523.850), stdev = 1199.551
[info]   CI (99.9%): [60050.496, 69288.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   887.987 ±(99.9%) 225.260 MB/sec [Average]
[info]   (min, avg, max) = (856.798, 887.987, 992.226), stdev = 58.499
[info]   CI (99.9%): [662.727, 1113.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21634.526 ±(99.9%) 7199.405 B/op [Average]
[info]   (min, avg, max) = (20601.975, 21634.526, 24965.026), stdev = 1869.663
[info]   CI (99.9%): [14435.121, 28833.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   929.077 ±(99.9%) 1397.165 MB/sec [Average]
[info]   (min, avg, max) = (662.753, 929.077, 1329.311), stdev = 362.839
[info]   CI (99.9%): [≈ 0, 2326.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   22700.434 ±(99.9%) 35287.256 B/op [Average]
[info]   (min, avg, max) = (15984.244, 22700.434, 33446.291), stdev = 9163.988
[info]   CI (99.9%): [≈ 0, 57987.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.201 ±(99.9%) 1.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.201, 0.986), stdev = 0.439
[info]   CI (99.9%): [≈ 0, 1.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.063 ±(99.9%) 42.520 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.063, 24.812), stdev = 11.042
[info]   CI (99.9%): [≈ 0, 47.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.41% complete, ETA 00:02:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29239.690 ops/s
[info] # Warmup Iteration   2: 92283.998 ops/s
[info] # Warmup Iteration   3: 102069.646 ops/s
[info] # Warmup Iteration   4: 106915.813 ops/s
[info] # Warmup Iteration   5: 106801.460 ops/s
[info] Iteration   1: 107206.440 ops/s
[info]                  ·gc.alloc.rate:                   711.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              10446.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9755.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.455 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 106943.930 ops/s
[info]                  ·gc.alloc.rate:               701.343 MB/sec
[info]                  ·gc.alloc.rate.norm:          10320.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9793.637 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 107048.855 ops/s
[info]                  ·gc.alloc.rate:                   708.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              10423.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9784.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.153 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 107242.216 ops/s
[info]                  ·gc.alloc.rate:                   704.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              10345.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9775.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.305 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 106986.429 ops/s
[info]                  ·gc.alloc.rate:                   711.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              10471.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9798.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.494 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   107085.574 ±(99.9%) 510.796 ops/s [Average]
[info]   (min, avg, max) = (106943.930, 107085.574, 107242.216), stdev = 132.652
[info]   CI (99.9%): [106574.778, 107596.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   707.727 ±(99.9%) 17.408 MB/sec [Average]
[info]   (min, avg, max) = (701.343, 707.727, 711.825), stdev = 4.521
[info]   CI (99.9%): [690.318, 725.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10401.352 ±(99.9%) 252.037 B/op [Average]
[info]   (min, avg, max) = (10320.276, 10401.352, 10471.295), stdev = 65.453
[info]   CI (99.9%): [10149.315, 10653.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   665.551 ±(99.9%) 2.577 MB/sec [Average]
[info]   (min, avg, max) = (664.485, 665.551, 666.134), stdev = 0.669
[info]   CI (99.9%): [662.975, 668.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9781.517 ±(99.9%) 65.959 B/op [Average]
[info]   (min, avg, max) = (9755.219, 9781.517, 9798.768), stdev = 17.129
[info]   CI (99.9%): [9715.559, 9847.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.019 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.034), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.282 ±(99.9%) 0.798 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.282, 0.494), stdev = 0.207
[info]   CI (99.9%): [≈ 0, 1.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.65% complete, ETA 00:02:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34046.534 ops/s
[info] # Warmup Iteration   2: 105275.408 ops/s
[info] # Warmup Iteration   3: 117051.626 ops/s
[info] # Warmup Iteration   4: 118974.162 ops/s
[info] # Warmup Iteration   5: 118735.670 ops/s
[info] Iteration   1: 119051.495 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 118739.300 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 117748.250 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 119032.355 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 118599.909 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   118634.262 ±(99.9%) 2046.457 ops/s [Average]
[info]   (min, avg, max) = (117748.250, 118634.262, 119051.495), stdev = 531.458
[info]   CI (99.9%): [116587.804, 120680.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.004 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.004, 0.005), stdev = 0.001
[info]   CI (99.9%): [0.002, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97.88% complete, ETA 00:02:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51487.209 ops/s
[info] # Warmup Iteration   2: 299079.276 ops/s
[info] # Warmup Iteration   3: 374648.967 ops/s
[info] # Warmup Iteration   4: 406634.672 ops/s
[info] # Warmup Iteration   5: 402031.270 ops/s
[info] Iteration   1: 409997.649 ops/s
[info]                  ·gc.alloc.rate:                   2339.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              8977.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7661.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.996 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 407406.662 ops/s
[info]                  ·gc.alloc.rate:                   2315.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              8946.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7712.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.939 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.629 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 408019.160 ops/s
[info]                  ·gc.alloc.rate:                   2356.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              9090.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2658.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10254.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.696 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 407299.009 ops/s
[info]                  ·gc.alloc.rate:               2326.006 MB/sec
[info]                  ·gc.alloc.rate.norm:          8988.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1990.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7691.436 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 408073.376 ops/s
[info]                  ·gc.alloc.rate:               2383.783 MB/sec
[info]                  ·gc.alloc.rate.norm:          9194.141 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2656.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10246.052 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   408159.171 ±(99.9%) 4179.817 ops/s [Average]
[info]   (min, avg, max) = (407299.009, 408159.171, 409997.649), stdev = 1085.485
[info]   CI (99.9%): [403979.354, 412338.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2344.308 ±(99.9%) 103.271 MB/sec [Average]
[info]   (min, avg, max) = (2315.973, 2344.308, 2383.783), stdev = 26.819
[info]   CI (99.9%): [2241.037, 2447.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9039.229 ±(99.9%) 393.061 B/op [Average]
[info]   (min, avg, max) = (8946.278, 9039.229, 9194.141), stdev = 102.077
[info]   CI (99.9%): [8646.168, 9432.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2259.665 ±(99.9%) 1398.764 MB/sec [Average]
[info]   (min, avg, max) = (1990.408, 2259.665, 2658.648), stdev = 363.254
[info]   CI (99.9%): [860.902, 3658.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8713.218 ±(99.9%) 5404.128 B/op [Average]
[info]   (min, avg, max) = (7661.212, 8713.218, 10254.890), stdev = 1403.435
[info]   CI (99.9%): [3309.090, 14117.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.054 ±(99.9%) 5.181 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.054, 3.292), stdev = 1.346
[info]   CI (99.9%): [≈ 0, 6.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.064 ±(99.9%) 19.985 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.064, 12.696), stdev = 5.190
[info]   CI (99.9%): [≈ 0, 24.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 10.000), stdev = 2.387
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.12% complete, ETA 00:02:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57630.181 ops/s
[info] # Warmup Iteration   2: 652119.591 ops/s
[info] # Warmup Iteration   3: 642660.470 ops/s
[info] # Warmup Iteration   4: 968417.386 ops/s
[info] # Warmup Iteration   5: 974929.838 ops/s
[info] Iteration   1: 975731.652 ops/s
[info]                  ·gc.alloc.rate:                   690.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              1113.193 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1067.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 971446.336 ops/s
[info]                  ·gc.alloc.rate:               685.541 MB/sec
[info]                  ·gc.alloc.rate.norm:          1110.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1072.244 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 955595.970 ops/s
[info]                  ·gc.alloc.rate:               677.496 MB/sec
[info]                  ·gc.alloc.rate.norm:          1115.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1091.159 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 973503.699 ops/s
[info]                  ·gc.alloc.rate:               691.484 MB/sec
[info]                  ·gc.alloc.rate.norm:          1117.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1071.052 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 972481.492 ops/s
[info]                  ·gc.alloc.rate:                   689.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              1116.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1074.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   969751.830 ±(99.9%) 31077.439 ops/s [Average]
[info]   (min, avg, max) = (955595.970, 969751.830, 975731.652), stdev = 8070.712
[info]   CI (99.9%): [938674.391, 1000829.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   686.892 ±(99.9%) 21.968 MB/sec [Average]
[info]   (min, avg, max) = (677.496, 686.892, 691.484), stdev = 5.705
[info]   CI (99.9%): [664.924, 708.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1114.708 ±(99.9%) 10.849 B/op [Average]
[info]   (min, avg, max) = (1110.599, 1114.708, 1117.667), stdev = 2.817
[info]   CI (99.9%): [1103.859, 1125.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   662.550 ±(99.9%) 3.115 MB/sec [Average]
[info]   (min, avg, max) = (661.817, 662.550, 663.815), stdev = 0.809
[info]   CI (99.9%): [659.436, 665.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1075.263 ±(99.9%) 35.516 B/op [Average]
[info]   (min, avg, max) = (1067.524, 1075.263, 1091.159), stdev = 9.223
[info]   CI (99.9%): [1039.747, 1110.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.071 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.034), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.35% complete, ETA 00:01:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 616180.021 ops/s
[info] # Warmup Iteration   2: 1890387.397 ops/s
[info] # Warmup Iteration   3: 1970782.733 ops/s
[info] # Warmup Iteration   4: 1977735.067 ops/s
[info] # Warmup Iteration   5: 1973341.538 ops/s
[info] Iteration   1: 1912751.590 ops/s
[info]                  ·gc.alloc.rate:               965.673 MB/sec
[info]                  ·gc.alloc.rate.norm:          794.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 550.044 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1945092.804 ops/s
[info]                  ·gc.alloc.rate:                   996.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              805.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1082.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1969206.833 ops/s
[info]                  ·gc.alloc.rate:                   988.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              789.387 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     535.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1963691.659 ops/s
[info]                  ·gc.alloc.rate:               982.593 MB/sec
[info]                  ·gc.alloc.rate.norm:          787.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 536.586 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1885668.372 ops/s
[info]                  ·gc.alloc.rate:                   968.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1118.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1935282.252 ±(99.9%) 136458.833 ops/s [Average]
[info]   (min, avg, max) = (1885668.372, 1935282.252, 1969206.833), stdev = 35437.926
[info]   CI (99.9%): [1798823.418, 2071741.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   980.233 ±(99.9%) 50.693 MB/sec [Average]
[info]   (min, avg, max) = (965.673, 980.233, 996.597), stdev = 13.165
[info]   CI (99.9%): [929.540, 1030.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   797.022 ±(99.9%) 36.623 B/op [Average]
[info]   (min, avg, max) = (787.293, 797.022, 808.048), stdev = 9.511
[info]   CI (99.9%): [760.399, 833.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.495 ±(99.9%) 1413.700 MB/sec [Average]
[info]   (min, avg, max) = (668.638, 937.495, 1340.344), stdev = 367.133
[info]   CI (99.9%): [≈ 0, 2351.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   764.657 ±(99.9%) 1182.753 B/op [Average]
[info]   (min, avg, max) = (535.086, 764.657, 1118.671), stdev = 307.157
[info]   CI (99.9%): [≈ 0, 1947.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.075 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.035), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98.59% complete, ETA 00:01:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9559.296 ops/s
[info] # Warmup Iteration   2: 94877.530 ops/s
[info] # Warmup Iteration   3: 169201.981 ops/s
[info] # Warmup Iteration   4: 191394.718 ops/s
[info] # Warmup Iteration   5: 190817.327 ops/s
[info] Iteration   1: 190054.332 ops/s
[info]                  ·gc.alloc.rate:                   4601.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              38110.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4030.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33374.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.517 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 189985.357 ops/s
[info]                  ·gc.alloc.rate:                   4695.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              38901.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4724.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39136.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.517 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 191868.523 ops/s
[info]                  ·gc.alloc.rate:                   4740.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              38887.560 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4742.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38898.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.512 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 190192.436 ops/s
[info]                  ·gc.alloc.rate:                   4702.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              38918.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4754.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39341.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.172 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 183339.380 ops/s
[info]                  ·gc.alloc.rate:                   4574.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              39271.847 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4066.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34905.451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.428 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   189088.005 ±(99.9%) 12732.882 ops/s [Average]
[info]   (min, avg, max) = (183339.380, 189088.005, 191868.523), stdev = 3306.689
[info]   CI (99.9%): [176355.124, 201820.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4663.265 ±(99.9%) 274.241 MB/sec [Average]
[info]   (min, avg, max) = (4574.645, 4663.265, 4740.886), stdev = 71.219
[info]   CI (99.9%): [4389.024, 4937.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   38817.966 ±(99.9%) 1643.956 B/op [Average]
[info]   (min, avg, max) = (38110.093, 38817.966, 39271.847), stdev = 426.930
[info]   CI (99.9%): [37174.010, 40461.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4463.331 ±(99.9%) 1461.103 MB/sec [Average]
[info]   (min, avg, max) = (4030.117, 4463.331, 4754.109), stdev = 379.444
[info]   CI (99.9%): [3002.228, 5924.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   37131.315 ±(99.9%) 10735.586 B/op [Average]
[info]   (min, avg, max) = (33374.990, 37131.315, 39341.651), stdev = 2787.998
[info]   CI (99.9%): [26395.729, 47866.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.052 ±(99.9%) 0.070 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.052, 0.062), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.429 ±(99.9%) 0.573 B/op [Average]
[info]   (min, avg, max) = (0.172, 0.429, 0.517), stdev = 0.149
[info]   CI (99.9%): [≈ 0, 1.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   60.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 12.000, 18.000), stdev = 4.301
[info]   CI (99.9%): [60.000, 60.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98.82% complete, ETA 00:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 107458.862 ops/s
[info] # Warmup Iteration   2: 391135.002 ops/s
[info] # Warmup Iteration   3: 463963.124 ops/s
[info] # Warmup Iteration   4: 462285.968 ops/s
[info] # Warmup Iteration   5: 477743.611 ops/s
[info] Iteration   1: 470600.647 ops/s
[info]                  ·gc.alloc.rate:                   1571.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              5256.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4469.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 475381.218 ops/s
[info]                  ·gc.alloc.rate:                   1572.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              5207.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6641.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.165 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 479549.678 ops/s
[info]                  ·gc.alloc.rate:                   1570.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              5153.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4386.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.869 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 477016.958 ops/s
[info]                  ·gc.alloc.rate:                   1560.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              5149.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4400.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 481048.267 ops/s
[info]                  ·gc.alloc.rate:                   1572.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.303 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4358.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   476719.354 ±(99.9%) 15649.442 ops/s [Average]
[info]   (min, avg, max) = (470600.647, 476719.354, 481048.267), stdev = 4064.110
[info]   CI (99.9%): [461069.912, 492368.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1569.657 ±(99.9%) 19.502 MB/sec [Average]
[info]   (min, avg, max) = (1560.776, 1569.657, 1572.953), stdev = 5.065
[info]   CI (99.9%): [1550.154, 1589.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5182.405 ±(99.9%) 188.222 B/op [Average]
[info]   (min, avg, max) = (5144.303, 5182.405, 5256.976), stdev = 48.881
[info]   CI (99.9%): [4994.183, 5370.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1469.006 ±(99.9%) 1156.173 MB/sec [Average]
[info]   (min, avg, max) = (1332.375, 1469.006, 2006.108), stdev = 300.254
[info]   CI (99.9%): [312.833, 2625.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4851.330 ±(99.9%) 3857.000 B/op [Average]
[info]   (min, avg, max) = (4358.887, 4851.330, 6641.666), stdev = 1001.651
[info]   CI (99.9%): [994.329, 8708.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.870 ±(99.9%) 5.566 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.870, 3.372), stdev = 1.445
[info]   CI (99.9%): [≈ 0, 6.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.875 ±(99.9%) 18.427 B/op [Average]
[info]   (min, avg, max) = (0.069, 2.875, 11.165), stdev = 4.785
[info]   CI (99.9%): [≈ 0, 21.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 11.000), stdev = 3.782
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.06% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 283330.342 ops/s
[info] # Warmup Iteration   2: 822714.058 ops/s
[info] # Warmup Iteration   3: 870489.634 ops/s
[info] # Warmup Iteration   4: 882362.873 ops/s
[info] # Warmup Iteration   5: 869564.716 ops/s
[info] Iteration   1: 876566.616 ops/s
[info]                  ·gc.alloc.rate:               418.026 MB/sec
[info]                  ·gc.alloc.rate.norm:          750.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1185.869 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 884262.282 ops/s
[info]                  ·gc.alloc.rate:               436.267 MB/sec
[info]                  ·gc.alloc.rate.norm:          776.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1175.574 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 913929.779 ops/s
[info]                  ·gc.alloc.rate:      422.754 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 912925.346 ops/s
[info]                  ·gc.alloc.rate:               443.848 MB/sec
[info]                  ·gc.alloc.rate.norm:          765.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1139.799 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 918363.499 ops/s
[info]                  ·gc.alloc.rate:               438.210 MB/sec
[info]                  ·gc.alloc.rate.norm:          750.866 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1133.063 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   901209.504 ±(99.9%) 74263.692 ops/s [Average]
[info]   (min, avg, max) = (876566.616, 901209.504, 918363.499), stdev = 19286.045
[info]   CI (99.9%): [826945.812, 975473.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   431.821 ±(99.9%) 42.083 MB/sec [Average]
[info]   (min, avg, max) = (418.026, 431.821, 443.848), stdev = 10.929
[info]   CI (99.9%): [389.738, 473.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   754.118 ±(99.9%) 70.034 B/op [Average]
[info]   (min, avg, max) = (728.001, 754.118, 776.315), stdev = 18.187
[info]   CI (99.9%): [684.085, 824.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   528.763 ±(99.9%) 1138.202 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 528.763, 661.262), stdev = 295.587
[info]   CI (99.9%): [≈ 0, 1666.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   926.861 ±(99.9%) 1997.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 926.861, 1185.869), stdev = 518.622
[info]   CI (99.9%): [≈ 0, 2923.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.29% complete, ETA 00:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 703886.562 ops/s
[info] # Warmup Iteration   2: 1418888.478 ops/s
[info] # Warmup Iteration   3: 1614756.978 ops/s
[info] # Warmup Iteration   4: 1618257.851 ops/s
[info] # Warmup Iteration   5: 1622779.521 ops/s
[info] Iteration   1: 1564097.480 ops/s
[info]                  ·gc.alloc.rate:               743.881 MB/sec
[info]                  ·gc.alloc.rate.norm:          748.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 671.982 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1613828.057 ops/s
[info]                  ·gc.alloc.rate:               768.568 MB/sec
[info]                  ·gc.alloc.rate.norm:          749.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 651.943 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1564135.195 ops/s
[info]                  ·gc.alloc.rate:                   759.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              764.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1345.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 1456335.096 ops/s
[info]                  ·gc.alloc.rate:                   694.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              749.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     722.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1623174.572 ops/s
[info]                  ·gc.alloc.rate:               767.225 MB/sec
[info]                  ·gc.alloc.rate.norm:          743.776 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 649.117 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1564314.080 ±(99.9%) 255246.659 ops/s [Average]
[info]   (min, avg, max) = (1456335.096, 1564314.080, 1623174.572), stdev = 66286.747
[info]   CI (99.9%): [1309067.421, 1819560.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   746.671 ±(99.9%) 119.106 MB/sec [Average]
[info]   (min, avg, max) = (694.201, 746.671, 768.568), stdev = 30.931
[info]   CI (99.9%): [627.565, 865.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   751.169 ±(99.9%) 29.534 B/op [Average]
[info]   (min, avg, max) = (743.776, 751.169, 764.169), stdev = 7.670
[info]   CI (99.9%): [721.635, 780.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   802.474 ±(99.9%) 1151.342 MB/sec [Average]
[info]   (min, avg, max) = (667.885, 802.474, 1337.340), stdev = 299.000
[info]   CI (99.9%): [≈ 0, 1953.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   808.280 ±(99.9%) 1162.181 B/op [Average]
[info]   (min, avg, max) = (649.117, 808.280, 1345.592), stdev = 301.815
[info]   CI (99.9%): [≈ 0, 1970.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.084 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.053), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 8.000), stdev = 2.074
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99.53% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 830726.422 ops/s
[info] # Warmup Iteration   2: 1599670.300 ops/s
[info] # Warmup Iteration   3: 1692507.977 ops/s
[info] # Warmup Iteration   4: 1556265.737 ops/s
[info] # Warmup Iteration   5: 1691770.717 ops/s
[info] Iteration   1: 1695473.754 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1693805.460 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1695371.983 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1693651.318 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1693050.318 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1694270.567 ±(99.9%) 4195.956 ops/s [Average]
[info]   (min, avg, max) = (1693050.318, 1694270.567, 1695473.754), stdev = 1089.676
[info]   CI (99.9%): [1690074.611, 1698466.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99.76% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38613.786 ops/s
[info] # Warmup Iteration   2: 555948.392 ops/s
[info] # Warmup Iteration   3: 547536.933 ops/s
[info] # Warmup Iteration   4: 586154.328 ops/s
[info] # Warmup Iteration   5: 593722.066 ops/s
[info] Iteration   1: 636313.117 ops/s
[info]                  ·gc.alloc.rate:               878.301 MB/sec
[info]                  ·gc.alloc.rate.norm:          2171.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1639.401 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 633429.100 ops/s
[info]                  ·gc.alloc.rate:                   871.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              2166.380 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1645.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 632177.380 ops/s
[info]                  ·gc.alloc.rate:               878.966 MB/sec
[info]                  ·gc.alloc.rate.norm:          2188.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1648.446 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 653836.086 ops/s
[info]                  ·gc.alloc.rate:               920.040 MB/sec
[info]                  ·gc.alloc.rate.norm:          2214.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1322.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3184.612 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     13.000 ms
[info] Iteration   5: 662093.180 ops/s
[info]                  ·gc.alloc.rate:                   918.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              2183.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1572.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.423 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   643569.772 ±(99.9%) 52154.294 ops/s [Average]
[info]   (min, avg, max) = (632177.380, 643569.772, 662093.180), stdev = 13544.304
[info]   CI (99.9%): [591415.479, 695724.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   893.535 ±(99.9%) 91.058 MB/sec [Average]
[info]   (min, avg, max) = (871.897, 893.535, 920.040), stdev = 23.648
[info]   CI (99.9%): [802.477, 984.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2184.867 ±(99.9%) 72.331 B/op [Average]
[info]   (min, avg, max) = (2166.380, 2184.867, 2214.677), stdev = 18.784
[info]   CI (99.9%): [2112.536, 2257.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   794.355 ±(99.9%) 1137.904 MB/sec [Average]
[info]   (min, avg, max) = (661.540, 794.355, 1322.979), stdev = 295.510
[info]   CI (99.9%): [≈ 0, 1932.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1938.025 ±(99.9%) 2686.080 B/op [Average]
[info]   (min, avg, max) = (1572.444, 1938.025, 3184.612), stdev = 697.566
[info]   CI (99.9%): [≈ 0, 4624.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.884 ±(99.9%) 7.537 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.884, 4.385), stdev = 1.957
[info]   CI (99.9%): [≈ 0, 8.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.101 ±(99.9%) 17.913 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.101, 10.423), stdev = 4.652
[info]   CI (99.9%): [≈ 0, 20.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.400, 13.000), stdev = 2.608
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # Run complete. Total time: 01:54:17
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                (size)   Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                      N/A  thrpt    5   1049156.534 ±   48817.997   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                       N/A  thrpt    5      2344.295 ±     140.595  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                  N/A  thrpt    5      3516.235 ±      57.090    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2263.246 ±    1397.049  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5      3394.352 ±    2074.210    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.996 ±       6.940  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         1.520 ±      10.629    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                            N/A  thrpt    5        17.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                             N/A  thrpt    5        32.000                    ms
[info] AdtBenchmark.readJacksonScala                                                               N/A  thrpt    5   1864309.726 ±   65330.723   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5      1203.414 ±      36.221  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5      1015.790 ±      39.156    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1066.560 ±    1405.966  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5       901.775 ±    1205.419    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.162 ±       1.221  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.136 ±       1.018    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                     N/A  thrpt    5         8.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                      N/A  thrpt    5        14.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                              N/A  thrpt    5   5327941.811 ±  337483.700   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5       361.840 ±      24.910  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5       106.913 ±      11.124    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       338.418 ±    1215.004  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5       100.588 ±     359.635    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.002 ±       0.013  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                    N/A  thrpt    5         3.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                     N/A  thrpt    5        12.000                    ms
[info] AdtBenchmark.readPlayJson                                                                   N/A  thrpt    5    609448.693 ±   36751.005   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                    N/A  thrpt    5      2842.609 ±     200.006  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                               N/A  thrpt    5      7338.884 ±     141.175    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2818.095 ±    1133.976  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5      7273.731 ±    2774.246    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.529 ±       4.464  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         1.353 ±      11.413    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                         N/A  thrpt    5        21.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                          N/A  thrpt    5        34.000                    ms
[info] AdtBenchmark.writeCirce                                                                     N/A  thrpt    5   1059135.390 ±   55769.409   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                      N/A  thrpt    5      3013.382 ±     241.675  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5      4477.327 ±     158.760    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      2914.810 ±    1419.668  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5      4329.222 ±    2016.160    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.975 ±       5.575  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         1.471 ±       8.465    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                           N/A  thrpt    5        22.000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                            N/A  thrpt    5        42.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                              N/A  thrpt    5   3085286.777 ±  178942.653   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5      1226.835 ±      73.925  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5       625.806 ±      27.900    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5      1200.382 ±    1150.729  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5       613.087 ±     597.135    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.312 ±       2.509  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.157 ±       1.264    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                    N/A  thrpt    5         9.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                     N/A  thrpt    5        19.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                             N/A  thrpt    5  18522674.255 ±  559233.865   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5       972.192 ±      48.100  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5        82.599 ±       3.242    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       936.739 ±    1410.322  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5        79.500 ±     118.557    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.017 ±       0.088  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0.001 ±       0.007    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                   N/A  thrpt    5         7.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                    N/A  thrpt    5        25.000                    ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                     N/A  thrpt    5  20019787.239 ± 1855582.884   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      N/A  thrpt    5         0.176 ±       1.511  MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 N/A  thrpt    5         0.014 ±       0.118    B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           N/A  thrpt    5           ≈ 0                counts
[info] AdtBenchmark.writePlayJson                                                                  N/A  thrpt    5   1112663.158 ±   58978.794   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      2567.742 ±     157.919  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5      3631.803 ±     103.340    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      2544.629 ±    1146.425  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      3597.154 ±    1543.536    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.520 ±       3.999  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.745 ±       5.741    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                        N/A  thrpt    5        19.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                         N/A  thrpt    5        32.000                    ms
[info] AnyRefsBenchmark.readCirce                                                                  N/A  thrpt    5   3924675.092 ±   46332.440   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      3601.844 ±      68.381  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5      1444.041 ±      41.027    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      3488.215 ±    1196.502  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      1398.710 ±     493.992    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.033 ±       0.044  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.013 ±       0.018    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        26.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        37.000                    ms
[info] AnyRefsBenchmark.readDslJsonJava                                                            N/A  thrpt    5  11870602.003 ± 1316418.958   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5      1486.236 ±     170.390  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5       197.033 ±       4.563    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      1463.310 ±    1134.631  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5       193.623 ±     136.249    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         1.108 ±       8.722  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.152 ±       1.205    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5        11.000                counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5        33.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                           N/A  thrpt    5   3762674.256 ±   63000.693   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5      2280.892 ±      51.943  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5       954.009 ±      23.246    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      2150.063 ±    1146.607  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5       899.656 ±     494.549    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.204 ±       1.380  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.085 ±       0.574    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5        16.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5        25.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                          N/A  thrpt    5  15440243.669 ±  261661.961   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5      2019.925 ±      72.901  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5       205.883 ±       5.763    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5      2009.869 ±      10.733  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5       204.863 ±       4.444    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.749 ±       4.376  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.077 ±       0.448    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5        15.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5        27.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                               N/A  thrpt    5   1845530.748 ±   13893.041   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      3040.827 ±      89.120  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5      2592.879 ±      66.566    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      2951.517 ±    1406.645  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5      2516.914 ±    1206.524    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.075 ±       0.601  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.064 ±       0.514    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        22.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5        33.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                                 N/A  thrpt    5   5128384.762 ±  246235.697   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                  N/A  thrpt    5      2585.267 ±     125.940  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                             N/A  thrpt    5       793.231 ±      17.996    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2532.634 ±    1142.511  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5       777.296 ±     357.096    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.137 ±       0.919  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.043 ±       0.289    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                       N/A  thrpt    5        19.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                        N/A  thrpt    5        28.000                    ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                           N/A  thrpt    5  24290135.536 ±  727261.668   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                            N/A  thrpt    5       765.052 ±      23.934  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       N/A  thrpt    5        49.569 ±       2.144    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       664.350 ±       1.759  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5        43.045 ±       1.368    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.005 ±       0.042  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                 N/A  thrpt    5         5.000                counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                  N/A  thrpt    5        21.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                          N/A  thrpt    5  10626996.106 ±  105077.059   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                           N/A  thrpt    5       338.626 ±      78.056  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      N/A  thrpt    5        50.143 ±      11.438    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       264.003 ±    1392.012  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5        39.035 ±     205.819    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                N/A  thrpt    5         2.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                 N/A  thrpt    5         3.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                         N/A  thrpt    5  34492702.156 ± 4031058.982   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          N/A  thrpt    5      1086.048 ±     114.569  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     N/A  thrpt    5        49.558 ±       2.512    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       937.031 ±    1411.878  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5        43.046 ±      68.378    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.006 ±       0.034  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5        ≈ 10⁻⁴                  B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                               N/A  thrpt    5         7.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                N/A  thrpt    5        28.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                 N/A  thrpt    5  38565077.159 ±  455143.253   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       N/A  thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                              N/A  thrpt    5   2559330.655 ±  119464.645   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                               N/A  thrpt    5      3458.764 ±     202.200  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          N/A  thrpt    5      2126.834 ±      61.634    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5      3362.471 ±      67.609  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5      2067.891 ±     105.770    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.058 ±       0.286  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.036 ±       0.174    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                    N/A  thrpt    5        25.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                     N/A  thrpt    5        38.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                    128  thrpt    5    376866.455 ±   12674.499   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                     128  thrpt    5      2237.686 ±      59.965  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                128  thrpt    5      9343.542 ±     275.583    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                            128  thrpt    5      2142.639 ±    1140.603  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      8954.706 ±    5086.104    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.212 ±       1.297  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.887 ±       5.394    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                          128  thrpt    5        16.000                counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                           128  thrpt    5        23.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                             128  thrpt    5    908662.472 ±   58240.519   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                              128  thrpt    5       777.829 ±      52.220  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5      1347.364 ±     116.902    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5       796.548 ±    1144.968  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5      1384.676 ±    2077.588    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                   128  thrpt    5         6.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                    128  thrpt    5        11.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                            128  thrpt    5   1693693.109 ±  112911.442   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                             128  thrpt    5      1158.340 ±      82.788  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5      1076.333 ±      48.118    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      1072.189 ±    1412.425  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5       997.005 ±    1320.413    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.783 ±       4.979  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.719 ±       4.588    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                  128  thrpt    5         8.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                   128  thrpt    5        29.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                 128  thrpt    5    218636.148 ±    6800.197   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                  128  thrpt    5      4041.375 ±     152.402  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                             128  thrpt    5     29086.290 ±     536.909    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5      3878.053 ±    1160.268  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     27901.267 ±    7754.640    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.331 ±       2.585  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         2.375 ±      18.513    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                       128  thrpt    5        29.000                counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                        128  thrpt    5        41.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                   128  thrpt    5    461701.035 ±   22810.594   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                    128  thrpt    5      1513.177 ±      45.178  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                               128  thrpt    5      5157.830 ±     120.886    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1468.631 ±    1153.546  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      5016.883 ±    4248.213    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.914 ±       7.470  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         3.185 ±      26.058    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                         128  thrpt    5        11.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                          128  thrpt    5        29.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                            128  thrpt    5   1018699.900 ±   20591.010   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                             128  thrpt    5       481.341 ±      33.944  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5       743.668 ±      56.621    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       396.697 ±    1394.451  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5       613.430 ±    2156.405    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.013 ±       0.111    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                  128  thrpt    5         3.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                   128  thrpt    5         5.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                           128  thrpt    5   2748988.910 ±  186700.088   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                            128  thrpt    5      1309.921 ±      96.859  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5       749.891 ±       5.748    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1337.590 ±       4.207  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5       765.944 ±      53.706    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.841 ±       7.180  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         0.478 ±       4.081    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                 128  thrpt    5        10.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                  128  thrpt    5        28.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                   128  thrpt    5   2803519.602 ±   10278.538   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    128  thrpt    5         0.015 ±       0.125  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               128  thrpt    5         0.008 ±       0.070    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                         128  thrpt    5           ≈ 0                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                128  thrpt    5    700348.306 ±   14792.180   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                 128  thrpt    5       979.693 ±       5.768  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                            128  thrpt    5      2201.499 ±      45.499    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5       930.923 ±    1401.437  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      2094.180 ±    3181.291    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.777 ±       6.690  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         1.737 ±      14.955    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                      128  thrpt    5         7.000                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                       128  thrpt    5        33.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                       128  thrpt    5     21407.531 ±    3891.219   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      1839.092 ±     501.045  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5    135801.692 ±   62418.573    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1813.007 ±    1118.423  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    133917.342 ±   94795.180    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         2.931 ±      13.638  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5       216.130 ±     997.838    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                             128  thrpt    5        14.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                              128  thrpt    5        88.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                128  thrpt    5     42065.595 ±    2864.167   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1148.870 ±      49.264  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5     42985.874 ±    1186.236    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space               128  thrpt    5         0.004 ±       0.034  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm          128  thrpt    5         0.152 ±       1.305    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.Metaspace                            128  thrpt    5         0.011 ±       0.097  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.Metaspace.norm                       128  thrpt    5         0.434 ±       3.736    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1063.977 ±    1409.976  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     39931.651 ±   54274.019    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Old_Gen                           128  thrpt    5         0.482 ±       4.152  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Old_Gen.norm                      128  thrpt    5        18.621 ±     160.336    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         1.614 ±       8.912  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5        61.510 ±     341.981    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5        10.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        71.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                               128  thrpt    5     51021.656 ±    3052.923   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5       732.800 ±     259.235  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5     22621.995 ±    9003.045    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       775.270 ±    1106.525  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     23990.780 ±   35590.433    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.050 ±       0.387  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         1.569 ±      12.162    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         6.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        30.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                    128  thrpt    5     38972.864 ±     987.189   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1695.529 ±      72.460  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     68467.040 ±    1514.323    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1737.686 ±    1408.706  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     70136.171 ±   56117.852    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.241 ±       1.946  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         9.749 ±      78.576    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        13.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        24.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                      128  thrpt    5     36026.736 ±    1396.400   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                       128  thrpt    5      2369.961 ±      43.953  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                  128  thrpt    5    103534.371 ±    3060.253    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      2253.964 ±    1399.709  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     98572.099 ±   64431.228    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.883 ±       4.979  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        38.542 ±     217.970    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                            128  thrpt    5        17.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                             128  thrpt    5        50.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                               128  thrpt    5     34677.602 ±    5652.292   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      1941.600 ±      84.388  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5     88280.371 ±   19102.088    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1995.055 ±      13.207  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     90673.890 ±   15384.914    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         2.001 ±      10.975  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5        92.218 ±     496.657    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5        15.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        31.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                              128  thrpt    5     40110.411 ±    4822.437   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      2100.744 ±      56.579  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5     82501.189 ±   12124.288    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1975.954 ±      15.226  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5     77592.522 ±   10111.020    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         1.624 ±       8.248  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5        65.317 ±     333.482    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5        15.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        37.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5     40707.113 ±    2833.648   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5      2050.901 ±     215.752  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5     79326.954 ±   11744.204    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              128  thrpt    5      1973.443 ±      14.518  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         128  thrpt    5     76320.192 ±    5482.295    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          128  thrpt    5         1.553 ±       7.973  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5        60.865 ±     313.181    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5        15.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                             128  thrpt    5        40.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                   128  thrpt    5      9619.603 ±     160.164   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      1305.566 ±      49.649  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5    213508.645 ±    7974.004    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      1198.959 ±    1144.229  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    196078.231 ±  187192.723    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.980 ±       6.453  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5       160.119 ±    1054.621    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                         128  thrpt    5         9.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        35.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                           128  thrpt    5     22237.595 ±    2305.302   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1957.827 ±     116.716  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5    138683.617 ±   22541.263    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1922.654 ±      22.780  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    136150.708 ±   14646.855    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         3.008 ±      15.357  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       216.688 ±    1111.789    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                 128  thrpt    5        15.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                  128  thrpt    5       105.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                    128  thrpt    5     50190.384 ±    2920.865   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1428.469 ±      68.928  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     44797.549 ±    2628.475    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1446.203 ±    1150.089  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     45313.825 ±   34864.515    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         1.655 ±      14.065  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        52.947 ±     450.023    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5        11.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        39.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                   128  thrpt    5     64990.187 ±    1569.362   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       746.979 ±      41.399  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5     18089.384 ±    1404.260    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       763.980 ±    1089.557  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     18531.144 ±   26990.323    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.100 ±       0.864    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5         6.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        10.000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                        128  thrpt    5     42307.190 ±    1306.642   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      2423.743 ±      87.058  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     90151.775 ±    1684.269    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      2410.145 ±    1416.188  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     89622.655 ±   51899.617    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.225 ±       1.538  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         8.410 ±      57.573    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        18.000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        29.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                   128  thrpt    5     43839.661 ±    1796.596   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1899.506 ±      84.982  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5     68178.330 ±     654.428    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1876.845 ±    1159.660  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     67314.800 ±   40341.703    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.146 ±       0.905  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         5.271 ±      32.888    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5        14.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        21.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                  128  thrpt    5     55687.526 ±    3320.941   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5      1743.636 ±      68.494  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     49274.517 ±    1872.285    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1736.701 ±    1408.970  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     49118.682 ±   40684.429    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.874 ±       4.970  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5        25.098 ±     143.252    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5        13.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        29.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5     57065.189 ±    3593.404   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5      1687.849 ±      79.829  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5     46551.924 ±    1383.683    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                  128  thrpt    5      1599.354 ±    1405.753  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm             128  thrpt    5     44200.566 ±   40768.597    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space              128  thrpt    5         0.823 ±       6.595  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm         128  thrpt    5        23.318 ±     187.328    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5        12.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                 128  thrpt    5        26.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                          128  thrpt    5    440137.674 ±    9257.338   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      2392.479 ±      85.570  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5      8553.753 ±     181.324    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2267.118 ±    1405.431  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      8105.282 ±    5009.965    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.785 ±       5.007  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         2.814 ±      17.935    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                128  thrpt    5        17.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                 128  thrpt    5        30.000                    ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                    128  thrpt    5   1879653.863 ±  146443.475   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                     128  thrpt    5       605.770 ±      38.743  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                128  thrpt    5       507.261 ±      26.416    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                            128  thrpt    5       531.345 ±    1143.761  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       447.954 ±     964.736    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.009 ±       0.079  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.008 ±       0.068    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                          128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                           128  thrpt    5        14.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                   128  thrpt    5    826478.443 ±   12259.304   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5       310.383 ±      33.570  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5       591.066 ±      67.504    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       264.479 ±    1394.519  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       504.485 ±    2660.009    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         2.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5        10.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                  128  thrpt    5   2206212.106 ±   22209.443   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       435.550 ±      29.186  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5       310.699 ±      23.816    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       400.773 ±    1408.773  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       286.404 ±    1006.753    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.798 ±       6.826  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.570 ±       4.874    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         9.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                       128  thrpt    5    178001.708 ±    3270.140   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      4686.687 ±      50.685  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     41435.791 ±     458.577    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      4594.610 ±    1158.002  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     40629.712 ±   10762.802    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.033 ±       0.091  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.294 ±       0.808    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        34.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                              128  thrpt    5        47.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                         128  thrpt    5    486045.160 ±   12327.481   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      1593.739 ±      71.207  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5      5159.364 ±     194.160    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1600.414 ±    1405.399  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      5181.555 ±    4561.057    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.918 ±       6.368  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         2.972 ±      20.601    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                               128  thrpt    5        12.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                128  thrpt    5        31.000                    ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                   128  thrpt    5   2658012.871 ±  156976.493   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                    128  thrpt    5      1262.874 ±      65.304  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                               128  thrpt    5       747.671 ±      17.740    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                           128  thrpt    5      1199.065 ±    1149.335  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       710.793 ±     692.199    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.940 ±       7.840  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.570 ±       4.756    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                         128  thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                          128  thrpt    5        27.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                  128  thrpt    5   1184170.454 ±   74637.569   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5       560.685 ±      26.896  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5       745.267 ±      42.793    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       529.017 ±    1138.750  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       704.562 ±    1517.566    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.016 ±       0.142    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         6.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                 128  thrpt    5   3006771.229 ±  142521.841   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1432.112 ±      85.146  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       749.425 ±      14.632    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1339.310 ±       7.161  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       700.962 ±      32.794    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.804 ±       6.746  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.417 ±       3.493    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5        10.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5        25.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5   3231708.895 ±   18017.943   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5         0.689 ±       5.928  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5         0.336 ±       2.894    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                      128  thrpt    5   1030845.679 ±   37044.775   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      1106.627 ±      38.950  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5      1689.446 ±      83.908    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1060.129 ±    1396.918  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1621.800 ±    2173.873    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.949 ±       7.223  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1.451 ±      11.058    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         8.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                             128  thrpt    5        45.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                             128  thrpt    5    232886.069 ±    2268.368   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      2903.109 ±      68.050  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     19616.477 ±     381.969    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      2807.129 ±    1124.431  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     18971.672 ±    7787.833    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.100 ±       0.729  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.678 ±       4.947    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                   128  thrpt    5        21.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                    128  thrpt    5        28.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                      128  thrpt    5    423856.918 ±    2146.557   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       293.737 ±      26.605  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      1090.614 ±     101.513    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       264.625 ±    1395.289  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       983.300 ±    5184.657    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.015 ±       0.133    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         2.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         4.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                     128  thrpt    5   1318916.780 ±   15280.435   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       260.573 ±      29.911  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5       310.927 ±      39.422    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       204.669 ±    1079.159  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       244.958 ±    1291.595    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.005 ±       0.043    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         2.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         8.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                          128  thrpt    5    129977.441 ±   10856.169   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      4289.544 ±     344.632  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     51935.613 ±    2252.056    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      4195.001 ±    1152.376  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     50810.514 ±   14781.225    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.263 ±       1.994  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         3.256 ±      24.801    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        31.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        43.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                            128  thrpt    5    346657.549 ±    3484.409   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1886.420 ±      72.915  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5      8563.702 ±     259.526    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1733.886 ±    1400.915  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      7868.056 ±    6289.179    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.885 ±       5.212  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         4.022 ±      23.699    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        13.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        26.000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                     128  thrpt    5   2306469.907 ±  133022.334   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       635.810 ±      52.570  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       433.789 ±      24.754    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       529.492 ±    1139.773  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       362.155 ±     779.952    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.009 ±       0.050    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         4.000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         6.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                    128  thrpt    5   3339562.511 ±  101240.264   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       928.877 ±      40.004  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       437.711 ±      16.662    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       937.417 ±    1411.299  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       442.225 ±     671.799    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.014 ±       0.051  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.007 ±       0.024    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         7.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        24.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   3644857.843 ±   27424.631   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                         128  thrpt    5     56782.955 ±    3213.129   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1994.770 ±      70.254  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     55292.957 ±    1393.892    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1980.472 ±      19.572  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     54900.694 ±    2591.996    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.013 ±       3.753  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        27.915 ±     102.975    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        15.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        55.000                    ms
[info] ArrayOfCharsBenchmark.readCirce                                                             128  thrpt    5    304135.379 ±    9155.934   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      3266.592 ±      74.229  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     16903.542 ±     511.458    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      3213.512 ±    1129.629  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     16634.360 ±    6108.317    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.071 ±       0.352  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.364 ±       1.807    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        24.000                counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        33.000                    ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                      128  thrpt    5    701727.244 ±   14866.449   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1930.592 ±      63.400  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      4329.918 ±     135.332    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1870.700 ±    1149.181  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      4196.963 ±    2609.535    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.322 ±       2.596  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.722 ±       5.817    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5        14.000                counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        24.000                    ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                     128  thrpt    5   2869887.678 ±  225319.425   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1047.325 ±      69.463  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5       574.625 ±      76.499    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1071.756 ±    1412.791  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       586.734 ±     761.077    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.590 ±       4.987  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.318 ±       2.688    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         8.000                counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5        29.000                    ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                          128  thrpt    5    132985.076 ±    5585.800   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      4297.939 ±     137.429  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     50865.161 ±    1321.512    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      4048.486 ±      86.710  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     47916.983 ±    2734.674    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.042 ±       0.057  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.493 ±       0.672    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        30.000                counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        45.000                    ms
[info] ArrayOfCharsBenchmark.writeCirce                                                            128  thrpt    5    325684.092 ±   10333.596   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      2576.203 ±     130.841  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     12445.790 ±     287.993    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2533.320 ±    1137.265  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     12245.407 ±    5702.672    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.050 ±       0.298  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.242 ±       1.448    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        19.000                counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        29.000                    ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                     128  thrpt    5   2127967.314 ±   64424.132   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       747.769 ±      40.620  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       553.028 ±      22.589    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       798.938 ±    1146.637  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       590.557 ±     841.398    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.007 ±       0.048  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.005 ±       0.035    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         6.000                counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        24.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                    128  thrpt    5   2779530.472 ±  113984.997   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       974.983 ±      61.447  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       551.986 ±      36.144    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       937.731 ±    1414.296  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       531.432 ±     808.228    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.007 ±       0.048  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.004 ±       0.027    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         7.000                counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        26.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   2942466.226 ±   30808.437   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5         4.634 ±      39.895  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         2.489 ±      21.429    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                         128  thrpt    5    776707.696 ±   11966.377   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      4751.379 ±     115.448  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5      9626.885 ±      91.370    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      4607.961 ±    1161.563  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      9334.706 ±    2235.193    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.037 ±       0.036  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.076 ±       0.073    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        34.000                counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        50.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                           128  thrpt    5     29472.759 ±    2308.409   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1804.684 ±     125.143  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5     96400.749 ±   11531.329    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1731.111 ±    1404.373  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     92415.514 ±   74328.156    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         1.101 ±       7.126  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        59.638 ±     385.485    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                 128  thrpt    5        13.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                  128  thrpt    5        32.000                    ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                     128  thrpt    5     99491.504 ±    7230.495   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                      128  thrpt    5       860.595 ±     248.165  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                 128  thrpt    5     13632.111 ±    4946.709    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                             128  thrpt    5       793.832 ±    1144.141  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     12549.464 ±   17904.674    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.355 ±       2.999  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         5.590 ±      47.198    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                           128  thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                            128  thrpt    5        32.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                    128  thrpt    5     78035.005 ±   12760.511   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1464.496 ±     703.368  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     29517.094 ±   13144.303    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space                   128  thrpt    5         0.002 ±       0.017  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm              128  thrpt    5         0.040 ±       0.342    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.Metaspace                                128  thrpt    5         0.006 ±       0.049  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.Metaspace.norm                           128  thrpt    5         0.113 ±       0.970    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1487.722 ±    1098.917  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     29862.423 ±   16984.402    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Old_Gen                               128  thrpt    5         2.803 ±      24.138  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Old_Gen.norm                          128  thrpt    5        55.503 ±     477.896    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         5.794 ±      25.809  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5       116.727 ±     511.365    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5        13.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5       135.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                   128  thrpt    5    140244.981 ±    3578.107   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       854.468 ±      22.082  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      9588.451 ±     224.829    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       862.135 ±    1282.810  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      9694.123 ±   14671.934    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         2.822 ±      24.218  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        31.865 ±     273.448    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        82.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                        128  thrpt    5     51306.676 ±    1843.491   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      2158.721 ±      42.512  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     66220.360 ±    1331.219    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      2130.080 ±    1145.712  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     65411.261 ±   37899.945    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.029 ±       0.134  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.897 ±       4.118    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        16.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        24.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                          128  thrpt    5     43739.961 ±    5125.718   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5       870.924 ±     395.973  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5     31426.341 ±   17304.663    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5       797.315 ±    1144.496  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     28755.803 ±   42233.359    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.753 ±       4.042  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        26.767 ±     143.052    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                128  thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        43.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                   128  thrpt    5     44148.933 ±    2977.297   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5       558.853 ±     236.585  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5     19931.553 ±    8680.708    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       531.077 ±    1143.184  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     18984.465 ±   40893.925    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.349 ±       3.005  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        12.161 ±     104.707    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5         4.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        20.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                  128  thrpt    5     48819.073 ±    4184.586   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       523.953 ±     139.760  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     16917.845 ±    6014.294    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       532.116 ±    1145.421  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     17243.817 ±   37154.173    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.336 ±       2.851  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5        10.747 ±      91.268    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         4.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        18.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5     49944.160 ±    2879.572   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5       526.457 ±     163.497  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5     16578.915 ±    4607.972    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                  128  thrpt    5       534.081 ±    1149.651  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm             128  thrpt    5     16745.033 ±   36054.033    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space              128  thrpt    5         0.167 ±       1.441  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm         128  thrpt    5         5.186 ±      44.654    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5         4.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                 128  thrpt    5        20.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                         128  thrpt    5     17211.082 ±    1493.200   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      1418.319 ±     618.588  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5    129967.459 ±   66144.408    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1460.578 ±    1137.889  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    133723.648 ±  107947.776    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         2.683 ±       9.359  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       247.934 ±     867.349    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                               128  thrpt    5        11.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                128  thrpt    5        43.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                  128  thrpt    5     16689.862 ±    2856.060   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1257.917 ±     717.235  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5    118903.594 ±   75499.632    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1248.224 ±     218.864  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5    117776.720 ±   21822.994    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         2.885 ±      16.218  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5       268.940 ±    1516.995    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5        10.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5       111.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                 128  thrpt    5    156680.389 ±    7411.688   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       416.201 ±      44.921  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      4179.720 ±     305.755    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       398.358 ±    1400.286  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      3987.237 ±   14018.541    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.082 ±       0.709    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5         3.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        12.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                      128  thrpt    5     15242.717 ±    1134.337   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      1521.511 ±     448.402  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5    157183.673 ±   51183.802    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1449.945 ±    1134.960  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5    149766.462 ±  118781.972    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         1.308 ±       5.354  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       133.375 ±     538.007    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        11.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        23.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                        128  thrpt    5     71220.531 ±    2450.119   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5      1655.608 ±      73.977  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5     36583.564 ±    1246.056    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1598.669 ±    1417.337  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     35356.522 ±   32001.680    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.021 ±       0.057  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.460 ±       1.245    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                              128  thrpt    5        12.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                               128  thrpt    5        18.000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                 128  thrpt    5    106415.090 ±    6197.772   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1414.857 ±      85.418  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     20921.928 ±     398.226    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1459.836 ±    1140.890  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     21608.013 ±   17427.328    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.188 ±       1.376  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         2.717 ±      19.836    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5        11.000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5        16.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                128  thrpt    5    273970.677 ±    4465.399   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       445.870 ±      36.675  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      2561.229 ±     231.346    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       369.343 ±    1321.158  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      2125.912 ±    7611.311    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.002 ±       0.013  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.009 ±       0.077    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         3.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        11.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    286942.810 ±     674.332   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5         0.170 ±       1.462  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5         0.934 ±       8.028    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                     128  thrpt    5     99787.261 ±   13133.592   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1770.040 ±     459.852  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     27992.850 ±   11296.132    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1790.083 ±    1585.342  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     28397.750 ±   28587.353    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         6.605 ±      27.748  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       102.073 ±     427.784    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        15.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                            128  thrpt    5       162.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                             128  thrpt    5    131565.936 ±    2811.415   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1650.869 ±      75.260  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     19747.297 ±     615.834    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1587.768 ±    1391.586  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     18982.949 ±   16413.978    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         1.554 ±       7.914  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        18.547 ±      94.549    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        12.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        42.000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                      128  thrpt    5    160644.243 ±    5057.842   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       965.125 ±      58.608  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      9452.549 ±     335.294    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       914.456 ±    1373.652  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      8942.284 ±   13246.592    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.082 ±       0.709    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         7.000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        14.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                     128  thrpt    5    227984.675 ±    8838.486   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       156.992 ±      47.111  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1084.477 ±     370.357    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       204.664 ±    1079.136  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1424.464 ±    7511.373    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.339 ±       2.919  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         2.383 ±      20.515    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         2.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         8.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                          128  thrpt    5     85641.188 ±    3842.001   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      2697.021 ±     133.656  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     49559.827 ±     971.496    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2677.835 ±      41.209  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     49211.631 ±    1868.154    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.175 ±       1.071  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         3.207 ±      19.548    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        20.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        32.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                            128  thrpt    5    243332.250 ±   11110.907   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1577.583 ±      91.631  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     10202.498 ±     396.490    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1465.611 ±    1141.253  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      9473.909 ±    7225.321    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.881 ±       5.453  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         5.731 ±      35.606    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        11.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        29.000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                     128  thrpt    5    768304.954 ±   40235.596   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       609.821 ±      34.905  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      1248.992 ±      31.271    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       664.672 ±       2.874  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1361.539 ±      74.242    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.017 ±       0.089    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         5.000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        24.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                    128  thrpt    5    697393.681 ±    9092.351   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       551.675 ±      38.312  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1244.827 ±      87.954    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       535.259 ±    1152.187  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1208.215 ±    2600.844    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.038 ±       0.151    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        13.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5    682878.617 ±   25822.849   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5         0.178 ±       0.940  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         0.414 ±       2.182    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                         128  thrpt    5    623833.362 ±   18166.142   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1539.878 ±      65.629  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5      3884.877 ±     104.336    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1469.267 ±    1152.176  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      3706.885 ±    2907.262    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.394 ±       3.209  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.993 ±       8.096    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        11.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        22.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                            128  thrpt    5     43822.100 ±    2849.003   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      2027.372 ±     100.297  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5     72813.512 ±    1588.032    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1974.180 ±      26.154  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     70913.113 ±    4168.758    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.948 ±       6.661  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        34.319 ±     241.098    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                  128  thrpt    5        15.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                   128  thrpt    5        28.000                    ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                      128  thrpt    5    307893.779 ±    5794.859   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       327.167 ±      37.517  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5      1672.377 ±     212.935    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       264.768 ±    1396.045  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1358.523 ±    7163.199    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.007 ±       0.064  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.038 ±       0.327    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                            128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                             128  thrpt    5         8.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                     128  thrpt    5    122253.833 ±   10320.545   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1131.080 ±      60.512  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     14562.851 ±     701.557    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space                    128  thrpt    5         0.003 ±       0.024  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm               128  thrpt    5         0.037 ±       0.314    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.Metaspace                                 128  thrpt    5         0.008 ±       0.065  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.Metaspace.norm                            128  thrpt    5         0.101 ±       0.873    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1067.617 ±    1411.953  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     13800.570 ±   18866.595    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         1.023 ±       8.733  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        13.662 ±     116.706    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5        10.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        66.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                    128  thrpt    5    552797.345 ±   31033.645   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       371.444 ±      32.419  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1057.560 ±     122.096    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       369.781 ±    1323.064  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1059.766 ±    3799.602    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.011 ±       0.060  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.032 ±       0.175    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        13.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                         128  thrpt    5     54648.649 ±    1054.506   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      2340.951 ±      66.270  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     67440.347 ±    2001.927    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2393.842 ±    1408.245  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     68960.068 ±   40458.391    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.721 ±       5.132  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        20.913 ±     148.889    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        18.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        32.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                           128  thrpt    5     94070.518 ±    4518.780   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5       750.850 ±      46.652  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5     12560.917 ±     208.828    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5       667.385 ±       1.026  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     11166.423 ±     540.401    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.025 ±       0.094  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.415 ±       1.557    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        21.000                    ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                     128  thrpt    5    121603.609 ±    3508.276   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                      128  thrpt    5       465.263 ±      33.647  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                 128  thrpt    5      6021.406 ±     459.979    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                             128  thrpt    5       530.572 ±    1142.096  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      6874.421 ±   14799.368    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.008 ±       0.053  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.107 ±       0.681    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                           128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                            128  thrpt    5        14.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                    128  thrpt    5    106936.635 ±    1024.897   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       404.528 ±      27.914  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5      5953.686 ±     460.345    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       399.130 ±    1403.000  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      5883.217 ±   20680.340    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.006 ±       0.036  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.092 ±       0.528    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        14.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                   128  thrpt    5    124592.504 ±    5916.224   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       472.585 ±      53.958  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      5969.291 ±     525.519    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       400.972 ±    1409.474  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      5047.992 ±   17744.419    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.052 ±       0.451    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        12.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    123141.723 ±    4934.861   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5       369.317 ±      25.442  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5      4720.102 ±     357.501    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                   128  thrpt    5       369.337 ±    1321.210  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm              128  thrpt    5      4742.283 ±   16990.576    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         0.106 ±       0.913    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                  128  thrpt    5        12.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                          128  thrpt    5     13466.186 ±    1482.218   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      2183.446 ±     760.208  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5    255405.314 ±   98620.326    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2186.966 ±    1344.450  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    256271.000 ±  177114.114    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         2.949 ±      20.542  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       335.908 ±    2325.216    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                128  thrpt    5        17.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                 128  thrpt    5        96.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                   128  thrpt    5     13408.692 ±    2248.820   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5      2000.960 ±     272.389  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5    235403.424 ±   67145.438    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1995.333 ±      37.494  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    234570.203 ±   44482.076    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.314 ±       2.357  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        39.125 ±     296.852    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5        15.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5        27.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                  128  thrpt    5    223910.698 ±   29106.191   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       606.418 ±      55.435  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      4266.491 ±     741.000    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       532.036 ±    1145.250  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      3748.929 ±    8094.188    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.002 ±       0.018  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.014 ±       0.123    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         4.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5        16.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                       128  thrpt    5      6957.717 ±     354.380   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      1778.649 ±     119.851  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5    402308.674 ±    7884.728    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1732.599 ±    1399.879  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    391471.143 ±  306850.259    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.585 ±       4.507  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5       133.735 ±    1032.010    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        13.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                              128  thrpt    5        26.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                         128  thrpt    5     35014.076 ±    4760.224   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      2198.106 ±     672.217  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5     99072.909 ±   43474.271    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2037.573 ±    1059.778  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     91764.118 ±   53073.392    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         4.369 ±      15.510  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       199.848 ±     713.535    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                               128  thrpt    5        16.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                128  thrpt    5       125.000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                  128  thrpt    5     43300.948 ±    9032.962   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5      2141.109 ±     161.276  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5     77994.560 ±   19859.696    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      2065.702 ±    1108.469  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     75481.681 ±   52545.483    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         2.333 ±       7.417  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5        85.322 ±     262.848    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5        16.000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5        94.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                 128  thrpt    5    320645.921 ±    8423.293   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       729.385 ±      23.020  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      3579.902 ±      74.597    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       669.376 ±       1.159  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      3285.487 ±      89.516    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.004 ±       0.023  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.020 ±       0.113    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5         5.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5        17.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5    351787.119 ±   15951.596   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5         0.034 ±       0.288  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5         0.150 ±       1.281    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                      128  thrpt    5     40775.965 ±   21902.666   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      2511.194 ±     793.571  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     99233.281 ±   86571.279    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      2465.808 ±     990.655  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     97017.403 ±   76460.082    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5        15.568 ±      56.928  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       624.860 ±    2256.928    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                            128  thrpt    5        21.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                             128  thrpt    5       190.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                              128  thrpt    5    181568.615 ±    1371.135   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      2546.175 ±      83.934  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     22069.290 ±     708.418    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2400.800 ±    1399.617  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     20810.032 ±   12154.433    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.561 ±       3.730  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         4.859 ±      32.264    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                    128  thrpt    5        18.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                     128  thrpt    5        29.000                    ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                        128  thrpt    5    562695.408 ±    6124.364   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                         128  thrpt    5       600.681 ±      36.128  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                    128  thrpt    5      1680.043 ±     105.788    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                128  thrpt    5       531.349 ±    1143.770  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1486.638 ±    3200.185    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.001 ±       0.009  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.003 ±       0.025    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                              128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                               128  thrpt    5        16.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                       128  thrpt    5    521606.220 ±   25948.955   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5       510.095 ±      38.470  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1539.018 ±     105.070    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       529.767 ±    1140.365  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1596.413 ±    3437.642    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.038 ±       0.218    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5        20.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                      128  thrpt    5    664086.634 ±   66810.187   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       460.370 ±      98.310  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      1092.937 ±     350.384    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       503.532 ±    1115.105  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1198.880 ±    2666.520    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.003 ±       0.022  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.006 ±       0.053    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5        16.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                           128  thrpt    5    114529.132 ±    2645.757   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      3922.682 ±     148.395  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     53901.530 ±    1801.738    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      3772.440 ±    1445.368  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     51853.611 ±   20595.754    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.058 ±       0.154  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.803 ±       2.149    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        28.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        42.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                             128  thrpt    5    245270.484 ±   10573.983   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1747.018 ±      92.329  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     11209.950 ±     178.276    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1733.942 ±    1402.613  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     11113.808 ±    8720.462    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.906 ±       7.404  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         5.819 ±      47.550    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        13.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                    128  thrpt    5        26.000                    ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                       128  thrpt    5   1242765.740 ±   47972.384   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                        128  thrpt    5       695.372 ±      18.156  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                   128  thrpt    5       880.652 ±      15.052    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                               128  thrpt    5       664.631 ±       1.619  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       841.764 ±      32.761    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                             128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                              128  thrpt    5        19.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                      128  thrpt    5   1234090.942 ±   27243.143   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5       695.509 ±      21.009  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5       886.958 ±      29.432    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       665.625 ±       2.050  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       848.856 ±      18.554    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.027 ±       0.152  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.035 ±       0.194    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5        20.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                     128  thrpt    5   1138945.672 ±   12122.894   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       639.785 ±      14.506  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5       884.079 ±      22.174    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       668.618 ±       1.702  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       923.921 ±       9.815    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.023 ±       0.145    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5        17.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1145390.543 ±   60969.317   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                          128  thrpt    5     40188.774 ±    1350.321   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1931.531 ±      62.508  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     75642.125 ±    2235.431    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1853.785 ±    1139.275  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     72648.323 ±   45807.014    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         1.654 ±       7.960  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        64.839 ±     312.003    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        14.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5        39.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                         128  thrpt    5    145176.907 ±    4524.229   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      1822.313 ±      73.218  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5     19753.832 ±     527.109    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1865.968 ±    1148.619  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     20223.635 ±   12365.042    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.079 ±       0.174  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.859 ±       1.897    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                               128  thrpt    5        14.000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                128  thrpt    5        23.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                  128  thrpt    5    207984.981 ±    1715.255   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1245.832 ±      36.825  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5      9426.526 ±     318.873    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1195.761 ±    1146.538  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      9049.134 ±    8695.032    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.092 ±       0.426  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.693 ±       3.220    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5         9.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5        15.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                 128  thrpt    5    254104.056 ±    4740.061   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1358.959 ±      35.919  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      8415.556 ±     311.478    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1334.927 ±       9.040  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      8266.655 ±     159.750    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.208 ±       1.492  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         1.284 ±       9.193    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5        10.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        19.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                      128  thrpt    5    104117.465 ±    5948.678   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      3456.564 ±     278.023  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     52238.838 ±    1398.482    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      3364.915 ±      64.683  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     50864.389 ±    2479.343    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.075 ±       0.292  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1.133 ±       4.401    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        25.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        38.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                        128  thrpt    5    237407.872 ±    6287.998   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5      1543.068 ±      83.360  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5     10228.097 ±     442.060    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1598.858 ±    1401.137  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     10597.848 ±    9279.548    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.896 ±       5.177  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         5.908 ±      34.108    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                              128  thrpt    5        12.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                               128  thrpt    5        31.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                 128  thrpt    5    712948.479 ±   14447.494   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       562.987 ±      47.372  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5      1242.669 ±      80.491    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       529.561 ±    1139.925  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      1166.417 ±    2510.831    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.028 ±       0.097    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         4.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5         7.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                128  thrpt    5    673682.915 ±   88667.894   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       537.116 ±      73.525  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      1254.999 ±     102.244    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       534.773 ±    1151.139  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      1255.854 ±    2711.155    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.006 ±       0.049  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.013 ±       0.114    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         4.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        14.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    676705.088 ±   73547.482   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5         0.165 ±       1.420  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5         0.404 ±       3.476    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                     128  thrpt    5    622297.924 ±   36992.208   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1536.444 ±     105.344  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5      3885.512 ±     106.803    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1470.872 ±    1149.040  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      3717.536 ±    2824.791    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.421 ±       3.420  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         1.063 ±       8.649    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        11.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        21.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                    128  thrpt    5     12068.756 ±    1283.717   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                     128  thrpt    5      1728.039 ±     569.440  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                128  thrpt    5    225722.257 ±   92924.870    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            128  thrpt    5      1592.722 ±    1401.224  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5    208593.172 ±  201963.515    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        128  thrpt    5         1.440 ±       5.633  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5       190.698 ±     758.731    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                          128  thrpt    5        12.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                           128  thrpt    5        45.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                             128  thrpt    5     12384.853 ±    1670.732   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                              128  thrpt    5      1490.076 ±     186.763  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5    189703.389 ±   51479.037    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5      1462.020 ±    1133.892  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5    185751.923 ±  139945.823    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.585 ±       4.860  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5        79.137 ±     658.992    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                   128  thrpt    5        11.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                    128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                            128  thrpt    5    350474.794 ±    4058.281   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                             128  thrpt    5      2349.915 ±     105.841  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5     10551.941 ±     412.889    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      2269.971 ±    1402.028  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     10192.980 ±    6291.585    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.212 ±       1.695  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.957 ±       7.645    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                  128  thrpt    5        17.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                   128  thrpt    5        25.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                 128  thrpt    5      9889.951 ±     511.424   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                  128  thrpt    5      1720.841 ±      44.435  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                             128  thrpt    5    273849.716 ±   12619.740    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5      1597.286 ±    1403.689  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5    254463.707 ±  229764.649    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.317 ±       1.908  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        51.128 ±     307.766    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                       128  thrpt    5        12.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                        128  thrpt    5        21.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                   128  thrpt    5     27170.630 ±    2384.273   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                    128  thrpt    5      1483.502 ±     622.982  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                               128  thrpt    5     86094.999 ±   42965.014    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1544.230 ±    1385.519  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     89379.018 ±   78349.592    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         3.122 ±      16.413  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5       183.373 ±     961.876    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                         128  thrpt    5        12.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                          128  thrpt    5        97.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                            128  thrpt    5     30668.099 ±    4859.015   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                             128  thrpt    5      1220.799 ±     349.472  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5     62873.364 ±   28480.044    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      1141.094 ±    1100.511  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     58872.393 ±   60532.016    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         2.160 ±       8.207  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5       114.189 ±     447.275    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                  128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                   128  thrpt    5        94.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                           128  thrpt    5    795353.900 ±   17428.428   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                            128  thrpt    5      1476.046 ±      37.108  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5      2920.615 ±      92.349    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1473.781 ±    1143.155  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5      2917.654 ±    2308.372    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.829 ±       5.719  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         1.643 ±      11.338    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                 128  thrpt    5        11.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                  128  thrpt    5        27.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                   128  thrpt    5    938527.911 ±    5755.056   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    128  thrpt    5         0.027 ±       0.231  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               128  thrpt    5         0.046 ±       0.388    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                128  thrpt    5     32465.402 ±    6456.404   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                 128  thrpt    5      1411.727 ±     245.558  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                            128  thrpt    5     68723.389 ±   27364.589    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5      1322.388 ±       7.443  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     64251.325 ±   14083.927    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         1.347 ±       3.913  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5        64.543 ±     182.958    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                      128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                       128  thrpt    5        55.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                        128  thrpt    5     43998.827 ±    1345.077   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                         128  thrpt    5      1925.028 ±     690.859  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                    128  thrpt    5     68818.906 ±   22732.568    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1940.956 ±    1795.423  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     69369.800 ±   62790.004    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         2.128 ±      11.858  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        76.282 ±     424.064    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                              128  thrpt    5        15.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                               128  thrpt    5       124.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                 128  thrpt    5     42456.625 ±    2793.691   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1473.094 ±      76.079  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     54603.604 ±     930.218    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1443.357 ±    1135.777  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     53644.070 ±   46122.362    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         1.325 ±       6.849  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        48.722 ±     251.169    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                       128  thrpt    5        11.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                        128  thrpt    5        52.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                128  thrpt    5    537507.144 ±   29295.440   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                 128  thrpt    5      1433.870 ±      73.778  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      4198.036 ±      79.165    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1336.040 ±       7.172  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      3912.183 ±     219.659    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.775 ±       6.125  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         2.255 ±      17.819    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                      128  thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                       128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                     128  thrpt    5     22454.330 ±    4047.334   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                      128  thrpt    5      2126.196 ±     300.886  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                 128  thrpt    5    149448.918 ±   47436.901    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1994.209 ±      40.120  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5    140000.513 ±   24530.463    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.703 ±       3.945  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        49.442 ±     271.095    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                           128  thrpt    5        15.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                            128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                       128  thrpt    5     72159.672 ±    3499.394   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                        128  thrpt    5      1912.456 ±      99.928  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                   128  thrpt    5     41708.069 ±    1276.124    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1860.215 ±    1142.375  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     40538.300 ±   24151.346    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.923 ±       5.942  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        20.039 ±     128.985    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                             128  thrpt    5        14.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                              128  thrpt    5        31.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                128  thrpt    5    209544.026 ±    1671.712   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1632.910 ±      58.313  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5     12264.222 ±     448.380    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1597.557 ±    1398.826  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     11997.016 ±   10467.355    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.269 ±       2.270  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         2.016 ±      17.022    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                      128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                       128  thrpt    5        21.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                               128  thrpt    5    845636.150 ±   40886.179   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                128  thrpt    5       931.862 ±      46.546  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      1734.234 ±      55.796    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       803.747 ±    1153.580  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      1496.280 ±    2154.080    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.021 ±       0.083  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.039 ±       0.154    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                     128  thrpt    5         6.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                      128  thrpt    5        22.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                       128  thrpt    5    917802.481 ±    8766.430   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                             128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                    128  thrpt    5     92166.865 ±    3947.278   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                     128  thrpt    5      1924.377 ±      70.189  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                128  thrpt    5     32858.371 ±     663.005    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1863.321 ±    1140.614  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     31837.766 ±   19992.245    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         1.002 ±       6.518  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        17.351 ±     113.511    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                          128  thrpt    5        14.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                           128  thrpt    5        33.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                        128  thrpt    5     18786.029 ±    2701.268   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                         128  thrpt    5      1780.303 ±     350.439  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                    128  thrpt    5    149524.964 ±   50977.702    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1854.249 ±    1134.049  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    154849.677 ±   80162.460    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         1.787 ±      12.630  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       152.203 ±    1074.424    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                              128  thrpt    5        14.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                               128  thrpt    5        64.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                 128  thrpt    5     17726.089 ±    4547.796   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1508.726 ±     292.920  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5    134466.953 ±   46619.800    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space                128  thrpt    5         0.005 ±       0.042  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm           128  thrpt    5         0.471 ±       4.058    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Metaspace                             128  thrpt    5         0.013 ±       0.116  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Metaspace.norm                        128  thrpt    5         1.301 ±      11.205    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1453.475 ±    1132.020  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5    129842.879 ±  114685.798    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         3.221 ±      13.443  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5       297.461 ±    1297.912    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                       128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                        128  thrpt    5        82.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                128  thrpt    5    798521.204 ±    8565.406   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                 128  thrpt    5      2142.312 ±      61.995  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      4222.276 ±     125.168    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      2006.027 ±      11.527  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      3953.685 ±      53.373    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.787 ±       6.641  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         1.553 ±      13.109    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                      128  thrpt    5        15.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                       128  thrpt    5        30.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                     128  thrpt    5     14522.048 ±    1291.419   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                      128  thrpt    5      1894.783 ±     236.392  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                 128  thrpt    5    205500.594 ±   41822.144    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1866.968 ±    1152.273  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5    202772.566 ±  134845.639    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.922 ±       4.533  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       100.634 ±     497.932    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                           128  thrpt    5        14.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                            128  thrpt    5        27.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                       128  thrpt    5     47796.672 ±    5257.149   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                        128  thrpt    5      1747.411 ±     312.503  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                   128  thrpt    5     57613.635 ±   16063.172    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1655.413 ±    1358.554  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     54707.603 ±   48675.143    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         2.762 ±       8.385  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        92.091 ±     283.814    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                             128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                              128  thrpt    5       108.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                128  thrpt    5     54278.646 ±    4504.747   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1471.512 ±     101.932  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5     42672.006 ±     948.069    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1437.475 ±    1110.548  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     41802.519 ±   35486.465    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         1.220 ±       4.327  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5        35.037 ±     121.195    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                      128  thrpt    5        11.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                       128  thrpt    5        61.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                               128  thrpt    5   1024064.497 ±   40212.301   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                128  thrpt    5       966.011 ±      60.145  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      1484.592 ±      81.792    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       938.184 ±    1414.923  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      1444.642 ±    2213.207    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.013 ±       0.067    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                     128  thrpt    5         7.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                      128  thrpt    5        24.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                       128  thrpt    5   1027738.287 ±   38034.618   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        128  thrpt    5         5.170 ±      37.842  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   128  thrpt    5         8.035 ±      58.958    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                             128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                    128  thrpt    5      4066.741 ±     349.304   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                     128  thrpt    5       552.302 ±      51.626  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                128  thrpt    5    213725.307 ±    5753.712    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5       630.219 ±       0.597  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5    243979.882 ±   21398.796    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.002 ±       0.018  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.804 ±       6.926    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                          128  thrpt    5         5.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                           128  thrpt    5        58.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                             128  thrpt    5    153470.448 ±    5439.818   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      2387.929 ±      67.837  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     24489.314 ±     559.208    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      2265.377 ±    1396.885  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     23254.085 ±   14992.665    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.250 ±       1.418  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         2.541 ±      14.364    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        17.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        25.000                    ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                       128  thrpt    5    391189.450 ±   14966.934   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                        128  thrpt    5       809.167 ±      43.671  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                   128  thrpt    5      3255.724 ±     219.438    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                               128  thrpt    5       798.308 ±    1145.212  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      3217.218 ±    4709.192    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.016 ±       0.083  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.063 ±       0.333    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                             128  thrpt    5         6.000                counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                              128  thrpt    5        19.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                      128  thrpt    5    281793.965 ±    2818.567   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       593.980 ±      33.435  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      3317.327 ±     201.795    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       528.894 ±    1138.486  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      2955.499 ±    6362.053    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        19.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                     128  thrpt    5    487146.315 ±   24972.486   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       631.006 ±      58.626  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      2038.476 ±     130.997    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       535.055 ±    1151.747  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1723.119 ±    3710.184    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.011 ±       0.070  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.035 ±       0.223    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5        16.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                          128  thrpt    5    101062.881 ±    6085.086   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      3521.748 ±     150.558  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     54847.180 ±    1252.337    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      3504.401 ±    1105.238  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     54554.512 ±   15497.077    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.025 ±       0.067  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.389 ±       1.051    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        26.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        35.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                            128  thrpt    5    215468.115 ±    5281.628   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1857.203 ±      90.456  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     13564.380 ±     432.042    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1865.863 ±    1151.297  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     13627.677 ±    8401.477    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.874 ±       5.132  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         6.414 ±      37.599    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        14.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        28.000                    ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                      128  thrpt    5    929210.363 ±   42544.698   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       750.044 ±      36.121  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5      1270.394 ±      27.239    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       665.023 ±       2.268  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1126.503 ±      48.694    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.014 ±       0.120    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                            128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                             128  thrpt    5        19.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                     128  thrpt    5    606306.597 ±   10394.630   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       487.342 ±      26.910  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      1264.891 ±      79.882    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       529.284 ±    1139.324  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1374.476 ±    2958.830    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.043 ±       0.272    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         7.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                    128  thrpt    5    783290.573 ±   65926.024   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       630.101 ±      62.586  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1266.013 ±      62.939    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       534.563 ±    1150.688  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1077.830 ±    2322.751    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.006 ±       0.054  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.013 ±       0.112    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        14.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5    837119.850 ±    6104.241   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5         0.168 ±       1.445  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         0.316 ±       2.713    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                         128  thrpt    5     36556.093 ±     890.872   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1653.839 ±      66.584  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     71186.271 ±    2155.561    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1722.874 ±    1394.611  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     74114.530 ±   59082.544    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.202 ±       6.159  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        51.673 ±     264.717    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        13.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        37.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                   128  thrpt    5      9400.166 ±     852.837   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                    128  thrpt    5      1313.586 ±     159.080  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                               128  thrpt    5    219820.941 ±   13020.501    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1185.131 ±    1131.743  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    198100.837 ±  186248.536    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.146 ±       1.036  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        25.073 ±     179.147    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                         128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                          128  thrpt    5        55.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                            128  thrpt    5      9159.789 ±     405.789   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                             128  thrpt    5      1204.567 ±      92.308  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5    206945.282 ±    9330.045    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      1193.786 ±    1139.452  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5    204933.765 ±  193547.542    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.021 ±       0.139  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         3.576 ±      23.901    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                  128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                   128  thrpt    5        19.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                           128  thrpt    5    199070.569 ±    7563.995   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                            128  thrpt    5      1976.906 ±      45.678  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5     15629.007 ±     309.426    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1866.289 ±    1150.736  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5     14760.471 ±    9243.535    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.833 ±       5.982  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         6.681 ±      48.147    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                 128  thrpt    5        14.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                  128  thrpt    5        26.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                128  thrpt    5      8882.363 ±     486.090   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                 128  thrpt    5      1387.748 ±      95.361  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                            128  thrpt    5    245878.141 ±   14856.831    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5      1325.513 ±      15.115  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5    234876.742 ±   12804.226    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.337 ±       2.298  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5        59.876 ±     407.997    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                      128  thrpt    5        10.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                       128  thrpt    5        20.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                  128  thrpt    5     20786.958 ±    5552.171   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                   128  thrpt    5      1341.642 ±     462.273  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                              128  thrpt    5    102043.574 ±   47257.241    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                          128  thrpt    5      1304.457 ±      81.307  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     99184.801 ±   31909.318    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                      128  thrpt    5         1.296 ±       8.528  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5        96.265 ±     633.425    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                        128  thrpt    5        10.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                         128  thrpt    5        85.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                           128  thrpt    5     24183.269 ±    3480.472   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                            128  thrpt    5      1132.877 ±     643.587  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                       128  thrpt    5     74109.463 ±   52710.789    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1181.151 ±    1129.902  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5     77209.773 ±   77872.131    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         1.715 ±       4.995  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5       110.034 ±     317.291    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                 128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                  128  thrpt    5        65.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                          128  thrpt    5    538030.972 ±   33658.360   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                           128  thrpt    5      1259.526 ±      77.590  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                      128  thrpt    5      3683.195 ±      77.076    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                  128  thrpt    5      1340.298 ±       8.671  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm             128  thrpt    5      3920.241 ±     268.550    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space              128  thrpt    5         0.854 ±       7.226  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm         128  thrpt    5         2.481 ±      20.984    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                128  thrpt    5        10.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                 128  thrpt    5        30.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                  128  thrpt    5    608562.760 ±    8410.166   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm              128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                               128  thrpt    5     24857.087 ±    2396.318   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                128  thrpt    5      1280.466 ±     652.743  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                           128  thrpt    5     81165.112 ±   44075.732    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                       128  thrpt    5      1286.997 ±    1757.755  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     81770.889 ±  113230.191    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                   128  thrpt    5         1.797 ±       6.589  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5       114.576 ±     417.234    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                     128  thrpt    5        10.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                      128  thrpt    5        80.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                       128  thrpt    5     13585.384 ±    1480.845   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      1490.501 ±     398.265  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5    172827.603 ±   55097.554    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1446.181 ±    1152.742  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    167725.951 ±  138362.585    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.954 ±       6.891  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5       113.121 ±     824.429    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                             128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                              128  thrpt    5        69.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                128  thrpt    5     13385.769 ±    2716.740   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1362.772 ±     439.167  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5    160644.220 ±   83301.367    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space               128  thrpt    5         0.003 ±       0.027  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm          128  thrpt    5         0.400 ±       3.440    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.Metaspace                            128  thrpt    5         0.009 ±       0.080  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.Metaspace.norm                       128  thrpt    5         1.168 ±      10.053    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1417.116 ±     799.676  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5    167330.416 ±  127383.481    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         2.106 ±       8.756  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5       253.563 ±    1083.995    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5        12.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        62.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                               128  thrpt    5    344796.414 ±   19637.171   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      2051.302 ±     115.194  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      9362.334 ±     109.688    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1979.127 ±      21.356  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      9034.718 ±     606.237    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         1.516 ±       6.892  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         6.987 ±      31.774    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5        15.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        40.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                    128  thrpt    5     13747.315 ±    1310.540   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1646.865 ±     262.856  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5    188667.100 ±   40512.831    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1601.323 ±    1410.820  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5    183798.957 ±  171737.599    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.570 ±       3.390  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        64.384 ±     381.836    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        12.000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        28.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                      128  thrpt    5     35592.272 ±    4241.938   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                       128  thrpt    5      1516.134 ±     532.121  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                  128  thrpt    5     67215.376 ±   31307.116    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      1418.006 ±    1148.360  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     63010.600 ±   58707.777    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         1.487 ±       8.361  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        67.195 ±     376.250    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                            128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                             128  thrpt    5        88.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                               128  thrpt    5    131647.705 ±    5586.576   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      2477.154 ±      81.863  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5     29616.200 ±     946.527    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      2416.361 ±    1424.334  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     28873.277 ±   16554.588    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.258 ±       1.871  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         3.085 ±      22.406    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5        18.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        25.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                              128  thrpt    5    877541.922 ±   14339.313   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1242.025 ±      35.910  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      2227.191 ±      57.878    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1206.472 ±    1153.349  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      2162.831 ±    2060.364    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.835 ±       5.300  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         1.491 ±       9.469    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        28.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5    983197.475 ±   83544.439   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                   128  thrpt    5    128234.239 ±    4659.457   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      2889.250 ±      88.006  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5     35458.825 ±     799.924    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      2805.509 ±    1120.089  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     34422.234 ±   13233.162    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.071 ±       0.480  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.860 ±       5.821    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                         128  thrpt    5        21.000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        33.000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                           128  thrpt    5     18335.438 ±    1675.714   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1068.653 ±     488.770  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5     91887.113 ±   47961.458    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1065.656 ±    1404.880  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     91966.822 ±  126538.033    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         1.144 ±       5.619  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        97.105 ±     472.304    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                  128  thrpt    5        40.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                    128  thrpt    5     17907.027 ±    2683.639   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5       898.018 ±     714.822  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     79367.116 ±   73075.276    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       926.578 ±    1391.636  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     82305.385 ±  133929.870    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.100 ±       0.719  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         8.858 ±      64.292    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5         7.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        47.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                   128  thrpt    5    161912.046 ±    2731.043   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       414.576 ±      27.716  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      4029.888 ±     291.820    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       398.173 ±    1399.634  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      3876.854 ±   13627.712    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.002 ±       0.013  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.015 ±       0.131    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5         3.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        12.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                        128  thrpt    5     16377.219 ±    2208.301   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      1238.613 ±     387.273  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5    119132.369 ±   43224.153    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space                       128  thrpt    5         0.003 ±       0.027  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space.norm                  128  thrpt    5         0.308 ±       2.651    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.Metaspace                                    128  thrpt    5         0.009 ±       0.078  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.Metaspace.norm                               128  thrpt    5         0.893 ±       7.686    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1193.085 ±    1144.250  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    114727.517 ±  111627.248    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Old_Gen                                   128  thrpt    5         0.817 ±       7.035  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Old_Gen.norm                              128  thrpt    5        80.682 ±     694.697    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         2.306 ±      11.103  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       220.910 ±    1081.250    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        11.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        96.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                          128  thrpt    5     64838.333 ±    1143.698   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5      1862.949 ±      39.315  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5     45211.975 ±    1163.654    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1863.583 ±    1146.849  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     45248.957 ±   28346.554    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.891 ±       4.627  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        21.665 ±     112.845    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                128  thrpt    5        14.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        40.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                   128  thrpt    5     98787.340 ±    3849.943   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1883.418 ±      98.870  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5     30002.033 ±     749.274    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1865.860 ±    1147.272  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     29727.978 ±   18382.768    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.292 ±       2.176  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         4.630 ±      34.532    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5        14.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        23.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                  128  thrpt    5    346934.322 ±   14362.621   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       684.563 ±      14.976  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      3105.566 ±      68.059    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       669.220 ±       1.049  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      3036.109 ±     130.571    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.008 ±       0.052  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.038 ±       0.237    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         5.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        18.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5    382184.961 ±    1840.778   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5         0.017 ±       0.140  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5         0.068 ±       0.576    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                       128  thrpt    5     95608.069 ±    3990.969   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                        128  thrpt    5      1988.881 ±      68.127  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     32739.074 ±     326.930    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1990.541 ±      14.715  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     32769.046 ±    1456.745    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         1.008 ±       7.658  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        16.688 ±     126.819    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                             128  thrpt    5        15.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                              128  thrpt    5        27.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                            128  thrpt    5    212621.927 ±    5343.100   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      2734.657 ±     166.558  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5     20240.829 ±     790.679    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2535.058 ±    1163.276  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     18754.522 ±    8260.625    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.337 ±       2.434  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2.503 ±      18.047    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                  128  thrpt    5        19.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                   128  thrpt    5        28.000                    ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                      128  thrpt    5    812180.715 ±   43412.029   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       464.739 ±      43.073  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5       900.513 ±      63.737    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       530.013 ±    1140.894  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1025.867 ±    2209.341    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.012 ±       0.071  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.024 ±       0.138    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                            128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                             128  thrpt    5        16.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                     128  thrpt    5    416014.628 ±   11162.875   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5       356.198 ±      35.531  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      1347.439 ±     122.131    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       264.869 ±    1396.578  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       999.603 ±    5270.621    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.008 ±       0.052  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.031 ±       0.197    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         2.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5         9.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                    128  thrpt    5   1064874.285 ±  162696.802   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       378.500 ±      49.609  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       559.605 ±      55.021    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       369.511 ±    1321.944  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       556.112 ±    2004.088    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.006 ±       0.049  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.009 ±       0.078    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        12.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                         128  thrpt    5    123413.052 ±    4865.933   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      4119.571 ±     190.909  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     52531.590 ±    1458.572    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      4053.852 ±      77.665  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     51697.277 ±    2112.888    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.029 ±       0.044  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.371 ±       0.549    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        30.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        41.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                           128  thrpt    5    311804.010 ±    7479.730   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1830.596 ±      50.094  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5      9240.249 ±     210.057    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1732.053 ±    1402.377  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      8740.024 ±    7017.945    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.900 ±       7.524  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         4.503 ±      37.638    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                 128  thrpt    5        13.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        27.000                    ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                     128  thrpt    5   2018639.121 ±   83247.955   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                      128  thrpt    5       713.148 ±      53.373  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                 128  thrpt    5       555.933 ±      29.450    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                             128  thrpt    5       797.460 ±    1145.526  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       621.360 ±     886.071    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                         128  thrpt    5        ≈ 10⁻³                MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                           128  thrpt    5         6.000                counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                            128  thrpt    5        21.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                    128  thrpt    5   1899805.726 ±   60713.951   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       667.523 ±      31.894  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5       552.948 ±      16.623    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       665.092 ±       3.182  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       550.974 ±      19.802    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.012 ±       0.066  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.010 ±       0.056    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         5.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        19.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                   128  thrpt    5   2276748.556 ±   49403.480   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       795.794 ±      20.481  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       550.058 ±      18.166    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       669.166 ±       1.143  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       462.534 ±      10.520    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.007 ±       0.037  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.005 ±       0.026    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         5.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        19.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   2367258.224 ±   61570.510   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                        128  thrpt    5     47173.278 ±    1243.141   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1860.869 ±      57.305  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     62080.769 ±    2040.148    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1861.248 ±    1150.138  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     62085.836 ±   38212.020    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         1.025 ±       5.570  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        34.338 ±     187.636    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        14.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        32.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                             128  thrpt    5     17555.466 ±    3471.038   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      2306.441 ±     498.175  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5    207348.982 ±   72311.369    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      2283.742 ±    1322.863  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    204715.517 ±  112834.832    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         5.593 ±      15.451  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5       499.412 ±    1397.058    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        18.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        93.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                      128  thrpt    5    107002.667 ±    5149.818   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1180.852 ±      79.461  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     17365.429 ±     607.862    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1194.532 ±    1146.683  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     17547.630 ±   16606.116    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.325 ±       2.577  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         4.702 ±      37.200    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         9.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        17.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                     128  thrpt    5    273939.345 ±    6066.362   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       918.700 ±      60.888  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      5277.455 ±     323.673    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       799.901 ±    1147.872  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      4592.793 ±    6548.907    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.019 ±       0.103  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.110 ±       0.589    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         6.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5        22.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                          128  thrpt    5     17028.104 ±    1541.350   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      2262.164 ±     338.269  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5    209235.461 ±   43263.708    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2239.059 ±    1392.461  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    206962.728 ±  127872.862    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         1.848 ±       9.572  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       173.182 ±     897.876    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        17.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        51.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                            128  thrpt    5     43885.287 ±    1003.501   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      3449.828 ±      90.511  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5    123723.178 ±    3645.557    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      3356.662 ±      76.831  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    120384.677 ±    4737.515    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.029 ±       0.091  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1.046 ±       3.288    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        25.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        37.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                     128  thrpt    5    145836.341 ±    3971.908   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      2018.188 ±      83.913  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     21779.785 ±     409.900    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1879.680 ±    1148.477  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     20275.411 ±   12144.097    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.096 ±       0.653  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         1.037 ±       7.088    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5        14.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        22.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                    128  thrpt    5    252915.734 ±    1814.125   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       828.742 ±      35.418  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      5157.172 ±     254.896    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       803.646 ±    1153.631  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      5003.717 ±    7232.882    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.018 ±       0.049  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.113 ±       0.303    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         6.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        23.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5    280793.164 ±    3228.624   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5         0.706 ±       6.073  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         3.976 ±      34.223    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                         128  thrpt    5     61562.736 ±     956.188   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      4035.562 ±     104.507  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    103169.435 ±    1848.371    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3902.759 ±    1126.116  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     99786.269 ±   29413.717    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.033 ±       0.122  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.853 ±       3.128    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        29.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        40.000                    ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                        128  thrpt    5     36934.875 ±    5733.852   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                         128  thrpt    5      1762.323 ±     941.239  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                    128  thrpt    5     75508.773 ±   53370.801    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1697.439 ±    1382.717  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     72741.630 ±   66717.231    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         3.662 ±      13.471  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       160.207 ±     597.570    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                              128  thrpt    5        13.000                counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                               128  thrpt    5        48.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                 128  thrpt    5     38055.473 ±      97.662   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1194.656 ±      42.784  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     49400.176 ±    1830.028    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1190.105 ±    1136.536  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     49215.377 ±   47042.191    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.412 ±       3.280  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        17.040 ±     135.766    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                       128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                        128  thrpt    5        14.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                128  thrpt    5    659281.101 ±   42102.169   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                 128  thrpt    5      1761.874 ±      98.941  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      4206.200 ±     134.132    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1605.724 ±    1412.354  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      3845.541 ±    3634.717    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.806 ±       6.674  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         1.962 ±      16.258    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                      128  thrpt    5        12.000                counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                       128  thrpt    5        24.000                    ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                     128  thrpt    5     34036.661 ±    2543.672   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                      128  thrpt    5      2089.869 ±     453.975  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     96717.453 ±   27125.686    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1996.854 ±       9.753  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     92350.583 ±    6672.155    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         1.370 ±       6.766  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        64.579 ±     320.008    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                           128  thrpt    5        15.000                counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                            128  thrpt    5        33.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                       128  thrpt    5     95279.272 ±    5524.382   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                        128  thrpt    5      2125.120 ±     105.365  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                   128  thrpt    5     35104.248 ±     578.063    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      2129.265 ±    1138.565  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     35193.574 ±   19537.221    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.935 ±       7.481  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        15.793 ±     126.482    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                             128  thrpt    5        16.000                counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                              128  thrpt    5        32.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                128  thrpt    5    250224.777 ±   10033.397   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1716.669 ±      52.479  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5     10797.721 ±     280.060    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1733.636 ±    1405.114  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     10916.198 ±    9085.044    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.914 ±       7.211  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         5.728 ±      45.160    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                      128  thrpt    5        13.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                       128  thrpt    5        30.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                               128  thrpt    5   1101430.649 ±  100505.182   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                128  thrpt    5       939.349 ±      82.347  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      1342.105 ±      46.968    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       936.849 ±    1410.964  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      1343.095 ±    2078.476    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.018 ±       0.068  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.026 ±       0.097    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                     128  thrpt    5         7.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                      128  thrpt    5        25.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                       128  thrpt    5   1178041.326 ±    1861.733   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                    128  thrpt    5    236936.757 ±    5533.415   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                     128  thrpt    5      2509.475 ±      95.905  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                128  thrpt    5     16669.365 ±     508.917    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      2411.860 ±    1418.080  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     16017.413 ±    9308.560    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.104 ±       0.810  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.697 ±       5.425    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                          128  thrpt    5        18.000                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                           128  thrpt    5        27.000                    ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                      128  thrpt    5     53364.944 ±    3232.345   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1465.164 ±     133.517  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     43199.980 ±    1690.509    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1458.077 ±    1134.783  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     42954.700 ±   32069.896    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.657 ±       4.547  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        19.191 ±     132.363    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5        11.000                counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        34.000                    ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                     128  thrpt    5    804136.063 ±   10755.625   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1621.210 ±      52.661  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      3172.703 ±      91.681    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1604.588 ±    1406.294  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      3138.429 ±    2711.430    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.810 ±       5.156  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         1.590 ±      10.131    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5        12.000                counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5        26.000                    ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                          128  thrpt    5     46779.243 ±    5721.748   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      2582.871 ±      79.313  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     86964.644 ±   10457.688    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2542.930 ±    1157.232  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     85656.200 ±   41561.473    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.575 ±       4.503  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        20.381 ±     160.705    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        19.000                counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        31.000                    ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                     128  thrpt    5    408325.473 ±   20978.446   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1066.952 ±      91.256  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      4112.133 ±     232.686    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1063.394 ±    1404.150  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      4093.784 ±    5351.474    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.009 ±       0.059  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.035 ±       0.223    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         8.000                counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        12.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                    128  thrpt    5   1627824.586 ±  140814.580   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       986.002 ±      19.333  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       953.544 ±      86.589    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       937.146 ±    1414.134  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       912.211 ±    1451.380    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.018 ±       0.081  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.018 ±       0.079    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         7.000                counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        26.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   1757059.149 ±   19498.671   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                         128  thrpt    5    366922.283 ±   13170.173   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      2317.157 ±      80.224  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5      9938.294 ±     177.302    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2147.265 ±    1152.295  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      9214.692 ±    5135.178    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.373 ±       3.036  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1.583 ±      12.867    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        16.000                counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        25.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                           128  thrpt    5     88165.309 ±    2279.546   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1766.748 ±      44.072  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5     31537.335 ±     992.879    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1712.385 ±    1389.782  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     30586.006 ±   25215.006    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         1.646 ±       8.480  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        29.465 ±     152.117    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                 128  thrpt    5        13.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                  128  thrpt    5        50.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                    128  thrpt    5     92767.271 ±    1890.407   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1203.139 ±      63.716  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     20412.132 ±    1028.531    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1060.100 ±    1397.150  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     17983.327 ±   23676.564    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.435 ±       2.161  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         7.350 ±      36.480    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        17.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                   128  thrpt    5    104307.536 ±    3277.834   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1288.853 ±      61.100  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5     19446.317 ±     579.236    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1192.264 ±    1140.266  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     17969.075 ±   16939.829    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.870 ±       5.391  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        13.184 ±      81.904    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5         9.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        30.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                        128  thrpt    5     55168.468 ±    1021.530   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      2143.803 ±      51.206  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     61158.477 ±     947.963    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      2008.471 ±      23.057  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     57298.323 ±     781.723    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.254 ±       1.573  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         7.273 ±      45.131    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        15.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        24.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                          128  thrpt    5    166551.250 ±    1323.617   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5      1566.297 ±      44.998  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5     14800.409 ±     347.873    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1466.081 ±    1140.090  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     13852.515 ±   10741.743    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.966 ±       6.348  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         9.151 ±      60.185    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                128  thrpt    5        11.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        30.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                   128  thrpt    5    397400.303 ±   26092.664   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5       512.172 ±      36.151  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5      2028.826 ±     206.556    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       398.196 ±    1399.716  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      1568.557 ±    5514.136    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.005 ±       0.040  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.018 ±       0.159    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5         3.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        12.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                  128  thrpt    5    977888.823 ±   35690.157   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5      1245.517 ±      43.760  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      2004.227 ±      48.963    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1205.436 ±    1155.971  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      1940.453 ±    1869.805    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.885 ±       7.220  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         1.439 ±      11.741    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         9.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        32.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5    948875.128 ±   18833.237   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                       128  thrpt    5    308780.083 ±   15221.859   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                        128  thrpt    5       947.470 ±      75.796  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   128  thrpt    5      4828.755 ±     340.091    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5       926.887 ±    1397.789  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      4726.421 ±    7159.023    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.840 ±       7.141  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         4.225 ±      35.919    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                             128  thrpt    5         7.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                              128  thrpt    5        28.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                       128  thrpt    5    150006.522 ±    4675.889   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      1867.085 ±      83.281  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5     19587.230 ±     579.865    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1725.434 ±    1394.521  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     18091.195 ±   14401.822    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.132 ±       0.462    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                             128  thrpt    5        13.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                              128  thrpt    5        19.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                128  thrpt    5    203202.605 ±   26208.115   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1155.487 ±     149.560  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5      8949.543 ±     319.134    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space               128  thrpt    5         0.004 ±       0.038  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm          128  thrpt    5         0.036 ±       0.311    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.Metaspace                            128  thrpt    5         0.012 ±       0.103  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.Metaspace.norm                       128  thrpt    5         0.098 ±       0.848    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1143.094 ±    1102.425  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      8867.100 ±    8552.778    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         1.025 ±       8.732  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         8.413 ±      71.707    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5        10.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        63.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                               128  thrpt    5    557675.883 ±   34441.481   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1112.843 ±      54.851  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      3140.522 ±     113.846    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1062.349 ±    1399.015  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      3004.287 ±    4026.651    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.774 ±       5.249  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         2.208 ±      15.042    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         8.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        32.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                    128  thrpt    5    102540.340 ±    5614.079   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      3249.704 ±     185.650  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     49874.490 ±    1550.245    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      3087.842 ±    1431.623  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     47393.845 ±   21983.934    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.058 ±       0.250  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.890 ±       3.783    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        23.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        35.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                      128  thrpt    5    241054.104 ±    9698.307   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                       128  thrpt    5      1527.803 ±      72.679  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                  128  thrpt    5      9974.228 ±     224.647    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      1459.961 ±    1145.957  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      9537.281 ±    7642.167    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.896 ±       5.542  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         5.863 ±      36.389    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                            128  thrpt    5        11.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                             128  thrpt    5        33.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                               128  thrpt    5    775602.385 ±   32072.079   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5       588.168 ±      46.570  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5      1193.442 ±      55.418    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       529.455 ±    1139.697  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      1071.656 ±    2307.273    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.025 ±       0.147    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5         4.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5         6.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                              128  thrpt    5   1399958.173 ±   27834.055   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1070.527 ±      46.609  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      1203.484 ±      38.571    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1071.769 ±    1413.034  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      1204.516 ±    1583.834    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.638 ±       5.287  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0.711 ±       5.893    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5         8.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        27.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5   1494924.066 ±   27685.140   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                   128  thrpt    5    621447.401 ±    6978.607   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      1522.380 ±      20.841  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5      3855.646 ±      59.534    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      1470.786 ±    1148.875  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      3726.005 ±    2940.720    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.431 ±       3.533  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         1.091 ±       8.941    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                         128  thrpt    5        11.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        22.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                    128  thrpt    5       913.716 ±     145.910   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                     128  thrpt    5      2027.324 ±     138.769  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                128  thrpt    5   3496649.564 ±  688864.374    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            128  thrpt    5      1991.354 ±      46.715  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5   3434271.550 ±  597629.880    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.233 ±       1.096  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5       416.727 ±    1983.136    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                          128  thrpt    5        15.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                           128  thrpt    5        23.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                             128  thrpt    5       967.371 ±      81.443   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                              128  thrpt    5      2083.692 ±      82.501  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5   3389976.309 ±  207914.164    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5      1997.657 ±      39.787  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5   3250472.672 ±  289424.098    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.440 ±       1.681  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5       727.170 ±    2822.556    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                   128  thrpt    5        15.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                    128  thrpt    5        26.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                            128  thrpt    5     45697.693 ±    1624.320   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                             128  thrpt    5       820.297 ±      35.268  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5     28246.825 ±    1015.480    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       779.073 ±    1110.787  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     26862.140 ±   38911.671    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.144 ±       1.242    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                  128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                   128  thrpt    5        32.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                 128  thrpt    5       887.461 ±     162.888   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                  128  thrpt    5      1965.355 ±     334.155  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                             128  thrpt    5   3485570.378 ±  221472.556    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5      1868.815 ±    1164.724  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5   3322382.694 ± 2225715.728    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.605 ±       2.318  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5      1097.384 ±    4362.311    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                       128  thrpt    5        14.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                        128  thrpt    5        26.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                   128  thrpt    5     16186.374 ±    3128.991   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                    128  thrpt    5      1415.011 ±     770.392  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                               128  thrpt    5    138500.404 ±  101098.304    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1312.613 ±    1792.396  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    129178.055 ±  198846.309    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         2.462 ±      10.800  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5       243.438 ±    1046.656    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                         128  thrpt    5        10.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                          128  thrpt    5        42.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                            128  thrpt    5     18709.449 ±    3545.051   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                             128  thrpt    5      1187.236 ±     495.053  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5    100392.532 ±   58643.637    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      1181.712 ±    1129.566  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     99841.122 ±  100681.684    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         2.210 ±      11.366  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5       192.905 ±    1009.492    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                  128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                   128  thrpt    5        46.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                           128  thrpt    5    339046.513 ±   56234.737   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                            128  thrpt    5      1225.106 ±     181.994  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5      5687.941 ±     149.652    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1068.673 ±    1412.550  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5      4998.219 ±    6993.631    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         1.166 ±       9.841  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         5.257 ±      44.331    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                 128  thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                  128  thrpt    5        29.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                   128  thrpt    5    385758.940 ±   14170.610   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                128  thrpt    5     18601.768 ±    2768.411   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                 128  thrpt    5      1324.100 ±     597.262  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                            128  thrpt    5    112497.608 ±   66258.871    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5      1303.475 ±       7.970  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5    110400.182 ±   17141.759    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         1.627 ±      10.974  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5       139.388 ±     946.562    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                      128  thrpt    5        10.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                       128  thrpt    5        42.000                    ms
[info] BitSetBenchmark.readJsoniterScala                                                           128  thrpt    5   1403158.321 ±    2176.700   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5        57.059 ±       0.087  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5        64.000 ±       0.001    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.readPlayJson                                                                128  thrpt    5    119983.576 ±    7859.262   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      4271.285 ±     324.953  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     56017.802 ±    1205.233    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      4050.859 ±      86.158  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     53138.182 ±    2909.324    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.042 ±       0.127  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.546 ±       1.653    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        30.000                counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        46.000                    ms
[info] BitSetBenchmark.writeJacksonScala                                                           128  thrpt    5   2234532.469 ±   21154.178   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       617.737 ±      37.638  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5       435.060 ±      29.617    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       531.392 ±    1143.865  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       374.448 ±     806.036    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.015 ±       0.080  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.011 ±       0.057    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        17.000                    ms
[info] BitSetBenchmark.writeJsoniterScala                                                          128  thrpt    5   1929832.046 ±   86378.194   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       538.325 ±      55.164  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       438.946 ±      35.109    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       534.848 ±    1151.301  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       435.066 ±     936.769    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4.000                counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        15.000                    ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   1950172.197 ±   38992.061   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         0.196 ±       1.682  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.159 ±       1.370    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.writePlayJson                                                               128  thrpt    5     59398.323 ±     415.529   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      2068.237 ±      36.004  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     54797.215 ±    1035.902    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2002.487 ±      17.390  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     53055.350 ±     844.809    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.428 ±       2.411  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        11.331 ±      63.704    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        15.000                counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        25.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                            N/A  thrpt    5   1221917.011 ±   16595.665   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                             N/A  thrpt    5      3538.613 ±      97.532  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                        N/A  thrpt    5      4557.265 ±      71.074    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      3480.385 ±    1107.921  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5      4482.244 ±    1421.193    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.042 ±       0.179  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.054 ±       0.233    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                  N/A  thrpt    5        26.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                   N/A  thrpt    5        34.000                    ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                      N/A  thrpt    5   5232066.447 ±  412679.310   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                       N/A  thrpt    5       327.908 ±      38.669  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  N/A  thrpt    5        98.635 ±       9.457    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       367.460 ±    1313.363  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       110.450 ±     393.244    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.008 ±       0.052  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.003 ±       0.015    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                            N/A  thrpt    5         3.000                counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                             N/A  thrpt    5        13.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                     N/A  thrpt    5   1071808.510 ±   60416.305   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                      N/A  thrpt    5      1204.793 ±      57.589  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 N/A  thrpt    5      1769.217 ±     113.929    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             N/A  thrpt    5      1066.475 ±    1405.743  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        N/A  thrpt    5      1571.852 ±    2134.962    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         N/A  thrpt    5         0.133 ±       0.924  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    N/A  thrpt    5         0.192 ±       1.328    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                           N/A  thrpt    5         8.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                            N/A  thrpt    5        16.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                    N/A  thrpt    5  10134911.063 ± 1936886.194   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                     N/A  thrpt    5       477.534 ±      86.896  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                N/A  thrpt    5        74.168 ±       5.008    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       504.204 ±    1116.924  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5        78.542 ±     170.825    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0.002 ±       0.011    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                          N/A  thrpt    5         4.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                           N/A  thrpt    5        14.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                         N/A  thrpt    5    802620.964 ±    6621.596   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                          N/A  thrpt    5      2962.405 ±     100.510  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     N/A  thrpt    5      5808.907 ±     201.951    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5      2950.659 ±    1408.865  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5      5787.017 ±    2808.860    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.125 ±       1.031  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         0.246 ±       2.029    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                               N/A  thrpt    5        22.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                N/A  thrpt    5        35.000                    ms
[info] GeoJSONBenchmark.readCirce                                                                  N/A  thrpt    5      5318.069 ±     309.131   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      2640.853 ±     101.943  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5    781521.129 ±   28585.888    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      2535.740 ±    1153.618  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    751059.387 ±  363276.377    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.849 ±       5.588  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5       251.682 ±    1658.689    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        19.000                counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        31.000                    ms
[info] GeoJSONBenchmark.readJacksonScala                                                           N/A  thrpt    5      7830.089 ±      84.196   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5      3211.182 ±     114.958  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5    645421.262 ±   17951.849    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      3087.549 ±    1403.217  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5    620544.533 ±  280642.329    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.108 ±       0.711  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5        21.778 ±     143.093    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5        23.000                counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5        37.000                    ms
[info] GeoJSONBenchmark.readJsoniterScala                                                          N/A  thrpt    5     55542.198 ±   12860.473   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       925.745 ±     223.561  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5     26227.306 ±     764.126    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       937.171 ±    1412.861  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5     26328.471 ±   36035.601    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.025 ±       0.105  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.721 ±       2.974    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         7.000                counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5        27.000                    ms
[info] GeoJSONBenchmark.writeCirce                                                                 N/A  thrpt    5      5403.278 ±     296.854   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                  N/A  thrpt    5       966.418 ±      62.112  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                             N/A  thrpt    5    281460.747 ±   11977.572    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       923.640 ±    1392.723  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    269452.987 ±  411937.640    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.042 ±       0.234  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5        12.109 ±      67.909    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                       N/A  thrpt    5         7.000                counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                        N/A  thrpt    5        12.000                    ms
[info] GeoJSONBenchmark.writeJacksonScala                                                          N/A  thrpt    5      5457.851 ±      43.717   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                           N/A  thrpt    5       593.810 ±      17.948  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      N/A  thrpt    5    171206.900 ±    5968.844    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       662.773 ±       4.146  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5    191089.445 ±    2490.291    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         3.598 ±      20.654    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                N/A  thrpt    5         5.000                counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                 N/A  thrpt    5        11.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                         N/A  thrpt    5      6961.722 ±      72.830   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                          N/A  thrpt    5       229.844 ±      26.553  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     N/A  thrpt    5     51950.729 ±    6323.165    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       204.639 ±    1079.004  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5     46335.269 ±  244312.648    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.012 ±       0.108  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         2.826 ±      24.330    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                               N/A  thrpt    5         2.000                counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                N/A  thrpt    5         9.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                 N/A  thrpt    5      6974.644 ±     124.065   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  N/A  thrpt    5       181.061 ±      22.806  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             N/A  thrpt    5     40852.600 ±    5831.711    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                         N/A  thrpt    5       204.698 ±    1079.314  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                    N/A  thrpt    5     46218.891 ±  243698.882    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                     N/A  thrpt    5         0.010 ±       0.084  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                N/A  thrpt    5         2.189 ±      18.852    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       N/A  thrpt    5         2.000                counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                        N/A  thrpt    5         8.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                            N/A  thrpt    5      8634.757 ±     830.203   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                             N/A  thrpt    5      2052.970 ±     352.658  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                        N/A  thrpt    5    374633.139 ±   98554.467    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      1964.890 ±       7.083  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5    358288.225 ±   33796.353    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         2.488 ±       7.220  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5       448.638 ±    1294.320    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                  N/A  thrpt    5        15.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                   N/A  thrpt    5        56.000                    ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                      N/A  thrpt    5     17415.812 ±     955.363   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                       N/A  thrpt    5       472.030 ±     200.152  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  N/A  thrpt    5     42643.760 ±   17340.443    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       397.376 ±    1396.835  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5     35886.017 ±  126186.039    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.108 ±       0.924  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         9.719 ±      83.544    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                            N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                             N/A  thrpt    5        11.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                     N/A  thrpt    5     14761.568 ±     770.678   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                      N/A  thrpt    5       426.890 ±     153.154  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 N/A  thrpt    5     45537.947 ±   17574.532    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             N/A  thrpt    5       396.722 ±    1394.534  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        N/A  thrpt    5     42347.578 ±  148884.082    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    N/A  thrpt    5         0.437 ±       3.764    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                           N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                            N/A  thrpt    5         8.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                    N/A  thrpt    5     23382.542 ±    3202.816   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                     N/A  thrpt    5       465.299 ±     180.901  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                N/A  thrpt    5     31434.001 ±   17173.687    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       400.852 ±    1409.055  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5     27258.681 ±   96015.978    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0.247 ±       2.000  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5        16.243 ±     131.376    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                          N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                           N/A  thrpt    5        13.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                         N/A  thrpt    5      6168.549 ±     243.883   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                          N/A  thrpt    5      2517.311 ±     163.289  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                     N/A  thrpt    5    642221.118 ±   17372.860    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5      2541.795 ±    1155.563  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5    648539.761 ±  295399.940    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.581 ±       3.663  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5       149.610 ±     944.918    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                               N/A  thrpt    5        19.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                N/A  thrpt    5        36.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                           N/A  thrpt    5     11905.448 ±    1437.438   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                            N/A  thrpt    5      2355.952 ±     383.511  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                       N/A  thrpt    5    311773.434 ±   75644.097    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      2252.621 ±    1414.331  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5    298096.965 ±  194341.878    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.408 ±       2.345  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5        55.091 ±     323.400    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                 N/A  thrpt    5        17.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                  N/A  thrpt    5        27.000                    ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                     N/A  thrpt    5     68071.061 ±    9164.287   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                      N/A  thrpt    5       661.590 ±     107.299  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                 N/A  thrpt    5     15294.484 ±    1469.764    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                             N/A  thrpt    5       662.365 ±       1.976  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                        N/A  thrpt    5     15327.621 ±    2136.265    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                         N/A  thrpt    5         0.028 ±       0.101  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    N/A  thrpt    5         0.659 ±       2.361    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                           N/A  thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                            N/A  thrpt    5        18.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                    N/A  thrpt    5     46212.202 ±    2030.374   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                     N/A  thrpt    5       714.431 ±      36.431  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                N/A  thrpt    5     24322.814 ±     638.095    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       662.327 ±       4.899  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5     22551.580 ±    1129.594    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0.011 ±       0.070  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0.368 ±       2.352    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                          N/A  thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                           N/A  thrpt    5        12.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                   N/A  thrpt    5    103242.342 ±    5285.666   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                    N/A  thrpt    5       804.866 ±      76.869  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               N/A  thrpt    5     12266.493 ±    1236.782    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           N/A  thrpt    5       801.380 ±    1151.161  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      N/A  thrpt    5     12237.332 ±   18004.035    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  N/A  thrpt    5         0.127 ±       0.669    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                         N/A  thrpt    5         6.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                          N/A  thrpt    5        25.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                           N/A  thrpt    5    137794.147 ±     985.075   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            N/A  thrpt    5         0.594 ±       5.110  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       N/A  thrpt    5         6.784 ±      58.386    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 N/A  thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                        N/A  thrpt    5      9253.255 ±     307.346   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                         N/A  thrpt    5      2425.929 ±      79.795  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                    N/A  thrpt    5    412513.600 ±   12617.453    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                N/A  thrpt    5      2413.441 ±    1412.742  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           N/A  thrpt    5    410554.362 ±  245123.321    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            N/A  thrpt    5         0.511 ±       3.190  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       N/A  thrpt    5        87.517 ±     546.766    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                              N/A  thrpt    5        18.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                               N/A  thrpt    5        32.000                    ms
[info] IntBenchmark.readCirce                                                                      N/A  thrpt    5  13322934.766 ±  904767.055   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                       N/A  thrpt    5      5896.202 ±     432.541  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                  N/A  thrpt    5       696.448 ±      14.755    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      5685.181 ±    1509.374  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       671.301 ±     154.219    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.050 ±       0.091  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.006 ±       0.011    B/op
[info] IntBenchmark.readCirce:·gc.count                                                            N/A  thrpt    5        42.000                counts
[info] IntBenchmark.readCirce:·gc.time                                                             N/A  thrpt    5        62.000                    ms
[info] IntBenchmark.readDslJsonJava                                                                N/A  thrpt    5  40369426.260 ± 5312967.922   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                 N/A  thrpt    5         0.052 ±       0.443  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                            N/A  thrpt    5         0.002 ±       0.016    B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                      N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readJacksonScala                                                               N/A  thrpt    5  25139863.067 ±  322018.098   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                     N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readJsoniterScala                                                              N/A  thrpt    5  48396311.265 ±  214962.403   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                    N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                                 N/A  thrpt    5  31487336.769 ±  917405.430   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                  N/A  thrpt    5       829.371 ±      23.293  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                             N/A  thrpt    5        41.446 ±       2.277    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       937.895 ±    1410.208  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        46.954 ±      71.697    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.029 ±       0.108  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.001 ±       0.005    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                       N/A  thrpt    5         7.000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                        N/A  thrpt    5        23.000                    ms
[info] IntBenchmark.readPlayJson                                                                   N/A  thrpt    5  25196604.118 ± 3253496.495   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                    N/A  thrpt    5        13.045 ±     112.318  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                               N/A  thrpt    5         0.867 ±       7.461    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                         N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeCirce                                                                     N/A  thrpt    5  22069257.035 ± 1469281.216   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                      N/A  thrpt    5      1727.141 ±     116.151  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5       123.166 ±       3.350    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1604.163 ±    1411.924  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5       114.366 ±      99.624    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.837 ±       6.893  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0.060 ±       0.490    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                           N/A  thrpt    5        12.000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                            N/A  thrpt    5        27.000                    ms
[info] IntBenchmark.writeDslJsonJava                                                               N/A  thrpt    5  61808860.028 ±  926347.423   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                N/A  thrpt    5      1290.503 ±      34.451  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                           N/A  thrpt    5        32.850 ±       1.255    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1197.388 ±    1144.952  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5        30.499 ±      29.404    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         1.048 ±       8.891  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.027 ±       0.227    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                     N/A  thrpt    5         9.000                counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                      N/A  thrpt    5        29.000                    ms
[info] IntBenchmark.writeJacksonScala                                                              N/A  thrpt    5  28063937.550 ±  318538.152   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5       588.680 ±      14.230  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5        33.012 ±       0.483    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       662.961 ±       4.652  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5        37.179 ±       0.552    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                    N/A  thrpt    5         5.000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                     N/A  thrpt    5         9.000                    ms
[info] IntBenchmark.writeJsoniterScala                                                             N/A  thrpt    5  52079692.645 ± 1079450.832   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5      1090.021 ±      36.236  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5        32.938 ±       0.889    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      1071.028 ±    1412.343  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5        32.382 ±      42.895    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.816 ±       6.808  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0.025 ±       0.207    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                   N/A  thrpt    5         8.000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                    N/A  thrpt    5        31.000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                     N/A  thrpt    5  64929084.854 ±  561000.479   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                                N/A  thrpt    5  26572637.861 ± 1416746.541   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                 N/A  thrpt    5      2098.835 ±      59.318  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       124.296 ±       5.317    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      2015.114 ±       9.209  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5       119.345 ±       6.749    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.635 ±       5.337  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0.038 ±       0.316    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                      N/A  thrpt    5        15.000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                       N/A  thrpt    5        24.000                    ms
[info] IntBenchmark.writePlayJson                                                                  N/A  thrpt    5   3699654.251 ±  181401.469   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      1524.237 ±      60.351  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5       648.413 ±      12.693    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1462.770 ±    1150.130  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       623.333 ±     519.832    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.919 ±       7.333  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.397 ±       3.176    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                        N/A  thrpt    5        11.000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                         N/A  thrpt    5        33.000                    ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                 128  thrpt    5    181837.773 ±    8080.165   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      3448.854 ±     137.515  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5     29844.218 ±     424.722    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      3223.133 ±    1114.980  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     27903.302 ±   10178.295    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.017 ±       0.036  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.143 ±       0.309    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5        24.000                counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        31.000                    ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                      128  thrpt    5     44647.658 ±    1263.788   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      2877.416 ±      60.381  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5    101425.545 ±    2681.096    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      2817.684 ±    1150.508  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     99331.348 ±   41149.085    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.146 ±       0.905  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         5.170 ±      32.227    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        21.000                counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        31.000                    ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                 128  thrpt    5    230221.349 ±   10214.328   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       844.107 ±      50.558  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5      5769.954 ±     219.186    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       929.816 ±    1399.684  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      6347.476 ±    9443.630    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.012 ±       0.044  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.085 ±       0.300    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         7.000                counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5        12.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                128  thrpt    5    534385.902 ±   35232.904   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       986.347 ±      62.528  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      2905.168 ±     196.022    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       936.891 ±    1411.459  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      2763.933 ±    4218.861    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.590 ±       5.033  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         1.720 ±      14.677    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         7.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        32.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    569709.921 ±   21995.958   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5       406.265 ±      27.663  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5      1122.321 ±      78.925    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                128  thrpt    5       400.529 ±    1407.917  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm           128  thrpt    5      1106.447 ±    3889.633    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space            128  thrpt    5         0.003 ±       0.017  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm       128  thrpt    5         0.007 ±       0.049    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5         3.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                               128  thrpt    5        11.000                    ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                     128  thrpt    5     88961.264 ±    2287.763   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1463.160 ±      21.176  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     25885.717 ±     995.943    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1469.520 ±    1149.159  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     26023.829 ±   21116.158    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.512 ±       2.295  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         9.102 ±      41.055    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        11.000                counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        25.000                    ms
[info] ListOfBooleansBenchmark.readCirce                                                           128  thrpt    5    373237.912 ±    4794.982   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      2709.715 ±      83.487  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5     11425.558 ±     380.950    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2660.379 ±      33.694  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     11217.574 ±     238.309    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.408 ±       2.684  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1.720 ±      11.335    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                 128  thrpt    5        20.000                counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                  128  thrpt    5        32.000                    ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                    128  thrpt    5    831514.180 ±   39834.519   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1820.910 ±      73.212  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5      3446.440 ±      84.863    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1737.279 ±    1416.869  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      3289.101 ±    2699.051    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.119 ±       0.771  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.226 ±       1.470    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5        13.000                counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        20.000                    ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                   128  thrpt    5   1672807.073 ±   21296.005   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      3391.255 ±      82.507  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      3190.362 ±      67.829    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      3363.878 ±      66.983  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      3164.658 ±      92.817    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.016 ±       0.063    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5        25.000                counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        37.000                    ms
[info] ListOfBooleansBenchmark.readPlayJson                                                        128  thrpt    5    189059.361 ±   12976.819   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      4920.937 ±     324.752  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     40962.689 ±     636.384    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space                       128  thrpt    5         0.004 ±       0.030  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space.norm                  128  thrpt    5         0.030 ±       0.259    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.Metaspace                                    128  thrpt    5         0.010 ±       0.087  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.Metaspace.norm                               128  thrpt    5         0.086 ±       0.737    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      4711.216 ±     123.920  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     39225.609 ±    2705.704    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Old_Gen                                   128  thrpt    5         1.104 ±       9.507  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Old_Gen.norm                              128  thrpt    5         9.387 ±      80.827    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.097 ±       0.374  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.819 ±       3.203    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        37.000                counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        91.000                    ms
[info] ListOfBooleansBenchmark.writeCirce                                                          128  thrpt    5    473326.843 ±   21319.732   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5      1551.888 ±      68.641  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5      5160.023 ±     155.972    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1466.634 ±    1155.419  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      4883.883 ±    4051.697    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.898 ±       5.977  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         3.028 ±      20.189    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                128  thrpt    5        11.000                counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        30.000                    ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                   128  thrpt    5   1011667.004 ±   71682.902   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5       478.681 ±      39.309  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5       744.633 ±      59.333    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       396.315 ±    1393.105  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       619.914 ±    2180.122    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.006 ±       0.055    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5         3.000                counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5         4.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                  128  thrpt    5   2721274.953 ±  161369.244   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5      1290.896 ±      75.368  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5       746.597 ±      15.286    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1205.414 ±    1151.555  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       696.501 ±     657.489    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.822 ±       5.390  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.484 ±       3.184    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         9.000                counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        29.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5   2951097.737 ±   18733.881   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5           ≈ 0                counts
[info] ListOfBooleansBenchmark.writePlayJson                                                       128  thrpt    5    677075.682 ±   17469.778   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                        128  thrpt    5       943.926 ±      36.809  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                   128  thrpt    5      2193.936 ±      79.392    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5       926.883 ±    1398.027  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      2155.250 ±    3262.485    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.935 ±       7.918  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         2.159 ±      18.275    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                             128  thrpt    5         7.000                counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                              128  thrpt    5        42.000                    ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                      128  thrpt    5     79982.741 ±    1260.641   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                       128  thrpt    5      2327.036 ±      95.381  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                  128  thrpt    5     45787.781 ±    1550.576    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      2267.685 ±    1411.504  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     44625.876 ±   27940.859    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.919 ±       7.377  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        18.154 ±     145.861    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                            128  thrpt    5        17.000                counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                             128  thrpt    5        29.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                               128  thrpt    5    106866.897 ±    5514.656   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                128  thrpt    5      1938.944 ±      95.162  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5     28551.063 ±     318.149    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1864.346 ±    1142.485  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     27470.143 ±   17214.893    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.650 ±       5.009  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         9.579 ±      73.805    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                     128  thrpt    5        14.000                counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                      128  thrpt    5        26.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                              128  thrpt    5    161361.971 ±    7079.311   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                               128  thrpt    5      2544.098 ±     175.704  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5     24812.029 ±     827.768    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      2533.164 ±    1155.122  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5     24711.714 ±   11405.081    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.067 ±       0.318  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0.650 ±       3.113    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                    128  thrpt    5        19.000                counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                     128  thrpt    5        28.000                    ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                   128  thrpt    5     45192.740 ±    1439.501   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                    128  thrpt    5      2544.273 ±      92.187  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                               128  thrpt    5     88590.164 ±    2715.770    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      2543.010 ±    1163.236  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     88522.416 ±   39687.943    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.604 ±       4.709  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        20.949 ±     163.318    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                         128  thrpt    5        19.000                counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                          128  thrpt    5        31.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                              128  thrpt    5    235192.690 ±    1778.162   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                               128  thrpt    5      1064.533 ±      31.592  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          128  thrpt    5      7123.411 ±     236.639    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      128  thrpt    5       931.635 ±    1403.741  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      6235.008 ±    9406.315    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.008 ±       0.072  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0.056 ±       0.480    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                    128  thrpt    5         7.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                     128  thrpt    5        12.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                             128  thrpt    5    577497.515 ±   16701.898   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                              128  thrpt    5       659.592 ±      19.456  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         128  thrpt    5      1797.540 ±      74.866    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     128  thrpt    5       667.723 ±       1.563  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5      1819.697 ±      51.755    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.013 ±       0.073  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0.035 ±       0.199    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                   128  thrpt    5         5.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                    128  thrpt    5        20.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                     128  thrpt    5    610485.323 ±   11664.462   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      128  thrpt    5         6.428 ±       1.369  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 128  thrpt    5        16.573 ±       3.658    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                           128  thrpt    5           ≈ 0                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                  128  thrpt    5     93455.808 ±    3473.001   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                   128  thrpt    5      1478.509 ±      37.071  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                              128  thrpt    5     24897.804 ±     374.843    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          128  thrpt    5      1463.190 ±    1151.286  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     24650.153 ±   19677.844    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.150 ±       0.521  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         2.538 ±       8.827    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                        128  thrpt    5        11.000                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                         128  thrpt    5        33.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                          N/A  thrpt    5   8408162.536 ±  151381.937   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                           N/A  thrpt    5      7426.818 ±     115.611  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                      N/A  thrpt    5      1390.157 ±      11.992    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5      7200.484 ±    1419.106  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5      1347.862 ±     271.418    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.067 ±       0.222  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.012 ±       0.041    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                N/A  thrpt    5        53.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                 N/A  thrpt    5        72.000                    ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                    N/A  thrpt    5    972412.472 ±   72962.193   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                     N/A  thrpt    5       617.182 ±      49.690  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                N/A  thrpt    5       998.939 ±      48.554    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       662.621 ±       2.131  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5      1072.766 ±      80.379    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0.008 ±       0.040  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0.012 ±       0.065    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                          N/A  thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                           N/A  thrpt    5        18.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                   N/A  thrpt    5    452867.428 ±   19542.946   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                    N/A  thrpt    5      1012.290 ±      99.450  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                               N/A  thrpt    5      3517.402 ±     220.558    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           N/A  thrpt    5       931.828 ±    1403.642  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      N/A  thrpt    5      3236.989 ±    4861.019    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       N/A  thrpt    5         0.012 ±       0.044  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  N/A  thrpt    5         0.043 ±       0.153    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                         N/A  thrpt    5         7.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                          N/A  thrpt    5        15.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                  N/A  thrpt    5    778574.834 ±  207487.453   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                   N/A  thrpt    5       713.917 ±     167.529  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              N/A  thrpt    5      1444.066 ±     149.935    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          N/A  thrpt    5       669.869 ±       1.735  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     N/A  thrpt    5      1359.135 ±     357.820    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 N/A  thrpt    5         0.017 ±       0.088    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                        N/A  thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                         N/A  thrpt    5        18.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                              N/A  thrpt    5   6016750.518 ± 8520399.764   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                               N/A  thrpt    5      3550.383 ±    4754.355  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                          N/A  thrpt    5       933.928 ±      71.668    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                      N/A  thrpt    5      3496.767 ±    5653.991  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm                 N/A  thrpt    5       904.041 ±     426.491    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space                  N/A  thrpt    5         0.046 ±       0.143  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm             N/A  thrpt    5         0.011 ±       0.020    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                    N/A  thrpt    5        26.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                     N/A  thrpt    5        35.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                        N/A  thrpt    5  30370592.602 ±  956957.530   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                         N/A  thrpt    5      2717.292 ±     145.938  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                    N/A  thrpt    5       140.805 ±       4.694    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space                N/A  thrpt    5      2548.330 ±    1152.359  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm           N/A  thrpt    5       132.005 ±      57.940    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space            N/A  thrpt    5         0.745 ±       6.282  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm       N/A  thrpt    5         0.039 ±       0.328    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                              N/A  thrpt    5        19.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                               N/A  thrpt    5        27.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                       N/A  thrpt    5    395639.051 ±    8994.115   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                        N/A  thrpt    5      2728.607 ±     143.780  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                   N/A  thrpt    5     10852.755 ±     339.235    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               N/A  thrpt    5      2674.887 ±      25.747  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5     10639.666 ±     180.690    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.687 ±       5.131  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5         2.740 ±      20.454    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                             N/A  thrpt    5        20.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                              N/A  thrpt    5        34.000                    ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                    128  thrpt    5   1468792.627 ±   19831.073   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5        44.983 ±       1.070  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5        48.196 ±       1.528    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.readPlayJson                                                         128  thrpt    5    119909.643 ±    3338.399   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      4450.722 ±     196.620  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     58415.416 ±    1726.939    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      4323.978 ±    1449.343  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     56760.297 ±   19406.197    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.029 ±       0.072  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.383 ±       0.945    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        32.000                counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        49.000                    ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                    128  thrpt    5   2137958.173 ±   60874.127   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       597.089 ±      23.281  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5       439.546 ±       7.906    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       663.475 ±       3.868  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       488.444 ±      14.936    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.003 ±       0.026    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         5.000                counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        20.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                   128  thrpt    5   1989107.844 ±   15201.687   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       552.122 ±      35.522  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       436.778 ±      28.853    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       533.552 ±    1148.514  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       422.260 ±     908.948    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.079 ±       0.593  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.063 ±       0.468    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         4.000                counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5         6.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   2005193.767 ±   27228.484   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         0.170 ±       1.461  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         0.133 ±       1.141    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.writePlayJson                                                        128  thrpt    5     56841.735 ±    2612.058   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1977.481 ±      79.768  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     54740.668 ±    1389.243    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1874.260 ±    1150.321  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     51934.044 ±   33015.134    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.366 ±       1.983  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        10.119 ±      54.612    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        14.000                counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        24.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                         128  thrpt    5    272468.482 ±    9004.966   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                          128  thrpt    5      1101.066 ±      49.775  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     128  thrpt    5      6359.905 ±     318.419    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 128  thrpt    5      1072.815 ±    1415.228  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            128  thrpt    5      6201.691 ±    8236.973    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             128  thrpt    5         0.783 ±       6.634  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        128  thrpt    5         4.539 ±      38.465    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                               128  thrpt    5         8.000                counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                128  thrpt    5        29.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                              128  thrpt    5     53836.691 ±    1790.983   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                               128  thrpt    5      2157.584 ±     100.742  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                          128  thrpt    5     63067.483 ±    1610.218    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      128  thrpt    5      2004.051 ±      16.885  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5     58583.487 ±    1836.630    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.437 ±       2.848  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5        12.771 ±      83.282    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                    128  thrpt    5        15.000                counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                     128  thrpt    5        26.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                         128  thrpt    5    162603.727 ±    3849.291   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                          128  thrpt    5      1630.770 ±      54.200  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                     128  thrpt    5     15782.888 ±     161.862    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                 128  thrpt    5      1602.012 ±    1419.328  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm            128  thrpt    5     15500.245 ±   13626.874    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space             128  thrpt    5         0.154 ±       1.106  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm        128  thrpt    5         1.490 ±      10.690    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                               128  thrpt    5        12.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                128  thrpt    5        21.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                        128  thrpt    5    520066.147 ±   67276.608   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                         128  thrpt    5       716.821 ±      89.957  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    128  thrpt    5      2169.346 ±      77.186    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                128  thrpt    5       668.833 ±       1.545  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           128  thrpt    5      2025.839 ±     263.277    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            128  thrpt    5         0.003 ±       0.017  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       128  thrpt    5         0.008 ±       0.055    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                              128  thrpt    5         5.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                               128  thrpt    5        20.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                128  thrpt    5    589153.194 ±     870.976   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            128  thrpt    5         0.001 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                      128  thrpt    5           ≈ 0                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                             128  thrpt    5     87584.306 ±    2654.609   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                              128  thrpt    5      1619.802 ±      75.558  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                         128  thrpt    5     29105.297 ±     697.575    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     128  thrpt    5      1596.621 ±    1400.645  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                128  thrpt    5     28678.324 ±   24894.453    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.541 ±       2.903  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         9.661 ±      51.638    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                   128  thrpt    5        12.000                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                    128  thrpt    5        27.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                               128  thrpt    5    100015.219 ±    8380.592   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                128  thrpt    5      1569.941 ±     189.977  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                           128  thrpt    5     24701.493 ±    1042.788    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                       128  thrpt    5      1602.605 ±    1405.442  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     25152.102 ±   20412.247    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.914 ±       5.749  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5        14.724 ±      93.197    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                     128  thrpt    5        12.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                      128  thrpt    5        34.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                        128  thrpt    5    152980.589 ±    6407.842   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                         128  thrpt    5       724.727 ±      29.953  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                    128  thrpt    5      7455.441 ±     124.367    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                128  thrpt    5       662.611 ±       2.691  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm           128  thrpt    5      6817.024 ±     287.404    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space            128  thrpt    5         0.008 ±       0.052  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm       128  thrpt    5         0.087 ±       0.541    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                              128  thrpt    5         5.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                               128  thrpt    5        10.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                       128  thrpt    5    347090.669 ±    6930.065   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                        128  thrpt    5      1473.662 ±      90.459  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                   128  thrpt    5      6681.630 ±     347.696    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space               128  thrpt    5      1471.584 ±    1141.231  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm          128  thrpt    5      6669.868 ±    5096.751    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space           128  thrpt    5         0.881 ±       6.554  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm      128  thrpt    5         4.001 ±      29.794    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                             128  thrpt    5        11.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                              128  thrpt    5        34.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                            128  thrpt    5     52737.001 ±    2225.872   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                             128  thrpt    5      2254.263 ±     117.325  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                        128  thrpt    5     67267.862 ±    1002.867    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                    128  thrpt    5      2140.910 ±    1146.265  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     63937.818 ±   36125.339    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.629 ±       3.984  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5        18.784 ±     118.858    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                  128  thrpt    5        16.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                   128  thrpt    5        28.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                       128  thrpt    5    256832.607 ±    3649.200   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                        128  thrpt    5       910.339 ±      31.529  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                   128  thrpt    5      5578.616 ±     175.837    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space               128  thrpt    5       796.296 ±    1143.805  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm          128  thrpt    5      4881.144 ±    7035.275    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space           128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm      128  thrpt    5         0.051 ±       0.270    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                             128  thrpt    5         6.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                              128  thrpt    5        12.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                      128  thrpt    5    666733.487 ±   31842.202   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                       128  thrpt    5       750.529 ±      48.329  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                  128  thrpt    5      1771.526 ±      65.464    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space              128  thrpt    5       668.375 ±       1.551  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm         128  thrpt    5      1577.831 ±      76.514    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space          128  thrpt    5         0.025 ±       0.132  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5         0.060 ±       0.314    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                            128  thrpt    5         5.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                             128  thrpt    5        17.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                              128  thrpt    5    746025.820 ±   54891.222   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate               128  thrpt    5         0.188 ±       1.616  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm          128  thrpt    5         0.393 ±       3.378    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                    128  thrpt    5           ≈ 0                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                           128  thrpt    5     94125.756 ±   15990.083   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                            128  thrpt    5      1569.293 ±     459.015  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                       128  thrpt    5     26356.029 ±   12853.032    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                   128  thrpt    5      1582.300 ±    1393.627  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm              128  thrpt    5     26636.732 ±   26879.363    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space               128  thrpt    5         1.370 ±       7.625  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5        22.712 ±     125.238    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                 128  thrpt    5        12.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                  128  thrpt    5        55.000                    ms
[info] MutableSetOfIntsBenchmark.readCirce                                                         128  thrpt    5    122471.707 ±   13769.638   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      2060.551 ±     437.787  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5     26527.764 ±    8632.033    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2129.512 ±    1150.575  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     27471.063 ±   18361.872    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.941 ±       6.686  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        11.957 ±      84.888    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                               128  thrpt    5        16.000                counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                128  thrpt    5        34.000                    ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                  128  thrpt    5    207106.626 ±    2319.508   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5       880.384 ±      30.345  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5      6689.541 ±     212.313    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       795.840 ±    1138.956  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      6047.275 ±    8655.926    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.021 ±       0.098  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.158 ±       0.745    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5         6.000                counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5        11.000                    ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                 128  thrpt    5    292382.855 ±    2455.177   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1075.409 ±      46.977  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      5788.383 ±     213.828    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1064.518 ±    1402.104  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      5727.749 ±    7520.995    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.045 ±       0.236    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5         8.000                counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        11.000                    ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                      128  thrpt    5    102842.002 ±    2700.821   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      3348.029 ±      95.037  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     51231.285 ±    1699.438    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      3354.324 ±      76.077  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     51328.754 ±    2087.236    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.129 ±       0.890  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1.968 ±      13.546    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        25.000                counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        36.000                    ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                        128  thrpt    5    258797.184 ±   16586.852   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5      1762.871 ±      55.339  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5     10721.382 ±     432.474    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1734.636 ±    1404.648  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     10563.787 ±    8851.716    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.898 ±       7.284  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         5.414 ±      43.883    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                              128  thrpt    5        13.000                counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                               128  thrpt    5        32.000                    ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                 128  thrpt    5    854675.631 ±   35819.613   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       464.927 ±      49.030  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5       856.037 ±      55.819    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       525.581 ±    1131.354  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       963.231 ±    2073.443    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.129 ±       1.067  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.237 ±       1.961    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         4.000                counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5         7.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                128  thrpt    5    863887.336 ±   51591.372   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       482.804 ±     106.932  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5       879.911 ±     223.458    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       503.392 ±    1114.590  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       917.136 ±    2042.528    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.006 ±       0.035  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.010 ±       0.062    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         4.000                counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        17.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    907426.405 ±   11325.663   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5         0.700 ±       6.021  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5         1.207 ±      10.389    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                     128  thrpt    5     39365.791 ±    3897.886   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1876.308 ±      64.443  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     75043.778 ±    9924.331    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1851.705 ±    1141.011  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     74117.531 ±   47907.860    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         1.265 ±       7.943  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        52.293 ±     333.407    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        14.000                counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        48.000                    ms
[info] PrimitivesBenchmark.readCirce                                                               N/A  thrpt    5   1097237.579 ±   55506.785   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                N/A  thrpt    5      2524.245 ±     189.944  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                           N/A  thrpt    5      3620.194 ±      99.145    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      2530.456 ±    1158.303  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5      3628.817 ±    1637.655    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.979 ±       7.942  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         1.430 ±      11.613    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                     N/A  thrpt    5        19.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                      N/A  thrpt    5        34.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                        N/A  thrpt    5   2042313.060 ±   76529.879   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                         N/A  thrpt    5      1269.205 ±      26.804  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    N/A  thrpt    5       978.055 ±      36.950    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                N/A  thrpt    5      1201.082 ±    1146.622  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           N/A  thrpt    5       926.284 ±     893.441    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            N/A  thrpt    5         0.279 ±       2.314  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       N/A  thrpt    5         0.214 ±       1.771    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                              N/A  thrpt    5         9.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                               N/A  thrpt    5        17.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                       N/A  thrpt    5   9411073.075 ±  107314.965   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                        N/A  thrpt    5       292.571 ±      25.155  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   N/A  thrpt    5        48.927 ±       4.691    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               N/A  thrpt    5       204.656 ±    1079.091  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5        34.321 ±     180.965    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                             N/A  thrpt    5         2.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                              N/A  thrpt    5         8.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                            N/A  thrpt    5    500724.579 ±   18685.148   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                             N/A  thrpt    5      2258.191 ±      87.632  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                        N/A  thrpt    5      7097.331 ±     117.985    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      2274.331 ±    1405.829  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5      7140.711 ±    4171.586    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.562 ±       3.588  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         1.765 ±      11.232    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                  N/A  thrpt    5        17.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                   N/A  thrpt    5        32.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                              N/A  thrpt    5   1957337.160 ±  116468.280   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                               N/A  thrpt    5      2002.968 ±     117.357  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                          N/A  thrpt    5      1610.401 ±      23.555    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5      1954.487 ±      31.816  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5      1571.716 ±      99.203    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         2.055 ±      11.500  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         1.649 ±       9.169    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                    N/A  thrpt    5        15.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                     N/A  thrpt    5        53.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                       N/A  thrpt    5   3299677.808 ±  167766.075   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                        N/A  thrpt    5      1289.638 ±      74.620  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   N/A  thrpt    5       615.018 ±      25.975    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               N/A  thrpt    5      1198.015 ±    1152.387  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5       572.050 ±     558.824    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.302 ±       2.467  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5         0.143 ±       1.169    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                             N/A  thrpt    5         9.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                              N/A  thrpt    5        18.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                      N/A  thrpt    5   9167935.988 ±   76613.751   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                       N/A  thrpt    5       767.705 ±      18.632  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  N/A  thrpt    5       131.773 ±       2.701    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       668.934 ±       1.821  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       114.820 ±       0.926    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.014 ±       0.066  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.002 ±       0.011    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                            N/A  thrpt    5         5.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                             N/A  thrpt    5        19.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                              N/A  thrpt    5   9024232.472 ±  126780.810   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               N/A  thrpt    5       281.802 ±      30.678  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          N/A  thrpt    5        49.146 ±       6.032    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                      N/A  thrpt    5       204.645 ±    1079.032  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                 N/A  thrpt    5        35.828 ±     188.912    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    N/A  thrpt    5         2.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                     N/A  thrpt    5         8.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                           N/A  thrpt    5    501559.890 ±   22887.204   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                            N/A  thrpt    5      2564.573 ±     124.660  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                       N/A  thrpt    5      8047.226 ±     206.468    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      2550.081 ±    1149.230  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5      8008.129 ±    3810.555    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.491 ±       3.574  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         1.533 ±      11.120    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                 N/A  thrpt    5        19.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                  N/A  thrpt    5        31.000                    ms
[info] SetOfIntsBenchmark.readCirce                                                                128  thrpt    5     94403.048 ±    5211.610   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      2609.875 ±     144.010  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5     43509.742 ±     267.623    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2558.178 ±      62.132  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     42652.652 ±    1774.999    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         2.589 ±       8.834  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        42.987 ±     146.668    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                      128  thrpt    5        20.000                counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                       128  thrpt    5        96.000                    ms
[info] SetOfIntsBenchmark.readJacksonScala                                                         128  thrpt    5    142007.747 ±    6324.773   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      2231.871 ±     114.040  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     24733.588 ±     957.276    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2145.070 ±    1154.968  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     23776.422 ±   12943.168    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.296 ±       1.144  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         3.253 ±      12.559    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        16.000                counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        25.000                    ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                        128  thrpt    5    178546.223 ±   14057.622   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      2722.980 ±      83.042  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5     24009.543 ±    2149.112    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      2661.679 ±      35.041  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     23469.849 ±    2175.211    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.832 ±       4.443  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         7.504 ±      40.665    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        20.000                counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        30.000                    ms
[info] SetOfIntsBenchmark.readPlayJson                                                             128  thrpt    5     85472.840 ±    1007.482   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      3651.824 ±     144.214  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     67238.841 ±    2023.482    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      3636.489 ±    1398.696  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     66949.223 ±   25325.969    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.050 ±       0.176  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.920 ±       3.235    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        27.000                counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        39.000                    ms
[info] SetOfIntsBenchmark.writeCirce                                                               128  thrpt    5    252448.440 ±    6313.130   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1738.588 ±      56.309  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     10838.753 ±     273.840    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1734.556 ±    1404.735  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     10812.854 ±    8738.177    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.883 ±       7.048  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         5.547 ±      44.322    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        13.000                counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        30.000                    ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                        128  thrpt    5    816686.431 ±    7539.867   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5       487.789 ±      50.977  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5       939.992 ±     105.276    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       396.346 ±    1393.214  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       764.858 ±    2688.600    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.008 ±       0.072  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.016 ±       0.138    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5         3.000                counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5         7.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                       128  thrpt    5    815870.973 ±   64006.531   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       454.794 ±      65.821  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       877.413 ±     126.975    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       399.047 ±    1402.707  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       768.273 ±    2701.399    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.002 ±       0.018  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.004 ±       0.034    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         3.000                counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        14.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5    836995.845 ±    3999.408   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5         8.587 ±       0.665  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        16.144 ±       1.238    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] SetOfIntsBenchmark.writePlayJson                                                            128  thrpt    5     39120.199 ±    1742.968   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1830.301 ±     378.238  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     73663.348 ±   18326.150    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1715.658 ±    1388.447  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     69103.834 ±   57704.292    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         1.002 ±       5.333  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        40.652 ±     218.157    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        13.000                counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        29.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                       128  thrpt    5   4276389.096 ±  100348.511   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      3333.505 ±     176.768  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5      1226.761 ±      36.921    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      3220.411 ±    1158.338  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1185.193 ±     425.790    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.021 ±       0.057  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.008 ±       0.021    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                             128  thrpt    5        24.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                              128  thrpt    5        31.000                    ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                 128  thrpt    5   6538987.298 ±  361252.259   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                  128  thrpt    5      1263.027 ±      59.826  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                             128  thrpt    5       303.968 ±      10.575    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                         128  thrpt    5      1199.797 ±    1145.118  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       289.344 ±     283.186    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.871 ±       7.291  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.210 ±       1.763    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                       128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                        128  thrpt    5        29.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                128  thrpt    5   5199413.242 ±  170294.641   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1070.685 ±      80.681  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5       324.090 ±      27.861    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1065.401 ±    1401.835  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       322.861 ±     429.130    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.814 ±       6.879  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.245 ±       2.069    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5         8.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        33.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                               128  thrpt    5   6624853.892 ±  304022.147   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1286.471 ±      50.274  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5       305.579 ±       6.939    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1332.059 ±       8.657  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5       316.438 ±      15.811    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.012 ±       0.044  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.003 ±       0.010    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5        10.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        14.000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                    128  thrpt    5   5433096.213 ±  313025.113   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1050.270 ±      46.816  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5       304.217 ±      10.559    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1069.032 ±    1409.255  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       309.918 ±     411.465    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.746 ±       6.282  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.215 ±       1.810    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                          128  thrpt    5         8.000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        30.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                      128  thrpt    5   3675056.341 ±   36355.117   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                       128  thrpt    5      2018.093 ±      79.457  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                  128  thrpt    5       864.172 ±      27.610    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      1870.220 ±    1149.395  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       800.795 ±     490.625    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.852 ±       6.178  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.365 ±       2.650    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                            128  thrpt    5        14.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                             128  thrpt    5        25.000                    ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                128  thrpt    5   6903206.975 ±  182187.553   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                 128  thrpt    5       689.174 ±      12.894  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                            128  thrpt    5       157.109 ±       2.828    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                        128  thrpt    5       663.695 ±       2.338  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       151.303 ±       3.805    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.014 ±       0.095  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.003 ±       0.021    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                      128  thrpt    5         5.000                counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                       128  thrpt    5        18.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                               128  thrpt    5   6426395.551 ±  126047.448   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5       647.116 ±      73.991  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5       158.487 ±      20.180    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       532.032 ±    1145.243  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5       130.472 ±     280.867    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.003 ±       0.022  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.001 ±       0.005    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5         4.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        17.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                              128  thrpt    5   7120714.223 ±  125922.134   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5       715.105 ±      27.496  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5       158.061 ±       8.582    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5       669.216 ±       0.912  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5       147.914 ±       2.423    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.010 ±       0.069  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0.002 ±       0.015    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5         5.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        18.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5   7378468.615 ±   84465.114   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5         4.424 ±      37.887  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5         0.948 ±       8.123    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                   128  thrpt    5   6293831.999 ±  148276.974   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5       623.856 ±      42.279  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5       155.966 ±       9.087    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5       533.472 ±    1148.339  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       133.222 ±     286.794    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.012 ±       0.072  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.003 ±       0.018    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                         128  thrpt    5         4.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        17.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                    128  thrpt    5   1765359.655 ±   69493.717   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                     128  thrpt    5      2291.040 ±      76.063  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                128  thrpt    5      2042.528 ±     111.616    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            128  thrpt    5      2271.972 ±    1410.250  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      2024.367 ±    1222.986    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        128  thrpt    5         1.272 ±       7.324  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         1.133 ±       6.485    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                          128  thrpt    5        17.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                           128  thrpt    5        27.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                              128  thrpt    5   2941432.628 ±   66043.907   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                               128  thrpt    5       568.077 ±      24.440  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                          128  thrpt    5       303.971 ±      17.863    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                      128  thrpt    5       532.010 ±    1145.193  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5       285.216 ±     613.970    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.009 ±       0.067  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0.005 ±       0.036    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                    128  thrpt    5         4.000                counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                     128  thrpt    5        14.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                             128  thrpt    5   1947906.989 ±  124025.389   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                              128  thrpt    5       414.107 ±      47.377  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5       334.529 ±      24.179    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space            128  thrpt    5         0.005 ±       0.043  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm       128  thrpt    5         0.004 ±       0.036    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.Metaspace                         128  thrpt    5         0.014 ±       0.119  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.Metaspace.norm                    128  thrpt    5         0.012 ±       0.099    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5       440.491 ±    1064.340  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5       356.057 ±     853.348    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.991 ±       8.509  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0.824 ±       7.080    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                   128  thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                    128  thrpt    5        52.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                            128  thrpt    5   2301139.254 ±  125139.674   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                             128  thrpt    5       441.905 ±      31.838  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5       302.244 ±      22.221    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       369.974 ±    1323.887  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5       254.081 ±     906.029    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.003 ±       0.025    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                  128  thrpt    5         3.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                   128  thrpt    5        10.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                 128  thrpt    5   1886248.049 ±   38458.387   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                  128  thrpt    5       365.479 ±      37.222  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                             128  thrpt    5       304.965 ±      34.321    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5       368.645 ±    1318.311  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       308.571 ±    1103.121    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                       128  thrpt    5         3.000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                        128  thrpt    5        14.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                   128  thrpt    5   2513945.923 ±   34299.324   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                    128  thrpt    5      1807.996 ±      54.948  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                               128  thrpt    5      1131.883 ±      34.697    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1737.476 ±    1406.500  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      1087.805 ±     882.116    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.829 ±       7.049  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.519 ±       4.412    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                         128  thrpt    5        13.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                          128  thrpt    5        28.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                             128  thrpt    5   3633708.725 ±  161672.996   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                              128  thrpt    5       973.149 ±      50.165  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                         128  thrpt    5       421.509 ±      27.551    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                     128  thrpt    5       932.320 ±    1405.634  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                128  thrpt    5       404.702 ±     621.423    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.007 ±       0.064  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0.003 ±       0.028    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                   128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                    128  thrpt    5        24.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                            128  thrpt    5   3347255.234 ±  241642.965   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                             128  thrpt    5       896.127 ±      58.697  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5       421.351 ±      24.528    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       933.714 ±    1407.352  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5       440.504 ±     682.746    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.022 ±       0.090  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.011 ±       0.042    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                  128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                   128  thrpt    5        27.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                           128  thrpt    5   3626844.616 ±   79160.469   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                            128  thrpt    5       969.419 ±      47.884  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5       420.666 ±      29.634    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5       937.432 ±    1410.777  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5       407.447 ±     621.778    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.006 ±       0.036  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         0.003 ±       0.016    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                 128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                  128  thrpt    5        24.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                   128  thrpt    5   3872136.909 ±  188582.141   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         128  thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                128  thrpt    5   3394222.279 ±  108968.215   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                 128  thrpt    5       925.301 ±     157.599  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                            128  thrpt    5       429.143 ±      87.061    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5       936.089 ±    1409.963  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       435.054 ±     668.267    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.056 ±       0.440  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.026 ±       0.203    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                      128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                       128  thrpt    5        28.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                               N/A  thrpt    5     12232.882 ±    1100.207   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                N/A  thrpt    5      1612.011 ±     267.625  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                           N/A  thrpt    5    207575.522 ±   50851.999    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1461.572 ±    1148.696  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5    187795.209 ±  139733.820    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         1.485 ±      12.223  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5       187.783 ±    1545.891    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                     N/A  thrpt    5        11.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                      N/A  thrpt    5        37.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                        N/A  thrpt    5     22344.595 ±    2389.719   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                         N/A  thrpt    5       384.582 ±     202.891  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    N/A  thrpt    5     27160.285 ±   16796.887    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                N/A  thrpt    5       264.255 ±    1393.341  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           N/A  thrpt    5     18980.280 ±  100157.797    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            N/A  thrpt    5         0.209 ±       1.801  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       N/A  thrpt    5        14.557 ±     125.336    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                              N/A  thrpt    5         2.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                               N/A  thrpt    5         7.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                       N/A  thrpt    5     20994.594 ±    1261.981   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                        N/A  thrpt    5       262.322 ±     277.964  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   N/A  thrpt    5     19734.290 ±   22442.984    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               N/A  thrpt    5       204.668 ±    1079.154  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5     15553.172 ±   82020.413    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.189 ±       1.626  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5        14.150 ±     121.839    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                             N/A  thrpt    5         2.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                              N/A  thrpt    5        10.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                            N/A  thrpt    5      8275.952 ±     122.061   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                             N/A  thrpt    5      1856.597 ±      40.152  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                        N/A  thrpt    5    353036.120 ±    7758.193    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      1862.413 ±    1145.292  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5    354181.128 ±  218720.291    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.702 ±       3.773  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5       133.185 ±     716.480    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                  N/A  thrpt    5        14.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                   N/A  thrpt    5        38.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                       N/A  thrpt    5     64669.542 ±    4619.045   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                        N/A  thrpt    5       887.987 ±     225.260  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   N/A  thrpt    5     21634.526 ±    7199.405    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               N/A  thrpt    5       929.077 ±    1397.165  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5     22700.434 ±   35287.256    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.201 ±       1.690  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5         5.063 ±      42.520    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                             N/A  thrpt    5         7.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                              N/A  thrpt    5        20.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                      N/A  thrpt    5    107085.574 ±     510.796   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                       N/A  thrpt    5       707.727 ±      17.408  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  N/A  thrpt    5     10401.352 ±     252.037    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       665.551 ±       2.577  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5      9781.517 ±      65.959    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.019 ±       0.054  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.282 ±       0.798    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                            N/A  thrpt    5         5.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                             N/A  thrpt    5        20.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                              N/A  thrpt    5    118634.262 ±    2046.457   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          N/A  thrpt    5         0.004 ±       0.002    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    N/A  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.readCirce                                                         128  thrpt    5    408159.171 ±    4179.817   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      2344.308 ±     103.271  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5      9039.229 ±     393.061    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2259.665 ±    1398.764  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      8713.218 ±    5404.128    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.054 ±       5.181  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         4.064 ±      19.985    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                               128  thrpt    5        17.000                counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                128  thrpt    5        36.000                    ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                  128  thrpt    5    969751.830 ±   31077.439   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5       686.892 ±      21.968  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5      1114.708 ±      10.849    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       662.550 ±       3.115  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      1075.263 ±      35.516    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.008 ±       0.044  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.013 ±       0.071    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5        11.000                    ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                 128  thrpt    5   1935282.252 ±  136458.833   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       980.233 ±      50.693  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       797.022 ±      36.623    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       937.495 ±    1413.700  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       764.657 ±    1182.753    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.021 ±       0.075  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.017 ±       0.062    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5         7.000                counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        24.000                    ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                      128  thrpt    5    189088.005 ±   12732.882   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      4663.265 ±     274.241  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     38817.966 ±    1643.956    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      4463.331 ±    1461.103  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     37131.315 ±   10735.586    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.052 ±       0.070  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.429 ±       0.573    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        33.000                counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        60.000                    ms
[info] VectorOfBooleansBenchmark.writeCirce                                                        128  thrpt    5    476719.354 ±   15649.442   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5      1569.657 ±      19.502  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5      5182.405 ±     188.222    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1469.006 ±    1156.173  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4851.330 ±    3857.000    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.870 ±       5.566  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         2.875 ±      18.427    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                              128  thrpt    5        11.000                counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                               128  thrpt    5        28.000                    ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                 128  thrpt    5    901209.504 ±   74263.692   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       431.821 ±      42.083  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5       754.118 ±      70.034    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       528.763 ±    1138.202  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       926.861 ±    1997.030    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5         8.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                128  thrpt    5   1564314.080 ±  255246.659   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       746.671 ±     119.106  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5       751.169 ±      29.534    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       802.474 ±    1151.342  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       808.280 ±    1162.181    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.014 ±       0.084  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.015 ±       0.090    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         6.000                counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        22.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5   1694270.567 ±    4195.956   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                     128  thrpt    5    643569.772 ±   52154.294   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5       893.535 ±      91.058  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5      2184.867 ±      72.331    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5       794.355 ±    1137.904  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1938.025 ±    2686.080    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.884 ±       7.537  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         2.101 ±      17.913    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                           128  thrpt    5         6.000                counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        42.000                    ms
[info] Benchmark result is saved to graalvmee1.json
[success] Total time: 7124 s, completed May 8, 2018 11:55:09 PM
